var $M.0: i8;

var $M.1: [ref]i8;

var $M.2: i32;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]i8;

var $M.6: [ref]ref;

var $M.7: ref;

var $M.8: ref;

var $M.9: i32;

var $M.10: i32;

var $M.11: i32;

var $M.12: i16;

var $M.13: i32;

var $M.14: ref;

var $M.15: i32;

var $M.16: i32;

var $M.17: [ref]i8;

var $M.18: [ref]i64;

var $M.19: [ref]i64;

var $M.20: [ref]i64;

var $M.21: [ref]i64;

var $M.22: [ref]i8;

var $M.23: i32;

var $M.24: [ref]ref;

var $M.25: [ref]ref;

var $M.26: [ref]ref;

var $M.27: [ref]ref;

var $M.28: [ref]i24;

var $M.29: [ref]i8;

var $M.30: [ref]i8;

var $M.31: [ref]i8;

var $M.32: [ref]i8;

var $M.33: [ref]i8;

var $M.34: [ref]i8;

var $M.35: [ref]i8;

var $M.36: [ref]i64;

var $M.37: [ref]i64;

var $M.38: [ref]i64;

var $M.39: i32;

var $M.40: i32;

var $M.41: i32;

var $M.42: [ref]i32;

var $M.43: i32;

var $M.44: ref;

var $M.45: i32;

var $M.46: ref;

var $M.47: [ref]i32;

var $M.48: [ref]i32;

var $M.49: [ref]ref;

var $M.50: [ref]ref;

var $M.51: [ref]ref;

var $M.52: [ref]ref;

var $M.53: [ref]ref;

var $M.54: [ref]ref;

var $M.55: [ref]ref;

var $M.56: [ref]ref;

var $M.57: [ref]ref;

var $M.58: [ref]ref;

var $M.59: [ref]ref;

var $M.60: [ref]ref;

var $M.61: [ref]ref;

var $M.62: [ref]ref;

var $M.63: [ref]ref;

var $M.64: [ref]ref;

var $M.65: [ref]ref;

var $M.66: [ref]ref;

var $M.67: [ref]ref;

var $M.68: [ref]ref;

var $M.69: [ref]ref;

var $M.70: [ref]ref;

var $M.71: [ref]ref;

var $M.72: [ref]ref;

var $M.73: [ref]ref;

var $M.74: [ref]ref;

var $M.75: [ref]ref;

var $M.76: [ref]ref;

var $M.77: [ref]ref;

var $M.78: [ref]ref;

var $M.79: [ref]ref;

var $M.80: [ref]ref;

var $M.81: [ref]ref;

var $M.82: [ref]ref;

var $M.83: [ref]ref;

var $M.84: [ref]ref;

var $M.85: [ref]ref;

var $M.86: [ref]ref;

var $M.87: [ref]ref;

var $M.88: [ref]ref;

var $M.89: [ref]ref;

var $M.90: [ref]ref;

var $M.91: [ref]ref;

var $M.92: [ref]ref;

var $M.93: [ref]ref;

var $M.94: [ref]ref;

var $M.95: [ref]i32;

var $M.96: i32;

var $M.97: i32;

var $M.98: [ref]ref;

var $M.99: i32;

var $M.101: [ref]ref;

var $M.103: [ref]i8;

var $M.104: [ref]i64;

var $M.105: [ref]i8;

var $M.106: [ref]i64;

var $M.107: [ref]i64;

var $M.109: i32;

var $M.110: i32;

var $M.111: ref;

var $M.112: i32;

var $M.113: ref;

var $M.114: [ref]i8;

var $M.115: [ref]ref;

var $M.116: [ref]ref;

var $M.117: [ref]ref;

var $M.118: [ref]ref;

var $M.119: i32;

var $M.120: i32;

var $M.121: i32;

var $M.122: i32;

var $M.123: i32;

var $M.124: i32;

var $M.125: i32;

var $M.126: i32;

var $M.127: i32;

var $M.128: i32;

var $M.129: i32;

var $M.130: i32;

var $M.131: i32;

var $M.132: i16;

var $M.133: i32;

var $M.134: i32;

var $M.135: i32;

var $M.136: i32;

var $M.164: [ref]i8;

var $M.209: [ref]ref;

var $M.210: [ref]ref;

var $M.211: [ref]ref;

var $M.212: [ref]ref;

var $M.213: [ref]ref;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 868735);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const oz_dbg_mask: ref;

axiom oz_dbg_mask == $sub.ref(0, 1028);

const g_polling_lock: ref;

axiom g_polling_lock == $sub.ref(0, 2124);

const {:count 15} .str.20: ref;

axiom .str.20 == $sub.ref(0, 3163);

const oz_elt_info_cache: ref;

axiom oz_elt_info_cache == $sub.ref(0, 4195);

const oz_tx_frame_cache: ref;

axiom oz_tx_frame_cache == $sub.ref(0, 5227);

const ldv_linux_alloc_usb_lock_lock: ref;

axiom ldv_linux_alloc_usb_lock_lock == $sub.ref(0, 6255);

const ldv_linux_arch_io_iomem: ref;

axiom ldv_linux_arch_io_iomem == $sub.ref(0, 7283);

const ldv_linux_block_request_blk_rq: ref;

axiom ldv_linux_block_request_blk_rq == $sub.ref(0, 8311);

const ldv_linux_drivers_base_class_usb_gadget_class: ref;

axiom ldv_linux_drivers_base_class_usb_gadget_class == $sub.ref(0, 9339);

const ldv_linux_fs_char_dev_usb_gadget_chrdev: ref;

axiom ldv_linux_fs_char_dev_usb_gadget_chrdev == $sub.ref(0, 10367);

const ldv_linux_fs_sysfs_sysfs: ref;

axiom ldv_linux_fs_sysfs_sysfs == $sub.ref(0, 11395);

const ldv_linux_kernel_locking_rwlock_rlock: ref;

axiom ldv_linux_kernel_locking_rwlock_rlock == $sub.ref(0, 12423);

const ldv_linux_kernel_locking_rwlock_wlock: ref;

axiom ldv_linux_kernel_locking_rwlock_wlock == $sub.ref(0, 13451);

const ldv_linux_kernel_module_module_refcounter: ref;

axiom ldv_linux_kernel_module_module_refcounter == $sub.ref(0, 14479);

const ldv_linux_kernel_rcu_srcu_srcu_nested: ref;

axiom ldv_linux_kernel_rcu_srcu_srcu_nested == $sub.ref(0, 15507);

const ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh == $sub.ref(0, 16535);

const ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched == $sub.ref(0, 17563);

const ldv_linux_kernel_rcu_update_lock_rcu_nested: ref;

axiom ldv_linux_kernel_rcu_update_lock_rcu_nested == $sub.ref(0, 18591);

const ldv_linux_mmc_sdio_func_sdio_element: ref;

axiom ldv_linux_mmc_sdio_func_sdio_element == $sub.ref(0, 19617);

const ldv_linux_net_register_probe_state: ref;

axiom ldv_linux_net_register_probe_state == $sub.ref(0, 20645);

const rtnllocknumber: ref;

axiom rtnllocknumber == $sub.ref(0, 21673);

const locksocknumber: ref;

axiom locksocknumber == $sub.ref(0, 22701);

const ldv_linux_usb_coherent_coherent_state: ref;

axiom ldv_linux_usb_coherent_coherent_state == $sub.ref(0, 23729);

const LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS: ref;

axiom LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS == $sub.ref(0, 24757);

const ldv_linux_usb_gadget_usb_gadget: ref;

axiom ldv_linux_usb_gadget_usb_gadget == $sub.ref(0, 25785);

const ldv_linux_usb_register_probe_state: ref;

axiom ldv_linux_usb_register_probe_state == $sub.ref(0, 26813);

const ldv_linux_usb_urb_urb_state: ref;

axiom ldv_linux_usb_urb_urb_state == $sub.ref(0, 27841);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode == $sub.ref(0, 28866);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock == $sub.ref(0, 29891);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device == $sub.ref(0, 30916);

const ldv_thread_2: ref;

axiom ldv_thread_2 == $sub.ref(0, 31956);

const ldv_thread_4: ref;

axiom ldv_thread_4 == $sub.ref(0, 32996);

const ldv_thread_9: ref;

axiom ldv_thread_9 == $sub.ref(0, 34036);

const ldv_thread_1: ref;

axiom ldv_thread_1 == $sub.ref(0, 35076);

const ldv_thread_3: ref;

axiom ldv_thread_3 == $sub.ref(0, 36116);

const ldv_thread_0: ref;

axiom ldv_thread_0 == $sub.ref(0, 37156);

const ldv_linux_lib_idr_idr: ref;

axiom ldv_linux_lib_idr_idr == $sub.ref(0, 38184);

const ldv_linux_kernel_sched_completion_completion: ref;

axiom ldv_linux_kernel_sched_completion_completion == $sub.ref(0, 39212);

const ldv_linux_kernel_locking_spinlock_spin_tx_global_lock_of_net_device: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_tx_global_lock_of_net_device == $sub.ref(0, 40240);

const ldv_linux_kernel_locking_spinlock_spin_tx_frame_lock_of_oz_pd: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_tx_frame_lock_of_oz_pd == $sub.ref(0, 41268);

const ldv_linux_kernel_locking_spinlock_spin_stream_lock_of_oz_pd: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_stream_lock_of_oz_pd == $sub.ref(0, 42296);

const ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct == $sub.ref(0, 43324);

const ldv_linux_kernel_locking_spinlock_spin_ptl: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_ptl == $sub.ref(0, 44352);

const ldv_linux_kernel_locking_spinlock_spin_port_lock_of_oz_port: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_port_lock_of_oz_port == $sub.ref(0, 45380);

const ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data == $sub.ref(0, 46408);

const ldv_linux_kernel_locking_spinlock_spin_lock_of_sk_buff_head: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_of_sk_buff_head == $sub.ref(0, 47436);

const ldv_linux_kernel_locking_spinlock_spin_lock_of_oz_elt_buf: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_of_oz_elt_buf == $sub.ref(0, 48464);

const ldv_linux_kernel_locking_spinlock_spin_lock_of_oz_cdev: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_of_oz_cdev == $sub.ref(0, 49492);

const ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN == $sub.ref(0, 50520);

const ldv_linux_kernel_locking_spinlock_spin_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock == $sub.ref(0, 51548);

const ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode == $sub.ref(0, 52576);

const ldv_linux_kernel_locking_spinlock_spin_hcd_lock_of_oz_hcd: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_hcd_lock_of_oz_hcd == $sub.ref(0, 53604);

const ldv_linux_kernel_locking_spinlock_spin_g_tasklet_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_g_tasklet_lock == $sub.ref(0, 54632);

const ldv_linux_kernel_locking_spinlock_spin_g_polling_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_g_polling_lock == $sub.ref(0, 55660);

const ldv_linux_kernel_locking_spinlock_spin_g_hcdlock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_g_hcdlock == $sub.ref(0, 56688);

const ldv_linux_kernel_locking_spinlock_spin_g_binding_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_g_binding_lock == $sub.ref(0, 57716);

const ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct == $sub.ref(0, 58744);

const ldv_linux_kernel_locking_spinlock_spin_addr_list_lock_of_net_device: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_addr_list_lock_of_net_device == $sub.ref(0, 59772);

const ldv_linux_kernel_locking_spinlock_spin__xmit_lock_of_netdev_queue: ref;

axiom ldv_linux_kernel_locking_spinlock_spin__xmit_lock_of_netdev_queue == $sub.ref(0, 60800);

const ldv_linux_kernel_locking_spinlock_spin_NOT_ARG_SIGN: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_NOT_ARG_SIGN == $sub.ref(0, 61828);

const __ldv_in_interrupt_context: ref;

axiom __ldv_in_interrupt_context == $sub.ref(0, 62853);

const ldv_linux_block_queue_queue_state: ref;

axiom ldv_linux_block_queue_queue_state == $sub.ref(0, 63881);

const ldv_linux_block_genhd_disk_state: ref;

axiom ldv_linux_block_genhd_disk_state == $sub.ref(0, 64909);

const oz_fops: ref;

axiom oz_fops == $sub.ref(0, 66173);

const g_session_id: ref;

axiom g_session_id == $sub.ref(0, 67198);

const g_processing_rx: ref;

axiom g_processing_rx == $sub.ref(0, 68226);

const g_apps: ref;

axiom g_apps == $sub.ref(0, 69252);

const g_pd_list: ref;

axiom g_pd_list == $sub.ref(0, 70292);

const g_binding: ref;

axiom g_binding == $sub.ref(0, 71332);

const g_binding_lock: ref;

axiom g_binding_lock == $sub.ref(0, 72428);

const {:count 10} g_hcd_name: ref;

axiom g_hcd_name == $sub.ref(0, 73462);

const g_oz_hc_drv: ref;

axiom g_oz_hc_drv == $sub.ref(0, 74838);

const g_oz_plat_drv: ref;

axiom g_oz_plat_drv == $sub.ref(0, 76038);

const g_usb_frame_number: ref;

axiom g_usb_frame_number == $sub.ref(0, 77066);

const g_pending_urbs: ref;

axiom g_pending_urbs == $sub.ref(0, 78094);

const g_tasklet_lock: ref;

axiom g_tasklet_lock == $sub.ref(0, 79190);

const g_ozhcd: ref;

axiom g_ozhcd == $sub.ref(0, 80222);

const g_hcdlock: ref;

axiom g_hcdlock == $sub.ref(0, 81318);

const g_submitted_isoc: ref;

axiom g_submitted_isoc == $sub.ref(0, 82346);

const {:count 5} g_app_if: ref;

axiom g_app_if == $sub.ref(0, 83650);

const g_net_dev: ref;

axiom g_net_dev == $sub.ref(0, 84682);

const g_oz_class: ref;

axiom g_oz_class == $sub.ref(0, 85714);

const g_cdev: ref;

axiom g_cdev == $sub.ref(0, 87258);

const g_rx_queue: ref;

axiom g_rx_queue == $sub.ref(0, 88378);

const g_urb_cancel_tasklet: ref;

axiom g_urb_cancel_tasklet == $sub.ref(0, 89442);

const g_urb_process_tasklet: ref;

axiom g_urb_process_tasklet == $sub.ref(0, 90506);

const g_plat_dev: ref;

axiom g_plat_dev == $sub.ref(0, 91538);

const oz_urb_link_cache: ref;

axiom oz_urb_link_cache == $sub.ref(0, 92570);

const .str.25: ref;

axiom .str.25 == $sub.ref(0, 93595);

const {:count 16} .str.3: ref;

axiom .str.3 == $sub.ref(0, 94635);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 7} .str.4: ref;

axiom .str.4 == $sub.ref(0, 95666);

const {:count 19} .str.35: ref;

axiom .str.35 == $sub.ref(0, 96709);

const {:count 31} .str.36: ref;

axiom .str.36 == $sub.ref(0, 97764);

const {:count 11} .str.37: ref;

axiom .str.37 == $sub.ref(0, 98799);

const {:count 19} .str.38: ref;

axiom .str.38 == $sub.ref(0, 99842);

const {:count 15} .str.39: ref;

axiom .str.39 == $sub.ref(0, 100881);

const {:count 13} .str.40: ref;

axiom .str.40 == $sub.ref(0, 101918);

const {:count 13} .str.41: ref;

axiom .str.41 == $sub.ref(0, 102955);

const {:count 14} .str.42: ref;

axiom .str.42 == $sub.ref(0, 103993);

const {:count 18} .str.16: ref;

axiom .str.16 == $sub.ref(0, 105035);

const {:count 34} .str.14: ref;

axiom .str.14 == $sub.ref(0, 106093);

const {:count 18} .str.17: ref;

axiom .str.17 == $sub.ref(0, 107135);

const {:count 18} .str.8: ref;

axiom .str.8 == $sub.ref(0, 108177);

const {:count 30} .str.6: ref;

axiom .str.6 == $sub.ref(0, 109231);

const {:count 27} .str.9: ref;

axiom .str.9 == $sub.ref(0, 110282);

const {:count 50} .str.10: ref;

axiom .str.10 == $sub.ref(0, 111356);

const {:count 16} .str.31: ref;

axiom .str.31 == $sub.ref(0, 112396);

const {:count 34} .str.32: ref;

axiom .str.32 == $sub.ref(0, 113454);

const {:count 21} .str.13: ref;

axiom .str.13 == $sub.ref(0, 114499);

const {:count 23} .str.15: ref;

axiom .str.15 == $sub.ref(0, 115546);

const {:count 12} .str.11: ref;

axiom .str.11 == $sub.ref(0, 116582);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 27} .str.76: ref;

axiom .str.76 == $sub.ref(0, 117633);

const {:count 27} .str.77: ref;

axiom .str.77 == $sub.ref(0, 118684);

const {:count 10} .str.33: ref;

axiom .str.33 == $sub.ref(0, 119718);

const {:count 15} .str.34: ref;

axiom .str.34 == $sub.ref(0, 120757);

const {:count 18} .str.78: ref;

axiom .str.78 == $sub.ref(0, 121799);

const {:count 19} .str.43: ref;

axiom .str.43 == $sub.ref(0, 122842);

const {:count 21} .str.44: ref;

axiom .str.44 == $sub.ref(0, 123887);

const {:count 31} .str.45: ref;

axiom .str.45 == $sub.ref(0, 124942);

const {:count 19} .str.46: ref;

axiom .str.46 == $sub.ref(0, 125985);

const {:count 11} .str.47: ref;

axiom .str.47 == $sub.ref(0, 127020);

const {:count 20} .str.68: ref;

axiom .str.68 == $sub.ref(0, 128064);

const {:count 26} .str.49: ref;

axiom .str.49 == $sub.ref(0, 129114);

const {:count 22} .str.50: ref;

axiom .str.50 == $sub.ref(0, 130160);

const {:count 23} .str.51: ref;

axiom .str.51 == $sub.ref(0, 131207);

const {:count 28} .str.52: ref;

axiom .str.52 == $sub.ref(0, 132259);

const {:count 21} .str.53: ref;

axiom .str.53 == $sub.ref(0, 133304);

const {:count 21} .str.54: ref;

axiom .str.54 == $sub.ref(0, 134349);

const {:count 24} .str.55: ref;

axiom .str.55 == $sub.ref(0, 135397);

const {:count 28} .str.56: ref;

axiom .str.56 == $sub.ref(0, 136449);

const {:count 24} .str.57: ref;

axiom .str.57 == $sub.ref(0, 137497);

const {:count 25} .str.58: ref;

axiom .str.58 == $sub.ref(0, 138546);

const {:count 30} .str.59: ref;

axiom .str.59 == $sub.ref(0, 139600);

const {:count 23} .str.60: ref;

axiom .str.60 == $sub.ref(0, 140647);

const {:count 20} .str.61: ref;

axiom .str.61 == $sub.ref(0, 141691);

const {:count 25} .str.62: ref;

axiom .str.62 == $sub.ref(0, 142740);

const {:count 10} .str.63: ref;

axiom .str.63 == $sub.ref(0, 143774);

const {:count 24} .str.64: ref;

axiom .str.64 == $sub.ref(0, 144822);

const {:count 19} .str.65: ref;

axiom .str.65 == $sub.ref(0, 145865);

const {:count 27} .str.66: ref;

axiom .str.66 == $sub.ref(0, 146916);

const {:count 22} .str.67: ref;

axiom .str.67 == $sub.ref(0, 147962);

const {:count 22} .str.48: ref;

axiom .str.48 == $sub.ref(0, 149008);

const {:count 23} .str.69: ref;

axiom .str.69 == $sub.ref(0, 150055);

const {:count 17} .str.70: ref;

axiom .str.70 == $sub.ref(0, 151096);

const {:count 19} .str.71: ref;

axiom .str.71 == $sub.ref(0, 152139);

const {:count 10} .str.72: ref;

axiom .str.72 == $sub.ref(0, 153173);

const {:count 19} .str.73: ref;

axiom .str.73 == $sub.ref(0, 154216);

const {:count 27} .str.74: ref;

axiom .str.74 == $sub.ref(0, 155267);

const {:count 29} .str.75: ref;

axiom .str.75 == $sub.ref(0, 156320);

const {:count 15} .str.79: ref;

axiom .str.79 == $sub.ref(0, 157359);

const init_net: ref;

axiom init_net == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 12} .str.80: ref;

axiom .str.80 == $sub.ref(0, 158395);

const {:count 33} .str.81: ref;

axiom .str.81 == $sub.ref(0, 159452);

const {:count 40} .str.82: ref;

axiom .str.82 == $sub.ref(0, 160516);

const {:count 24} .str.83: ref;

axiom .str.83 == $sub.ref(0, 161564);

const .str: ref;

axiom .str == $sub.ref(0, 162615);

const {:count 29} .str.1: ref;

axiom .str.1 == $sub.ref(0, 163668);

const {:count 27} .str.2: ref;

axiom .str.2 == $sub.ref(0, 164719);

const {:count 22} .str.18: ref;

axiom .str.18 == $sub.ref(0, 165765);

const {:count 20} .str.19: ref;

axiom .str.19 == $sub.ref(0, 166809);

const {:count 21} .str.12: ref;

axiom .str.12 == $sub.ref(0, 167854);

const {:count 26} .str.26: ref;

axiom .str.26 == $sub.ref(0, 168904);

const {:count 21} .str.27: ref;

axiom .str.27 == $sub.ref(0, 169949);

const {:count 33} .str.28: ref;

axiom .str.28 == $sub.ref(0, 171006);

const {:count 22} .str.29: ref;

axiom .str.29 == $sub.ref(0, 172052);

const {:count 18} .str.30: ref;

axiom .str.30 == $sub.ref(0, 173094);

const {:count 20} .str.5: ref;

axiom .str.5 == $sub.ref(0, 174138);

const {:count 31} .str.7: ref;

axiom .str.7 == $sub.ref(0, 175193);

const kernel_stack: ref;

axiom kernel_stack == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 12} .str.21: ref;

axiom .str.21 == $sub.ref(0, 176229);

const {:count 12} .str.22: ref;

axiom .str.22 == $sub.ref(0, 177265);

const {:count 22} .str.84: ref;

axiom .str.84 == $sub.ref(0, 178311);

const {:count 23} .str.23: ref;

axiom .str.23 == $sub.ref(0, 179358);

const {:count 12} .str.24: ref;

axiom .str.24 == $sub.ref(0, 180394);

const nr_cpu_ids: ref;

axiom nr_cpu_ids == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 181426);

const {:count 3} .str.1.180: ref;

axiom .str.1.180 == $sub.ref(0, 182453);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 183491);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 184519);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 185551);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv_in_interrupt_context: ref;

axiom ldv_in_interrupt_context == $sub.ref(0, 186583);

procedure ldv_in_interrupt_context() returns ($r: i1);
  free requires assertsPassed;



implementation ldv_in_interrupt_context() returns ($r: i1)
{
  var $i0: i8;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $i0 := $M.0;
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i8.i1($i0);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const oz_usb_init: ref;

axiom oz_usb_init == $sub.ref(0, 187615);

procedure oz_usb_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14, $M.46, $M.1, $M.12, $M.48, $M.13, $CurrAddr, $M.96, $M.97, $M.44, $M.95, assertsPassed, $M.45, $M.33, $M.103, $M.17, $M.16, $M.104, $M.105, $M.15, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.41, $M.106, $M.107, $M.42, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation oz_usb_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $i0 := oz_hcd_init();
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 1} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const oz_usb_term: ref;

axiom oz_usb_term == $sub.ref(0, 188647);

procedure oz_usb_term();
  free requires assertsPassed;



implementation oz_usb_term()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} oz_hcd_term();
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    return;
}



const oz_usb_start: ref;

axiom oz_usb_start == $sub.ref(0, 189679);

procedure oz_usb_start($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.43, $M.16, assertsPassed, $CurrAddr, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.45, $M.40, $M.9;



implementation oz_usb_start($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $i33: i64;
  var $i34: i1;
  var $p32: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i42: i32;
  var $p61: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} {:cexpr "oz_usb_start:arg:resume"} boogie_si_record_i32($i1);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $p4 := kzalloc(32, 32);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} atomic_set($p8, 1);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, $p0);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p10, 0);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(280, 1));
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(1, 72));
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} ldv_spin_lock_bh_121___0($p13);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(240, 1)), $mul.ref(1, 8));
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(240, 1)), $mul.ref(1, 8));
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.1, $p24);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} oz_usb_get($p25);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(280, 1));
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref(1, 72));
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} ldv_spin_unlock_bh_122___0($p28);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p17);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p5);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p32 := $p4;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p32, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.1, $p35);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i38 == 1);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p32);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $p44 := oz_hcd_pd_arrived($p43);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p32, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p46, $p44);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p32, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.1, $p47);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i49, 0);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i60 := 0;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i42 := $i60;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p32);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} oz_usb_put($p61);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i3 := $i42;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb20:
    assume $i50 == 1;
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(280, 1));
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p52, $mul.ref(1, 72));
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} ldv_spin_lock_bh_121___0($p53);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(240, 1)), $mul.ref(1, 8));
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p55, $0.ref);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(280, 1));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p57, $mul.ref(1, 72));
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} ldv_spin_unlock_bh_122___0($p58);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p32);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} oz_usb_put($p59);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32(0, 1);
    goto $bb22;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i38 == 1;
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p32);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p32, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.1, $p40);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} oz_hcd_pd_reset($p39, $p41);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb19;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} oz_pd_get($p0);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p5);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} kfree($p31);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $p32 := $p16;
    goto $bb13;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(240, 1)), $mul.ref(1, 8));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p22, $p4);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;
}



const oz_usb_stop: ref;

axiom oz_usb_stop == $sub.ref(0, 190711);

procedure oz_usb_stop($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.2, $M.16, assertsPassed, $M.43, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.40, $M.9;



implementation oz_usb_stop($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 19} {:cexpr "oz_usb_stop:arg:pause"} boogie_si_record_i32($i1);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i1, 0);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(280, 1));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(1, 72));
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} ldv_spin_lock_bh_121___0($p7);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(240, 1)), $mul.ref(1, 8));
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(240, 1)), $mul.ref(1, 8));
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, $0.ref);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(280, 1));
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref(1, 72));
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} ldv_spin_unlock_bh_122___0($p16);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p11);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} getnstimeofday($p2);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p11, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p19, 1);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p11, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $i21 := atomic_read($p20);
    call {:si_unique_call 24} {:cexpr "tmp___1"} boogie_si_record_i32($i21);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i21, 2);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p11, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} oz_hcd_pd_departed($p32);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p11);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} oz_usb_put($p33);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $p23, $i24, $p25, $i26, $i27, $i28, $i29 := oz_usb_stop_loop_$bb10($p2, $p3, $p20, $p23, $i24, $p25, $i26, $i27, $i28, $i29);
    goto $bb10_last;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} getnstimeofday($p3);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.1, $p23);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.1, $p25);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i24, $i26);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $i28 := atomic_read($p20);
    call {:si_unique_call 29} {:cexpr "tmp___1"} boogie_si_record_i32($i28);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i29 := $sgt.i32($i28, 2);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i29 == 1);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb16_dummy;

  $bb12:
    assume $i27 == 1;
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const oz_usb_rx: ref;

axiom oz_usb_rx == $sub.ref(0, 191743);

procedure oz_usb_rx($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.16, assertsPassed, $M.15, $M.9, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, $M.30, $M.31, $M.32, $M.40, $M.13, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation oz_usb_rx($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i8;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i16;
  var $p66: ref;
  var $p67: ref;
  var $i68: i16;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i8;
  var $i73: i32;
  var $i74: i8;
  var $p75: ref;
  var $i76: i8;
  var $i77: i32;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i8;
  var $i87: i32;
  var $i88: i8;
  var $p89: ref;
  var $i90: i8;
  var $i91: i32;
  var $i92: i8;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i8;
  var $i98: i32;
  var $i99: i8;
  var $p100: ref;
  var $i101: i8;
  var $i102: i32;
  var $i103: i8;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i8;
  var $i109: i32;
  var $i110: i8;
  var $p111: ref;
  var $i112: i8;
  var $i113: i32;
  var $i114: i8;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i8;
  var $i119: i32;
  var $i120: i32;
  var $p121: ref;
  var $i122: i8;
  var $i123: i32;
  var $p124: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(1, 3));
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(280, 1));
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(1, 72));
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} ldv_spin_lock_bh_121___0($p6);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(240, 1)), $mul.ref(1, 8));
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(280, 1));
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref(1, 72));
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} ldv_spin_unlock_bh_122___0($p16);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p10);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p10, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.1, $p19);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(1, 3)), $mul.ref(1, 1));
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.1, $p22);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(1, 3)), $mul.ref(1, 1));
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.1, $p35);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p10, $mul.ref(0, 32)), $mul.ref(5, 1));
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p37, $i36);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(1, 3)), $mul.ref(2, 1));
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.1, $p38);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 2);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(1, 3)), $mul.ref(2, 1));
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.1, $p42);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 4);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(1, 3)), $mul.ref(2, 1));
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.1, $p46);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 6);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(1, 3)), $mul.ref(2, 1));
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.1, $p50);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 8);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(1, 3)), $mul.ref(2, 1));
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.1, $p54);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 23);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p10);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} oz_usb_put($p124);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb34:
    assume $i57 == 1;
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $i122 := $load.i8($M.1, $p121);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i123 := $zext.i8.i32($i122);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} oz_usb_handle_ep_data($p10, $p3, $i123);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    goto $bb39;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i53 == 1;
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p3);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p10, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.1, $p105);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p104, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.1, $p107);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i32($i108);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i32.i8($i109);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p104, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.1, $p111);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i112);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i32.i8($i113);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p104, $mul.ref(0, 6)), $mul.ref(5, 1));
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.1, $p117);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i118);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i120 := $sub.i32($i119, 5);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} oz_hcd_control_cnf($p106, $i110, $i114, $p116, $i120);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    goto $bb39;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i49 == 1;
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p3);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p10, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.1, $p94);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p93, $mul.ref(0, 5)), $mul.ref(3, 1));
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.1, $p96);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i97);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i32.i8($i98);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p93, $mul.ref(0, 5)), $mul.ref(4, 1));
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.1, $p100);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i101);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i8($i102);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} oz_hcd_control_cnf($p95, $i99, $i103, $0.ref, 0);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    goto $bb39;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i45 == 1;
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p3);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p10, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.1, $p83);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p82, $mul.ref(0, 5)), $mul.ref(3, 1));
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.1, $p85);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i86);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i32.i8($i87);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p82, $mul.ref(0, 5)), $mul.ref(4, 1));
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.1, $p89);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i90);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i32.i8($i91);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} oz_hcd_control_cnf($p84, $i88, $i92, $0.ref, 0);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    goto $bb39;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i41 == 1;
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p3);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.1, $p59);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32($i61, 9);
    call {:si_unique_call 34} {:cexpr "data_len"} boogie_si_record_i32($i62);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $i65 := get_unaligned_le16($p64);
    call {:si_unique_call 36} {:cexpr "tmp"} boogie_si_record_i16($i65);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $i68 := get_unaligned_le16($p67);
    call {:si_unique_call 38} {:cexpr "tmp___0"} boogie_si_record_i16($i68);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p10, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.1, $p69);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.1, $p71);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i72);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i8($i73);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(8, 1));
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.1, $p75);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p58, $mul.ref(0, 10)), $mul.ref(9, 1));
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i80 := $zext.i16.i32($i65);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i32($i68);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} oz_hcd_get_desc_cnf($p70, $i74, $i77, $p79, $i62, $i80, $i81);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    goto $bb39;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i25 == 1;
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p10, $mul.ref(0, 32)), $mul.ref(5, 1));
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.1, $p26);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(1, 3)), $mul.ref(1, 1));
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.1, $p29);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i28, $i31);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 128);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p10);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} oz_usb_get($p13);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const oz_usb_heartbeat: ref;

axiom oz_usb_heartbeat == $sub.ref(0, 192775);

procedure oz_usb_heartbeat($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.17, $M.2, $M.16, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, assertsPassed, $M.42, $M.15, $M.41, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation oz_usb_heartbeat($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i20: i32;
  var $p31: ref;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(280, 1));
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(1, 72));
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} ldv_spin_lock_bh_121___0($p3);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(240, 1)), $mul.ref(1, 8));
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(280, 1));
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(1, 72));
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} ldv_spin_unlock_bh_122___0($p13);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p7);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.1, $p17);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i20 := $i30;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p7);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} oz_usb_put($p31);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $i16 := $i20;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb12:
    assume $i24 == 1;
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.1, $p25);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} $i27 := oz_hcd_heartbeat($p26);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 49} {:cexpr "tmp"} boogie_si_record_i32($i27);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i30 := $i29;
    goto $bb17;

  $bb14:
    assume $i28 == 1;
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i29 := 1;
    goto $bb16;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb10;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb6;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p7);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} oz_usb_get($p10);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const oz_usb_farewell: ref;

axiom oz_usb_farewell == $sub.ref(0, 193807);

procedure oz_usb_farewell($p0: ref, $i1: i8, $p2: ref, $i3: i8);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.16, assertsPassed, $M.15, $CurrAddr;



implementation oz_usb_farewell($p0: ref, $i1: i8, $p2: ref, $i3: i8)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i8;
  var $i26: i32;
  var $p27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} {:cexpr "oz_usb_farewell:arg:ep_num"} boogie_si_record_i8($i1);
    call {:si_unique_call 51} {:cexpr "oz_usb_farewell:arg:len"} boogie_si_record_i8($i3);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(280, 1));
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(1, 72));
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} ldv_spin_lock_bh_121___0($p6);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(240, 1)), $mul.ref(1, 8));
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(280, 1));
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref(1, 72));
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} ldv_spin_unlock_bh_122___0($p16);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p10);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p10, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.1, $p19);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p10);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} oz_usb_put($p27);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p10, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i1);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i3);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} oz_hcd_data_ind($p23, $i25, $p2, $i26);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p10);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} oz_usb_get($p13);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const oz_cdev_init: ref;

axiom oz_cdev_init == $sub.ref(0, 194839);

procedure oz_cdev_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.13, assertsPassed;



implementation oz_cdev_init() returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} oz_app_enable(4, 1);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const oz_cdev_term: ref;

axiom oz_cdev_term == $sub.ref(0, 195871);

procedure oz_cdev_term();
  free requires assertsPassed;
  modifies $M.12, $M.13, assertsPassed;



implementation oz_cdev_term()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} oz_app_enable(4, 0);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const oz_cdev_start: ref;

axiom oz_cdev_start == $sub.ref(0, 196903);

procedure oz_cdev_start($p0: ref, $i1: i32) returns ($r: i32);



const oz_cdev_stop: ref;

axiom oz_cdev_stop == $sub.ref(0, 197935);

procedure oz_cdev_stop($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.10, assertsPassed, $CurrAddr;



implementation oz_cdev_stop($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} {:cexpr "oz_cdev_stop:arg:pause"} boogie_si_record_i32($i1);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(280, 1));
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(4, 72));
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} ldv_spin_lock_bh_121___0($p5);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(240, 1)), $mul.ref(4, 8));
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(240, 1)), $mul.ref(4, 8));
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p11, $0.ref);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(280, 1));
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(4, 72));
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} ldv_spin_unlock_bh_122___0($p14);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p9);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} ldv_spin_lock_151($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(432, 1)));
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p0);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(512, 1)));
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i17, $i19);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $p21 := $0.ref;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} ldv_spin_unlock_152($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(432, 1)));
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} oz_pd_put($p21);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(512, 1)), $0.ref);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p21 := $p0;
    goto $bb10;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} oz_cdev_release_ctx($p9);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const oz_cdev_rx: ref;

axiom oz_cdev_rx == $sub.ref(0, 198967);

procedure oz_cdev_rx($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, assertsPassed;



implementation oz_cdev_rx($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i8;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $i50: i64;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i64;
  var $p60: ref;
  var $i61: i64;
  var $i62: i32;
  var $p63: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} $p2 := oz_cdev_claim_ctx($p0);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(1, 2)), $mul.ref(1, 1));
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.1, $p7);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(1, 2)), $mul.ref(1, 1));
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.1, $p20);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(5, 1));
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p22, $i21);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.1, $p23);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32($i25, 2);
    call {:si_unique_call 68} {:cexpr "len"} boogie_si_record_i32($i26);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p1);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref(3, 1));
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i29 := $sle.i32($i26, 0);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(268, 1));
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.1, $p30);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(264, 1));
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.1, $p32);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32($i31, $i33);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i34, $sub.i32(0, 1));
    call {:si_unique_call 69} {:cexpr "space"} boogie_si_record_i32($i35);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i35, 0);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i38 := $i35;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $i39 := $sgt.i32($i26, $i38);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $i26;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(264, 1));
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.1, $p41);
    call {:si_unique_call 71} {:cexpr "ix"} boogie_si_record_i32($i42);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32(256, $i42);
    call {:si_unique_call 72} {:cexpr "copy_sz"} boogie_si_record_i32($i43);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i44 := $sgt.i32($i43, $i40);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $i43;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(6, 1));
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i42);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p47, $mul.ref($i48, 1));
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i45);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.1;
    cmdloc_dummy_var_1 := $M.1;
    call {:si_unique_call 73} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p49, $p28, $i50, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_2;
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32($i40, $i45);
    call {:si_unique_call 74} {:cexpr "len"} boogie_si_record_i32($i51);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i42, $i45);
    call {:si_unique_call 75} {:cexpr "ix"} boogie_si_record_i32($i52);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 256);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i54 := $i52;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i51, 0);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i62 := $i54;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(264, 1));
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p63, $i62);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} __wake_up($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(344, 1)), 3, 1, $0.ref);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} oz_cdev_release_ctx($p2);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb27:
    assume $i55 == 1;
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(6, 1));
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i45);
    $i59 := $add.i64(3, $i58);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p27, $mul.ref($i59, 1));
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i51);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.1;
    cmdloc_dummy_var_4 := $M.1;
    call {:si_unique_call 76} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p57, $p60, $i61, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_5;
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i62 := $i51;
    goto $bb29;

  $bb24:
    assume $i53 == 1;
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i54 := 0;
    goto $bb26;

  $bb21:
    assume $i44 == 1;
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i45 := $i40;
    goto $bb23;

  $bb18:
    assume $i39 == 1;
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i40 := $i38;
    goto $bb20;

  $bb15:
    assume $i36 == 1;
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i35, 256);
    call {:si_unique_call 70} {:cexpr "space"} boogie_si_record_i32($i37);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb17;

  $bb12:
    assume $i29 == 1;
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 272)), $mul.ref(5, 1));
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.1, $p11);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(1, 2)), $mul.ref(1, 1));
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.1, $p14);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32($i13, $i16);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 128);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_91:
    assume !assertsPassed;
    return;
}



const oz_cdev_claim_ctx: ref;

axiom oz_cdev_claim_ctx == $sub.ref(0, 199999);

procedure oz_cdev_claim_ctx($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.2, $M.1, assertsPassed;



implementation oz_cdev_claim_ctx($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(280, 1));
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(4, 72));
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} ldv_spin_lock_bh_121___0($p3);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(240, 1)), $mul.ref(4, 8));
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(280, 1));
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(4, 72));
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} ldv_spin_unlock_bh_122___0($p13);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} atomic_inc($p10);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_94:
    assume !assertsPassed;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 201031);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 202063);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 82} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    return;
}



const oz_cdev_release_ctx: ref;

axiom oz_cdev_release_ctx == $sub.ref(0, 203095);

procedure oz_cdev_release_ctx($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation oz_cdev_release_ctx($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $i2 := atomic_dec_and_test($p1);
    call {:si_unique_call 84} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} kfree($p4);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const atomic_dec_and_test: ref;

axiom atomic_dec_and_test == $sub.ref(0, 204127);

procedure atomic_dec_and_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation atomic_dec_and_test($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} $i1 := ldv_linux_usb_dev_atomic_dec_and_test($p0);
    call {:si_unique_call 87} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 205159);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} free_($p0);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 206191);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 89} $free($p0);
    return;
}



const ldv_linux_usb_dev_atomic_dec_and_test: ref;

axiom ldv_linux_usb_dev_atomic_dec_and_test == $sub.ref(0, 207223);

procedure ldv_linux_usb_dev_atomic_dec_and_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_linux_usb_dev_atomic_dec_and_test($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.1, $p1);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32($i2, 1);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p4, $i3);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const ldv_spin_lock_bh_121___0: ref;

axiom ldv_spin_lock_bh_121___0 == $sub.ref(0, 208255);

procedure ldv_spin_lock_bh_121___0($p0: ref);
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv_spin_lock_bh_121___0($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} ldv_linux_kernel_locking_spinlock_spin_lock_NOT_ARG_SIGN();
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} spin_lock_bh($p0);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 209287);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation atomic_inc($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} ldv_linux_usb_dev_atomic_inc($p0);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_bh_122___0: ref;

axiom ldv_spin_unlock_bh_122___0 == $sub.ref(0, 210319);

procedure ldv_spin_unlock_bh_122___0($p0: ref);
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv_spin_unlock_bh_122___0($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} ldv_linux_kernel_locking_spinlock_spin_unlock_NOT_ARG_SIGN();
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} spin_unlock_bh($p0);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_NOT_ARG_SIGN: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_NOT_ARG_SIGN == $sub.ref(0, 211351);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_NOT_ARG_SIGN();
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_NOT_ARG_SIGN()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i0 := $M.2;
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $i3 := $M.2;
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} ldv_assume($i5);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $M.2 := 1;
    call {:si_unique_call 97} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_NOT_ARG_SIGN"} boogie_si_record_i32(1);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;
}



const spin_unlock_bh: ref;

axiom spin_unlock_bh == $sub.ref(0, 212383);

procedure spin_unlock_bh($p0: ref);
  free requires assertsPassed;



implementation spin_unlock_bh($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} _raw_spin_unlock_bh($p2);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_bh: ref;

axiom _raw_spin_unlock_bh == $sub.ref(0, 213415);

procedure _raw_spin_unlock_bh($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock: ref;

axiom ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock == $sub.ref(0, 214447);

procedure ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} {:cexpr "ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 1} true;
    call {:si_unique_call 100} __VERIFIER_error();
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assume: ref;

axiom ldv_assume == $sub.ref(0, 215479);

procedure ldv_assume($i0: i32);
  free requires assertsPassed;



implementation ldv_assume($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} {:cexpr "ldv_assume:arg:expression"} boogie_si_record_i32($i0);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call ldv_assume_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ldv_linux_usb_dev_atomic_inc: ref;

axiom ldv_linux_usb_dev_atomic_inc == $sub.ref(0, 216511);

procedure ldv_linux_usb_dev_atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_linux_usb_dev_atomic_inc($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.1, $p1);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, 1);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p4, $i3);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_NOT_ARG_SIGN: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_NOT_ARG_SIGN == $sub.ref(0, 217543);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_NOT_ARG_SIGN();
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_NOT_ARG_SIGN()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i0 := $M.2;
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $i3 := $M.2;
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} ldv_assume($i5);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $M.2 := 2;
    call {:si_unique_call 104} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_NOT_ARG_SIGN"} boogie_si_record_i32(2);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;
}



const spin_lock_bh: ref;

axiom spin_lock_bh == $sub.ref(0, 218575);

procedure spin_lock_bh($p0: ref);
  free requires assertsPassed;



implementation spin_lock_bh($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} _raw_spin_lock_bh($p2);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_bh: ref;

axiom _raw_spin_lock_bh == $sub.ref(0, 219607);

procedure _raw_spin_lock_bh($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock: ref;

axiom ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock == $sub.ref(0, 220639);

procedure ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} {:cexpr "ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 1} true;
    call {:si_unique_call 107} __VERIFIER_error();
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_spin_lock_151: ref;

axiom ldv_spin_lock_151 == $sub.ref(0, 221671);

procedure ldv_spin_lock_151($p0: ref);
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_spin_lock_151($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_oz_cdev();
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} spin_lock($p0);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_152: ref;

axiom ldv_spin_unlock_152 == $sub.ref(0, 222703);

procedure ldv_spin_unlock_152($p0: ref);
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_spin_unlock_152($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_oz_cdev();
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} spin_unlock($p0);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;
}



const oz_pd_put: ref;

axiom oz_pd_put == $sub.ref(0, 223735);

procedure oz_pd_put($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation oz_pd_put($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(16, 1));
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} $i2 := atomic_dec_and_test($p1);
    call {:si_unique_call 113} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} oz_pd_destroy($p0);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const oz_pd_destroy: ref;

axiom oz_pd_destroy == $sub.ref(0, 224767);

procedure oz_pd_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation oz_pd_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i1;
  var $i27: i8;
  var $i28: i1;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(968, 1));
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $i4 := hrtimer_active($p3);
    call {:si_unique_call 118} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(872, 1));
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} $i9 := hrtimer_active($p8);
    call {:si_unique_call 121} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(1152, 1));
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} __init_work($p13, 0);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p14, 137438953408);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(1152, 1)), $mul.ref(0, 1));
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p2);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.1;
    cmdloc_dummy_var_7 := $M.1;
    call {:si_unique_call 124} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p17, $p18, 8, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_8;
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(1152, 1)), $mul.ref(32, 1));
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} lockdep_init_map($p20, .str.3, $p1, 0);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(1152, 1)), $mul.ref(8, 1));
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} INIT_LIST_HEAD($p22);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(1152, 1)), $mul.ref(24, 1));
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p24, oz_pd_free);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(1152, 1));
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $i26 := schedule_work($p25);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i8($i26);
    call {:si_unique_call 128} {:cexpr "tmp___2"} boogie_si_record_i8($i27);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(872, 1));
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} vslice_dummy_var_135 := hrtimer_cancel($p11);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(968, 1));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} vslice_dummy_var_134 := hrtimer_cancel($p6);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const hrtimer_active: ref;

axiom hrtimer_active == $sub.ref(0, 225799);

procedure hrtimer_active($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation hrtimer_active($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(56, 1));
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.1, $p1);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const hrtimer_cancel: ref;

axiom hrtimer_cancel == $sub.ref(0, 226831);

procedure hrtimer_cancel($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation hrtimer_cancel($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 1} true;
    call {:si_unique_call 129} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 130} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 227863);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 228895);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 229927);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1, $p0);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $p0);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    return;
}



const oz_pd_free: ref;

axiom oz_pd_free == $sub.ref(0, 230959);

procedure oz_pd_free($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.9, assertsPassed, $M.2, $M.16, $M.15, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, $M.30, $M.31, $M.32, $M.40, $M.13, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation oz_pd_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p14: ref;
  var $p15: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p30: ref;
  var $p31: ref;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p53: ref;
  var $p54: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 1152), 1232));
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1152), 1232)), $mul.ref(1072, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} tasklet_kill($p3);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1152), 1232)), $mul.ref(1112, 1));
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} tasklet_kill($p4);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1152), 1232)), $mul.ref(848, 1)), $mul.ref(0, 1));
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p7);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1152), 1232)), $mul.ref(848, 1));
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i10, $i12);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1152), 1232)), $mul.ref(744, 1)), $mul.ref(0, 1));
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.3, $p24);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p23);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1152), 1232)), $mul.ref(744, 1));
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i26, $i28);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1152), 1232)), $mul.ref(112, 1));
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} oz_elt_buf_term($p43);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1152), 1232)), $mul.ref(760, 1)), $mul.ref(0, 1));
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.1, $p45);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.1, $p47);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p46);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1152), 1232)), $mul.ref(760, 1));
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i49, $i51);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1152), 1232)), $mul.ref(864, 1));
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.1, $p61);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p2);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} kfree($p67);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    return;

  $bb28:
    assume $i64 == 1;
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1152), 1232)), $mul.ref(864, 1));
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.1, $p65);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} dev_put($p66);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    goto $bb30;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i52 == 1;
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $p53, $p54 := $p48, $p46;
    goto $bb23;

  $bb23:
    call $p55, $p56, $p57, $p58, $i59, $i60, $p53, $p54 := oz_pd_free_loop_$bb23($i51, $p55, $p56, $p57, $p58, $i59, $i60, $p53, $p54);
    goto $bb23_last;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} kfree($p56);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p53, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.1, $p57);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p53);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, $i51);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i60 == 1);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb25:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $p53, $p54 := $p58, $p53;
    goto $bb25_dummy;

  $bb9:
    assume $i29 == 1;
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p30, $p31 := $p25, $p23;
    goto $bb12;

  $bb12:
    call $p32, $p33, $p34, $i35, $i36, $p37, $p38, $p39, $p40, $i41, $i42, $p30, $p31 := oz_pd_free_loop_$bb12($p2, $i28, $p32, $p33, $p34, $i35, $i36, $p37, $p38, $p39, $p40, $i41, $i42, $p30, $p31);
    goto $bb12_last;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.4, $p33);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} oz_retire_frame($p2, $p32);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p30, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.3, $p39);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p30);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, $i28);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i42 == 1);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb17:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $p30, $p31 := $p40, $p30;
    goto $bb17_dummy;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i36 == 1;
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p32, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.4, $p37);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} kfree_skb($p38);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p14, $p15 := $p9, $p7;
    goto $bb4;

  $bb4:
    call $p16, $p17, $p18, $i19, $i20, $p14, $p15 := oz_pd_free_loop_$bb4($i12, $p16, $p17, $p18, $i19, $i20, $p14, $p15);
    goto $bb4_last;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} oz_isoc_stream_free($p16);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p14);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, $i12);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $p14, $p15 := $p18, $p14;
    goto $bb6_dummy;

  $bb25_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_832;

  $bb17_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_798;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_776;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 231991);

procedure schedule_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation schedule_work($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.5, system_wq);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} $i2 := queue_work($p1, $p0);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 143} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 233023);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} $i2 := queue_work_on(8192, $p0, $p1);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 145} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 234055);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 146} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 1} true;
    call {:si_unique_call 147} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 148} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const tasklet_kill: ref;

axiom tasklet_kill == $sub.ref(0, 235087);

procedure tasklet_kill($p0: ref);
  free requires assertsPassed;



implementation tasklet_kill($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    return;
}



const oz_isoc_stream_free: ref;

axiom oz_isoc_stream_free == $sub.ref(0, 236119);

procedure oz_isoc_stream_free($p0: ref);
  free requires assertsPassed;



implementation oz_isoc_stream_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} kfree_skb($p2);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} kfree($p3);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    return;
}



const kfree_skb: ref;

axiom kfree_skb == $sub.ref(0, 237151);

procedure kfree_skb($p0: ref);
  free requires assertsPassed;



implementation kfree_skb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    return;
}



const oz_retire_frame: ref;

axiom oz_retire_frame == $sub.ref(0, 238183);

procedure oz_retire_frame($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.9, assertsPassed;



implementation oz_retire_frame($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(0, 1));
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i11, $i13);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} oz_tx_frame_free($p0, $p1);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p15, $p16 := $p8, $p4;
    goto $bb4;

  $bb4:
    call $p17, $p18, $p19, $i20, $i21, $p22, $p23, $p24, $i25, $p27, $p28, $p30, $p32, $p33, $p35, $i36, $i37, $p15, $p16 := oz_retire_frame_loop_$bb4($p0, $i13, $p17, $p18, $p19, $i20, $i21, $p22, $p23, $p24, $i25, $p27, $p28, $p30, $p32, $p33, $p35, $i36, $i37, $p15, $p16);
    goto $bb4_last;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 328)), $mul.ref(0, 1));
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} list_del_init($p17);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p16, $mul.ref(0, 328)), $mul.ref(40, 1));
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} ldv_spin_lock_bh_135($p27);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(112, 1));
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} oz_elt_info_free($p28, $p16);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} ldv_spin_unlock_bh_136($p30);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p15, $mul.ref(0, 328)), $mul.ref(0, 1));
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, $i13);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i37 == 1);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $p15, $p16 := $p33, $p15;
    goto $bb9_dummy;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p16, $mul.ref(0, 328)), $mul.ref(40, 1));
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p16, $mul.ref(0, 328)), $mul.ref(48, 1));
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.1, $p24);
    call {:si_unique_call 152} devirtbounce($p23, $p0, $i25);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_897;
}



const oz_elt_buf_term: ref;

axiom oz_elt_buf_term == $sub.ref(0, 239215);

procedure oz_elt_buf_term($p0: ref);
  free requires assertsPassed;



implementation oz_elt_buf_term($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p16: ref;
  var $p17: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p44: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p42: ref;
  var $p43: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(104, 1)), $mul.ref(0, 1));
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 16), 328));
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p4, $mul.ref($sub.ref(0, 16), 328)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref($sub.ref(0, 16), 328));
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 16), 328)), $mul.ref(16, 1));
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(104, 1));
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i12, $i14);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref($sub.ref(0, 16), 328));
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p30, $mul.ref($sub.ref(0, 16), 328)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p35, $mul.ref($sub.ref(0, 16), 328));
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p30, $mul.ref($sub.ref(0, 16), 328)), $mul.ref(16, 1));
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(88, 1));
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i38, $i40);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i41 == 1;
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $p42, $p43 := $p36, $p31;
    goto $bb12;

  $bb12:
    call $p44, $p46, $p47, $p48, $p49, $p50, $i51, $i52, $p42, $p43 := oz_elt_buf_term_loop_$bb12($i40, $p44, $p46, $p47, $p48, $p49, $p50, $i51, $i52, $p42, $p43);
    goto $bb12_last;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} kfree($p44);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p42, $mul.ref(0, 328)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.1, $p46);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p48, $mul.ref($sub.ref(0, 16), 328));
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p42, $mul.ref(0, 328)), $mul.ref(16, 1));
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, $i40);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i52 == 1);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb14:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $p42, $p43 := $p49, $p42;
    goto $bb14_dummy;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $p16, $p17 := $p10, $p5;
    goto $bb4;

  $bb4:
    call $p18, $p20, $p21, $p22, $p23, $p24, $i25, $i26, $p16, $p17 := oz_elt_buf_term_loop_$bb4($i14, $p18, $p20, $p21, $p22, $p23, $p24, $i25, $i26, $p16, $p17);
    goto $bb4_last;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} kfree($p18);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 328)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p22, $mul.ref($sub.ref(0, 16), 328));
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p16, $mul.ref(0, 328)), $mul.ref(16, 1));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, $i14);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i26 == 1);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $p16, $p17 := $p23, $p16;
    goto $bb6_dummy;

  $bb14_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_976;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_946;
}



const dev_put: ref;

axiom dev_put == $sub.ref(0, 240247);

procedure dev_put($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.16, assertsPassed, $M.15, $M.9, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, $M.30, $M.31, $M.32, $M.40, $M.13, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation dev_put($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(1232, 1));
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $p21);
    call {:si_unique_call 169} devirtbounce.1(0, $p22, $p22);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;
}



const __bad_percpu_size: ref;

axiom __bad_percpu_size == $sub.ref(0, 241279);

procedure __bad_percpu_size();



const __bad_size_call_parameter: ref;

axiom __bad_size_call_parameter == $sub.ref(0, 242311);

procedure __bad_size_call_parameter();



const list_del_init: ref;

axiom list_del_init == $sub.ref(0, 243343);

procedure list_del_init($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation list_del_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} __list_del_entry($p0);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} INIT_LIST_HEAD($p0);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_bh_135: ref;

axiom ldv_spin_lock_bh_135 == $sub.ref(0, 244375);

procedure ldv_spin_lock_bh_135($p0: ref);
  free requires assertsPassed;
  modifies $M.9, assertsPassed;



implementation ldv_spin_lock_bh_135($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_oz_elt_buf();
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} spin_lock_bh($p0);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;
}



const oz_elt_info_free: ref;

axiom oz_elt_info_free == $sub.ref(0, 245407);

procedure oz_elt_info_free($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation oz_elt_info_free($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p4 := $M.7;
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} kmem_cache_free($p4, $p5);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_spin_unlock_bh_136: ref;

axiom ldv_spin_unlock_bh_136 == $sub.ref(0, 246439);

procedure ldv_spin_unlock_bh_136($p0: ref);
  free requires assertsPassed;
  modifies $M.9, assertsPassed;



implementation ldv_spin_unlock_bh_136($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_oz_elt_buf();
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} spin_unlock_bh($p0);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;
}



const oz_tx_frame_free: ref;

axiom oz_tx_frame_free == $sub.ref(0, 247471);

procedure oz_tx_frame_free($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation oz_tx_frame_free($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p2 := $M.8;
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} kmem_cache_free($p2, $p3);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    return;
}



const kmem_cache_free: ref;

axiom kmem_cache_free == $sub.ref(0, 248503);

procedure kmem_cache_free($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation kmem_cache_free($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_oz_elt_buf: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_oz_elt_buf == $sub.ref(0, 249535);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_oz_elt_buf();
  free requires assertsPassed;
  modifies $M.9, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_oz_elt_buf()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $i0 := $M.9;
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i3 := $M.9;
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} ldv_assume($i5);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 190} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_oz_elt_buf"} boogie_si_record_i32(1);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_190:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_oz_elt_buf: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_oz_elt_buf == $sub.ref(0, 250567);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_oz_elt_buf();
  free requires assertsPassed;
  modifies $M.9, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_oz_elt_buf()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i0 := $M.9;
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i3 := $M.9;
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} ldv_assume($i5);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $M.9 := 2;
    call {:si_unique_call 193} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_oz_elt_buf"} boogie_si_record_i32(2);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_193:
    assume !assertsPassed;
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 251599);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_oz_cdev: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_oz_cdev == $sub.ref(0, 252631);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_oz_cdev();
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_oz_cdev()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i0 := $M.10;
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i3 := $M.10;
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} ldv_assume($i5);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 196} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_oz_cdev"} boogie_si_record_i32(1);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_196:
    assume !assertsPassed;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 253663);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} _raw_spin_unlock($p2);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 254695);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_oz_cdev: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_oz_cdev == $sub.ref(0, 255727);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_oz_cdev();
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_oz_cdev()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i0 := $M.10;
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $i3 := $M.10;
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} ldv_assume($i5);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $M.10 := 2;
    call {:si_unique_call 200} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_oz_cdev"} boogie_si_record_i32(2);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 256759);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} _raw_spin_lock($p2);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 257791);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 258823);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 203} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} $p2 := ldv_kzalloc($i0, $i1);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_202:
    assume !assertsPassed;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 259855);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, $i1);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    return;
}



const ether_addr_equal: ref;

axiom ether_addr_equal == $sub.ref(0, 260887);

procedure ether_addr_equal($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ether_addr_equal($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i6 := $xor.i32($i3, $i5);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(4, 2));
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.1, $p8);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(4, 2));
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.1, $p12);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i15 := $xor.i32($i10, $i14);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i6, $i15);
    call {:si_unique_call 206} {:cexpr "fold"} boogie_si_record_i32($i16);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;
}



const oz_pd_get: ref;

axiom oz_pd_get == $sub.ref(0, 261919);

procedure oz_pd_get($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation oz_pd_get($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(16, 1));
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} atomic_inc($p1);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    return;
}



const ldv_kzalloc: ref;

axiom ldv_kzalloc == $sub.ref(0, 262951);

procedure ldv_kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $CurrAddr;



implementation ldv_kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} {:cexpr "ldv_kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 209} {:cexpr "ldv_kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} ldv_check_alloc_flags($i1);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $p2 := ldv_zalloc($i0);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} ldv_after_alloc($p2);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 263983);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} ldv_linux_alloc_irq_check_alloc_flags($i0);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} ldv_linux_alloc_usb_lock_check_alloc_flags($i0);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  SeqInstr_208:
    assume !assertsPassed;
    return;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 265015);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $p1 := ldv_calloc(1, $i0);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_after_alloc: ref;

axiom ldv_after_alloc == $sub.ref(0, 266047);

procedure ldv_after_alloc($p0: ref);
  free requires assertsPassed;



implementation ldv_after_alloc($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    return;
}



const ldv_calloc: ref;

axiom ldv_calloc == $sub.ref(0, 267079);

procedure ldv_calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation ldv_calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} {:cexpr "ldv_calloc:arg:nmemb"} boogie_si_record_i64($i0);
    call {:si_unique_call 219} {:cexpr "ldv_calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} $i2 := ldv_undef_int();
    call {:si_unique_call 221} {:cexpr "tmp___1"} boogie_si_record_i32($i2);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} $p4 := calloc($i0, $i1);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} ldv_assume($i7);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $i8 := ldv_is_err($p4);
    call {:si_unique_call 225} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} ldv_assume($i10);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p11 := $p4;
    goto $bb3;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 268111);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 1} true;
    call {:si_unique_call 227} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 228} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 229} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 269143);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 4294967295);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_linux_alloc_irq_check_alloc_flags: ref;

axiom ldv_linux_alloc_irq_check_alloc_flags == $sub.ref(0, 270175);

procedure ldv_linux_alloc_irq_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_alloc_irq_check_alloc_flags($i0: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i6: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} {:cexpr "ldv_linux_alloc_irq_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} $i1 := ldv_in_interrupt_context();
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 232} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 32);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i6);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} ldv_assert_linux_alloc_irq__wrong_flags($i8);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb5;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const ldv_linux_alloc_usb_lock_check_alloc_flags: ref;

axiom ldv_linux_alloc_usb_lock_check_alloc_flags == $sub.ref(0, 271207);

procedure ldv_linux_alloc_usb_lock_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_alloc_usb_lock_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i5: i1;
  var $i4: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} {:cexpr "ldv_linux_alloc_usb_lock_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i1 := $M.11;
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 16);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 32);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i4 := $i5;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i4);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} ldv_assert_linux_alloc_usb_lock__wrong_flags($i6);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb4;
}



const ldv_assert_linux_alloc_usb_lock__wrong_flags: ref;

axiom ldv_assert_linux_alloc_usb_lock__wrong_flags == $sub.ref(0, 272239);

procedure ldv_assert_linux_alloc_usb_lock__wrong_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_alloc_usb_lock__wrong_flags($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} {:cexpr "ldv_assert_linux_alloc_usb_lock__wrong_flags:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 1} true;
    call {:si_unique_call 237} __VERIFIER_error();
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_alloc_irq__wrong_flags: ref;

axiom ldv_assert_linux_alloc_irq__wrong_flags == $sub.ref(0, 273271);

procedure ldv_assert_linux_alloc_irq__wrong_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_alloc_irq__wrong_flags($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} {:cexpr "ldv_assert_linux_alloc_irq__wrong_flags:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 1} true;
    call {:si_unique_call 239} __VERIFIER_error();
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const oz_app_enable: ref;

axiom oz_app_enable == $sub.ref(0, 274303);

procedure oz_app_enable($i0: i32, $i1: i32);
  free requires assertsPassed;
  modifies $M.12, $M.13, assertsPassed;



implementation oz_app_enable($i0: i32, $i1: i32)
{
  var $i2: i1;
  var $i3: i1;
  var $i4: i16;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;
  var $i11: i16;
  var $i12: i32;
  var $i13: i32;
  var $i14: i16;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} {:cexpr "oz_app_enable:arg:app_id"} boogie_si_record_i32($i0);
    call {:si_unique_call 241} {:cexpr "oz_app_enable:arg:enable"} boogie_si_record_i32($i1);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i2 := $sle.i32($i0, 4);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} ldv_spin_lock_bh_121(g_polling_lock);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i1, 0);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i3 == 1);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i11 := $M.12;
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i12 := $sext.i16.i32($i11);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i13 := $shl.i32(1, $i0);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i15 := $sext.i16.i32($i14);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i16 := $xor.i32($i15, $sub.i32(0, 1));
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i12, $i16);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $M.12 := $i18;
    call {:si_unique_call 244} {:cexpr "g_apps"} boogie_si_record_i16($i18);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} ldv_spin_unlock_bh_122(g_polling_lock);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i3 == 1;
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i4 := $M.12;
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i5 := $sext.i16.i32($i4);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i6 := $shl.i32(1, $i0);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i8 := $sext.i16.i32($i7);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i5, $i8);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $M.12 := $i10;
    call {:si_unique_call 243} {:cexpr "g_apps"} boogie_si_record_i16($i10);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_226:
    assume !assertsPassed;
    return;
}



const ldv_spin_lock_bh_121: ref;

axiom ldv_spin_lock_bh_121 == $sub.ref(0, 275335);

procedure ldv_spin_lock_bh_121($p0: ref);
  free requires assertsPassed;
  modifies $M.13, assertsPassed;



implementation ldv_spin_lock_bh_121($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} ldv_linux_kernel_locking_spinlock_spin_lock_g_polling_lock();
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} spin_lock_bh($p0);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_bh_122: ref;

axiom ldv_spin_unlock_bh_122 == $sub.ref(0, 276367);

procedure ldv_spin_unlock_bh_122($p0: ref);
  free requires assertsPassed;
  modifies $M.13, assertsPassed;



implementation ldv_spin_unlock_bh_122($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} ldv_linux_kernel_locking_spinlock_spin_unlock_g_polling_lock();
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} spin_unlock_bh($p0);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_235:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_g_polling_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_g_polling_lock == $sub.ref(0, 277399);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_g_polling_lock();
  free requires assertsPassed;
  modifies $M.13, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_g_polling_lock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i0 := $M.13;
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i3 := $M.13;
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} ldv_assume($i5);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $M.13 := 1;
    call {:si_unique_call 252} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_g_polling_lock"} boogie_si_record_i32(1);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_238:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_g_polling_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_g_polling_lock == $sub.ref(0, 278431);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_g_polling_lock();
  free requires assertsPassed;
  modifies $M.13, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_g_polling_lock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i0 := $M.13;
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i3 := $M.13;
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} ldv_assume($i5);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $M.13 := 2;
    call {:si_unique_call 255} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_g_polling_lock"} boogie_si_record_i32(2);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_241:
    assume !assertsPassed;
    return;
}



const oz_usb_get: ref;

axiom oz_usb_get == $sub.ref(0, 279463);

procedure oz_usb_get($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation oz_usb_get($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} atomic_inc($p2);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    return;
}



const oz_hcd_data_ind: ref;

axiom oz_hcd_data_ind == $sub.ref(0, 280495);

procedure oz_hcd_data_ind($p0: ref, $i1: i8, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.1, $M.16, assertsPassed, $M.15;



implementation oz_hcd_data_ind($p0: ref, $i1: i8, $p2: ref, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p46: ref;
  var $i47: i32;
  var $i45: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p58: ref;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} {:cexpr "oz_hcd_data_ind:arg:endpoint"} boogie_si_record_i8($i1);
    call {:si_unique_call 258} {:cexpr "oz_hcd_data_ind:arg:data_len"} boogie_si_record_i32($i3);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 400)), $mul.ref(16, 1));
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} ldv_spin_lock_bh_126($p7);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i1);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 15);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref($i10, 8));
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p13, $mul.ref(0, 96)), $mul.ref(57, 1));
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.1, $p16);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 3);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 3);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p13, $mul.ref(0, 96)), $mul.ref(57, 1));
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.1, $p21);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 3);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 2);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p13, $mul.ref(0, 96)), $mul.ref(57, 1));
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.1, $p26);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 3);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 1);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p6, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} ldv_spin_unlock_bh_127($p58);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} vslice_dummy_var_136 := oz_hcd_buffer_data($p13, $p2, $i3);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb9:
    assume $i25 == 1;
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p13, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} $i32 := list_empty($p31);
    call {:si_unique_call 262} {:cexpr "tmp"} boogie_si_record_i32($i32);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} vslice_dummy_var_137 := oz_hcd_buffer_data($p13, $p2, $i3);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb18:
    assume $i33 == 1;
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.1, $p35);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} list_del_init($p38);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p6, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} ldv_spin_unlock_bh_127($p39);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p37, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.1, $p40);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} oz_free_urb_link($p37);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.1, $p42);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $i44 := $ule.i32($i3, $i43);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i44 == 1);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p41, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.1, $p46);
    call {:si_unique_call 268} {:cexpr "copy_len"} boogie_si_record_i32($i47);
    assume {:verifier.code 0} true;
    $i45 := $i47;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p41, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.1, $p48);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i45);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.1;
    cmdloc_dummy_var_10 := $M.1;
    call {:si_unique_call 269} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p49, $p2, $i50, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_11;
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p41, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p51, $i45);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 400)), $mul.ref(16, 1));
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.1, $p52);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 3344)), $mul.ref(3336, 1));
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.1, $p54);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} oz_complete_urb($p55, $p41, 0);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i44 == 1;
    call {:si_unique_call 267} {:cexpr "oz_hcd_data_ind:arg:copy_len"} boogie_si_record_i32($i3);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i45 := $i3;
    goto $bb22;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_244:
    assume !assertsPassed;
    return;
}



const oz_usb_put: ref;

axiom oz_usb_put == $sub.ref(0, 281527);

procedure oz_usb_put($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation oz_usb_put($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $i3 := atomic_dec_and_test($p2);
    call {:si_unique_call 273} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} oz_pd_put($p6);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} kfree($p7);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_spin_lock_bh_126: ref;

axiom ldv_spin_lock_bh_126 == $sub.ref(0, 282559);

procedure ldv_spin_lock_bh_126($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_spin_lock_bh_126($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} ldv_linux_kernel_locking_spinlock_spin_lock_hcd_lock_of_oz_hcd();
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} spin_lock_bh($p0);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_256:
    assume !assertsPassed;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 283591);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_spin_unlock_bh_127: ref;

axiom ldv_spin_unlock_bh_127 == $sub.ref(0, 284623);

procedure ldv_spin_unlock_bh_127($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_spin_unlock_bh_127($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} ldv_linux_kernel_locking_spinlock_spin_unlock_hcd_lock_of_oz_hcd();
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} spin_unlock_bh($p0);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_259:
    assume !assertsPassed;
    return;
}



const oz_free_urb_link: ref;

axiom oz_free_urb_link == $sub.ref(0, 285655);

procedure oz_free_urb_link($p0: ref);
  free requires assertsPassed;



implementation oz_free_urb_link($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p3 := $M.14;
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} kmem_cache_free($p3, $p4);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const oz_complete_urb: ref;

axiom oz_complete_urb == $sub.ref(0, 286687);

procedure oz_complete_urb($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.1, $M.15, assertsPassed;



implementation oz_complete_urb($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} {:cexpr "oz_complete_urb:arg:status"} boogie_si_record_i32($i2);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $p3 := oz_hcd_private($p0);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_122(g_tasklet_lock);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} usb_hcd_unlink_urb_from_ep($p0, $p1);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, $0.ref);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $p5 := oz_uncancel_urb($p3, $p1);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} ldv_spin_unlock_123(g_tasklet_lock);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} $i6 := oz_forget_urb($p1);
    call {:si_unique_call 288} {:cexpr "tmp___1"} boogie_si_record_i32($i6);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} atomic_dec(g_pending_urbs);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} usb_hcd_giveback_urb($p0, $p1, $i2);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} ldv_spin_lock_124(g_tasklet_lock);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} ldv_spin_unlock_irqrestore_125(g_tasklet_lock, $u0);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} oz_free_urb_link($p5);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;
}



const oz_hcd_buffer_data: ref;

axiom oz_hcd_buffer_data == $sub.ref(0, 287719);

procedure oz_hcd_buffer_data($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation oz_hcd_buffer_data($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i8;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i64;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $p56: ref;
  var $i57: i32;
  var $i58: i64;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $p74: ref;
  var $i7: i32;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} {:cexpr "oz_hcd_buffer_data:arg:data_len"} boogie_si_record_i32($i2);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(76, 1));
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.1, $p10);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32($i9, $i11);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, $sub.i32(0, 1));
    call {:si_unique_call 295} {:cexpr "space"} boogie_si_record_i32($i13);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i18 := $i13;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i2, 1);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i18, $i19);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i2);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(76, 1));
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.1, $p24);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p23, $mul.ref($i26, 1));
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p27, $i21);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(76, 1));
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.1, $p28);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i29, 1);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(76, 1));
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p31, $i30);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(76, 1));
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.1, $p32);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.1, $p34);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i33, $i35);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.1, $p38);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(76, 1));
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.1, $p40);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i39, $i41);
    call {:si_unique_call 297} {:cexpr "copy_len"} boogie_si_record_i32($i42);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i43 := $sgt.i32($i42, $i2);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $i42;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.1, $p45);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(76, 1));
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.1, $p47);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i48);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p46, $mul.ref($i49, 1));
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i44);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.1;
    cmdloc_dummy_var_13 := $M.1;
    call {:si_unique_call 299} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p50, $p1, $i51, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_14;
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i44, $i2);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i52 == 1);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(76, 1));
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.1, $p61);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i62, $i44);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(76, 1));
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p64, $i63);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(76, 1));
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.1, $p65);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.1, $p67);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i66, $i68);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(84, 1));
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.1, $p71);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i72, 1);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(84, 1));
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p74, $i73);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb20:
    assume $i69 == 1;
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(76, 1));
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p70, 0);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i52 == 1;
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.1, $p53);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i44);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p1, $mul.ref($i55, 1));
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32($i2, $i44);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i57);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.1;
    cmdloc_dummy_var_16 := $M.1;
    call {:si_unique_call 300} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p54, $p56, $i58, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_17;
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i59 := $sub.i32($i2, $i44);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(76, 1));
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p60, $i59);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i43 == 1;
    call {:si_unique_call 298} {:cexpr "oz_hcd_buffer_data:arg:copy_len"} boogie_si_record_i32($i2);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i44 := $i2;
    goto $bb16;

  $bb11:
    assume $i36 == 1;
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(76, 1));
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p37, 0);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 1);
    goto $bb3;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.1, $p15);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i13, $i16);
    call {:si_unique_call 296} {:cexpr "space"} boogie_si_record_i32($i17);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 1);
    goto $bb3;
}



const oz_hcd_private: ref;

axiom oz_hcd_private == $sub.ref(0, 288751);

procedure oz_hcd_private($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation oz_hcd_private($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(968, 1));
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_122: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_122 == $sub.ref(0, 289783);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_122($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_122($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} ldv_linux_kernel_locking_spinlock_spin_lock_g_tasklet_lock();
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;
}



const usb_hcd_unlink_urb_from_ep: ref;

axiom usb_hcd_unlink_urb_from_ep == $sub.ref(0, 290815);

procedure usb_hcd_unlink_urb_from_ep($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation usb_hcd_unlink_urb_from_ep($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    return;
}



const oz_uncancel_urb: ref;

axiom oz_uncancel_urb == $sub.ref(0, 291847);

procedure oz_uncancel_urb($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation oz_uncancel_urb($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p11: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(88, 1));
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i7, $i9);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p19 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $r := $p19;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p11 := $p4;
    goto $bb4;

  $bb4:
    call $i12, $p13, $p14, $i15, $i16, $p17, $p21, $p22, $p23, $p24, $i25, $i26, $p11 := oz_uncancel_urb_loop_$bb4($p1, $i9, $i12, $p13, $p14, $i15, $i16, $p17, $p21, $p22, $p23, $p24, $i25, $i26, $p11);
    goto $bb4_last;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p1);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i12, $i15);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p17 := $p11;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, $i9);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $p11 := $p22;
    goto $bb10_dummy;

  $bb6:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} list_del_init($p18);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $p19 := $p17;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1587;
}



const ldv_spin_unlock_123: ref;

axiom ldv_spin_unlock_123 == $sub.ref(0, 292879);

procedure ldv_spin_unlock_123($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_spin_unlock_123($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} ldv_linux_kernel_locking_spinlock_spin_unlock_g_tasklet_lock();
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} spin_unlock($p0);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;
}



const oz_forget_urb: ref;

axiom oz_forget_urb == $sub.ref(0, 293911);

procedure oz_forget_urb($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation oz_forget_urb($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const atomic_dec: ref;

axiom atomic_dec == $sub.ref(0, 294943);

procedure atomic_dec($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation atomic_dec($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} ldv_linux_usb_dev_atomic_dec($p0);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    return;
}



const usb_hcd_giveback_urb: ref;

axiom usb_hcd_giveback_urb == $sub.ref(0, 295975);

procedure usb_hcd_giveback_urb($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation usb_hcd_giveback_urb($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} {:cexpr "usb_hcd_giveback_urb:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_124: ref;

axiom ldv_spin_lock_124 == $sub.ref(0, 297007);

procedure ldv_spin_lock_124($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_spin_lock_124($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} ldv_linux_kernel_locking_spinlock_spin_lock_g_tasklet_lock();
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} spin_lock($p0);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_280:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_irqrestore_125: ref;

axiom ldv_spin_unlock_irqrestore_125 == $sub.ref(0, 298039);

procedure ldv_spin_unlock_irqrestore_125($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_spin_unlock_irqrestore_125($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} {:cexpr "ldv_spin_unlock_irqrestore_125:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} ldv_linux_kernel_locking_spinlock_spin_unlock_g_tasklet_lock();
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} spin_unlock_irqrestore($p0, $i1);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_283:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_g_tasklet_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_g_tasklet_lock == $sub.ref(0, 299071);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_g_tasklet_lock();
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_g_tasklet_lock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i0 := $M.15;
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i3 := $M.15;
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} ldv_assume($i5);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $M.15 := 1;
    call {:si_unique_call 315} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_g_tasklet_lock"} boogie_si_record_i32(1);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 300103);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 301135);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_g_tasklet_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_g_tasklet_lock == $sub.ref(0, 302167);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_g_tasklet_lock();
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_g_tasklet_lock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i0 := $M.15;
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i3 := $M.15;
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} ldv_assume($i5);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $M.15 := 2;
    call {:si_unique_call 321} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_g_tasklet_lock"} boogie_si_record_i32(2);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_289:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_dev_atomic_dec: ref;

axiom ldv_linux_usb_dev_atomic_dec == $sub.ref(0, 303199);

procedure ldv_linux_usb_dev_atomic_dec($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_linux_usb_dev_atomic_dec($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.1, $p1);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32($i2, 1);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p4, $i3);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    return;
}



const __ldv_linux_kernel_locking_spinlock_spin_lock: ref;

axiom __ldv_linux_kernel_locking_spinlock_spin_lock == $sub.ref(0, 304231);

procedure __ldv_linux_kernel_locking_spinlock_spin_lock($p0: ref);
  free requires assertsPassed;



implementation __ldv_linux_kernel_locking_spinlock_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_hcd_lock_of_oz_hcd: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_hcd_lock_of_oz_hcd == $sub.ref(0, 305263);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_hcd_lock_of_oz_hcd();
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_hcd_lock_of_oz_hcd()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $i0 := $M.16;
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i3 := $M.16;
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} ldv_assume($i5);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 324} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_hcd_lock_of_oz_hcd"} boogie_si_record_i32(1);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_hcd_lock_of_oz_hcd: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_hcd_lock_of_oz_hcd == $sub.ref(0, 306295);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_hcd_lock_of_oz_hcd();
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_hcd_lock_of_oz_hcd()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i0 := $M.16;
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i3 := $M.16;
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} ldv_assume($i5);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $M.16 := 2;
    call {:si_unique_call 327} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_hcd_lock_of_oz_hcd"} boogie_si_record_i32(2);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;
}



const oz_hcd_heartbeat: ref;

axiom oz_hcd_heartbeat == $sub.ref(0, 307327);

procedure oz_hcd_heartbeat($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.17, $M.16, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, assertsPassed, $M.42, $M.15, $M.41, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation oz_hcd_heartbeat($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $p81: ref;
  var $i82: i32;
  var $p83: ref;
  var $i84: i32;
  var $i85: i32;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $i95: i32;
  var $i96: i1;
  var $p67: ref;
  var $p80: ref;
  var $p26: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i64;
  var $i104: i1;
  var $p22: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p110: ref;
  var $p111: ref;
  var $p113: ref;
  var $i114: i64;
  var $i115: i64;
  var $i116: i1;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i32;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i8;
  var $i129: i32;
  var $i130: i8;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p137: ref;
  var $p138: ref;
  var $p140: ref;
  var $i141: i64;
  var $i142: i1;
  var $p117: ref;
  var $p118: ref;
  var $p143: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $i150: i64;
  var $p151: ref;
  var $i152: i64;
  var $i153: i1;
  var $p155: ref;
  var $i156: i32;
  var $i157: i32;
  var $i158: i1;
  var $p159: ref;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $i163: i32;
  var $i164: i32;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $i175: i64;
  var $p176: ref;
  var $i177: i64;
  var $p178: ref;
  var $p179: ref;
  var $i180: i64;
  var $p181: ref;
  var $i182: i64;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $i186: i64;
  var $p187: ref;
  var $i188: i64;
  var $p189: ref;
  var $p190: ref;
  var $i191: i64;
  var $i192: i64;
  var $p193: ref;
  var $i194: i32;
  var $i195: i32;
  var $i196: i32;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $p206: ref;
  var $p207: ref;
  var $i209: i64;
  var $i210: i64;
  var $i211: i1;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $i218: i32;
  var $p219: ref;
  var $i220: i32;
  var $i221: i1;
  var $p223: ref;
  var $i224: i32;
  var $p225: ref;
  var $i226: i32;
  var $i227: i1;
  var $p228: ref;
  var $p229: ref;
  var $i230: i32;
  var $i231: i1;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $i236: i32;
  var $i237: i64;
  var $p238: ref;
  var $i239: i8;
  var $i240: i32;
  var $p241: ref;
  var $i242: i32;
  var $i243: i32;
  var $p244: ref;
  var $p245: ref;
  var $i246: i32;
  var $p247: ref;
  var $i248: i32;
  var $i249: i1;
  var $p250: ref;
  var $p251: ref;
  var $i252: i32;
  var $p253: ref;
  var $i254: i32;
  var $i255: i32;
  var $i256: i1;
  var $i257: i32;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $i263: i32;
  var $i264: i64;
  var $p265: ref;
  var $i266: i64;
  var $i267: i1;
  var $p268: ref;
  var $p269: ref;
  var $i270: i64;
  var $p271: ref;
  var $p272: ref;
  var $p273: ref;
  var $i274: i32;
  var $i275: i64;
  var $i276: i32;
  var $p277: ref;
  var $p278: ref;
  var $i279: i32;
  var $i280: i32;
  var $p281: ref;
  var $p282: ref;
  var $i283: i32;
  var $p284: ref;
  var $i285: i32;
  var $i286: i1;
  var $p287: ref;
  var $p288: ref;
  var $i289: i32;
  var $i290: i64;
  var $p293: ref;
  var $p294: ref;
  var $i295: i32;
  var $i296: i32;
  var $p297: ref;
  var $i298: i64;
  var $p301: ref;
  var $i302: i64;
  var $p305: ref;
  var $i306: i32;
  var $i307: i32;
  var $i308: i1;
  var $i232: i32;
  var $p309: ref;
  var $i310: i32;
  var $p311: ref;
  var $i312: i32;
  var $i313: i32;
  var $p314: ref;
  var $p315: ref;
  var $p316: ref;
  var $i317: i32;
  var $p318: ref;
  var $p319: ref;
  var $i320: i32;
  var $p321: ref;
  var $i322: i32;
  var $i323: i32;
  var $p324: ref;
  var $p325: ref;
  var $p326: ref;
  var $i327: i32;
  var $p328: ref;
  var $i329: i32;
  var $i330: i32;
  var $p331: ref;
  var $p333: ref;
  var $p334: ref;
  var $i336: i64;
  var $i337: i1;
  var $p213: ref;
  var $p214: ref;
  var $p212: ref;
  var $p222: ref;
  var $p171: ref;
  var $p339: ref;
  var $p340: ref;
  var $p341: ref;
  var $p342: ref;
  var $p343: ref;
  var $i344: i64;
  var $i345: i1;
  var $p154: ref;
  var $p346: ref;
  var $i347: i32;
  var $i348: i1;
  var $p350: ref;
  var $i351: i32;
  var $i352: i1;
  var $i353: i32;
  var $i349: i32;
  var $p354: ref;
  var $p355: ref;
  var $p356: ref;
  var $p357: ref;
  var $p359: ref;
  var $p360: ref;
  var $p362: ref;
  var $i363: i64;
  var $i364: i64;
  var $i365: i1;
  var $p368: ref;
  var $p369: ref;
  var $p370: ref;
  var $p371: ref;
  var $p372: ref;
  var $p373: ref;
  var $p374: ref;
  var $p376: ref;
  var $p377: ref;
  var $p379: ref;
  var $i380: i64;
  var $i381: i1;
  var $p366: ref;
  var $p367: ref;
  var $p383: ref;
  var $p384: ref;
  var $i385: i64;
  var $i386: i1;
  var $p387: ref;
  var $p389: ref;
  var $p390: ref;
  var $p391: ref;
  var $p393: ref;
  var $p394: ref;
  var $i396: i64;
  var $i397: i64;
  var $i398: i1;
  var $p401: ref;
  var $i402: i32;
  var $i403: i1;
  var $p404: ref;
  var $p405: ref;
  var $p406: ref;
  var $i407: i32;
  var $i408: i32;
  var $p409: ref;
  var $p411: ref;
  var $p412: ref;
  var $i414: i64;
  var $i415: i1;
  var $p399: ref;
  var $p400: ref;
  var $p416: ref;
  var $i417: i32;
  var $i418: i1;
  var $i419: i32;
  var $p420: ref;
  var $p421: ref;
  var $p422: ref;
  var $p423: ref;
  var $p425: ref;
  var $p426: ref;
  var $p428: ref;
  var $i429: i64;
  var $i430: i64;
  var $i431: i1;
  var $p434: ref;
  var $p435: ref;
  var $p437: ref;
  var $p438: ref;
  var $p440: ref;
  var $i441: i64;
  var $i442: i1;
  var $p432: ref;
  var $p433: ref;
  var $i443: i32;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var vslice_dummy_var_138: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $p5 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 400)), $mul.ref(16, 1));
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, $p1);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, $p1);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} getrawmonotonic($p2);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} ldv_spin_lock_bh_126($p11);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 400)), $mul.ref(368, 1)), $mul.ref(0, 1));
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref($sub.ref(0, 16), 96));
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p15, $mul.ref($sub.ref(0, 16), 96)), $mul.ref(16, 1));
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 400)), $mul.ref(368, 1));
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i18, $i20);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p8, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} ldv_spin_unlock_bh_127($p105);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.1, $p106);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p107);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p108, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.1, $p110);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p108, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i114 := $p2i.ref.i64($p113);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i115 := $p2i.ref.i64($p1);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i116 := $ne.i64($i114, $i115);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i116 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p8, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} ldv_spin_lock_bh_126($p143);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 400)), $mul.ref(384, 1)), $mul.ref(0, 1));
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.1, $p145);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $p147 := $bitcast.ref.ref($p146);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($p147, $mul.ref($sub.ref(0, 16), 96));
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p147, $mul.ref($sub.ref(0, 16), 96)), $mul.ref(16, 1));
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i150 := $p2i.ref.i64($p149);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p6, $mul.ref(0, 400)), $mul.ref(384, 1));
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i152 := $p2i.ref.i64($p151);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i153 := $ne.i64($i150, $i152);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i153 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p6, $mul.ref(0, 400)), $mul.ref(368, 1));
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $i347 := list_empty($p346);
    call {:si_unique_call 367} {:cexpr "tmp___4"} boogie_si_record_i32($i347);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i348 := $eq.i32($i347, 0);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    assume {:branchcond $i348} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i348 == 1);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($p6, $mul.ref(0, 400)), $mul.ref(384, 1));
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $i351 := list_empty($p350);
    call {:si_unique_call 369} {:cexpr "tmp___5"} boogie_si_record_i32($i351);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i352 := $eq.i32($i351, 0);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    assume {:branchcond $i352} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i352 == 1);
    assume {:verifier.code 0} true;
    $i353 := 0;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i349 := $i353;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($p8, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} ldv_spin_unlock_bh_127($p354);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $p356 := $load.ref($M.1, $p355);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $p357 := $bitcast.ref.ref($p356);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($add.ref($p357, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $p360 := $load.ref($M.1, $p359);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p357, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i363 := $p2i.ref.i64($p362);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i364 := $p2i.ref.i64($p1);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i365 := $ne.i64($i363, $i364);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    assume {:branchcond $i365} true;
    goto $bb97, $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    assume !($i365 == 1);
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(0, 8));
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $p384 := $load.ref($M.1, $p383);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i385 := $p2i.ref.i64($p384);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i386 := $ne.i64($i385, 0);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i386} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i386 == 1);
    assume {:verifier.code 0} true;
    $i443 := $i349;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $r := $i443;
    return;

  $bb105:
    assume $i386 == 1;
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($p8, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} ldv_spin_lock_bh_126($p387);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($add.ref($p384, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $p390 := $load.ref($M.1, $p389);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $p391 := $bitcast.ref.ref($p390);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($add.ref($p391, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $p394 := $load.ref($M.1, $p393);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i396 := $p2i.ref.i64($p391);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i397 := $p2i.ref.i64($p384);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i398 := $ne.i64($i396, $i397);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    assume {:branchcond $i398} true;
    goto $bb107, $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume !($i398 == 1);
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($add.ref($p384, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $i417 := list_empty($p416);
    call {:si_unique_call 377} {:cexpr "tmp___7"} boogie_si_record_i32($i417);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i418 := $eq.i32($i417, 0);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    assume {:branchcond $i418} true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i418 == 1);
    assume {:verifier.code 0} true;
    $i419 := $i349;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref($p8, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} ldv_spin_unlock_bh_127($p420);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $p422 := $load.ref($M.1, $p421);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $p423 := $bitcast.ref.ref($p422);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($add.ref($p423, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $p426 := $load.ref($M.1, $p425);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $p428 := $add.ref($add.ref($p423, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i429 := $p2i.ref.i64($p428);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i430 := $p2i.ref.i64($p1);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $i431 := $ne.i64($i429, $i430);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    assume {:branchcond $i431} true;
    goto $bb121, $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    assume !($i431 == 1);
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i443 := $i419;
    goto $bb129;

  $bb121:
    assume $i431 == 1;
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p432, $p433 := $p422, $p426;
    goto $bb124;

  $bb124:
    call $p434, $p435, $p437, $p438, $p440, $i441, $i442, $p432, $p433 := oz_hcd_heartbeat_loop_$bb124($p8, $i430, $p434, $p435, $p437, $p438, $p440, $i441, $i442, $p432, $p433);
    goto $bb124_last;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $p434 := $add.ref($add.ref($p432, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $p435 := $load.ref($M.1, $p434);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} oz_process_ep0_urb($p8, $p435, 32);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} oz_free_urb_link($p432);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p437 := $add.ref($add.ref($add.ref($p433, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p438 := $load.ref($M.1, $p437);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p440 := $add.ref($add.ref($p433, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i441 := $p2i.ref.i64($p440);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i442 := $ne.i64($i441, $i430);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i442 == 1);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb126:
    assume $i442 == 1;
    assume {:verifier.code 0} true;
    $p432, $p433 := $p433, $p438;
    goto $bb126_dummy;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  $bb118:
    assume $i418 == 1;
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i419 := 1;
    goto $bb120;

  $bb107:
    assume $i398 == 1;
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $p399, $p400 := $p390, $p394;
    goto $bb110;

  $bb110:
    call $p401, $i402, $i403, $p404, $p405, $p406, $i407, $i408, $p409, $p411, $p412, $i414, $i415, $p399, $p400 := oz_hcd_heartbeat_loop_$bb110($p1, $i397, $p401, $i402, $i403, $p404, $p405, $p406, $i407, $i408, $p409, $p411, $p412, $i414, $i415, $p399, $p400);
    goto $bb110_last;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($p399, $mul.ref(0, 40)), $mul.ref(36, 1));
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i402 := $load.i32($M.1, $p401);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i403 := $ugt.i32($i402, 13);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i403 == 1);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $p406 := $add.ref($add.ref($p399, $mul.ref(0, 40)), $mul.ref(36, 1));
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i407 := $load.i32($M.1, $p406);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i408 := $add.i32($i407, 1);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($p399, $mul.ref(0, 40)), $mul.ref(36, 1));
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p409, $i408);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($add.ref($p400, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $p412 := $load.ref($M.1, $p411);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $i414 := $p2i.ref.i64($p400);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i415 := $ne.i64($i414, $i397);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i415 == 1);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb115:
    assume $i415 == 1;
    assume {:verifier.code 0} true;
    $p399, $p400 := $p400, $p412;
    goto $bb115_dummy;

  $bb112:
    assume $i403 == 1;
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($add.ref($p399, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} list_move_tail($p404, $p1);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($p399, $mul.ref(0, 40)), $mul.ref(36, 1));
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p405, 0);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    goto $bb114;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  $bb97:
    assume $i365 == 1;
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $p366, $p367 := $p356, $p360;
    goto $bb100;

  $bb100:
    call $p368, $p369, $p370, $p371, $p372, $p373, $p374, $p376, $p377, $p379, $i380, $i381, $p366, $p367 := oz_hcd_heartbeat_loop_$bb100($p6, $i364, $p368, $p369, $p370, $p371, $p372, $p373, $p374, $p376, $p377, $p379, $i380, $i381, $p366, $p367);
    goto $bb100_last;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($p366, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p369 := $load.ref($M.1, $p368);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($add.ref($p366, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} list_del_init($p370);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} oz_free_urb_link($p366);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p6, $mul.ref(0, 400)), $mul.ref(16, 1));
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p372 := $load.ref($M.1, $p371);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($p372, $mul.ref(0, 3344)), $mul.ref(3336, 1));
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p374 := $load.ref($M.1, $p373);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} oz_complete_urb($p374, $p369, 0);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($add.ref($p367, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $p377 := $load.ref($M.1, $p376);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($add.ref($p367, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i380 := $p2i.ref.i64($p379);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i381 := $ne.i64($i380, $i364);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i381 == 1);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb102:
    assume $i381 == 1;
    assume {:verifier.code 0} true;
    $p366, $p367 := $p367, $p377;
    goto $bb102_dummy;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  $bb94:
    assume $i352 == 1;
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i353 := 1;
    goto $bb96;

  $bb91:
    assume $i348 == 1;
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i349 := 1;
    goto $bb93;

  $bb41:
    assume $i153 == 1;
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $p154 := $p148;
    goto $bb44;

  $bb44:
    call $p155, $i156, $i157, $i158, $p159, $i160, $i161, $p162, $i163, $i164, $p165, $p166, $p167, $p168, $p169, $p170, $p172, $p173, $p174, $i175, $p176, $i177, $p178, $p179, $i180, $p181, $i182, $p183, $p184, $p185, $i186, $p187, $i188, $p189, $p190, $i191, $i192, $p193, $i194, $i195, $i196, $p197, $p198, $p199, $p200, $p202, $p203, $p204, $p206, $p207, $i209, $i210, $i211, $p215, $p216, $p217, $i218, $p219, $i220, $i221, $p223, $i224, $p225, $i226, $i227, $p228, $p229, $i230, $i231, $p233, $p234, $p235, $i236, $i237, $p238, $i239, $i240, $p241, $i242, $i243, $p244, $p245, $i246, $p247, $i248, $i249, $p250, $p251, $i252, $p253, $i254, $i255, $i256, $i257, $p258, $p259, $p260, $p261, $p262, $i263, $i264, $p265, $i266, $i267, $p268, $p269, $i270, $p271, $p272, $p273, $i274, $i275, $i276, $p277, $p278, $i279, $i280, $p281, $p282, $i283, $p284, $i285, $i286, $p287, $p288, $i289, $i290, $p293, $p294, $i295, $i296, $p297, $i298, $p301, $i302, $p305, $i306, $i307, $i308, $i232, $p309, $i310, $p311, $i312, $i313, $p314, $p315, $p316, $i317, $p318, $p319, $i320, $p321, $i322, $i323, $p324, $p325, $p326, $i327, $p328, $i329, $i330, $p331, $p333, $p334, $i336, $i337, $p213, $p214, $p212, $p222, $p171, $p339, $p340, $p341, $p342, $p343, $i344, $i345, $p154, cmdloc_dummy_var_24, cmdloc_dummy_var_25, cmdloc_dummy_var_26, cmdloc_dummy_var_27, cmdloc_dummy_var_28, cmdloc_dummy_var_29, cmdloc_dummy_var_30, cmdloc_dummy_var_31, cmdloc_dummy_var_32, cmdloc_dummy_var_33, cmdloc_dummy_var_34, cmdloc_dummy_var_35, cmdloc_dummy_var_36, cmdloc_dummy_var_37, cmdloc_dummy_var_38 := oz_hcd_heartbeat_loop_$bb44($p1, $p2, $p3, $p5, $i152, $p155, $i156, $i157, $i158, $p159, $i160, $i161, $p162, $i163, $i164, $p165, $p166, $p167, $p168, $p169, $p170, $p172, $p173, $p174, $i175, $p176, $i177, $p178, $p179, $i180, $p181, $i182, $p183, $p184, $p185, $i186, $p187, $i188, $p189, $p190, $i191, $i192, $p193, $i194, $i195, $i196, $p197, $p198, $p199, $p200, $p202, $p203, $p204, $p206, $p207, $i209, $i210, $i211, $p215, $p216, $p217, $i218, $p219, $i220, $i221, $p223, $i224, $p225, $i226, $i227, $p228, $p229, $i230, $i231, $p233, $p234, $p235, $i236, $i237, $p238, $i239, $i240, $p241, $i242, $i243, $p244, $p245, $i246, $p247, $i248, $i249, $p250, $p251, $i252, $p253, $i254, $i255, $i256, $i257, $p258, $p259, $p260, $p261, $p262, $i263, $i264, $p265, $i266, $i267, $p268, $p269, $i270, $p271, $p272, $p273, $i274, $i275, $i276, $p277, $p278, $i279, $i280, $p281, $p282, $i283, $p284, $i285, $i286, $p287, $p288, $i289, $i290, $p293, $p294, $i295, $i296, $p297, $i298, $p301, $i302, $p305, $i306, $i307, $i308, $i232, $p309, $i310, $p311, $i312, $i313, $p314, $p315, $p316, $i317, $p318, $p319, $i320, $p321, $i322, $i323, $p324, $p325, $p326, $i327, $p328, $i329, $i330, $p331, $p333, $p334, $i336, $i337, $p213, $p214, $p212, $p222, $p171, $p339, $p340, $p341, $p342, $p343, $i344, $i345, $p154, cmdloc_dummy_var_24, cmdloc_dummy_var_25, cmdloc_dummy_var_26, cmdloc_dummy_var_27, cmdloc_dummy_var_28, cmdloc_dummy_var_29, cmdloc_dummy_var_30, cmdloc_dummy_var_31, cmdloc_dummy_var_32, cmdloc_dummy_var_33, cmdloc_dummy_var_34, cmdloc_dummy_var_35, cmdloc_dummy_var_36, cmdloc_dummy_var_37, cmdloc_dummy_var_38);
    goto $bb44_last;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i156 := $load.i32($M.1, $p155);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i157 := $and.i32($i156, 1);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i158 := $ne.i32($i157, 0);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(32, 1));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $p173 := $bitcast.ref.ref($p2);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p173, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i175 := $load.i64($M.1, $p174);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p173, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i177 := $load.i64($M.1, $p176);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p178 := $bitcast.ref.ref($p172);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p178, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i180 := $load.i64($M.1, $p179);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p178, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i182 := $load.i64($M.1, $p181);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} $p183 := timespec_sub($i175, $i177, $i180, $i182);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p184 := $bitcast.ref.ref($p5);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p184, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i186 := $extractvalue($p183, 0);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, $p185, $i186);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p184, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i188 := $extractvalue($p183, 1);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, $p187, $i188);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $p189 := $bitcast.ref.ref($p3);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $p190 := $bitcast.ref.ref($p5);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.17;
    cmdloc_dummy_var_28 := $M.17;
    call {:si_unique_call 354} cmdloc_dummy_var_29 := $memcpy.i8(cmdloc_dummy_var_27, cmdloc_dummy_var_28, $p189, $p190, 16, $zext.i32.i64(8), 0 == 1);
    $M.17 := cmdloc_dummy_var_29;
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} $i191 := timespec_to_ns($p3);
    call {:si_unique_call 356} {:cexpr "tmp___2"} boogie_si_record_i64($i191);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} $i192 := div_u64($i191, 1000000);
    call {:si_unique_call 358} {:cexpr "tmp___3"} boogie_si_record_i64($i192);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i194 := $load.i32($M.1, $p193);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i195 := $trunc.i64.i32($i192);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i196 := $add.i32($i194, $i195);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p197, $i196);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(32, 1));
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p199 := $bitcast.ref.ref($p198);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p200 := $bitcast.ref.ref($p2);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.1;
    cmdloc_dummy_var_31 := $M.1;
    call {:si_unique_call 359} cmdloc_dummy_var_32 := $memcpy.i8(cmdloc_dummy_var_30, cmdloc_dummy_var_31, $p199, $p200, 16, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_32;
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p203 := $load.ref($M.1, $p202);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p204 := $bitcast.ref.ref($p203);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref($p204, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $p207 := $load.ref($M.1, $p206);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i209 := $p2i.ref.i64($p204);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i210 := $p2i.ref.i64($p154);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i211 := $ne.i64($i209, $i210);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p212 := $p154;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i211 == 1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p222 := $p212;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p171 := $p222;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($add.ref($p171, $mul.ref(0, 96)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $p340 := $load.ref($M.1, $p339);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $p341 := $bitcast.ref.ref($p340);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($p341, $mul.ref($sub.ref(0, 16), 96));
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($p341, $mul.ref($sub.ref(0, 16), 96)), $mul.ref(16, 1));
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i344 := $p2i.ref.i64($p343);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i345 := $ne.i64($i344, $i152);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i345 == 1);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb88:
    assume $i345 == 1;
    assume {:verifier.code 0} true;
    $p154 := $p342;
    goto $bb88_dummy;

  $bb53:
    assume $i211 == 1;
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $p213, $p214 := $p203, $p207;
    goto $bb56;

  $bb56:
    call $p215, $p216, $p217, $i218, $p219, $i220, $i221, $p223, $i224, $p225, $i226, $i227, $p228, $p229, $i230, $i231, $p233, $p234, $p235, $i236, $i237, $p238, $i239, $i240, $p241, $i242, $i243, $p244, $p245, $i246, $p247, $i248, $i249, $p250, $p251, $i252, $p253, $i254, $i255, $i256, $i257, $p258, $p259, $p260, $p261, $p262, $i263, $i264, $p265, $i266, $i267, $p268, $p269, $i270, $p271, $p272, $p273, $i274, $i275, $i276, $p277, $p278, $i279, $i280, $p281, $p282, $i283, $p284, $i285, $i286, $p287, $p288, $i289, $i290, $p293, $p294, $i295, $i296, $p297, $i298, $p301, $i302, $p305, $i306, $i307, $i308, $i232, $p309, $i310, $p311, $i312, $i313, $p314, $p315, $p316, $i317, $p318, $p319, $i320, $p321, $i322, $i323, $p324, $p325, $p326, $i327, $p328, $i329, $i330, $p331, $p333, $p334, $i336, $i337, $p213, $p214, cmdloc_dummy_var_33, cmdloc_dummy_var_34, cmdloc_dummy_var_35, cmdloc_dummy_var_36, cmdloc_dummy_var_37, cmdloc_dummy_var_38 := oz_hcd_heartbeat_loop_$bb56($p1, $i210, $p215, $p216, $p217, $i218, $p219, $i220, $i221, $p223, $i224, $p225, $i226, $i227, $p228, $p229, $i230, $i231, $p233, $p234, $p235, $i236, $i237, $p238, $i239, $i240, $p241, $i242, $i243, $p244, $p245, $i246, $p247, $i248, $i249, $p250, $p251, $i252, $p253, $i254, $i255, $i256, $i257, $p258, $p259, $p260, $p261, $p262, $i263, $i264, $p265, $i266, $i267, $p268, $p269, $i270, $p271, $p272, $p273, $i274, $i275, $i276, $p277, $p278, $i279, $i280, $p281, $p282, $i283, $p284, $i285, $i286, $p287, $p288, $i289, $i290, $p293, $p294, $i295, $i296, $p297, $i298, $p301, $i302, $p305, $i306, $i307, $i308, $i232, $p309, $i310, $p311, $i312, $i313, $p314, $p315, $p316, $i317, $p318, $p319, $i320, $p321, $i322, $i323, $p324, $p325, $p326, $i327, $p328, $i329, $i330, $p331, $p333, $p334, $i336, $i337, $p213, $p214, $p154, cmdloc_dummy_var_33, cmdloc_dummy_var_34, cmdloc_dummy_var_35, cmdloc_dummy_var_36, cmdloc_dummy_var_37, cmdloc_dummy_var_38);
    goto $bb56_last;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p213, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p216 := $load.ref($M.1, $p215);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i218 := $load.i32($M.1, $p217);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p216, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i220 := $load.i32($M.1, $p219);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i221 := $slt.i32($i218, $i220);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(84, 1));
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i224 := $load.i32($M.1, $p223);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p216, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i226 := $load.i32($M.1, $p225);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i227 := $slt.i32($i224, $i226);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p216, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p228, 0);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p216, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i230 := $load.i32($M.1, $p229);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i231 := $slt.i32(0, $i230);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i231 == 1);
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(84, 1));
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i310 := $load.i32($M.1, $p309);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p216, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i312 := $load.i32($M.1, $p311);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i313 := $sub.i32($i310, $i312);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(84, 1));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p314, $i313);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p216, $mul.ref(0, 192)), $mul.ref(172, 1));
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p315, 0);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(92, 1));
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i317 := $load.i32($M.1, $p316);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p216, $mul.ref(0, 192)), $mul.ref(160, 1));
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p318, $i317);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(92, 1));
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i320 := $load.i32($M.1, $p319);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p216, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i322 := $load.i32($M.1, $p321);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i323 := $add.i32($i320, $i322);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(92, 1));
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p324, $i323);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($p213, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} list_move_tail($p325, $p1);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i327 := $load.i32($M.1, $p326);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($p216, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i329 := $load.i32($M.1, $p328);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i330 := $sub.i32($i327, $i329);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p331, $i330);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($add.ref($p214, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $p334 := $load.ref($M.1, $p333);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i336 := $p2i.ref.i64($p214);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i337 := $ne.i64($i336, $i210);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i337 == 1);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $p212 := $p154;
    goto $bb55;

  $bb85:
    assume $i337 == 1;
    assume {:verifier.code 0} true;
    $p213, $p214 := $p214, $p334;
    goto $bb85_dummy;

  $bb65:
    assume $i231 == 1;
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i232 := 0;
    goto $bb68;

  $bb68:
    call $p233, $p234, $p235, $i236, $i237, $p238, $i239, $i240, $p241, $i242, $i243, $p244, $p245, $i246, $p247, $i248, $i249, $p250, $p251, $i252, $p253, $i254, $i255, $i256, $i257, $p258, $p259, $p260, $p261, $p262, $i263, $i264, $p265, $i266, $i267, $p268, $p269, $i270, $p271, $p272, $p273, $i274, $i275, $i276, $p277, $p278, $i279, $i280, $p281, $p282, $i283, $p284, $i285, $i286, $p287, $p288, $i289, $i290, $p293, $p294, $i295, $i296, $p297, $i298, $p301, $i302, $p305, $i306, $i307, $i308, $i232, cmdloc_dummy_var_33, cmdloc_dummy_var_34, cmdloc_dummy_var_35, cmdloc_dummy_var_36, cmdloc_dummy_var_37, cmdloc_dummy_var_38 := oz_hcd_heartbeat_loop_$bb68($p216, $p229, $p233, $p234, $p235, $i236, $i237, $p238, $i239, $i240, $p241, $i242, $i243, $p244, $p245, $i246, $p247, $i248, $i249, $p250, $p251, $i252, $p253, $i254, $i255, $i256, $i257, $p258, $p259, $p260, $p261, $p262, $i263, $i264, $p265, $i266, $i267, $p268, $p269, $i270, $p271, $p272, $p273, $i274, $i275, $i276, $p277, $p278, $i279, $i280, $p281, $p282, $i283, $p284, $i285, $i286, $p287, $p288, $i289, $i290, $p293, $p294, $i295, $i296, $p297, $i298, $p301, $i302, $p305, $i306, $i307, $i308, $i232, $p154, cmdloc_dummy_var_33, cmdloc_dummy_var_34, cmdloc_dummy_var_35, cmdloc_dummy_var_36, cmdloc_dummy_var_37, cmdloc_dummy_var_38);
    goto $bb68_last;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p234 := $load.ref($M.1, $p233);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i236 := $load.i32($M.1, $p235);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i237 := $sext.i32.i64($i236);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($p234, $mul.ref($i237, 1));
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i239 := $load.i8($M.1, $p238);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i240 := $zext.i8.i32($i239);
    call {:si_unique_call 360} {:cexpr "len"} boogie_si_record_i32($i240);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i242 := $load.i32($M.1, $p241);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i243 := $add.i32($i242, 1);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p244, $i243);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i246 := $load.i32($M.1, $p245);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i248 := $load.i32($M.1, $p247);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i249 := $eq.i32($i246, $i248);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i252 := $load.i32($M.1, $p251);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i254 := $load.i32($M.1, $p253);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i255 := $sub.i32($i252, $i254);
    call {:si_unique_call 361} {:cexpr "copy_len"} boogie_si_record_i32($i255);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i256 := $sgt.i32($i255, $i240);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i256 == 1);
    assume {:verifier.code 0} true;
    $i257 := $i255;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p216, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $p259 := $load.ref($M.1, $p258);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $p261 := $load.ref($M.1, $p260);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i263 := $load.i32($M.1, $p262);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i264 := $sext.i32.i64($i263);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($p261, $mul.ref($i264, 1));
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i266 := $sext.i32.i64($i257);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_33 := $M.1;
    cmdloc_dummy_var_34 := $M.1;
    call {:si_unique_call 362} cmdloc_dummy_var_35 := $memcpy.i8(cmdloc_dummy_var_33, cmdloc_dummy_var_34, $p259, $p265, $i266, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_35;
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i267 := $slt.i32($i257, $i240);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i267 == 1);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i279 := $load.i32($M.1, $p278);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i280 := $add.i32($i279, $i257);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p281, $i280);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i283 := $load.i32($M.1, $p282);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i285 := $load.i32($M.1, $p284);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i286 := $eq.i32($i283, $i285);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i286 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p216, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i289 := $load.i32($M.1, $p288);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i290 := $sext.i32.i64($i232);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($add.ref($add.ref($p216, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i290, 16)), $mul.ref(0, 1));
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p293, $i289);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($p216, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i295 := $load.i32($M.1, $p294);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i296 := $add.i32($i295, $i240);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p216, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p297, $i296);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i298 := $sext.i32.i64($i232);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($add.ref($add.ref($p216, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i298, 16)), $mul.ref(8, 1));
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p301, $i240);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i302 := $sext.i32.i64($i232);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($add.ref($add.ref($p216, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i302, 16)), $mul.ref(12, 1));
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p305, 0);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i306 := $add.i32($i232, 1);
    call {:si_unique_call 364} {:cexpr "i"} boogie_si_record_i32($i306);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $i307 := $load.i32($M.1, $p229);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i308 := $slt.i32($i306, $i307);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i308 == 1);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb82:
    assume $i308 == 1;
    assume {:verifier.code 0} true;
    $i232 := $i306;
    goto $bb82_dummy;

  $bb79:
    assume $i286 == 1;
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p287, 0);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb76:
    assume $i267 == 1;
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p216, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p269 := $load.ref($M.1, $p268);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i270 := $sext.i32.i64($i257);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($p269, $mul.ref($i270, 1));
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p273 := $load.ref($M.1, $p272);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i274 := $sub.i32($i240, $i257);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i275 := $sext.i32.i64($i274);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_36 := $M.1;
    cmdloc_dummy_var_37 := $M.1;
    call {:si_unique_call 363} cmdloc_dummy_var_38 := $memcpy.i8(cmdloc_dummy_var_36, cmdloc_dummy_var_37, $p271, $p273, $i275, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_38;
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i276 := $sub.i32($i240, $i257);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p277, $i276);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb73:
    assume $i256 == 1;
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i257 := $i240;
    goto $bb75;

  $bb70:
    assume $i249 == 1;
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p250, 0);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb62:
    assume $i227 == 1;
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p222 := $p154;
    goto $bb60;

  $bb58:
    assume $i221 == 1;
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p222 := $p154;
    goto $bb60;

  $bb46:
    assume $i158 == 1;
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(84, 1));
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.1, $p159);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i161 := $sgt.i32($i160, 99);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p171 := $p154;
    goto $bb51;

  $bb48:
    assume $i161 == 1;
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.1, $p162);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i164 := $and.i32($i163, $sub.i32(0, 2));
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p165, $i164);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p166, 0);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(32, 1));
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $p168 := $bitcast.ref.ref($p167);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $p169 := $bitcast.ref.ref($p2);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.1;
    cmdloc_dummy_var_25 := $M.1;
    call {:si_unique_call 352} cmdloc_dummy_var_26 := $memcpy.i8(cmdloc_dummy_var_24, cmdloc_dummy_var_25, $p168, $p169, 16, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_26;
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p154, $mul.ref(0, 96)), $mul.ref(92, 1));
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p170, 0);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    goto $bb50;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i116 == 1;
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $p117, $p118 := $p107, $p111;
    goto $bb36;

  $bb36:
    call $p119, $p120, $p121, $p122, $i123, $p124, $p125, $p126, $p127, $i128, $i129, $i130, $p132, $p133, $p134, $p135, $p137, $p138, $p140, $i141, $i142, $p117, $p118, vslice_dummy_var_138 := oz_hcd_heartbeat_loop_$bb36($p6, $i115, $p119, $p120, $p121, $p122, $i123, $p124, $p125, $p126, $p127, $i128, $i129, $i130, $p132, $p133, $p134, $p135, $p137, $p138, $p140, $i141, $i142, $p117, $p118, vslice_dummy_var_138);
    goto $bb36_last;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p117, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.1, $p119);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p117, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} list_del_init($p121);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(172, 1));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p122, 0);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $i123 := oz_usb_get_frame_number();
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p120, $mul.ref(0, 192)), $mul.ref(160, 1));
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p124, $i123);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p6, $mul.ref(0, 400)), $mul.ref(8, 1));
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.1, $p125);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p117, $mul.ref(0, 40)), $mul.ref(33, 1));
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.1, $p127);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i32($i128);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $i130 := $trunc.i32.i8($i129);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} vslice_dummy_var_138 := oz_usb_send_isoc($p126, $i130, $p120);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} oz_free_urb_link($p117);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p6, $mul.ref(0, 400)), $mul.ref(16, 1));
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.1, $p132);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p133, $mul.ref(0, 3344)), $mul.ref(3336, 1));
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.1, $p134);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} oz_complete_urb($p135, $p120, 0);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p118, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.1, $p137);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p118, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i141 := $p2i.ref.i64($p140);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i142 := $ne.i64($i141, $i115);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i142 == 1);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb38:
    assume $i142 == 1;
    assume {:verifier.code 0} true;
    $p117, $p118 := $p118, $p138;
    goto $bb38_dummy;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $p22 := $p16;
    goto $bb4;

  $bb4:
    call $p23, $i24, $i25, $p27, $p28, $p29, $i30, $p31, $i32, $p33, $p34, $i35, $p36, $i37, $p38, $p39, $p40, $i41, $p42, $i43, $p44, $p45, $i46, $i47, $p48, $i49, $i50, $i51, $p52, $p53, $i54, $p55, $i56, $i57, $p58, $i59, $p60, $p61, $p62, $p63, $p64, $i65, $i66, $p69, $p70, $p71, $p72, $p73, $p74, $i75, $i76, $p77, $i78, $i79, $p81, $i82, $p83, $i84, $i85, $p86, $p87, $i88, $i89, $p90, $p91, $i92, $i93, $p94, $i95, $i96, $p67, $p80, $p26, $p98, $p99, $p100, $p101, $p102, $i103, $i104, $p22, cmdloc_dummy_var_18, cmdloc_dummy_var_19, cmdloc_dummy_var_20, cmdloc_dummy_var_21, cmdloc_dummy_var_22, cmdloc_dummy_var_23 := oz_hcd_heartbeat_loop_$bb4($p1, $p2, $p3, $p4, $i20, $p23, $i24, $i25, $p27, $p28, $p29, $i30, $p31, $i32, $p33, $p34, $i35, $p36, $i37, $p38, $p39, $p40, $i41, $p42, $i43, $p44, $p45, $i46, $i47, $p48, $i49, $i50, $i51, $p52, $p53, $i54, $p55, $i56, $i57, $p58, $i59, $p60, $p61, $p62, $p63, $p64, $i65, $i66, $p69, $p70, $p71, $p72, $p73, $p74, $i75, $i76, $p77, $i78, $i79, $p81, $i82, $p83, $i84, $i85, $p86, $p87, $i88, $i89, $p90, $p91, $i92, $i93, $p94, $i95, $i96, $p67, $p80, $p26, $p98, $p99, $p100, $p101, $p102, $i103, $i104, $p22, cmdloc_dummy_var_18, cmdloc_dummy_var_19, cmdloc_dummy_var_20, cmdloc_dummy_var_21, cmdloc_dummy_var_22, cmdloc_dummy_var_23);
    goto $bb4_last;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.1, $p23);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 0);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p22, $mul.ref(0, 96)), $mul.ref(32, 1));
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p2);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.1, $p29);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p28, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.1, $p31);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p27);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.1, $p34);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p33, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.1, $p36);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $p38 := timespec_sub($i30, $i32, $i35, $i37);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p4);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i41 := $extractvalue($p38, 0);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, $p40, $i41);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p39, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i43 := $extractvalue($p38, 1);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, $p42, $i43);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p3);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p4);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.17;
    cmdloc_dummy_var_19 := $M.17;
    call {:si_unique_call 336} cmdloc_dummy_var_20 := $memcpy.i8(cmdloc_dummy_var_18, cmdloc_dummy_var_19, $p44, $p45, 16, $zext.i32.i64(8), 0 == 1);
    $M.17 := cmdloc_dummy_var_20;
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} $i46 := timespec_to_ns($p3);
    call {:si_unique_call 338} {:cexpr "tmp"} boogie_si_record_i64($i46);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} $i47 := div_u64($i46, 1000000);
    call {:si_unique_call 340} {:cexpr "tmp___0"} boogie_si_record_i64($i47);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p22, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.1, $p48);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i64.i32($i47);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i49, $i50);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p22, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p52, $i51);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p22, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.1, $p53);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p22, $mul.ref(0, 96)), $mul.ref(52, 1));
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.1, $p55);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i57 := $sgt.i32($i54, $i56);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p22, $mul.ref(0, 96)), $mul.ref(32, 1));
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p2);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.1;
    cmdloc_dummy_var_22 := $M.1;
    call {:si_unique_call 341} cmdloc_dummy_var_23 := $memcpy.i8(cmdloc_dummy_var_21, cmdloc_dummy_var_22, $p62, $p63, 16, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_23;
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p22, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.1, $p64);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p67 := $p22;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p80 := $p67;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $p26 := $p80;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 96)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.1, $p98);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($p100, $mul.ref($sub.ref(0, 16), 96));
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p100, $mul.ref($sub.ref(0, 16), 96)), $mul.ref(16, 1));
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i103 := $p2i.ref.i64($p102);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i104 := $ne.i64($i103, $i20);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i104 == 1);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb30:
    assume $i104 == 1;
    assume {:verifier.code 0} true;
    $p22 := $p101;
    goto $bb30_dummy;

  $bb13:
    assume $i66 == 1;
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    call $p69, $p70, $p71, $p72, $p73, $p74, $i75, $i76, $p77, $i78, $i79, $p81, $i82, $p83, $i84, $i85, $p86, $p87, $i88, $i89, $p90, $p91, $i92, $i93, $p94, $i95, $i96 := oz_hcd_heartbeat_loop_$bb16($p1, $p64, $p69, $p70, $p71, $p72, $p73, $p74, $i75, $i76, $p77, $i78, $i79, $p81, $i82, $p83, $i84, $i85, $p86, $p87, $i88, $i89, $p90, $p91, $i92, $i93, $p94, $i95, $i96, $p22);
    goto $bb16_last;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} $i95 := list_empty($p94);
    call {:si_unique_call 343} {:cexpr "tmp___1"} boogie_si_record_i32($i95);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i95, 0);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i96 == 1);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p80 := $p22;
    goto $bb20;

  $bb27:
    assume $i96 == 1;
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.1, $p69);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.1, $p72);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p22, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.1, $p74);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i75, 1);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p73, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.1, $p77);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i76, $i78);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p22, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.1, $p81);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p73, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.1, $p83);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i85 := $sub.i32($i82, $i84);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p22, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p86, $i85);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p22, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.1, $p87);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i89 := $slt.i32($i88, 0);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p71, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} list_move_tail($p91, $p1);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.1, $p64);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 0);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i93 == 1);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p67 := $p22;
    goto $bb15;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i93 == 1;
    goto $bb25_dummy;

  $bb22:
    assume $i89 == 1;
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p22, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p90, 0);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb18:
    assume $i79 == 1;
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p80 := $p22;
    goto $bb20;

  $bb10:
    assume $i57 == 1;
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p22, $mul.ref(0, 96)), $mul.ref(52, 1));
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.1, $p58);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p22, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p60, $i59);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume $i25 == 1;
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $p26 := $p22;
    goto $bb8;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  $bb126_dummy:
    assume false;
    return;

  $bb124_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2259;

  $bb115_dummy:
    assume false;
    return;

  $bb110_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2211;

  $bb102_dummy:
    assume false;
    return;

  $bb100_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2170;

  $bb82_dummy:
    assume false;
    return;

  $bb68_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2003;

  $bb85_dummy:
    assume false;
    return;

  $bb56_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1973;

  $bb88_dummy:
    assume false;
    return;

  $bb44_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1891;

  $bb38_dummy:
    assume false;
    return;

  $bb36_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1844;

  $bb25_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p22, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_1781;

  $bb30_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1712;
}



const getrawmonotonic: ref;

axiom getrawmonotonic == $sub.ref(0, 308359);

procedure getrawmonotonic($p0: ref);
  free requires assertsPassed;



implementation getrawmonotonic($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} getrawmonotonic64($p0);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    return;
}



const timespec_sub: ref;

axiom timespec_sub == $sub.ref(0, 309391);

procedure timespec_sub($i0: i64, $i1: i64, $i2: i64, $i3: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.18, $M.19, $M.20, $M.21, $M.22, $CurrAddr;



implementation timespec_sub($i0: i64, $i1: i64, $i2: i64, $i3: i64) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $p5 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $p6 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} $p7 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p5);
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.18 := $store.i64($M.18, $p9, $i0);
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    assume {:verifier.code 0} true;
    $M.19 := $store.i64($M.19, $p10, $i1);
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p6);
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, $p12, $i2);
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(8, 1));
    assume {:verifier.code 0} true;
    $M.21 := $store.i64($M.21, $p13, $i3);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.18, $p14);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.20, $p16);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i18 := $sub.i64($i15, $i17);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.19, $p19);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.21, $p21);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i23 := $sub.i64($i20, $i22);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} set_normalized_timespec($p7, $i18, $i23);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p4);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p7);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_39 := $M.22;
    cmdloc_dummy_var_40 := $M.22;
    call {:si_unique_call 387} cmdloc_dummy_var_41 := $memcpy.i8(cmdloc_dummy_var_39, cmdloc_dummy_var_40, $p24, $p25, 16, $zext.i32.i64(8), 0 == 1);
    $M.22 := cmdloc_dummy_var_41;
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p4);
    goto corral_source_split_2294;

  corral_source_split_2294:
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2295;

  corral_source_split_2295:
    $i28 := $load.i64($M.22, $p27);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume $extractvalue($p29, 1) == $extractvalue($u1, 1);
    assume $extractvalue($p29, 0) == $i28;
    goto corral_source_split_2297;

  corral_source_split_2297:
    $p30 := $add.ref($add.ref($p26, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2298;

  corral_source_split_2298:
    $i31 := $load.i64($M.22, $p30);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume $extractvalue($p32, 0) == $extractvalue($p29, 0);
    assume $extractvalue($p32, 1) == $i31;
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $r := $p32;
    return;
}



const timespec_to_ns: ref;

axiom timespec_to_ns == $sub.ref(0, 310423);

procedure timespec_to_ns($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation timespec_to_ns($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.17, $p1);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i3 := $mul.i64($i2, 1000000000);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.17, $p4);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i3, $i5);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const div_u64: ref;

axiom div_u64 == $sub.ref(0, 311455);

procedure div_u64($i0: i64, $i1: i32) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.42, $CurrAddr;



implementation div_u64($i0: i64, $i1: i32) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 389} {:cexpr "div_u64:arg:dividend"} boogie_si_record_i64($i0);
    call {:si_unique_call 390} {:cexpr "div_u64:arg:divisor"} boogie_si_record_i32($i1);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} $i3 := div_u64_rem($i0, $i1, $p2);
    call {:si_unique_call 392} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const list_move_tail: ref;

axiom list_move_tail == $sub.ref(0, 312487);

procedure list_move_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_move_tail($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} __list_del_entry($p0);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} list_add_tail($p0, $p1);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    return;
}



const oz_usb_get_frame_number: ref;

axiom oz_usb_get_frame_number == $sub.ref(0, 313519);

procedure oz_usb_get_frame_number() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41;



implementation oz_usb_get_frame_number() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} $i0 := atomic_add_return(1, g_usb_frame_number);
    call {:si_unique_call 396} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const oz_usb_send_isoc: ref;

axiom oz_usb_send_isoc == $sub.ref(0, 314551);

procedure oz_usb_send_isoc($p0: ref, $i1: i8, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.9, $CurrAddr, $M.40, $M.39, assertsPassed;



implementation oz_usb_send_isoc($p0: ref, $i1: i8, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i64;
  var $p24: ref;
  var $i25: i32;
  var $i26: i8;
  var $p27: ref;
  var $i28: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i14: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $p52: ref;
  var $i53: i32;
  var $i54: i8;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i64;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i64;
  var $p88: ref;
  var $i89: i64;
  var $i90: i64;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $p97: ref;
  var $i98: i32;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;
  var $i102: i32;
  var $i103: i1;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $i69: i32;
  var $i104: i32;
  var $i105: i32;
  var $i106: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $i107: i8;
  var $i108: i32;
  var $i109: i8;
  var $i110: i32;
  var $i111: i32;
  var $i112: i32;
  var $i113: i8;
  var $p114: ref;
  var $i115: i8;
  var $p116: ref;
  var $i117: i32;
  var $i118: i8;
  var $p119: ref;
  var $i120: i8;
  var $i121: i32;
  var $i122: i32;
  var $i123: i8;
  var $i125: i32;
  var $i126: i1;
  var $i38: i32;
  var $i33: i32;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} {:cexpr "oz_usb_send_isoc:arg:ep_num"} boogie_si_record_i8($i1);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1232)), $mul.ref(644, 1));
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.1, $p6);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 64);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p5, $mul.ref(0, 1232)), $mul.ref(112, 1));
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.1, $p35);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32(0, $i36);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb13:
    assume $i37 == 1;
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb16;

  $bb16:
    call $p39, $i40, $i41, $p42, $p43, $p44, $p46, $p47, $p48, $i49, $p52, $i53, $i54, $p55, $p56, $i57, $i58, $p59, $p60, $i61, $i62, $p70, $p71, $i72, $p74, $i75, $i76, $p80, $i81, $i82, $p83, $p84, $p85, $i86, $i87, $p88, $i89, $i90, $p91, $i92, $i93, $p94, $p95, $i96, $p97, $i98, $i77, $i78, $i79, $i102, $i103, $i66, $i67, $p68, $i69, $i104, $i105, $i106, $i63, $i64, $i65, $i99, $i100, $i101, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $p114, $i115, $p116, $i117, $i118, $p119, $i120, $i121, $i122, $i123, $i125, $i126, $i38, cmdloc_dummy_var_42, cmdloc_dummy_var_43, cmdloc_dummy_var_44, vslice_dummy_var_140 := oz_usb_send_isoc_loop_$bb16($i1, $p2, $p3, $p5, $p34, $p35, $p39, $i40, $i41, $p42, $p43, $p44, $p46, $p47, $p48, $i49, $p52, $i53, $i54, $p55, $p56, $i57, $i58, $p59, $p60, $i61, $i62, $p70, $p71, $i72, $p74, $i75, $i76, $p80, $i81, $i82, $p83, $p84, $p85, $i86, $i87, $p88, $i89, $i90, $p91, $i92, $i93, $p94, $p95, $i96, $p97, $i98, $i77, $i78, $i79, $i102, $i103, $i66, $i67, $p68, $i69, $i104, $i105, $i106, $i63, $i64, $i65, $i99, $i100, $i101, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $p114, $i115, $p116, $i117, $i118, $p119, $i120, $i121, $i122, $i123, $i125, $i126, $i38, cmdloc_dummy_var_42, cmdloc_dummy_var_43, cmdloc_dummy_var_44, vslice_dummy_var_140);
    goto $bb16_last;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $p39 := oz_elt_info_alloc($p34);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p39, $mul.ref(0, 328)), $mul.ref(64, 1));
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p44, $mul.ref(1, 8)), $mul.ref(2, 1));
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p46, 23);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p44, $mul.ref(1, 8)), $mul.ref(3, 1));
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p47, $i1);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p44, $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p48, 3);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i38);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref($i49, 16)), $mul.ref(4, 1));
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.1, $p52);
    call {:si_unique_call 401} {:cexpr "unit_size"} boogie_si_record_i32($i53);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i8($i53);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p44, $mul.ref(1, 8)), $mul.ref(5, 1));
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p55, $i54);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p43);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64(7);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i58 := $add.i64($i57, 1);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p56, $mul.ref($i58, 1));
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.1, $p60);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i38, $i61);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i63, $i64, $i65 := $i38, 0, 245;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i99, $i100, $i101 := $i63, $i64, $i65;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i32.i8(7);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i32($i107);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i32.i8($i101);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i109);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i111 := $sub.i32($i108, $i110);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i112 := $add.i32($i111, 245);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i32.i8($i112);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p43, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p114, $i113);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i32.i8($i100);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p44, $mul.ref(1, 8)), $mul.ref(6, 1));
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p116, $i115);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i1);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i32.i8($i117);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p5, $mul.ref(0, 1232)), $mul.ref(644, 1));
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i120 := $load.i8($M.1, $p119);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i121 := $zext.i8.i32($i120);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i122 := $and.i32($i121, 128);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i32.i8($i122);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} vslice_dummy_var_140 := oz_usb_submit_elt($p34, $p39, $p3, $i118, $i123);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.1, $p35);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i126 := $slt.i32($i99, $i125);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i126 == 1);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb36:
    assume $i126 == 1;
    assume {:verifier.code 0} true;
    $i38 := $i99;
    goto $bb36_dummy;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i62 == 1;
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i66, $i67, $p68, $i69 := 245, 0, $p59, $i38;
    goto $bb24;

  $bb24:
    call $p70, $p71, $i72, $p74, $i75, $i76, $p80, $i81, $i82, $p83, $p84, $p85, $i86, $i87, $p88, $i89, $i90, $p91, $i92, $i93, $p94, $p95, $i96, $p97, $i98, $i77, $i78, $i79, $i102, $i103, $i66, $i67, $p68, $i69, $i104, $i105, $i106, cmdloc_dummy_var_42, cmdloc_dummy_var_43, cmdloc_dummy_var_44 := oz_usb_send_isoc_loop_$bb24($p2, $i53, $p60, $p70, $p71, $i72, $p74, $i75, $i76, $p80, $i81, $i82, $p83, $p84, $p85, $i86, $i87, $p88, $i89, $i90, $p91, $i92, $i93, $p94, $p95, $i96, $p97, $i98, $i77, $i78, $i79, $i102, $i103, $i66, $i67, $p68, $i69, $i104, $i105, $i106, cmdloc_dummy_var_42, cmdloc_dummy_var_43, cmdloc_dummy_var_44);
    goto $bb24_last;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(192, 1));
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i69);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p71, $mul.ref($i72, 16)), $mul.ref(4, 1));
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.1, $p74);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i53, $i75);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i77, $i78, $i79 := $i69, $i67, $i66;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i99, $i100, $i101 := $i77, $i78, $i79;
    goto $bb32;

  $bb26:
    assume $i76 == 1;
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p71, $mul.ref($i72, 16)), $mul.ref(4, 1));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.1, $p80);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i82 := $ule.i32($i81, $i66);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i77, $i78, $i79 := $i69, $i67, $i66;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb28;

  $bb29:
    assume $i82 == 1;
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.1, $p83);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p71, $mul.ref($i72, 16)), $mul.ref(0, 1));
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.1, $p85);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i87 := $zext.i32.i64($i86);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p84, $mul.ref($i87, 1));
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i89 := $sext.i32.i64($i53);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_42 := $M.1;
    cmdloc_dummy_var_43 := $M.1;
    call {:si_unique_call 402} cmdloc_dummy_var_44 := $memcpy.i8(cmdloc_dummy_var_42, cmdloc_dummy_var_43, $p68, $p88, $i89, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_44;
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i90 := $sext.i32.i64($i53);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p68, $mul.ref($i90, 1));
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i92 := $sub.i32($i66, $i53);
    call {:si_unique_call 403} {:cexpr "rem"} boogie_si_record_i32($i92);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i93 := $add.i32($i67, 1);
    call {:si_unique_call 404} {:cexpr "unit_count"} boogie_si_record_i32($i93);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p71, $mul.ref($i72, 16)), $mul.ref(12, 1));
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p94, 0);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p71, $mul.ref($i72, 16)), $mul.ref(4, 1));
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.1, $p95);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p71, $mul.ref($i72, 16)), $mul.ref(8, 1));
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p97, $i96);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i98 := $add.i32($i69, 1);
    call {:si_unique_call 405} {:cexpr "i"} boogie_si_record_i32($i98);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.1, $p60);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $i103 := $slt.i32($i98, $i102);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i104, $i105, $i106 := $i98, $i93, $i92;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i63, $i64, $i65 := $i104, $i105, $i106;
    goto $bb23;

  $bb33:
    assume $i103 == 1;
    assume {:verifier.code 0} true;
    $i66, $i67, $p68, $i69 := $i92, $i93, $p91, $i98;
    goto $bb33_dummy;

  $bb18:
    assume $i41 == 1;
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 1);
    goto $bb11;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.1, $p11);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32(0, $i12);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb11;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb6;

  $bb6:
    call $p15, $p16, $i17, $p19, $p20, $p21, $i22, $i23, $p24, $i25, $i26, $p27, $i28, $i30, $i31, $i32, $i14, vslice_dummy_var_139 := oz_usb_send_isoc_loop_$bb6($i1, $p2, $p5, $p11, $p15, $p16, $i17, $p19, $p20, $p21, $i22, $i23, $p24, $i25, $i26, $p27, $i28, $i30, $i31, $i32, $i14, vslice_dummy_var_139);
    goto $bb6_last;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(192, 1));
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i14);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p16, $mul.ref($i17, 16)), $mul.ref(0, 1));
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.1, $p21);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i22);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p20, $mul.ref($i23, 1));
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i1);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i25);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p16, $mul.ref($i17, 16)), $mul.ref(4, 1));
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.1, $p27);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} vslice_dummy_var_139 := oz_send_isoc_unit($p5, $i26, $p24, $i28);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i14, 1);
    call {:si_unique_call 399} {:cexpr "i"} boogie_si_record_i32($i30);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.1, $p11);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i30, $i31);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i32 == 1);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i14 := $i30;
    goto $bb8_dummy;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  $bb33_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2403;

  $bb36_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2369;

  $bb8_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2337;
}



const oz_process_ep0_urb: ref;

axiom oz_process_ep0_urb == $sub.ref(0, 315583);

procedure oz_process_ep0_urb($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.1, $M.16, $CurrAddr, assertsPassed, $M.15, $M.30, $M.31, $M.32, $M.9, $M.13, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation oz_process_ep0_urb($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i8;
  var $i33: i32;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $p56: ref;
  var $i57: i16;
  var $i58: i32;
  var $p59: ref;
  var $i60: i16;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i24;
  var $i72: i24;
  var $i73: i24;
  var $p74: ref;
  var $p75: ref;
  var $i76: i8;
  var $i77: i64;
  var $i78: i64;
  var $i79: i64;
  var $i80: i1;
  var $p81: ref;
  var $i82: i8;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i24;
  var $i94: i24;
  var $i95: i24;
  var $p96: ref;
  var $p97: ref;
  var $i98: i8;
  var $i99: i64;
  var $i100: i64;
  var $i101: i64;
  var $i102: i1;
  var $p103: ref;
  var $i104: i8;
  var $i105: i32;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i24;
  var $i116: i24;
  var $i117: i24;
  var $p118: ref;
  var $p119: ref;
  var $i120: i8;
  var $i121: i64;
  var $i122: i64;
  var $i123: i64;
  var $i124: i1;
  var $i125: i32;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i24;
  var $i135: i24;
  var $i136: i24;
  var $p137: ref;
  var $p138: ref;
  var $i139: i8;
  var $i140: i64;
  var $i141: i64;
  var $i142: i64;
  var $i143: i1;
  var $i144: i32;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $i153: i24;
  var $i154: i24;
  var $i155: i24;
  var $p156: ref;
  var $p157: ref;
  var $i158: i8;
  var $i159: i64;
  var $i160: i64;
  var $i161: i64;
  var $i162: i1;
  var $p163: ref;
  var $i164: i8;
  var $p165: ref;
  var $i166: i8;
  var $i167: i32;
  var $i168: i32;
  var $i169: i8;
  var $p170: ref;
  var $p171: ref;
  var $i172: i64;
  var $i173: i1;
  var $p174: ref;
  var $i175: i8;
  var $i176: i32;
  var $i177: i32;
  var $i178: i1;
  var $p179: ref;
  var $i180: i8;
  var $i181: i32;
  var $i182: i1;
  var $p183: ref;
  var $i184: i8;
  var $i185: i32;
  var $i186: i1;
  var $p187: ref;
  var $i188: i8;
  var $i189: i32;
  var $i190: i1;
  var $p191: ref;
  var $i192: i8;
  var $i193: i32;
  var $i194: i1;
  var $p195: ref;
  var $i196: i8;
  var $i197: i32;
  var $i198: i1;
  var $p199: ref;
  var $i200: i8;
  var $i201: i32;
  var $i202: i1;
  var $p205: ref;
  var $p206: ref;
  var $i207: i32;
  var $i208: i1;
  var $p209: ref;
  var $i210: i16;
  var $i211: i8;
  var $p212: ref;
  var $i213: i32;
  var $i214: i64;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $i221: i32;
  var $i222: i1;
  var $p223: ref;
  var $p224: ref;
  var $i225: i8;
  var $p226: ref;
  var $p227: ref;
  var $i228: i32;
  var $i229: i32;
  var $p230: ref;
  var $i231: i32;
  var $i232: i1;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $i236: i8;
  var $i237: i64;
  var $p239: ref;
  var $i240: i8;
  var $p241: ref;
  var $p242: ref;
  var $i243: i32;
  var $i244: i32;
  var $i203: i32;
  var $i204: i32;
  var $i245: i32;
  var $i246: i32;
  var $i247: i1;
  var $i248: i1;
  var $p249: ref;
  var $i250: i8;
  var $i251: i32;
  var $i252: i1;
  var $i253: i32;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $i257: i32;
  var $i258: i8;
  var $p259: ref;
  var $p260: ref;
  var $i261: i32;
  var $i262: i1;
  var $i264: i32;
  var $i265: i8;
  var $i266: i32;
  var $i267: i1;
  var $i268: i32;
  var $i263: i32;
  var $i269: i32;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $i270: i1;
  var $i271: i1;
  var $p272: ref;
  var $p273: ref;
  var $p274: ref;
  var $p275: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 413} {:cexpr "oz_process_ep0_urb:arg:mem_flags"} boogie_si_record_i32($i2);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i9 := $M.23;
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 2);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 2032)), $mul.ref(0, 1));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.1, $p30);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $i35 := oz_get_port_from_addr($p0, $i34);
    call {:si_unique_call 418} {:cexpr "port_ix"} boogie_si_record_i32($i35);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i35, 0);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(128, 1));
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i35);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p41, $mul.ref($i42, 400));
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p44, $mul.ref(0, 4));
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.1, $p45);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 1);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p49, $p43);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(144, 1));
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.1, $p50);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.1, $p53);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    call {:si_unique_call 419} {:cexpr "windex"} boogie_si_record_i32($i55);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p52, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.1, $p56);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    call {:si_unique_call 420} {:cexpr "wvalue"} boogie_si_record_i32($i58);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p52, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.1, $p59);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    call {:si_unique_call 421} {:cexpr "wlength"} boogie_si_record_i32($i61);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i62 := $M.23;
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i62, 4);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i84 := $M.23;
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i85 := $and.i32($i84, 4);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i85, 0);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i106 := $M.23;
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i107 := $and.i32($i106, 4);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i107, 0);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i125 := $M.23;
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $i126 := $and.i32($i125, 4);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i144 := $M.23;
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i145 := $and.i32($i144, 4);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i146 := $ne.i32($i145, 0);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p41, $mul.ref($i42, 400)), $mul.ref(97, 1));
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i164 := $load.i8($M.1, $p163);
    call {:si_unique_call 437} {:cexpr "tmp___6"} boogie_si_record_i8($i164);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p41, $mul.ref($i42, 400)), $mul.ref(97, 1));
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $i166 := $load.i8($M.1, $p165);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i167 := $zext.i8.i32($i166);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i168 := $add.i32($i167, 1);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i169 := $trunc.i32.i8($i168);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p41, $mul.ref($i42, 400)), $mul.ref(97, 1));
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p170, $i169);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $p171 := oz_claim_hpd($p43);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i172 := $p2i.ref.i64($p171);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i173 := $eq.i64($i172, 0);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    assume {:branchcond $i173} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p52, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i175 := $load.i8($M.1, $p174);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i176 := $zext.i8.i32($i175);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i177 := $and.i32($i176, 96);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i178 := $eq.i32($i177, 0);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    assume {:branchcond $i178} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    $i245, $i246 := 0, 0;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i247 := $eq.i32($i245, 0);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    assume {:branchcond $i247} true;
    goto $bb85, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !($i247 == 1);
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i269 := $i245;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} oz_usb_put($p171);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i37, $i38, $p39 := $i269, $i246, $p43;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i270 := $ne.i32($i37, 0);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    assume {:branchcond $i270} true;
    goto $bb100, $bb102;

  $bb102:
    assume !($i270 == 1);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i271 := $ne.i32($i38, 0);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    assume {:branchcond $i271} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i271 == 1);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p39, $mul.ref(0, 400)), $mul.ref(8, 1));
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $p275 := $load.ref($M.1, $p274);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} oz_usb_request_heartbeat($p275);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  $bb103:
    assume {:verifier.code 0} true;
    assume $i271 == 1;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(3336, 1));
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $p273 := $load.ref($M.1, $p272);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} oz_complete_urb($p273, $p1, $i37);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    goto $bb105;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  $bb100:
    assume {:verifier.code 0} true;
    assume $i270 == 1;
    goto $bb101;

  $bb85:
    assume $i247 == 1;
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i248 := $eq.i32($i246, 0);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    assume {:branchcond $i248} true;
    goto $bb88, $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    assume !($i248 == 1);
    goto $bb87;

  $bb88:
    assume $i248 == 1;
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p52, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i250 := $load.i8($M.1, $p249);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i251 := $sext.i8.i32($i250);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i252 := $sge.i32($i251, 0);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i252} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    $i253 := 0;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p254, $i253);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p41, $mul.ref($i42, 400)), $mul.ref(8, 1));
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p256 := $load.ref($M.1, $p255);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i257 := $zext.i8.i32($i164);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i258 := $trunc.i32.i8($i257);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p260 := $load.ref($M.1, $p259);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $i261 := oz_usb_control_req($p256, $i258, $p52, $p260, $i253);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    call {:si_unique_call 442} {:cexpr "tmp___18"} boogie_si_record_i32($i261);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i262 := $ne.i32($i261, 0);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    assume {:branchcond $i262} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i262 == 1);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i264 := $zext.i8.i32($i164);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i265 := $trunc.i32.i8($i264);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $i266 := oz_enqueue_ep_urb($p43, 0, 0, $p1, $i265);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    call {:si_unique_call 444} {:cexpr "tmp___17"} boogie_si_record_i32($i266);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i267 := $ne.i32($i266, 0);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    $i268 := $i245;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i263 := $i268;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i269 := $i263;
    goto $bb99;

  $bb96:
    assume $i267 == 1;
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i268 := $sub.i32(0, 12);
    goto $bb98;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  $bb93:
    assume $i262 == 1;
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i263 := $sub.i32(0, 12);
    goto $bb95;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  $bb90:
    assume $i252 == 1;
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i253 := $i61;
    goto $bb92;

  $bb47:
    assume $i178 == 1;
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p52, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i180 := $load.i8($M.1, $p179);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i181 := $zext.i8.i32($i180);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i182 := $eq.i32($i181, 6);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i182} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p52, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i184 := $load.i8($M.1, $p183);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i185 := $zext.i8.i32($i184);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i186 := $eq.i32($i185, 5);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    assume {:branchcond $i186} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p52, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i188 := $load.i8($M.1, $p187);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i189 := $zext.i8.i32($i188);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i190 := $eq.i32($i189, 9);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i190} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p52, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i192 := $load.i8($M.1, $p191);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i193 := $zext.i8.i32($i192);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $i194 := $eq.i32($i193, 8);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i194} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p52, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i196 := $load.i8($M.1, $p195);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i197 := $zext.i8.i32($i196);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i198 := $eq.i32($i197, 10);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    assume {:branchcond $i198} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p52, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i200 := $load.i8($M.1, $p199);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i201 := $zext.i8.i32($i200);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $i202 := $eq.i32($i201, 11);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    assume {:branchcond $i202} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i203, $i204 := 0, 0;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i245, $i246 := $i203, $i204;
    goto $bb84;

  $bb69:
    assume $i202 == 1;
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i203, $i204 := 0, 0;
    goto $bb74;

  $bb65:
    assume $i198 == 1;
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i231 := $load.i32($M.1, $p230);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i232 := $ne.i32($i231, 0);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    assume {:branchcond $i232} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i232 == 1);
    assume {:verifier.code 0} true;
    $i243, $i244 := $sub.i32(0, 32), 0;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i203, $i204 := $i243, $i244;
    goto $bb74;

  $bb81:
    assume $i232 == 1;
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p233, 1);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p41, $mul.ref($i42, 400)), $mul.ref(104, 1));
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $p235 := $load.ref($M.1, $p234);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i236 := $trunc.i32.i8($i55);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i237 := $zext.i8.i64($i236);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p235, $mul.ref($i237, 8)), $mul.ref(4, 1));
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i240 := $load.i8($M.1, $p239);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p242 := $load.ref($M.1, $p241);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p242, $i240);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i243, $i244 := 0, 1;
    goto $bb83;

  $bb61:
    assume $i194 == 1;
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i221 := $load.i32($M.1, $p220);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i222 := $ne.i32($i221, 0);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    assume {:branchcond $i222} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    $i228, $i229 := $sub.i32(0, 32), 0;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i203, $i204 := $i228, $i229;
    goto $bb74;

  $bb78:
    assume $i222 == 1;
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p223, 1);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p41, $mul.ref($i42, 400)), $mul.ref(98, 1));
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i225 := $load.i8($M.1, $p224);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p227 := $load.ref($M.1, $p226);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p227, $i225);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i228, $i229 := 0, 1;
    goto $bb80;

  $bb57:
    assume $i190 == 1;
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i203, $i204 := 0, 0;
    goto $bb74;

  $bb53:
    assume $i186 == 1;
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} ldv_spin_lock_bh_126($p205);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(120, 1));
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i207 := $load.i32($M.1, $p206);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i208 := $sge.i32($i207, 0);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i208} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} ldv_spin_unlock_bh_127($p219);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i203, $i204 := 0, 1;
    goto $bb74;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  $bb75:
    assume $i208 == 1;
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p52, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i210 := $load.i16($M.1, $p209);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i211 := $trunc.i16.i8($i210);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(120, 1));
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i213 := $load.i32($M.1, $p212);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i214 := $sext.i32.i64($i213);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(128, 1)), $mul.ref($i214, 400)), $mul.ref(96, 1));
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p217, $i211);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(120, 1));
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p218, $sub.i32(0, 1));
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    goto $bb77;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  $bb49:
    assume $i182 == 1;
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i203, $i204 := 0, 0;
    goto $bb74;

  $bb44:
    assume $i173 == 1;
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i37, $i38, $p39 := $sub.i32(0, 32), 0, $p43;
    goto $bb9;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i146 == 1;
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p147, .str.4);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p148, .str.35);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p149, .str.36);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p150, .str.42);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p152 := $bitcast.ref.ref($p151);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i153 := $load.i24($M.28, $p152);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i154 := $and.i24($i153, $sub.i24(0, 262144));
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i155 := $or.i24($i154, 1418);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p152, $i155);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p156, 0);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $i158 := $load.i8($M.29, $p157);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i159 := $zext.i8.i64($i158);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $i160 := $and.i64($i159, 1);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} $i161 := ldv__builtin_expect($i160, 0);
    call {:si_unique_call 435} {:cexpr "tmp___5"} boogie_si_record_i64($i161);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i162 := $ne.i64($i161, 0);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    assume {:branchcond $i162} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb40:
    assume $i162 == 1;
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} __dynamic_pr_debug.ref.ref.i32($p8, .str.42, $i61);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb32:
    assume $i127 == 1;
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p128, .str.4);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p129, .str.35);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p130, .str.36);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p131, .str.41);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p132);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i134 := $load.i24($M.28, $p133);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i135 := $and.i24($i134, $sub.i24(0, 262144));
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i136 := $or.i24($i135, 1417);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p133, $i136);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p137, 0);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i139 := $load.i8($M.29, $p138);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i140 := $zext.i8.i64($i139);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i141 := $and.i64($i140, 1);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $i142 := ldv__builtin_expect($i141, 0);
    call {:si_unique_call 432} {:cexpr "tmp___4"} boogie_si_record_i64($i142);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i143 := $ne.i64($i142, 0);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i143 == 1;
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} __dynamic_pr_debug.ref.ref.i32($p7, .str.41, $i55);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb26:
    assume $i108 == 1;
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p109, .str.4);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p110, .str.35);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p111, .str.36);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p112, .str.40);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p113);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i115 := $load.i24($M.28, $p114);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i116 := $and.i24($i115, $sub.i24(0, 262144));
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i117 := $or.i24($i116, 1416);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p114, $i117);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p118, 0);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i120 := $load.i8($M.29, $p119);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i121 := $zext.i8.i64($i120);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i122 := $and.i64($i121, 1);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $i123 := ldv__builtin_expect($i122, 0);
    call {:si_unique_call 429} {:cexpr "tmp___3"} boogie_si_record_i64($i123);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i124 := $ne.i64($i123, 0);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i124 == 1;
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} __dynamic_pr_debug.ref.ref.i32($p6, .str.40, $i58);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb20:
    assume $i86 == 1;
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p87, .str.4);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p88, .str.35);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p89, .str.36);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p90, .str.39);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i93 := $load.i24($M.28, $p92);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i94 := $and.i24($i93, $sub.i24(0, 262144));
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i95 := $or.i24($i94, 1415);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p92, $i95);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p96, 0);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.29, $p97);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i64($i98);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i100 := $and.i64($i99, 1);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $i101 := ldv__builtin_expect($i100, 0);
    call {:si_unique_call 426} {:cexpr "tmp___2"} boogie_si_record_i64($i101);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i102 := $ne.i64($i101, 0);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i102 == 1;
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p52, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $i104 := $load.i8($M.1, $p103);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i105 := $zext.i8.i32($i104);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} __dynamic_pr_debug.ref.ref.i32($p5, .str.39, $i105);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb14:
    assume $i64 == 1;
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p65, .str.4);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p66, .str.35);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p67, .str.36);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p68, .str.38);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i71 := $load.i24($M.28, $p70);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i72 := $and.i24($i71, $sub.i24(0, 262144));
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i73 := $or.i24($i72, 1414);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p70, $i73);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p74, 0);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.29, $p75);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i64($i76);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i78 := $and.i64($i77, 1);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} $i79 := ldv__builtin_expect($i78, 0);
    call {:si_unique_call 423} {:cexpr "tmp___1"} boogie_si_record_i64($i79);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i80 == 1;
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p52, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.1, $p81);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} __dynamic_pr_debug.ref.ref.i32($p4, .str.38, $i83);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i47 == 1;
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i37, $i38, $p39 := $sub.i32(0, 32), 0, $p43;
    goto $bb9;

  $bb7:
    assume $i36 == 1;
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i37, $i38, $p39 := $sub.i32(0, 32), 0, $0.ref;
    goto $bb9;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p12, .str.4);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p13, .str.35);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p14, .str.36);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p15, .str.37);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.28, $p17);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 1393);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p17, $i20);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p21, 0);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.29, $p22);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 415} {:cexpr "tmp"} boogie_si_record_i64($i26);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i27 == 1;
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} __dynamic_pr_debug.ref.ref.ref.ref($p3, .str.37, .str.35, $p1);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 316615);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 449} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 317647);

procedure __dynamic_pr_debug.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    return;
}



const oz_get_port_from_addr: ref;

axiom oz_get_port_from_addr == $sub.ref(0, 318679);

procedure oz_get_port_from_addr($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;



implementation oz_get_port_from_addr($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $p11: ref;
  var $i12: i32;
  var $i10: i32;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $p57: ref;
  var $i58: i8;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} {:cexpr "oz_get_port_from_addr:arg:bus_addr"} boogie_si_record_i8($i1);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(128, 1)), $mul.ref(0, 400)), $mul.ref(96, 1));
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.1, $p4);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i1);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i6, $i7);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(128, 1)), $mul.ref(1, 400)), $mul.ref(96, 1));
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.1, $p15);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i1);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i17, $i18);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i9 := 1;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(128, 1)), $mul.ref(2, 400)), $mul.ref(96, 1));
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.1, $p22);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i1);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i24, $i25);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i9 := 2;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(128, 1)), $mul.ref(3, 400)), $mul.ref(96, 1));
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.1, $p29);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i1);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i31, $i32);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i9 := 3;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(128, 1)), $mul.ref(4, 400)), $mul.ref(96, 1));
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.1, $p36);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i1);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i38, $i39);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i9 := 4;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(128, 1)), $mul.ref(5, 400)), $mul.ref(96, 1));
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.1, $p43);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i1);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i45, $i46);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i9 := 5;
    assume {:branchcond $i47} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(128, 1)), $mul.ref(6, 400)), $mul.ref(96, 1));
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.1, $p50);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i1);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i52, $i53);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i9 := 6;
    assume {:branchcond $i54} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(128, 1)), $mul.ref(7, 400)), $mul.ref(96, 1));
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.1, $p57);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i1);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i59, $i60);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i9 := 7;
    assume {:branchcond $i61} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(120, 1));
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.1, $p11);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i10 := $i12;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i61 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb6;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb4;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb4;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb4;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb4;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb4;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb4;
}



const oz_claim_hpd: ref;

axiom oz_claim_hpd == $sub.ref(0, 319711);

procedure oz_claim_hpd($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.16, $M.1, assertsPassed;



implementation oz_claim_hpd($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(16, 1));
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} ldv_spin_lock_bh_126($p3);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(8, 1));
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} ldv_spin_unlock_bh_127($p8);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} oz_usb_get($p5);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_358:
    assume !assertsPassed;
    return;
}



const oz_usb_control_req: ref;

axiom oz_usb_control_req == $sub.ref(0, 320743);

procedure oz_usb_control_req($p0: ref, $i1: i8, $p2: ref, $p3: ref, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.9, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr;



implementation oz_usb_control_req($p0: ref, $i1: i8, $p2: ref, $p3: ref, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i8;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i8;
  var $i45: i32;
  var $i46: i8;
  var $i47: i32;
  var $i48: i8;
  var $i49: i8;
  var $i50: i32;
  var $i51: i8;
  var $p52: ref;
  var $i53: i16;
  var $i54: i32;
  var $i55: i16;
  var $i56: i32;
  var $i58: i32;
  var $i59: i8;
  var $i60: i8;
  var $i61: i32;
  var $i62: i8;
  var $i63: i32;
  var $i64: i8;
  var $i65: i8;
  var $i66: i32;
  var $i67: i8;
  var $i68: i32;
  var $i69: i8;
  var $i70: i32;
  var $i71: i8;
  var $i72: i32;
  var $i73: i32;
  var $i74: i8;
  var $p75: ref;
  var $i76: i8;
  var $i77: i32;
  var $i78: i32;
  var $i79: i8;
  var $i80: i8;
  var $i81: i32;
  var $i82: i8;
  var $p83: ref;
  var $i84: i16;
  var $i85: i32;
  var $i86: i16;
  var $i87: i32;
  var $i88: i32;
  var $i89: i8;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i93: i32;
  var $i94: i8;
  var $i95: i8;
  var $i96: i32;
  var $i97: i8;
  var $p98: ref;
  var $i99: i16;
  var $i100: i32;
  var $i101: i16;
  var $i102: i32;
  var $i57: i32;
  var $i104: i32;
  var $i105: i8;
  var $p106: ref;
  var $i107: i8;
  var $i108: i32;
  var $i109: i8;
  var $p110: ref;
  var $i111: i8;
  var $i112: i32;
  var $i113: i8;
  var $p114: ref;
  var $i115: i16;
  var $i116: i32;
  var $i117: i16;
  var $p118: ref;
  var $i119: i16;
  var $i120: i32;
  var $i121: i16;
  var $i122: i32;
  var $i103: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} {:cexpr "oz_usb_control_req:arg:req_id"} boogie_si_record_i8($i1);
    call {:si_unique_call 455} {:cexpr "oz_usb_control_req:arg:data_len"} boogie_si_record_i32($i4);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.1, $p5);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    call {:si_unique_call 456} {:cexpr "wvalue"} boogie_si_record_i32($i7);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.1, $p8);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    call {:si_unique_call 457} {:cexpr "windex"} boogie_si_record_i32($i10);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.1, $p11);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    call {:si_unique_call 458} {:cexpr "wlength"} boogie_si_record_i32($i13);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.1, $p14);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 96);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i1);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i32.i8($i104);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i107 := $load.i8($M.1, $p106);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i32($i107);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i32.i8($i108);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.1, $p110);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i32.i8($i112);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i115 := $load.i16($M.1, $p114);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i116 := $zext.i16.i32($i115);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i117 := $trunc.i32.i16($i116);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i119 := $load.i16($M.1, $p118);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i120 := $zext.i16.i32($i119);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i121 := $trunc.i32.i16($i120);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $i122 := oz_usb_vendor_class_req($p0, $i105, $i109, $i113, $i117, $i121, $p3, $i4);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    call {:si_unique_call 460} {:cexpr "rc"} boogie_si_record_i32($i122);
    assume {:verifier.code 0} true;
    $i103 := $i122;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $r := $i103;
    return;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.1, $p19);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 6);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.1, $p23);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 9);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.1, $p27);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 11);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.1, $p31);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 3);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.1, $p35);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 1);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i57 := 0;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i103 := $i57;
    goto $bb25;

  $bb19:
    assume $i38 == 1;
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i1);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i32.i8($i88);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.1, $p90);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i93 := $and.i32($i92, 15);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i32.i8($i93);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i8($i10);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i8($i96);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i99 := $load.i16($M.1, $p98);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i100 := $zext.i16.i32($i99);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i32.i16($i100);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $i102 := oz_usb_set_clear_feature_req($p0, $i89, 11, $i94, $i97, $i101);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    call {:si_unique_call 472} {:cexpr "rc"} boogie_si_record_i32($i102);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i57 := $i102;
    goto $bb24;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i34 == 1;
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i1);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i8($i73);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.1, $p75);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i78 := $and.i32($i77, 15);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i32.i8($i78);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i32.i8($i10);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i32.i8($i81);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i84 := $load.i16($M.1, $p83);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i85 := $zext.i16.i32($i84);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i16($i85);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} $i87 := oz_usb_set_clear_feature_req($p0, $i74, 13, $i79, $i82, $i86);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    call {:si_unique_call 470} {:cexpr "rc"} boogie_si_record_i32($i87);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i57 := $i87;
    goto $bb24;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i8($i10);
    call {:si_unique_call 465} {:cexpr "if_num"} boogie_si_record_i8($i64);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i8($i7);
    call {:si_unique_call 466} {:cexpr "alt"} boogie_si_record_i8($i65);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i1);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i8($i66);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i64);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i8($i68);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i65);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i8($i70);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} $i72 := oz_usb_set_interface_req($p0, $i67, $i69, $i71);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    call {:si_unique_call 468} {:cexpr "rc"} boogie_si_record_i32($i72);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i57 := $i72;
    goto $bb24;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i26 == 1;
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i1);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i8($i58);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i7);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i8($i61);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $i63 := oz_usb_set_config_req($p0, $i59, $i62);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    call {:si_unique_call 464} {:cexpr "rc"} boogie_si_record_i32($i63);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i57 := $i63;
    goto $bb24;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i22 == 1;
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i1);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.1, $p41);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i43);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $i45 := $lshr.i32($i7, 8);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i47);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i7);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i53 := $load.i16($M.1, $p52);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i53);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i16($i54);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} $i56 := oz_usb_get_desc_req($p0, $i40, $i44, $i48, $i51, $i55, 0, $i13);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    call {:si_unique_call 462} {:cexpr "rc"} boogie_si_record_i32($i56);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i57 := $i56;
    goto $bb24;

  SeqInstr_367:
    assume !assertsPassed;
    return;
}



const oz_enqueue_ep_urb: ref;

axiom oz_enqueue_ep_urb == $sub.ref(0, 321775);

procedure oz_enqueue_ep_urb($p0: ref, $i1: i8, $i2: i32, $p3: ref, $i4: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.16, assertsPassed, $M.15;



implementation oz_enqueue_ep_urb($p0: ref, $i1: i8, $i2: i32, $p3: ref, $i4: i8) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $p32: ref;
  var $p33: ref;
  var $i35: i32;
  var $i36: i64;
  var $p38: ref;
  var $p39: ref;
  var $p34: ref;
  var $i40: i64;
  var $i41: i1;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i42: i32;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} {:cexpr "oz_enqueue_ep_urb:arg:ep_addr"} boogie_si_record_i8($i1);
    call {:si_unique_call 474} {:cexpr "oz_enqueue_ep_urb:arg:in_dir"} boogie_si_record_i32($i2);
    call {:si_unique_call 475} {:cexpr "oz_enqueue_ep_urb:arg:req_id"} boogie_si_record_i8($i4);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i1);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i32($i5, 15);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} $p8 := oz_alloc_urb_link();
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(36, 1));
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p11, 0);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p12, $p3);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p13, $i4);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(33, 1));
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p14, $i1);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(16, 1));
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} ldv_spin_lock_bh_126($p17);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 192)), $mul.ref(24, 1));
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.1, $p18);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i2, 0);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i1);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref($i36, 8));
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.1, $p38);
    assume {:verifier.code 0} true;
    $p34 := $p39;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p34);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p34, $mul.ref(0, 96)), $mul.ref(57, 1));
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.1, $p43);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 3);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 3);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(8, 1));
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.1, $p54);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i68 := $sub.i32(0, 32);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i42 := $i68;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(16, 1));
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.1, $p69);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} ldv_spin_unlock_bh_127($p71);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i42, 0);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i7 := $i42;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb35:
    assume $i72 == 1;
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} oz_free_urb_link($p8);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i57 == 1;
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p34, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} list_add_tail($p58, $p59);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i2, 0);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i68 := 0;
    goto $bb34;

  $bb26:
    assume $i60 == 1;
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i1);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb28;

  $bb29:
    assume $i62 == 1;
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p34, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.1, $p63);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i64, 0);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb28;

  $bb31:
    assume $i65 == 1;
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p34, $mul.ref(0, 96)), $mul.ref(32, 1));
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} getrawmonotonic($p66);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p34, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p67, 0);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb18:
    assume $i47 == 1;
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p34, $mul.ref(0, 96)), $mul.ref(84, 1));
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.1, $p48);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i50 := $sgt.i32($i49, 0);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb20;

  $bb21:
    assume $i50 == 1;
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} oz_free_urb_link($p8);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(16, 1));
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.1, $p51);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} ldv_spin_unlock_bh_127($p53);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} oz_complete_buffered_urb($p0, $p34, $p3);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  SeqInstr_400:
    assume !assertsPassed;
    return;

  SeqInstr_397:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i41 == 1;
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, 12);
    goto $bb16;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i1);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref($i30, 8));
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $p34 := $p33;
    goto $bb13;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(16, 1));
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} ldv_spin_unlock_bh_127($p23);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(16, 1));
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.1, $p24);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 3344)), $mul.ref(3336, 1));
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} oz_complete_urb($p27, $p3, 0);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} oz_free_urb_link($p8);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;
}



const oz_usb_request_heartbeat: ref;

axiom oz_usb_request_heartbeat == $sub.ref(0, 322807);

procedure oz_usb_request_heartbeat($p0: ref);
  free requires assertsPassed;
  modifies $M.30, $M.31, $M.1, $M.32, $M.13, $M.33, $M.34, $M.35, $M.36, $M.37, $CurrAddr, assertsPassed, $M.38;



implementation oz_usb_request_heartbeat($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} oz_pd_request_heartbeat($p9);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_403:
    assume !assertsPassed;
    return;
}



const oz_pd_request_heartbeat: ref;

axiom oz_pd_request_heartbeat == $sub.ref(0, 323839);

procedure oz_pd_request_heartbeat($p0: ref);
  free requires assertsPassed;
  modifies $M.30, $M.31, $M.1, $M.32, $M.13, $M.33, $M.34, $M.35, $M.36, $M.37, $CurrAddr, assertsPassed, $M.38;



implementation oz_pd_request_heartbeat($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(88, 1));
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.1, $p1);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i6 := 8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} oz_timer_add($p0, 2, $i6);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(88, 1));
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.1, $p4);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;
}



const oz_timer_add: ref;

axiom oz_timer_add == $sub.ref(0, 324871);

procedure oz_timer_add($p0: ref, $i1: i32, $i2: i64);
  free requires assertsPassed;
  modifies $M.30, $M.31, $M.1, $M.32, $M.13, $M.33, $M.34, $M.35, $M.36, $M.37, $CurrAddr, assertsPassed, $M.38;



implementation oz_timer_add($p0: ref, $i1: i32, $i2: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i38: i8;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 496} {:cexpr "oz_timer_add:arg:type"} boogie_si_record_i32($i1);
    call {:si_unique_call 497} {:cexpr "oz_timer_add:arg:due_time"} boogie_si_record_i64($i2);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} ldv_spin_lock_bh_121(g_polling_lock);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i1, 1);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i1, 3);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i1, 2);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} ldv_spin_unlock_bh_122(g_polling_lock);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i11 == 1;
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(872, 1));
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $i41 := hrtimer_active($p40);
    call {:si_unique_call 502} {:cexpr "tmp___3"} boogie_si_record_i32($i41);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18:
    assume $i42 == 1;
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i43 := $udiv.i64($i2, 1000);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i44 := $urem.i64($i2, 1000);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i45 := $mul.i64($i44, 1000000);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $i46 := ktime_set($i43, $i45);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p8, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $M.32 := $store.i64($M.32, $p47, $i46);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p5);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p8);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_51 := $M.32;
    cmdloc_dummy_var_52 := $M.32;
    call {:si_unique_call 512} cmdloc_dummy_var_53 := $memcpy.i8(cmdloc_dummy_var_51, cmdloc_dummy_var_52, $p48, $p49, 8, $zext.i32.i64(8), 0 == 1);
    $M.32 := cmdloc_dummy_var_53;
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(872, 1));
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.32, $p51);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} vslice_dummy_var_143 := hrtimer_start($p50, $i52, 1);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(968, 1));
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $i13 := hrtimer_active($p12);
    call {:si_unique_call 500} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i14 == 1);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i27 := $udiv.i64($i2, 1000);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $i28 := $urem.i64($i2, 1000);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i29 := $mul.i64($i28, 1000000);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $i30 := ktime_set($i27, $i29);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $M.31 := $store.i64($M.31, $p31, $i30);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p4);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p7);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_48 := $M.31;
    cmdloc_dummy_var_49 := $M.31;
    call {:si_unique_call 508} cmdloc_dummy_var_50 := $memcpy.i8(cmdloc_dummy_var_48, cmdloc_dummy_var_49, $p32, $p33, 8, $zext.i32.i64(8), 0 == 1);
    $M.31 := cmdloc_dummy_var_50;
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(968, 1));
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.31, $p35);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} vslice_dummy_var_142 := hrtimer_start($p34, $i36, 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i1);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(1064, 1));
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p39, $i38);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i14 == 1;
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i15 := $udiv.i64($i2, 1000);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i16 := $urem.i64($i2, 1000);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i17 := $mul.i64($i16, 1000000);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $i18 := ktime_set($i15, $i17);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $M.30 := $store.i64($M.30, $p19, $i18);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p3);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p6);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_45 := $M.30;
    cmdloc_dummy_var_46 := $M.30;
    call {:si_unique_call 504} cmdloc_dummy_var_47 := $memcpy.i8(cmdloc_dummy_var_45, cmdloc_dummy_var_46, $p20, $p21, 8, $zext.i32.i64(8), 0 == 1);
    $M.30 := cmdloc_dummy_var_47;
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(968, 1));
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.30, $p23);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} hrtimer_set_expires($p22, $i24);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(968, 1));
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} vslice_dummy_var_141 := hrtimer_start_expires($p25, 1);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_409:
    assume !assertsPassed;
    return;
}



const ktime_set: ref;

axiom ktime_set == $sub.ref(0, 325903);

procedure ktime_set($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.33, $CurrAddr;



implementation ktime_set($i0: i64, $i1: i64) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;
  var cmdloc_dummy_var_59: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 517} {:cexpr "ktime_set:arg:secs"} boogie_si_record_i64($i0);
    call {:si_unique_call 518} {:cexpr "ktime_set:arg:nsecs"} boogie_si_record_i64($i1);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i64($i0, 9223372035);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 520} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $mul.i64($i0, 1000000000);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, $i1);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p4);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $M.33 := $store.i64($M.33, $p15, $i14);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p2);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p4);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_57 := $M.33;
    cmdloc_dummy_var_58 := $M.33;
    call {:si_unique_call 522} cmdloc_dummy_var_59 := $memcpy.i8(cmdloc_dummy_var_57, cmdloc_dummy_var_58, $p16, $p17, 8, $zext.i32.i64(8), 0 == 1);
    $M.33 := cmdloc_dummy_var_59;
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.33, $p18);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p3);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $M.33 := $store.i64($M.33, $p10, 9223372036854775807);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_54 := $M.33;
    cmdloc_dummy_var_55 := $M.33;
    call {:si_unique_call 521} cmdloc_dummy_var_56 := $memcpy.i8(cmdloc_dummy_var_54, cmdloc_dummy_var_55, $p11, $p12, 8, $zext.i32.i64(8), 0 == 1);
    $M.33 := cmdloc_dummy_var_56;
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const hrtimer_set_expires: ref;

axiom hrtimer_set_expires == $sub.ref(0, 326935);

procedure hrtimer_set_expires($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation hrtimer_set_expires($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;
  var cmdloc_dummy_var_64: [ref]i8;
  var cmdloc_dummy_var_65: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p3, $i1);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_60 := $M.1;
    cmdloc_dummy_var_61 := $M.1;
    call {:si_unique_call 524} cmdloc_dummy_var_62 := $memcpy.i8(cmdloc_dummy_var_60, cmdloc_dummy_var_61, $p6, $p7, 8, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_62;
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(32, 1));
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_63 := $M.1;
    cmdloc_dummy_var_64 := $M.1;
    call {:si_unique_call 525} cmdloc_dummy_var_65 := $memcpy.i8(cmdloc_dummy_var_63, cmdloc_dummy_var_64, $p9, $p10, 8, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_65;
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    return;
}



const hrtimer_start_expires: ref;

axiom hrtimer_start_expires == $sub.ref(0, 327967);

procedure hrtimer_start_expires($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.34, $M.35, $M.36, $M.1, $M.38, $CurrAddr;



implementation hrtimer_start_expires($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i32;
  var cmdloc_dummy_var_66: [ref]i8;
  var cmdloc_dummy_var_67: [ref]i8;
  var cmdloc_dummy_var_68: [ref]i8;
  var cmdloc_dummy_var_69: [ref]i8;
  var cmdloc_dummy_var_70: [ref]i8;
  var cmdloc_dummy_var_71: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 531} {:cexpr "hrtimer_start_expires:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $i7 := hrtimer_get_softexpires($p0);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $M.34 := $store.i64($M.34, $p8, $i7);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p5);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_66 := $M.34;
    cmdloc_dummy_var_67 := $M.34;
    call {:si_unique_call 533} cmdloc_dummy_var_68 := $memcpy.i8(cmdloc_dummy_var_66, cmdloc_dummy_var_67, $p9, $p10, 8, $zext.i32.i64(8), 0 == 1);
    $M.34 := cmdloc_dummy_var_68;
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $i11 := hrtimer_get_expires($p0);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $M.35 := $store.i64($M.35, $p12, $i11);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p3);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p6);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_69 := $M.35;
    cmdloc_dummy_var_70 := $M.35;
    call {:si_unique_call 535} cmdloc_dummy_var_71 := $memcpy.i8(cmdloc_dummy_var_69, cmdloc_dummy_var_70, $p13, $p14, 8, $zext.i32.i64(8), 0 == 1);
    $M.35 := cmdloc_dummy_var_71;
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p3);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.35, $p15);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p2);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.34, $p17);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i19 := $sub.i64($i16, $i18);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p4);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $M.36 := $store.i64($M.36, $p20, $i19);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p4);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.36, $p21);
    call {:si_unique_call 536} {:cexpr "delta"} boogie_si_record_i64($i22);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.34, $p23);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} $i25 := hrtimer_start_range_ns($p0, $i24, $i22, $i1);
    call {:si_unique_call 538} {:cexpr "tmp"} boogie_si_record_i32($i25);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;
}



const hrtimer_start: ref;

axiom hrtimer_start == $sub.ref(0, 328999);

procedure hrtimer_start($p0: ref, $i1: i64, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.37, $CurrAddr;



implementation hrtimer_start($p0: ref, $i1: i64, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.37 := $store.i64($M.37, $p4, $i1);
    call {:si_unique_call 540} {:cexpr "hrtimer_start:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 1} true;
    call {:si_unique_call 541} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 542} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const hrtimer_get_softexpires: ref;

axiom hrtimer_get_softexpires == $sub.ref(0, 330031);

procedure hrtimer_get_softexpires($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation hrtimer_get_softexpires($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var cmdloc_dummy_var_72: [ref]i8;
  var cmdloc_dummy_var_73: [ref]i8;
  var cmdloc_dummy_var_74: [ref]i8;
  var cmdloc_dummy_var_75: [ref]i8;
  var cmdloc_dummy_var_76: [ref]i8;
  var cmdloc_dummy_var_77: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(32, 1));
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p3);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_72 := $M.1;
    cmdloc_dummy_var_73 := $M.1;
    call {:si_unique_call 545} cmdloc_dummy_var_74 := $memcpy.i8(cmdloc_dummy_var_72, cmdloc_dummy_var_73, $p4, $p5, 8, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_74;
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_75 := $M.1;
    cmdloc_dummy_var_76 := $M.1;
    call {:si_unique_call 546} cmdloc_dummy_var_77 := $memcpy.i8(cmdloc_dummy_var_75, cmdloc_dummy_var_76, $p6, $p7, 8, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_77;
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.1, $p8);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const hrtimer_get_expires: ref;

axiom hrtimer_get_expires == $sub.ref(0, 331063);

procedure hrtimer_get_expires($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation hrtimer_get_expires($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var cmdloc_dummy_var_78: [ref]i8;
  var cmdloc_dummy_var_79: [ref]i8;
  var cmdloc_dummy_var_80: [ref]i8;
  var cmdloc_dummy_var_81: [ref]i8;
  var cmdloc_dummy_var_82: [ref]i8;
  var cmdloc_dummy_var_83: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p4);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_78 := $M.1;
    cmdloc_dummy_var_79 := $M.1;
    call {:si_unique_call 549} cmdloc_dummy_var_80 := $memcpy.i8(cmdloc_dummy_var_78, cmdloc_dummy_var_79, $p5, $p6, 8, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_80;
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_81 := $M.1;
    cmdloc_dummy_var_82 := $M.1;
    call {:si_unique_call 550} cmdloc_dummy_var_83 := $memcpy.i8(cmdloc_dummy_var_81, cmdloc_dummy_var_82, $p7, $p8, 8, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_83;
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.1, $p9);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const hrtimer_start_range_ns: ref;

axiom hrtimer_start_range_ns == $sub.ref(0, 332095);

procedure hrtimer_start_range_ns($p0: ref, $i1: i64, $i2: i64, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.38, $CurrAddr;



implementation hrtimer_start_range_ns($p0: ref, $i1: i64, $i2: i64, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.38 := $store.i64($M.38, $p5, $i1);
    call {:si_unique_call 552} {:cexpr "hrtimer_start_range_ns:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 553} {:cexpr "hrtimer_start_range_ns:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 1} true;
    call {:si_unique_call 554} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 555} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const oz_alloc_urb_link: ref;

axiom oz_alloc_urb_link == $sub.ref(0, 333127);

procedure oz_alloc_urb_link() returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation oz_alloc_urb_link() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $p0 := $M.14;
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} $p1 := ldv_kmem_cache_alloc_121($p0, 32);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_415:
    assume !assertsPassed;
    return;
}



const oz_complete_buffered_urb: ref;

axiom oz_complete_buffered_urb == $sub.ref(0, 334159);

procedure oz_complete_buffered_urb($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.1, $M.15, assertsPassed;



implementation oz_complete_buffered_urb($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $i16: i32;
  var $i14: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i64;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i64;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var cmdloc_dummy_var_84: [ref]i8;
  var cmdloc_dummy_var_85: [ref]i8;
  var cmdloc_dummy_var_86: [ref]i8;
  var cmdloc_dummy_var_87: [ref]i8;
  var cmdloc_dummy_var_88: [ref]i8;
  var cmdloc_dummy_var_89: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p4, $mul.ref($i7, 1));
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.1, $p8);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    call {:si_unique_call 557} {:cexpr "data_len"} boogie_si_record_i32($i10);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.1, $p11);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i13 := $ule.i32($i10, $i12);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.1, $p15);
    call {:si_unique_call 558} {:cexpr "available_space"} boogie_si_record_i32($i16);
    assume {:verifier.code 0} true;
    $i14 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.1, $p17);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, 1);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p20, $i19);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.1, $p21);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.1, $p23);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i22, $i24);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.1, $p27);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.1, $p29);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32($i28, $i30);
    call {:si_unique_call 559} {:cexpr "copy_len"} boogie_si_record_i32($i31);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $i32 := $sge.i32($i31, $i14);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $i31;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.1, $p36);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.1, $p38);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p37, $mul.ref($i40, 1));
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i33);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_84 := $M.1;
    cmdloc_dummy_var_85 := $M.1;
    call {:si_unique_call 560} cmdloc_dummy_var_86 := $memcpy.i8(cmdloc_dummy_var_84, cmdloc_dummy_var_85, $p35, $p41, $i42, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_86;
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i33, $i14);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i43 == 1);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.1, $p54);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i55, $i33);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p57, $i56);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p58, $i14);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.1, $p59);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.1, $p61);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i60, $i62);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(84, 1));
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.1, $p65);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i67 := $sub.i32($i66, 1);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(84, 1));
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p68, $i67);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(16, 1));
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.1, $p69);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 3344)), $mul.ref(3336, 1));
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.1, $p71);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} oz_complete_urb($p72, $p2, 0);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i63 == 1;
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p64, 0);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i43 == 1;
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i33);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p45, $mul.ref($i46, 1));
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.1, $p48);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32($i14, $i33);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i50);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_87 := $M.1;
    cmdloc_dummy_var_88 := $M.1;
    call {:si_unique_call 561} cmdloc_dummy_var_89 := $memcpy.i8(cmdloc_dummy_var_87, cmdloc_dummy_var_88, $p47, $p49, $i51, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_89;
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32($i14, $i33);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p53, $i52);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i32 == 1;
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i33 := $i14;
    goto $bb9;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p26, 0);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i14 := $i10;
    goto $bb3;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 335191);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} __list_add($p0, $p3, $p1);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 336223);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    return;
}



const ldv_kmem_cache_alloc_121: ref;

axiom ldv_kmem_cache_alloc_121 == $sub.ref(0, 337255);

procedure ldv_kmem_cache_alloc_121($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_kmem_cache_alloc_121($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} {:cexpr "ldv_kmem_cache_alloc_121:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} ldv_check_alloc_flags($i1);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $p2 := ldv_malloc_unknown_size();
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_421:
    assume !assertsPassed;
    return;
}



const ldv_malloc_unknown_size: ref;

axiom ldv_malloc_unknown_size == $sub.ref(0, 338287);

procedure ldv_malloc_unknown_size() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_malloc_unknown_size() returns ($r: ref)
{
  var $i0: i32;
  var $i1: i1;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} $i0 := ldv_undef_int();
    call {:si_unique_call 568} {:cexpr "tmp___1"} boogie_si_record_i32($i0);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} $p2 := external_allocated_data();
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} ldv_assume($i5);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $i6 := ldv_is_err($p2);
    call {:si_unique_call 572} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} ldv_assume($i8);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $p9 := $p2;
    goto $bb3;
}



const external_allocated_data: ref;

axiom external_allocated_data == $sub.ref(0, 339319);

procedure external_allocated_data() returns ($r: ref);
  free requires assertsPassed;



implementation external_allocated_data() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $p0 := external_alloc();
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 340351);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 1} true;
    call {:si_unique_call 575} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 576} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const oz_usb_get_desc_req: ref;

axiom oz_usb_get_desc_req == $sub.ref(0, 341383);

procedure oz_usb_get_desc_req($p0: ref, $i1: i8, $i2: i8, $i3: i8, $i4: i8, $i5: i16, $i6: i32, $i7: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.9, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr;



implementation oz_usb_get_desc_req($p0: ref, $i1: i8, $i2: i8, $i3: i8, $i4: i8, $i5: i16, $i6: i32, $i7: i32) returns ($r: i32)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i16;
  var $i30: i32;
  var $i31: i16;
  var $i32: i16;
  var $i33: i32;
  var $i34: i16;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i8;
  var $i40: i16;
  var $i41: i32;
  var $i42: i16;
  var $i43: i32;
  var $i44: i16;
  var $i45: i32;
  var $i46: i32;
  var $i47: i16;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} {:cexpr "oz_usb_get_desc_req:arg:req_id"} boogie_si_record_i8($i1);
    call {:si_unique_call 578} {:cexpr "oz_usb_get_desc_req:arg:req_type"} boogie_si_record_i8($i2);
    call {:si_unique_call 579} {:cexpr "oz_usb_get_desc_req:arg:desc_type"} boogie_si_record_i8($i3);
    call {:si_unique_call 580} {:cexpr "oz_usb_get_desc_req:arg:index"} boogie_si_record_i8($i4);
    call {:si_unique_call 581} {:cexpr "oz_usb_get_desc_req:arg:windex"} boogie_si_record_i16($i5);
    call {:si_unique_call 582} {:cexpr "oz_usb_get_desc_req:arg:offset"} boogie_si_record_i32($i6);
    call {:si_unique_call 583} {:cexpr "oz_usb_get_desc_req:arg:len"} boogie_si_record_i32($i7);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 1232)), $mul.ref(112, 1));
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p10, $mul.ref(0, 1232)), $mul.ref(112, 1));
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $p13 := oz_elt_info_alloc($p12);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $i14 := $sgt.i32($i7, 200);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p13);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p13, $mul.ref(0, 328)), $mul.ref(64, 1));
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p21, 13);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p20);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p22, $mul.ref(1, 14)), $mul.ref(2, 1));
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p24, 1);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p22, $mul.ref(1, 14)), $mul.ref(3, 1));
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p25, $i1);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p22, $mul.ref(1, 14)), $mul.ref(4, 1));
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i16($i6);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i30);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} put_unaligned_le16($i31, $p27);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p22, $mul.ref(1, 14)), $mul.ref(6, 1));
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i16($i15);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} put_unaligned_le16($i42, $p37);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p22, $mul.ref(1, 14)), $mul.ref(8, 1));
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p49, $i2);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p22, $mul.ref(1, 14)), $mul.ref(9, 1));
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p50, $i3);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p22, $mul.ref(1, 14)), $mul.ref(10, 1));
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p51, $i5);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p22, $mul.ref(1, 14)), $mul.ref(12, 1));
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p52, $i4);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} $i53 := oz_usb_submit_elt($p11, $p13, $p8, 0, 0);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    call {:si_unique_call 591} {:cexpr "tmp___6"} boogie_si_record_i32($i53);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i18 := $i53;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 1);
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i15 := 200;
    goto $bb3;

  SeqInstr_424:
    assume !assertsPassed;
    return;
}



const oz_usb_set_config_req: ref;

axiom oz_usb_set_config_req == $sub.ref(0, 342415);

procedure oz_usb_set_config_req($p0: ref, $i1: i8, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.9, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr;



implementation oz_usb_set_config_req($p0: ref, $i1: i8, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} {:cexpr "oz_usb_set_config_req:arg:req_id"} boogie_si_record_i8($i1);
    call {:si_unique_call 596} {:cexpr "oz_usb_set_config_req:arg:index"} boogie_si_record_i8($i2);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1232)), $mul.ref(112, 1));
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 1232)), $mul.ref(112, 1));
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $p8 := oz_elt_info_alloc($p7);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p8, $mul.ref(0, 328)), $mul.ref(64, 1));
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p14, 5);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p13);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p15, $mul.ref(1, 5)), $mul.ref(2, 1));
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p17, 3);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p15, $mul.ref(1, 5)), $mul.ref(3, 1));
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p18, $i1);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p15, $mul.ref(1, 5)), $mul.ref(4, 1));
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p19, $i2);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} $i20 := oz_usb_submit_elt($p6, $p8, $p3, 0, 0);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    call {:si_unique_call 599} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i11 := $i20;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 1);
    goto $bb3;

  SeqInstr_430:
    assume !assertsPassed;
    return;
}



const oz_usb_set_interface_req: ref;

axiom oz_usb_set_interface_req == $sub.ref(0, 343447);

procedure oz_usb_set_interface_req($p0: ref, $i1: i8, $i2: i8, $i3: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.9, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr;



implementation oz_usb_set_interface_req($p0: ref, $i1: i8, $i2: i8, $i3: i8) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} {:cexpr "oz_usb_set_interface_req:arg:req_id"} boogie_si_record_i8($i1);
    call {:si_unique_call 601} {:cexpr "oz_usb_set_interface_req:arg:index"} boogie_si_record_i8($i2);
    call {:si_unique_call 602} {:cexpr "oz_usb_set_interface_req:arg:alt"} boogie_si_record_i8($i3);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1232)), $mul.ref(112, 1));
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 1232)), $mul.ref(112, 1));
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $p9 := oz_elt_info_alloc($p8);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p9, $mul.ref(0, 328)), $mul.ref(64, 1));
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p15, 6);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p14);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p16, $mul.ref(1, 6)), $mul.ref(2, 1));
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p18, 5);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p16, $mul.ref(1, 6)), $mul.ref(3, 1));
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p19, $i1);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p16, $mul.ref(1, 6)), $mul.ref(4, 1));
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p20, $i2);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p16, $mul.ref(1, 6)), $mul.ref(5, 1));
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p21, $i3);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $i22 := oz_usb_submit_elt($p7, $p9, $p4, 0, 0);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    call {:si_unique_call 605} {:cexpr "tmp___0"} boogie_si_record_i32($i22);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i12 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 1);
    goto $bb3;

  SeqInstr_436:
    assume !assertsPassed;
    return;
}



const oz_usb_set_clear_feature_req: ref;

axiom oz_usb_set_clear_feature_req == $sub.ref(0, 344479);

procedure oz_usb_set_clear_feature_req($p0: ref, $i1: i8, $i2: i8, $i3: i8, $i4: i8, $i5: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.9, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr;



implementation oz_usb_set_clear_feature_req($p0: ref, $i1: i8, $i2: i8, $i3: i8, $i4: i8, $i5: i16) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i16;
  var $i29: i32;
  var $i30: i64;
  var $i31: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} {:cexpr "oz_usb_set_clear_feature_req:arg:req_id"} boogie_si_record_i8($i1);
    call {:si_unique_call 607} {:cexpr "oz_usb_set_clear_feature_req:arg:type"} boogie_si_record_i8($i2);
    call {:si_unique_call 608} {:cexpr "oz_usb_set_clear_feature_req:arg:recipient"} boogie_si_record_i8($i3);
    call {:si_unique_call 609} {:cexpr "oz_usb_set_clear_feature_req:arg:index"} boogie_si_record_i8($i4);
    call {:si_unique_call 610} {:cexpr "oz_usb_set_clear_feature_req:arg:feature"} boogie_si_record_i16($i5);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1232)), $mul.ref(112, 1));
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref(0, 1232)), $mul.ref(112, 1));
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} $p11 := oz_elt_info_alloc($p10);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p11, $mul.ref(0, 328)), $mul.ref(64, 1));
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p17, 8);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p16);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p18, $mul.ref(1, 8)), $mul.ref(2, 1));
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p20, $i2);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p18, $mul.ref(1, 8)), $mul.ref(3, 1));
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p21, $i1);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p18, $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p22, $i3);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p18, $mul.ref(1, 8)), $mul.ref(5, 1));
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p23, $i4);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p18, $mul.ref(1, 8)), $mul.ref(6, 1));
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i5);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} put_unaligned_le16($i28, $p25);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $i31 := oz_usb_submit_elt($p9, $p11, $p6, 0, 0);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    call {:si_unique_call 614} {:cexpr "tmp___0"} boogie_si_record_i32($i31);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i14 := $i31;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 1);
    goto $bb3;

  SeqInstr_442:
    assume !assertsPassed;
    return;
}



const oz_usb_vendor_class_req: ref;

axiom oz_usb_vendor_class_req == $sub.ref(0, 345511);

procedure oz_usb_vendor_class_req($p0: ref, $i1: i8, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.9, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr;



implementation oz_usb_vendor_class_req($p0: ref, $i1: i8, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i32) returns ($r: i32)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i8;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i16;
  var $i35: i32;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i16;
  var $i42: i32;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i32;
  var $i16: i32;
  var cmdloc_dummy_var_90: [ref]i8;
  var cmdloc_dummy_var_91: [ref]i8;
  var cmdloc_dummy_var_92: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} {:cexpr "oz_usb_vendor_class_req:arg:req_id"} boogie_si_record_i8($i1);
    call {:si_unique_call 619} {:cexpr "oz_usb_vendor_class_req:arg:req_type"} boogie_si_record_i8($i2);
    call {:si_unique_call 620} {:cexpr "oz_usb_vendor_class_req:arg:request"} boogie_si_record_i8($i3);
    call {:si_unique_call 621} {:cexpr "oz_usb_vendor_class_req:arg:value"} boogie_si_record_i16($i4);
    call {:si_unique_call 622} {:cexpr "oz_usb_vendor_class_req:arg:index"} boogie_si_record_i16($i5);
    call {:si_unique_call 623} {:cexpr "oz_usb_vendor_class_req:arg:data_len"} boogie_si_record_i32($i7);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 1232)), $mul.ref(112, 1));
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p10, $mul.ref(0, 1232)), $mul.ref(112, 1));
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $p13 := oz_elt_info_alloc($p12);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p13, $mul.ref(0, 328)), $mul.ref(64, 1));
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i7);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i20, 10);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p18, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p23, $i22);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p18);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p24, $mul.ref(1, 12)), $mul.ref(2, 1));
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p26, 7);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p24, $mul.ref(1, 12)), $mul.ref(3, 1));
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p27, $i1);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p24, $mul.ref(1, 12)), $mul.ref(4, 1));
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p28, $i2);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p24, $mul.ref(1, 12)), $mul.ref(5, 1));
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p29, $i3);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p24, $mul.ref(1, 12)), $mul.ref(6, 1));
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i4);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i16($i33);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} put_unaligned_le16($i34, $p31);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p24, $mul.ref(1, 12)), $mul.ref(8, 1));
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i5);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i16($i40);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} put_unaligned_le16($i41, $p38);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i7, 0);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} $i48 := oz_usb_submit_elt($p11, $p13, $p8, 0, 0);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    call {:si_unique_call 635} {:cexpr "tmp___0"} boogie_si_record_i32($i48);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i16 := $i48;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  SeqInstr_451:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i44 == 1;
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p24, $mul.ref(1, 12)), $mul.ref(10, 1));
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i7);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_90 := $M.1;
    cmdloc_dummy_var_91 := $M.1;
    call {:si_unique_call 633} cmdloc_dummy_var_92 := $memcpy.i8(cmdloc_dummy_var_90, cmdloc_dummy_var_91, $p46, $p6, $i47, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_92;
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 1);
    goto $bb3;

  SeqInstr_448:
    assume !assertsPassed;
    return;
}



const oz_elt_info_alloc: ref;

axiom oz_elt_info_alloc == $sub.ref(0, 346543);

procedure oz_elt_info_alloc($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation oz_elt_info_alloc($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p1 := $M.7;
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $p2 := kmem_cache_zalloc($p1, 32);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 328)), $mul.ref(0, 1));
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} INIT_LIST_HEAD($p6);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 328)), $mul.ref(16, 1));
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} INIT_LIST_HEAD($p7);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_454:
    assume !assertsPassed;
    return;
}



const put_unaligned_le16: ref;

axiom put_unaligned_le16 == $sub.ref(0, 347575);

procedure put_unaligned_le16($i0: i16, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation put_unaligned_le16($i0: i16, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} {:cexpr "put_unaligned_le16:arg:val"} boogie_si_record_i16($i0);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p2, $i0);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    return;
}



const put_unaligned_le32: ref;

axiom put_unaligned_le32 == $sub.ref(0, 348607);

procedure put_unaligned_le32($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation put_unaligned_le32($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} {:cexpr "put_unaligned_le32:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, $i0);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    return;
}



const put_unaligned_le64: ref;

axiom put_unaligned_le64 == $sub.ref(0, 349639);

procedure put_unaligned_le64($i0: i64, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation put_unaligned_le64($i0: i64, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} {:cexpr "put_unaligned_le64:arg:val"} boogie_si_record_i64($i0);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p2, $i0);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    return;
}



const __bad_unaligned_access_size: ref;

axiom __bad_unaligned_access_size == $sub.ref(0, 350671);

procedure __bad_unaligned_access_size();



const oz_usb_submit_elt: ref;

axiom oz_usb_submit_elt == $sub.ref(0, 351703);

procedure oz_usb_submit_elt($p0: ref, $p1: ref, $p2: ref, $i3: i8, $i4: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.9, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr;



implementation oz_usb_submit_elt($p0: ref, $p1: ref, $p2: ref, $i3: i8, $i4: i8) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i8;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i8;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i8;
  var $i36: i32;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} {:cexpr "oz_usb_submit_elt:arg:strid"} boogie_si_record_i8($i3);
    call {:si_unique_call 643} {:cexpr "oz_usb_submit_elt:arg:isoc"} boogie_si_record_i8($i4);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(64, 1));
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p9, 49);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(33, 1));
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p10, 1);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.1, $p11);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 2);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(324, 1));
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p15, $i14);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(1, 2)), $mul.ref(0, 1));
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p16, 1);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} ldv_spin_lock_bh_135($p17);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i4);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i4);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i3);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i8($i36);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $i38 := oz_queue_elt_info($p0, $i35, $i37, $p1);
    call {:si_unique_call 647} {:cexpr "ret"} boogie_si_record_i32($i38);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} ldv_spin_unlock_bh_136($p40);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $r := $i38;
    return;

  SeqInstr_460:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i39 == 1;
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} oz_elt_info_free($p0, $p1);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.1, $p20);
    call {:si_unique_call 645} {:cexpr "tmp"} boogie_si_record_i8($i21);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.1, $p22);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, 1);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i25);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p27, $i26);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p7, $mul.ref(1, 2)), $mul.ref(1, 1));
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p28, $i21);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.1, $p29);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i32 == 1;
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p33, 1);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_457:
    assume !assertsPassed;
    return;
}



const oz_queue_elt_info: ref;

axiom oz_queue_elt_info == $sub.ref(0, 352735);

procedure oz_queue_elt_info($p0: ref, $i1: i8, $i2: i8, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr;



implementation oz_queue_elt_info($p0: ref, $i1: i8, $i2: i8, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p16: ref;
  var $p31: ref;
  var $p32: ref;
  var $p14: ref;
  var $p15: ref;
  var $p25: ref;
  var $p26: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i8;
  var $p58: ref;
  var $i59: i8;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i8;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i24;
  var $i87: i24;
  var $i88: i24;
  var $p89: ref;
  var $p90: ref;
  var $i91: i8;
  var $i92: i64;
  var $i93: i64;
  var $i94: i64;
  var $i95: i1;
  var $p96: ref;
  var $i97: i32;
  var $p98: ref;
  var $i99: i32;
  var $p100: ref;
  var $i101: i32;
  var $p102: ref;
  var $i103: i32;
  var $i104: i1;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i32;
  var $p113: ref;
  var $i114: i32;
  var $i115: i32;
  var $p116: ref;
  var $i117: i32;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $p128: ref;
  var $p127: ref;
  var $i37: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 651} {:cexpr "oz_queue_elt_info:arg:isoc"} boogie_si_record_i8($i1);
    call {:si_unique_call 652} {:cexpr "oz_queue_elt_info:arg:id"} boogie_si_record_i8($i2);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i2);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $p38 := $0.ref;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p3, $mul.ref(0, 328)), $mul.ref(16, 1));
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i124 := $zext.i8.i32($i1);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i124, 0);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i125 == 1);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(88, 1));
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $p127 := $p128;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} list_add_tail($p123, $p127);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $r := $i37;
    return;

  $bb48:
    assume $i125 == 1;
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(104, 1));
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $p127 := $p126;
    goto $bb50;

  $bb20:
    assume $i40 == 1;
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 328)), $mul.ref(64, 1));
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p42, $mul.ref(2, 8)), $mul.ref(0, 1));
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.1, $p44);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 1);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} oz_elt_stream_get($p38);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref(0, 328)), $mul.ref(56, 1));
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p68, $p38);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p38, $mul.ref(0, 48)), $mul.ref(36, 1));
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.1, $p69);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 328)), $mul.ref(324, 1));
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.1, $p71);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i70, $i72);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p38, $mul.ref(0, 48)), $mul.ref(36, 1));
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p74, $i73);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 328)), $mul.ref(0, 1));
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p38, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} list_add_tail($p75, $p76);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $i77 := $M.23;
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i78 := $and.i32($i77, 1);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p38, $mul.ref(0, 48)), $mul.ref(36, 1));
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.1, $p100);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p38, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.1, $p102);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i104 := $ugt.i32($i101, $i103);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i104 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb36:
    assume $i104 == 1;
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    call $p106, $p107, $p108, $p109, $p110, $p111, $i112, $p113, $i114, $i115, $p116, $i117, $i118, $i119, $p120, $i121, $i122 := oz_queue_elt_info_loop_$bb39($p0, $p38, $p100, $p102, $p106, $p107, $p108, $p109, $p110, $p111, $i112, $p113, $i114, $i115, $p116, $i117, $i118, $i119, $p120, $i121, $i122);
    goto $bb39_last;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} $i121 := list_empty($p120);
    call {:si_unique_call 660} {:cexpr "tmp___0"} boogie_si_record_i32($i121);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 0);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i122 == 1);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb43:
    assume $i122 == 1;
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 48)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.1, $p106);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p107);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p108, $mul.ref(0, 328)), $mul.ref(0, 1));
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} list_del_init($p109);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p108, $mul.ref(0, 328)), $mul.ref(16, 1));
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} list_del_init($p110);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p38, $mul.ref(0, 48)), $mul.ref(36, 1));
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.1, $p111);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p108, $mul.ref(0, 328)), $mul.ref(324, 1));
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.1, $p113);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i115 := $sub.i32($i112, $i114);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p38, $mul.ref(0, 48)), $mul.ref(36, 1));
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p116, $i115);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} oz_elt_info_free($p0, $p108);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} oz_elt_stream_put($p38);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.1, $p100);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.1, $p102);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i119 := $ugt.i32($i117, $i118);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i119 == 1);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i119 == 1;
    goto $bb41_dummy;

  $bb30:
    assume $i79 == 1;
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p80, .str.4);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p81, .str.16);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p82, .str.14);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p83, .str.17);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i86 := $load.i24($M.28, $p85);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i87 := $and.i24($i86, $sub.i24(0, 262144));
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i88 := $or.i24($i87, 187);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p85, $i88);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p89, 0);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.29, $p90);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i64($i91);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i93 := $and.i64($i92, 1);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} $i94 := ldv__builtin_expect($i93, 0);
    call {:si_unique_call 657} {:cexpr "tmp"} boogie_si_record_i64($i94);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i95 := $ne.i64($i94, 0);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb32:
    assume $i95 == 1;
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p38, $mul.ref(0, 48)), $mul.ref(36, 1));
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.1, $p96);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p3, $mul.ref(0, 328)), $mul.ref(324, 1));
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.1, $p98);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} __dynamic_pr_debug.ref.ref.i32.i32($p4, .str.17, $i97, $i99);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb22:
    assume $i47 == 1;
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p42, $mul.ref(2, 8)), $mul.ref(2, 1));
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.1, $p48);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 23);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb24;

  $bb25:
    assume $i51 == 1;
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p42, $mul.ref(2, 8)), $mul.ref(4, 1));
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.1, $p52);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 3);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb24;

  $bb27:
    assume $i55 == 1;
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p42, $mul.ref(2, 8)), $mul.ref(6, 1));
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.1, $p56);
    call {:si_unique_call 653} {:cexpr "unit_count"} boogie_si_record_i8($i57);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p38, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.1, $p58);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p42, $mul.ref(2, 8)), $mul.ref(6, 1));
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p60, $i59);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p38, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.1, $p61);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i57);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i63, $i64);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i8($i65);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p38, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p67, $i66);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i10, $i12);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p14, $p15 := $0.ref, $p9;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p25, $p26 := $p15, $p14;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p25);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i33, $i35);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p38 := $p26;
    goto $bb19;

  $bb15:
    assume $i36 == 1;
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32(0, 1);
    goto $bb17;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $p16 := $p9;
    goto $bb6;

  $bb6:
    call $p17, $p18, $i19, $i20, $i21, $i22, $p23, $p24, $p27, $p28, $i29, $i30, $p16, $p31, $p32 := oz_queue_elt_info_loop_$bb6($i2, $i12, $p17, $p18, $i19, $i20, $i21, $i22, $p23, $p24, $p27, $p28, $i29, $i30, $p16, $p31, $p32);
    goto $bb6_last;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 48)), $mul.ref(45, 1));
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.1, $p18);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i2);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i20, $i21);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $p23, $p24 := $p16, $p16;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p16, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.1, $p27);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, $i12);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p31, $p32 := $p16, $p28;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $p14, $p15 := $p31, $p32;
    goto $bb5;

  $bb12:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $p16 := $p28;
    goto $bb12_dummy;

  $bb8:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $p25, $p26 := $p23, $p24;
    goto $bb10;

  $bb41_dummy:
    assume false;
    return;

  $bb39_last:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p38, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4050;

  $bb12_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3925;
}



const oz_elt_stream_get: ref;

axiom oz_elt_stream_get == $sub.ref(0, 353767);

procedure oz_elt_stream_get($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation oz_elt_stream_get($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} atomic_inc($p1);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    return;
}



const oz_elt_stream_put: ref;

axiom oz_elt_stream_put == $sub.ref(0, 354799);

procedure oz_elt_stream_put($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation oz_elt_stream_put($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $i2 := atomic_dec_and_test($p1);
    call {:si_unique_call 668} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} kfree($p4);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const kmem_cache_zalloc: ref;

axiom kmem_cache_zalloc == $sub.ref(0, 355831);

procedure kmem_cache_zalloc($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation kmem_cache_zalloc($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} {:cexpr "kmem_cache_zalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} ldv_check_alloc_flags($i1);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $p2 := ldv_zalloc_unknown_size();
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_463:
    assume !assertsPassed;
    return;
}



const ldv_zalloc_unknown_size: ref;

axiom ldv_zalloc_unknown_size == $sub.ref(0, 356863);

procedure ldv_zalloc_unknown_size() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_zalloc_unknown_size() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} $p0 := ldv_calloc_unknown_size();
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_calloc_unknown_size: ref;

axiom ldv_calloc_unknown_size == $sub.ref(0, 357895);

procedure ldv_calloc_unknown_size() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_calloc_unknown_size() returns ($r: ref)
{
  var $i0: i32;
  var $i1: i1;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var cmdloc_dummy_var_93: [ref]i8;
  var cmdloc_dummy_var_94: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $i0 := ldv_undef_int();
    call {:si_unique_call 675} {:cexpr "tmp___1"} boogie_si_record_i32($i0);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} $p2 := external_allocated_data();
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_93 := $M.1;
    call {:si_unique_call 677} cmdloc_dummy_var_94 := $memset.i8(cmdloc_dummy_var_93, $p2, 0, 8, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_94;
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} ldv_assume($i5);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} $i6 := ldv_is_err($p2);
    call {:si_unique_call 680} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} ldv_assume($i8);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p9 := $p2;
    goto $bb3;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 358927);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const oz_send_isoc_unit: ref;

axiom oz_send_isoc_unit == $sub.ref(0, 359959);

procedure oz_send_isoc_unit($p0: ref, $i1: i8, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, $M.40, $M.39, assertsPassed;



implementation oz_send_isoc_unit($p0: ref, $i1: i8, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i8;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $i39: i16;
  var $i40: i32;
  var $p41: ref;
  var $i42: i16;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $i48: i16;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $i56: i16;
  var $i57: i32;
  var $p58: ref;
  var $i59: i16;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $p72: ref;
  var $i73: i64;
  var $i74: i32;
  var $i75: i32;
  var $i76: i32;
  var $i77: i8;
  var $i78: i32;
  var $p79: ref;
  var $i80: i8;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i8;
  var $p92: ref;
  var $p93: ref;
  var $i94: i8;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i8;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i32;
  var $i104: i8;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i32;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $p124: ref;
  var $i125: i8;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $i129: i32;
  var $p130: ref;
  var $i131: i32;
  var $i132: i1;
  var $i133: i32;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $i142: i24;
  var $i143: i24;
  var $i144: i24;
  var $p145: ref;
  var $p146: ref;
  var $i147: i8;
  var $i148: i64;
  var $i149: i64;
  var $i150: i64;
  var $i151: i1;
  var $p152: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $i158: i64;
  var $p159: ref;
  var $i160: i64;
  var $i161: i1;
  var $p163: ref;
  var $p164: ref;
  var $i165: i64;
  var $i166: i1;
  var $p167: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $i173: i64;
  var $i174: i1;
  var $p162: ref;
  var $p175: ref;
  var $p176: ref;
  var $i177: i64;
  var $i178: i1;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $i187: i32;
  var $i188: i32;
  var $p189: ref;
  var $p190: ref;
  var $i191: i32;
  var $i192: i32;
  var $i193: i1;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $i200: i24;
  var $i201: i24;
  var $i202: i24;
  var $p203: ref;
  var $p204: ref;
  var $i205: i8;
  var $i206: i64;
  var $i207: i64;
  var $i208: i64;
  var $i209: i1;
  var $p210: ref;
  var $i211: i32;
  var $p212: ref;
  var $i213: i32;
  var $i214: i32;
  var $i215: i1;
  var $i216: i32;
  var $i217: i1;
  var $i33: i32;
  var cmdloc_dummy_var_95: [ref]i8;
  var cmdloc_dummy_var_96: [ref]i8;
  var cmdloc_dummy_var_97: [ref]i8;
  var cmdloc_dummy_var_98: [ref]i8;
  var cmdloc_dummy_var_99: [ref]i8;
  var cmdloc_dummy_var_100: [ref]i8;
  var cmdloc_dummy_var_101: [ref]i8;
  var cmdloc_dummy_var_102: [ref]i8;
  var cmdloc_dummy_var_103: [ref]i8;
  var cmdloc_dummy_var_104: [ref]i8;
  var cmdloc_dummy_var_105: [ref]i8;
  var cmdloc_dummy_var_106: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 686} {:cexpr "oz_send_isoc_unit:arg:ep_num"} boogie_si_record_i8($i1);
    call {:si_unique_call 687} {:cexpr "oz_send_isoc_unit:arg:len"} boogie_si_record_i32($i3);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(864, 1));
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(776, 1));
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} ldv_spin_lock_bh_143($p10);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i1);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} $p13 := pd_stream_find($p0, $i12);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i26, $p27, $p28, $i29 := 0, $0.ref, $0.ref, 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(776, 1));
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} ldv_spin_unlock_bh_144($p30);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p13);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, 0);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p27);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i34, 0);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $p69, $p70, $i71 := $p27, $p28, $i29;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $p72 := skb_put($p69, $i3);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i3);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_95 := $M.1;
    cmdloc_dummy_var_96 := $M.1;
    call {:si_unique_call 698} cmdloc_dummy_var_97 := $memcpy.i8(cmdloc_dummy_var_95, cmdloc_dummy_var_96, $p72, $p2, $i73, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_97;
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i71, $i3);
    call {:si_unique_call 699} {:cexpr "size"} boogie_si_record_i32($i74);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i26);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i75, 1);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i8($i76);
    call {:si_unique_call 700} {:cexpr "nb_units"} boogie_si_record_i8($i77);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i77);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(645, 1));
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.1, $p79);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i78, $i81);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i82 == 1);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(776, 1));
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} ldv_spin_lock_bh_143($p89);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(17, 1));
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.1, $p90);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p5, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p92, $i91);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(17, 1));
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.1, $p93);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i77);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i97 := $add.i32($i95, $i96);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i32.i8($i97);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(17, 1));
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p99, $i98);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(776, 1));
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} ldv_spin_unlock_bh_144($p100);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p101, 36);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(72, 1));
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.1, $p102);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i32.i8($i103);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p105, $i104);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p106, 0);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p5, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p107, $i1);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p5, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p108, 7);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p5, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p109, $i77);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p70);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p4);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_98 := $M.1;
    cmdloc_dummy_var_99 := $M.1;
    call {:si_unique_call 705} cmdloc_dummy_var_100 := $memcpy.i8(cmdloc_dummy_var_98, cmdloc_dummy_var_99, $p110, $p111, 6, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_100;
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p70);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p112, $mul.ref(1, 1));
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p5);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_101 := $M.1;
    cmdloc_dummy_var_102 := $M.1;
    call {:si_unique_call 706} cmdloc_dummy_var_103 := $memcpy.i8(cmdloc_dummy_var_101, cmdloc_dummy_var_102, $p113, $p114, 4, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_103;
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(20, 1));
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p9, $mul.ref(0, 3216)), $mul.ref(880, 1));
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.1, $p117);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p69, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.1, $p119);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $i121 := dev_hard_header($p69, $p9, $sub.i16(0, 30418), $p116, $p118, $i120);
    call {:si_unique_call 708} {:cexpr "tmp___1"} boogie_si_record_i32($i121);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i122 := $slt.i32($i121, 0);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p69, $mul.ref(0, 232)), $mul.ref(96, 1));
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p123, oz_isoc_destructor);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(644, 1));
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i125 := $load.i8($M.1, $p124);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $i126 := $sext.i8.i32($i125);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $i127 := $sge.i32($i126, 0);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} $i214 := atomic_read(g_submitted_isoc);
    call {:si_unique_call 726} {:cexpr "tmp___5"} boogie_si_record_i32($i214);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i215 := $sle.i32($i214, 15);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    assume {:branchcond $i215} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} kfree_skb($p69);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb54:
    assume $i215 == 1;
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} atomic_inc(g_submitted_isoc);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} $i216 := dev_queue_xmit($p69);
    call {:si_unique_call 729} {:cexpr "tmp___4"} boogie_si_record_i32($i216);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $i217 := $slt.i32($i216, 0);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    assume {:branchcond $i217} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb6;

  $bb56:
    assume $i217 == 1;
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 1);
    goto $bb6;

  $bb21:
    assume $i127 == 1;
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(660, 1));
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.1, $p128);
    call {:si_unique_call 710} {:cexpr "nb"} boogie_si_record_i32($i129);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(648, 1));
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.1, $p130);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $i132 := $uge.i32($i129, $i131);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $p176 := oz_tx_frame_alloc($p0);
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i177 := $p2i.ref.i64($p176);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $i178 := $eq.i64($i177, 0);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i178} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p176, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $p180 := $bitcast.ref.ref($p179);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $p181 := $bitcast.ref.ref($p4);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_104 := $M.1;
    cmdloc_dummy_var_105 := $M.1;
    call {:si_unique_call 718} cmdloc_dummy_var_106 := $memcpy.i8(cmdloc_dummy_var_104, cmdloc_dummy_var_105, $p180, $p181, 8, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_106;
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p176, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p182, $p69);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(664, 1));
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} ldv_spin_lock_bh_155($p183);
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p176, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(744, 1));
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} list_add_tail($p184, $p185);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(660, 1));
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $i187 := $load.i32($M.1, $p186);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i188 := $add.i32($i187, 1);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(660, 1));
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p189, $i188);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(664, 1));
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} ldv_spin_unlock_bh_156($p190);
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i191 := $M.23;
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i192 := $and.i32($i191, 32);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i193 := $ne.i32($i192, 0);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    assume {:branchcond $i193} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb6;

  $bb47:
    assume $i193 == 1;
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p194, .str.4);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p195, .str.8);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p196, .str.6);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p197, .str.10);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $p199 := $bitcast.ref.ref($p198);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $i200 := $load.i24($M.28, $p199);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i201 := $and.i24($i200, $sub.i24(0, 262144));
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i202 := $or.i24($i201, 806);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p199, $i202);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p203, 0);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i205 := $load.i8($M.29, $p204);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $i206 := $zext.i8.i64($i205);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $i207 := $and.i64($i206, 1);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} $i208 := ldv__builtin_expect($i207, 0);
    call {:si_unique_call 723} {:cexpr "tmp___3"} boogie_si_record_i64($i208);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i209 := $ne.i64($i208, 0);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i209} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb49:
    assume $i209 == 1;
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(660, 1));
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i211 := $load.i32($M.1, $p210);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(656, 1));
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i213 := $load.i32($M.1, $p212);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} __dynamic_pr_debug.ref.ref.i32.i32($p7, .str.10, $i211, $i213);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    goto $bb51;

  SeqInstr_499:
    assume !assertsPassed;
    return;

  SeqInstr_496:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i178 == 1;
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_493:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i132 == 1;
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i133 := $M.23;
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i134 := $and.i32($i133, 32);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i135 := $ne.i32($i134, 0);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(664, 1));
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} ldv_spin_lock_133($p152);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(744, 1)), $mul.ref(0, 1));
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.1, $p154);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $p156 := $bitcast.ref.ref($p155);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p156, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i158 := $p2i.ref.i64($p157);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(744, 1));
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $i160 := $p2i.ref.i64($p159);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i161 := $ne.i64($i158, $i160);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i161 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(664, 1));
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} ldv_spin_unlock_134($p175);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_490:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i161 == 1;
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $p162 := $p155;
    goto $bb34;

  $bb34:
    call $p163, $p164, $i165, $i166, $p167, $p169, $p170, $p171, $p172, $i173, $i174, $p162 := oz_send_isoc_unit_loop_$bb34($i160, $p163, $p164, $i165, $i166, $p167, $p169, $p170, $p171, $p172, $i173, $i174, $p162);
    goto $bb34_last;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p162, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.1, $p163);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $i165 := $p2i.ref.i64($p164);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $i166 := $ne.i64($i165, 0);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $p167 := $p162;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($p162, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $p170 := $load.ref($M.1, $p169);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $p171 := $bitcast.ref.ref($p170);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p171, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i173 := $p2i.ref.i64($p172);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i174 := $ne.i64($i173, $i160);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i174 == 1);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb40:
    assume $i174 == 1;
    assume {:verifier.code 0} true;
    $p162 := $p170;
    goto $bb40_dummy;

  $bb36:
    assume $i166 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} oz_tx_isoc_free($p0, $p167);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_487:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i135 == 1;
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p136, .str.4);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p137, .str.8);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p138, .str.6);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p139, .str.9);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p140);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i142 := $load.i24($M.28, $p141);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i143 := $and.i24($i142, $sub.i24(0, 262144));
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i144 := $or.i24($i143, 785);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p141, $i144);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p145, 0);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i147 := $load.i8($M.29, $p146);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i148 := $zext.i8.i64($i147);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i149 := $and.i64($i148, 1);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $i150 := ldv__builtin_expect($i149, 0);
    call {:si_unique_call 712} {:cexpr "tmp___2"} boogie_si_record_i64($i150);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $i151 := $ne.i64($i150, 0);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i151 == 1;
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} __dynamic_pr_debug.ref.ref.i32($p6, .str.9, $i129);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb17:
    assume $i122 == 1;
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_484:
    assume !assertsPassed;
    return;

  SeqInstr_481:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i82 == 1;
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(776, 1));
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} ldv_spin_lock_bh_143($p83);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p84, $p69);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(18, 1));
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p85, $i77);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p86, $p70);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p87, $i74);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(776, 1));
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} ldv_spin_unlock_bh_144($p88);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb6;

  SeqInstr_478:
    assume !assertsPassed;
    return;

  SeqInstr_475:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i35 == 1;
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(640, 1));
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.1, $p36);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p9, $mul.ref(0, 3216)), $mul.ref(574, 1));
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.1, $p38);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p9, $mul.ref(0, 3216)), $mul.ref(576, 1));
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.1, $p41);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i40, $i43);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, $sub.i32(0, 16));
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i45, 16);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p9, $mul.ref(0, 3216)), $mul.ref(578, 1));
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i48 := $load.i16($M.1, $p47);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i48);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i46, $i49);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i37, $i50);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $p52 := alloc_skb($i51, 32);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i53, 0);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p9, $mul.ref(0, 3216)), $mul.ref(574, 1));
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i56 := $load.i16($M.1, $p55);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i56);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p9, $mul.ref(0, 3216)), $mul.ref(576, 1));
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i59 := $load.i16($M.1, $p58);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i60 := $zext.i16.i32($i59);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i57, $i60);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i61, $sub.i32(0, 16));
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i62, 16);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} skb_reserve($p52, $i63);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} skb_reset_network_header($p52);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p52, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p64, $p9);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p52, $mul.ref(0, 232)), $mul.ref(192, 1));
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p65, 11913);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p52, $mul.ref(0, 232)), $mul.ref(156, 1));
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p66, 7);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $p67 := skb_put($p52, 10);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $p69, $p70, $i71 := $p52, $p67, 10;
    goto $bb13;

  $bb10:
    assume $i54 == 1;
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb6;

  SeqInstr_472:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i32 == 1;
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb6;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p18, $0.ref);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(18, 1));
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.1, $p19);
    call {:si_unique_call 690} {:cexpr "nb_units"} boogie_si_record_i8($i20);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(18, 1));
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p21, 0);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.1, $p24);
    call {:si_unique_call 691} {:cexpr "size"} boogie_si_record_i32($i25);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i26, $p27, $p28, $i29 := $i20, $p17, $p23, $i25;
    goto $bb3;

  SeqInstr_466:
    assume !assertsPassed;
    return;

  $bb40_dummy:
    assume false;
    return;

  $bb34_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4353;
}



const ldv_spin_lock_bh_143: ref;

axiom ldv_spin_lock_bh_143 == $sub.ref(0, 360991);

procedure ldv_spin_lock_bh_143($p0: ref);
  free requires assertsPassed;
  modifies $M.40, assertsPassed;



implementation ldv_spin_lock_bh_143($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} ldv_linux_kernel_locking_spinlock_spin_lock_stream_lock_of_oz_pd();
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} spin_lock_bh($p0);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_502:
    assume !assertsPassed;
    return;
}



const pd_stream_find: ref;

axiom pd_stream_find == $sub.ref(0, 362023);

procedure pd_stream_find($p0: ref, $i1: i8) returns ($r: ref);
  free requires assertsPassed;



implementation pd_stream_find($p0: ref, $i1: i8) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p11: ref;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} {:cexpr "pd_stream_find:arg:ep_num"} boogie_si_record_i8($i1);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(848, 1)), $mul.ref(0, 1));
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(848, 1));
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i7, $i9);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p18 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $r := $p18;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $p11 := $p4;
    goto $bb4;

  $bb4:
    call $p12, $i13, $i14, $i15, $i16, $p17, $p20, $p21, $p22, $p23, $i24, $i25, $p11 := pd_stream_find_loop_$bb4($i1, $i9, $p12, $i13, $i14, $i15, $i16, $p17, $p20, $p21, $p22, $p23, $i24, $i25, $p11);
    goto $bb4_last;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.1, $p12);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i1);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i14, $i15);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $p17 := $p11;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, $i9);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $p11 := $p21;
    goto $bb10_dummy;

  $bb6:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p18 := $p17;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4460;
}



const ldv_spin_unlock_bh_144: ref;

axiom ldv_spin_unlock_bh_144 == $sub.ref(0, 363055);

procedure ldv_spin_unlock_bh_144($p0: ref);
  free requires assertsPassed;
  modifies $M.40, assertsPassed;



implementation ldv_spin_unlock_bh_144($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} ldv_linux_kernel_locking_spinlock_spin_unlock_stream_lock_of_oz_pd();
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} spin_unlock_bh($p0);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_505:
    assume !assertsPassed;
    return;
}



const alloc_skb: ref;

axiom alloc_skb == $sub.ref(0, 364087);

procedure alloc_skb($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation alloc_skb($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} {:cexpr "alloc_skb:arg:size"} boogie_si_record_i32($i0);
    call {:si_unique_call 736} {:cexpr "alloc_skb:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} ldv_check_alloc_flags($i1);
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} $p2 := ldv_malloc_unknown_size();
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_508:
    assume !assertsPassed;
    return;
}



const skb_reserve: ref;

axiom skb_reserve == $sub.ref(0, 365119);

procedure skb_reserve($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation skb_reserve($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} {:cexpr "skb_reserve:arg:len"} boogie_si_record_i32($i1);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 1));
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, $p5);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, $i1);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p10, $i9);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    return;
}



const skb_reset_network_header: ref;

axiom skb_reset_network_header == $sub.ref(0, 366151);

procedure skb_reset_network_header($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation skb_reset_network_header($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i16;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i16;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i16($i3);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i16($i8);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i5, $i10);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(196, 1));
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p13, $i12);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    return;
}



const skb_put: ref;

axiom skb_put == $sub.ref(0, 367183);

procedure skb_put($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_put($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} {:cexpr "skb_put:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $p2 := external_alloc();
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_hard_header: ref;

axiom dev_hard_header == $sub.ref(0, 368215);

procedure dev_hard_header($p0: ref, $p1: ref, $i2: i16, $p3: ref, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_hard_header($p0: ref, $p1: ref, $i2: i16, $p3: ref, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i16;
  var $i23: i32;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} {:cexpr "dev_hard_header:arg:type"} boogie_si_record_i16($i2);
    call {:si_unique_call 743} {:cexpr "dev_hard_header:arg:len"} boogie_si_record_i32($i5);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 3216)), $mul.ref(544, 1));
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i9 == 1);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 3216)), $mul.ref(544, 1));
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 3216)), $mul.ref(544, 1));
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i2);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i21);
    call {:si_unique_call 744} $i23 := devirtbounce.2($p20, $p0, $p1, $i22, $p3, $p4, $i5);
    call {:si_unique_call 745} {:cexpr "tmp"} boogie_si_record_i32($i23);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i16 := $i23;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;
}



const oz_isoc_destructor: ref;

axiom oz_isoc_destructor == $sub.ref(0, 369247);

procedure oz_isoc_destructor($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation oz_isoc_destructor($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} atomic_dec(g_submitted_isoc);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_133: ref;

axiom ldv_spin_lock_133 == $sub.ref(0, 370279);

procedure ldv_spin_lock_133($p0: ref);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_spin_lock_133($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} ldv_linux_kernel_locking_spinlock_spin_lock_tx_frame_lock_of_oz_pd();
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} spin_lock($p0);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_511:
    assume !assertsPassed;
    return;
}



const oz_tx_isoc_free: ref;

axiom oz_tx_isoc_free == $sub.ref(0, 371311);

procedure oz_tx_isoc_free($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr;



implementation oz_tx_isoc_free($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i24;
  var $i20: i24;
  var $i21: i24;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(660, 1));
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i4, 1);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(660, 1));
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p6, $i5);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} list_del_init($p7);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $p8 := $M.8;
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} kmem_cache_free($p8, $p9);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i10 := $M.23;
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 32);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p13, .str.4);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p14, .str.31);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p15, .str.6);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p16, .str.32);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $i19 := $load.i24($M.28, $p18);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $i20 := $and.i24($i19, $sub.i24(0, 262144));
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $i21 := $or.i24($i20, 340);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p18, $i21);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p22, 0);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.29, $p23);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i64($i24);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 1);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 753} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i28 == 1;
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(660, 1));
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.1, $p29);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} __dynamic_pr_debug.ref.ref.i32($p2, .str.32, $i30);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_spin_unlock_134: ref;

axiom ldv_spin_unlock_134 == $sub.ref(0, 372343);

procedure ldv_spin_unlock_134($p0: ref);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_spin_unlock_134($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} ldv_linux_kernel_locking_spinlock_spin_unlock_tx_frame_lock_of_oz_pd();
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} spin_unlock($p0);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_514:
    assume !assertsPassed;
    return;
}



const oz_tx_frame_alloc: ref;

axiom oz_tx_frame_alloc == $sub.ref(0, 373375);

procedure oz_tx_frame_alloc($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed;



implementation oz_tx_frame_alloc($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $p1 := $M.8;
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} $p2 := ldv_kmem_cache_alloc_132($p1, 32);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p6, 6);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} INIT_LIST_HEAD($p7);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} INIT_LIST_HEAD($p8);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_517:
    assume !assertsPassed;
    return;
}



const ldv_spin_lock_bh_155: ref;

axiom ldv_spin_lock_bh_155 == $sub.ref(0, 374407);

procedure ldv_spin_lock_bh_155($p0: ref);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_spin_lock_bh_155($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} ldv_linux_kernel_locking_spinlock_spin_lock_tx_frame_lock_of_oz_pd();
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} spin_lock_bh($p0);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_520:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_bh_156: ref;

axiom ldv_spin_unlock_bh_156 == $sub.ref(0, 375439);

procedure ldv_spin_unlock_bh_156($p0: ref);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_spin_unlock_bh_156($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} ldv_linux_kernel_locking_spinlock_spin_unlock_tx_frame_lock_of_oz_pd();
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} spin_unlock_bh($p0);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_523:
    assume !assertsPassed;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 376471);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.1, $p1);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_queue_xmit: ref;

axiom dev_queue_xmit == $sub.ref(0, 377503);

procedure dev_queue_xmit($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_queue_xmit($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 1} true;
    call {:si_unique_call 764} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 765} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_tx_frame_lock_of_oz_pd: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_tx_frame_lock_of_oz_pd == $sub.ref(0, 378535);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_tx_frame_lock_of_oz_pd();
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_tx_frame_lock_of_oz_pd()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $i0 := $M.39;
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i3 := $M.39;
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} ldv_assume($i5);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 768} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_tx_frame_lock_of_oz_pd"} boogie_si_record_i32(1);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_526:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_tx_frame_lock_of_oz_pd: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_tx_frame_lock_of_oz_pd == $sub.ref(0, 379567);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_tx_frame_lock_of_oz_pd();
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_tx_frame_lock_of_oz_pd()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $i0 := $M.39;
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i3 := $M.39;
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} ldv_assume($i5);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 771} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_tx_frame_lock_of_oz_pd"} boogie_si_record_i32(2);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_529:
    assume !assertsPassed;
    return;
}



const ldv_kmem_cache_alloc_132: ref;

axiom ldv_kmem_cache_alloc_132 == $sub.ref(0, 380599);

procedure ldv_kmem_cache_alloc_132($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_kmem_cache_alloc_132($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} {:cexpr "ldv_kmem_cache_alloc_132:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} ldv_check_alloc_flags($i1);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $p2 := ldv_malloc_unknown_size();
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_532:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_stream_lock_of_oz_pd: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_stream_lock_of_oz_pd == $sub.ref(0, 381631);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_stream_lock_of_oz_pd();
  free requires assertsPassed;
  modifies $M.40, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_stream_lock_of_oz_pd()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $i0 := $M.40;
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $i3 := $M.40;
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} ldv_assume($i5);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 777} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_stream_lock_of_oz_pd"} boogie_si_record_i32(1);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_535:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_stream_lock_of_oz_pd: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_stream_lock_of_oz_pd == $sub.ref(0, 382663);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_stream_lock_of_oz_pd();
  free requires assertsPassed;
  modifies $M.40, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_stream_lock_of_oz_pd()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i0 := $M.40;
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $i3 := $M.40;
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} ldv_assume($i5);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 780} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_stream_lock_of_oz_pd"} boogie_si_record_i32(2);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_538:
    assume !assertsPassed;
    return;
}



const atomic_add_return: ref;

axiom atomic_add_return == $sub.ref(0, 383695);

procedure atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41;



implementation atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} {:cexpr "atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $i2 := ldv_linux_usb_dev_atomic_add_return($i0, $p1);
    call {:si_unique_call 783} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_linux_usb_dev_atomic_add_return: ref;

axiom ldv_linux_usb_dev_atomic_add_return == $sub.ref(0, 384727);

procedure ldv_linux_usb_dev_atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41;



implementation ldv_linux_usb_dev_atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} {:cexpr "ldv_linux_usb_dev_atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $i3 := $M.41;
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i0);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $M.41 := $i4;
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i7 := $M.41;
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const div_u64_rem: ref;

axiom div_u64_rem == $sub.ref(0, 385759);

procedure div_u64_rem($i0: i64, $i1: i32, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.42;



implementation div_u64_rem($i0: i64, $i1: i32, $p2: ref) returns ($r: i64)
{
  var $i3: i64;
  var $i4: i64;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} {:cexpr "div_u64_rem:arg:dividend"} boogie_si_record_i64($i0);
    call {:si_unique_call 786} {:cexpr "div_u64_rem:arg:divisor"} boogie_si_record_i32($i1);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i1);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i4 := $urem.i64($i0, $i3);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $M.42 := $store.i32($M.42, $p2, $i5);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i1);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $i7 := $udiv.i64($i0, $i6);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const set_normalized_timespec: ref;

axiom set_normalized_timespec == $sub.ref(0, 386791);

procedure set_normalized_timespec($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation set_normalized_timespec($p0: ref, $i1: i64, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} {:cexpr "set_normalized_timespec:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 788} {:cexpr "set_normalized_timespec:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    return;
}



const getrawmonotonic64: ref;

axiom getrawmonotonic64 == $sub.ref(0, 387823);

procedure getrawmonotonic64($p0: ref);
  free requires assertsPassed;



implementation getrawmonotonic64($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    return;
}



const get_unaligned_le16: ref;

axiom get_unaligned_le16 == $sub.ref(0, 388855);

procedure get_unaligned_le16($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation get_unaligned_le16($p0: ref) returns ($r: i16)
{
  var $p1: ref;
  var $i2: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} $i2 := __le16_to_cpup($p1);
    call {:si_unique_call 790} {:cexpr "tmp"} boogie_si_record_i16($i2);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const oz_hcd_get_desc_cnf: ref;

axiom oz_hcd_get_desc_cnf == $sub.ref(0, 389887);

procedure oz_hcd_get_desc_cnf($p0: ref, $i1: i8, $i2: i32, $p3: ref, $i4: i32, $i5: i32, $i6: i32);
  free requires assertsPassed;
  modifies $M.1, $M.16, assertsPassed, $M.15, $M.9, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr;



implementation oz_hcd_get_desc_cnf($p0: ref, $i1: i8, $i2: i32, $p3: ref, $i4: i32, $i5: i32, $i6: i32)
{
  var $p7: ref;
  var $i8: i32;
  var $i9: i8;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i16;
  var $i33: i32;
  var $i34: i32;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i8;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i8;
  var $i47: i32;
  var $i48: i8;
  var $i49: i32;
  var $i50: i8;
  var $i51: i8;
  var $i52: i32;
  var $i53: i8;
  var $p54: ref;
  var $i55: i16;
  var $i56: i32;
  var $i57: i16;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $i62: i32;
  var $i38: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var cmdloc_dummy_var_107: [ref]i8;
  var cmdloc_dummy_var_108: [ref]i8;
  var cmdloc_dummy_var_109: [ref]i8;
  var vslice_dummy_var_144: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} {:cexpr "oz_hcd_get_desc_cnf:arg:req_id"} boogie_si_record_i8($i1);
    call {:si_unique_call 792} {:cexpr "oz_hcd_get_desc_cnf:arg:status"} boogie_si_record_i32($i2);
    call {:si_unique_call 793} {:cexpr "oz_hcd_get_desc_cnf:arg:length"} boogie_si_record_i32($i4);
    call {:si_unique_call 794} {:cexpr "oz_hcd_get_desc_cnf:arg:offset"} boogie_si_record_i32($i5);
    call {:si_unique_call 795} {:cexpr "oz_hcd_get_desc_cnf:arg:total_size"} boogie_si_record_i32($i6);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i1);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} $p10 := oz_find_urb_by_id($p7, 0, $i9);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i2, 0);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p64, $i6);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p7, $mul.ref(0, 400)), $mul.ref(16, 1));
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.1, $p65);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 3344)), $mul.ref(3336, 1));
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.1, $p67);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} oz_complete_urb($p68, $p10, 0);
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_553:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.1, $p14);
    call {:si_unique_call 797} {:cexpr "required_size"} boogie_si_record_i32($i15);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i16 := $sgt.i32($i15, $i6);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $i15;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32($i17, $i5);
    call {:si_unique_call 799} {:cexpr "copy_len"} boogie_si_record_i32($i18);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i19 := $sle.i32($i4, $i18);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $i18;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i5);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p22, $mul.ref($i23, 1));
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i20);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_107 := $M.1;
    cmdloc_dummy_var_108 := $M.1;
    call {:si_unique_call 801} cmdloc_dummy_var_109 := $memcpy.i8(cmdloc_dummy_var_107, cmdloc_dummy_var_108, $p24, $p3, $i25, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_109;
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i5, $i20);
    call {:si_unique_call 802} {:cexpr "offset"} boogie_si_record_i32($i26);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i26, $i17);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb13:
    assume $i27 == 1;
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(144, 1));
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.1, $p31);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    call {:si_unique_call 803} {:cexpr "wvalue"} boogie_si_record_i32($i33);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i1);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $i36 := oz_enqueue_ep_urb($p7, 0, 0, $p10, $i35);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    call {:si_unique_call 805} {:cexpr "tmp___1"} boogie_si_record_i32($i36);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i37 == 1);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p7, $mul.ref(0, 400)), $mul.ref(8, 1));
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.1, $p39);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i1);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i8($i41);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p30, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.1, $p43);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $i47 := $lshr.i32($i33, 8);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i47);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i8($i49);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i33);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p30, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i55 := $load.i16($M.1, $p54);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i55);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i16($i56);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32($i17, $i26);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $i59 := oz_usb_get_desc_req($p40, $i42, $i46, $i50, $i53, $i57, $i26, $i58);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    call {:si_unique_call 807} {:cexpr "tmp___0"} boogie_si_record_i32($i59);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i62 := 0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i38 := $i62;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i38, 0);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i63 == 1;
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb18:
    assume $i60 == 1;
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} vslice_dummy_var_144 := oz_dequeue_ep_urb($p7, 0, 0, $p10);
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32(0, 12);
    goto $bb20;

  SeqInstr_550:
    assume !assertsPassed;
    return;

  SeqInstr_547:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i37 == 1;
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 12);
    goto $bb17;

  SeqInstr_544:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i19 == 1;
    call {:si_unique_call 800} {:cexpr "oz_hcd_get_desc_cnf:arg:copy_len"} boogie_si_record_i32($i4);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $i20 := $i4;
    goto $bb12;

  $bb7:
    assume $i16 == 1;
    call {:si_unique_call 798} {:cexpr "oz_hcd_get_desc_cnf:arg:required_size"} boogie_si_record_i32($i6);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i17 := $i6;
    goto $bb9;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_541:
    assume !assertsPassed;
    return;
}



const oz_hcd_control_cnf: ref;

axiom oz_hcd_control_cnf == $sub.ref(0, 390919);

procedure oz_hcd_control_cnf($p0: ref, $i1: i8, $i2: i8, $p3: ref, $i4: i32);
  free requires assertsPassed;
  modifies $M.1, $M.16, $M.15, assertsPassed, $CurrAddr, $M.30, $M.31, $M.32, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.40, $M.9, $M.13, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation oz_hcd_control_cnf($p0: ref, $i1: i8, $i2: i8, $p3: ref, $i4: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i8;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i8;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i8;
  var $i43: i8;
  var $i44: i32;
  var $i45: i8;
  var $i46: i32;
  var $i47: i8;
  var $i48: i8;
  var $i49: i32;
  var $i50: i8;
  var $i51: i8;
  var $i52: i32;
  var $i53: i8;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p59: ref;
  var $i60: i32;
  var $i58: i32;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $p64: ref;
  var cmdloc_dummy_var_110: [ref]i8;
  var cmdloc_dummy_var_111: [ref]i8;
  var cmdloc_dummy_var_112: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} {:cexpr "oz_hcd_control_cnf:arg:req_id"} boogie_si_record_i8($i1);
    call {:si_unique_call 811} {:cexpr "oz_hcd_control_cnf:arg:rcode"} boogie_si_record_i8($i2);
    call {:si_unique_call 812} {:cexpr "oz_hcd_control_cnf:arg:data_len"} boogie_si_record_i32($i4);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 400)), $mul.ref(16, 1));
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 3344)), $mul.ref(3336, 1));
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i1);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} $p12 := oz_find_urb_by_id($p5, 0, $i11);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(144, 1));
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.1, $p18);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    call {:si_unique_call 814} {:cexpr "windex"} boogie_si_record_i32($i20);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p17, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.1, $p21);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    call {:si_unique_call 815} {:cexpr "wvalue"} boogie_si_record_i32($i23);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p17, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.1, $p24);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 96);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i4, 0);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} oz_complete_urb($p9, $p12, 0);
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_568:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i54 == 1;
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.1, $p55);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i57 := $ule.i32($i4, $i56);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i57 == 1);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.1, $p59);
    call {:si_unique_call 821} {:cexpr "copy_len"} boogie_si_record_i32($i60);
    assume {:verifier.code 0} true;
    $i58 := $i60;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.1, $p61);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i58);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_110 := $M.1;
    cmdloc_dummy_var_111 := $M.1;
    call {:si_unique_call 822} cmdloc_dummy_var_112 := $memcpy.i8(cmdloc_dummy_var_110, cmdloc_dummy_var_111, $p62, $p3, $i63, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_112;
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p64, $i58);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i57 == 1;
    call {:si_unique_call 820} {:cexpr "oz_hcd_control_cnf:arg:copy_len"} boogie_si_record_i32($i4);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $i58 := $i4;
    goto $bb23;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p17, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.1, $p29);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} oz_display_conf_type($i32);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p17, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.1, $p33);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 9);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p17, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.1, $p37);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 11);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} oz_complete_urb($p9, $p12, 0);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_565:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i40 == 1;
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i2);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i8($i46);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i20);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i8($i49);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i23);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} oz_hcd_complete_set_interface($p5, $p12, $i47, $i50, $i53);
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_562:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i36 == 1;
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i2);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i8($i41);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i23);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} oz_hcd_complete_set_config($p5, $p12, $i42, $i45);
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_559:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_556:
    assume !assertsPassed;
    return;
}



const oz_usb_handle_ep_data: ref;

axiom oz_usb_handle_ep_data == $sub.ref(0, 391951);

procedure oz_usb_handle_ep_data($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.1, $M.16, assertsPassed, $M.15;



implementation oz_usb_handle_ep_data($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i8;
  var $i19: i64;
  var $i20: i64;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i8;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $p35: ref;
  var $i36: i8;
  var $i37: i64;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i24: i32;
  var $p25: ref;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $p46: ref;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i32;
  var $i58: i8;
  var $i59: i64;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $i51: i32;
  var $p52: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} {:cexpr "oz_usb_handle_ep_data:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 5)), $mul.ref(4, 1));
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.1, $p4);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 5)), $mul.ref(4, 1));
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.1, $p8);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 3);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p3);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i2, 7);
    call {:si_unique_call 827} {:cexpr "data_len"} boogie_si_record_i32($i42);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p41, $mul.ref(0, 8)), $mul.ref(5, 1));
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.1, $p43);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    call {:si_unique_call 828} {:cexpr "unit_size"} boogie_si_record_i32($i45);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p41, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i45, 0);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i49 := $sdiv.i32($i42, $i45);
    call {:si_unique_call 831} {:cexpr "count"} boogie_si_record_i32($i49);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i50 := $slt.i32(0, $i49);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb22:
    assume $i50 == 1;
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $i51, $p52 := 0, $p46;
    goto $bb25;

  $bb25:
    call $p53, $p54, $p55, $i56, $i57, $i58, $i59, $p60, $i61, $i62, $i51, $p52 := oz_usb_handle_ep_data_loop_$bb25($p0, $p41, $i45, $i49, $p53, $p54, $p55, $i56, $i57, $i58, $i59, $p60, $i61, $i62, $i51, $p52);
    goto $bb25_last;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.1, $p53);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p41, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.1, $p55);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i8($i57);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} oz_hcd_data_ind($p54, $i58, $p52, $i45);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i45);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p52, $mul.ref($i59, 1));
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i51, 1);
    call {:si_unique_call 833} {:cexpr "i"} boogie_si_record_i32($i61);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i61, $i49);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i62 == 1);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb27:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i51, $p52 := $i61, $p60;
    goto $bb27_dummy;

  SeqInstr_574:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i48 == 1;
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 7)), $mul.ref(6, 1));
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i2);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i16 := $sub.i64($i15, 6);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p12, $mul.ref(0, 7)), $mul.ref(5, 1));
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.1, $p17);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i64($i18);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i20 := $udiv.i64($i16, $i19);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i64.i32($i20);
    call {:si_unique_call 825} {:cexpr "n"} boogie_si_record_i32($i21);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32($i21, 1);
    call {:si_unique_call 826} {:cexpr "n"} boogie_si_record_i32($i22);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i21, 0);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i24, $p25 := $i22, $p13;
    goto $bb13;

  $bb13:
    call $p26, $p27, $p28, $i29, $i30, $i31, $p32, $i33, $i34, $p35, $i36, $i37, $p38, $i39, $i40, $i24, $p25 := oz_usb_handle_ep_data_loop_$bb13($p0, $p12, $p26, $p27, $p28, $i29, $i30, $i31, $p32, $i33, $i34, $p35, $i36, $i37, $p38, $i39, $i40, $i24, $p25);
    goto $bb13_last;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p12, $mul.ref(0, 7)), $mul.ref(3, 1));
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.1, $p28);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i30);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p12, $mul.ref(0, 7)), $mul.ref(5, 1));
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.1, $p32);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} oz_hcd_data_ind($p27, $i31, $p25, $i34);
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p12, $mul.ref(0, 7)), $mul.ref(5, 1));
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.1, $p35);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i64($i36);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p25, $mul.ref($i37, 1));
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32($i24, 1);
    call {:si_unique_call 830} {:cexpr "n"} boogie_si_record_i32($i39);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i24, 0);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i40 == 1);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb15:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i24, $p25 := $i39, $p38;
    goto $bb15_dummy;

  SeqInstr_571:
    assume !assertsPassed;
    return;

  $bb27_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4952;

  $bb15_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4924;
}



const oz_find_urb_by_id: ref;

axiom oz_find_urb_by_id == $sub.ref(0, 392983);

procedure oz_find_urb_by_id($p0: ref, $i1: i32, $i2: i8) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $M.16, assertsPassed;



implementation oz_find_urb_by_id($p0: ref, $i1: i32, $i2: i8) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p20: ref;
  var $p37: ref;
  var $p19: ref;
  var $p31: ref;
  var $p32: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} {:cexpr "oz_find_urb_by_id:arg:ep_ix"} boogie_si_record_i32($i1);
    call {:si_unique_call 835} {:cexpr "oz_find_urb_by_id:arg:req_id"} boogie_si_record_i8($i2);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(16, 1));
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} ldv_spin_lock_bh_126($p5);
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i1);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref($i6, 8));
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $p38, $p39 := $0.ref, $u3;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} ldv_spin_unlock_bh_127($p40);
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p38);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $r := $p38;
    return;

  $bb16:
    assume $i42 == 1;
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} oz_free_urb_link($p39);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_580:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p9, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i15, $i17);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $p19 := $u3;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p31, $p32 := $0.ref, $p19;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $p38, $p39 := $p31, $p32;
    goto $bb15;

  $bb3:
    assume $i18 == 1;
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $p20 := $p14;
    goto $bb6;

  $bb6:
    call $p21, $p22, $i23, $i24, $i25, $i26, $p27, $p28, $p33, $p34, $i35, $i36, $p20, $p37 := oz_find_urb_by_id_loop_$bb6($i2, $i17, $p21, $p22, $i23, $i24, $i25, $i26, $p27, $p28, $p33, $p34, $i35, $i36, $p20, $p37);
    goto $bb6_last;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.1, $p22);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i2);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i24, $i25);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $p27, $p28 := $p20, $p20;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p20, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, $i17);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $p37 := $p20;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $p19 := $p37;
    goto $bb5;

  $bb12:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $p20 := $p34;
    goto $bb12_dummy;

  $bb8:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p29);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} list_del_init($p27);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $p31, $p32 := $p30, $p28;
    goto $bb10;

  SeqInstr_577:
    assume !assertsPassed;
    return;

  $bb12_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4989;
}



const oz_display_conf_type: ref;

axiom oz_display_conf_type == $sub.ref(0, 394015);

procedure oz_display_conf_type($i0: i8);
  free requires assertsPassed;



implementation oz_display_conf_type($i0: i8)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} {:cexpr "oz_display_conf_type:arg:t"} boogie_si_record_i8($i0);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i0);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i0);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 3);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i0);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 5);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i0);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 6);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i0);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 7);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i0);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 8);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i0);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 9);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i0);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 10);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i0);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 11);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i0);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 12);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    return;

  $bb41:
    assume $i22 == 1;
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb37:
    assume $i20 == 1;
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb33:
    assume $i18 == 1;
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb29:
    assume $i16 == 1;
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb25:
    assume $i14 == 1;
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb21:
    assume $i12 == 1;
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb17:
    assume $i10 == 1;
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb13:
    assume $i8 == 1;
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb5:
    assume $i4 == 1;
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb46;
}



const oz_hcd_complete_set_config: ref;

axiom oz_hcd_complete_set_config == $sub.ref(0, 395047);

procedure oz_hcd_complete_set_config($p0: ref, $p1: ref, $i2: i8, $i3: i8);
  free requires assertsPassed;
  modifies $M.1, $M.16, $M.15, $CurrAddr, assertsPassed, $M.30, $M.31, $M.32, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.40, $M.9, $M.13, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation oz_hcd_complete_set_config($p0: ref, $p1: ref, $i2: i8, $i3: i8)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} {:cexpr "oz_hcd_complete_set_config:arg:rcode"} boogie_si_record_i8($i2);
    call {:si_unique_call 842} {:cexpr "oz_hcd_complete_set_config:arg:config_num"} boogie_si_record_i8($i3);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(16, 1));
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(3336, 1));
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i2);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 12);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} oz_complete_urb($p7, $p1, $i23);
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_589:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(98, 1));
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p10, $i3);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} oz_clean_endpoints_for_config($p7, $p0);
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 2032)), $mul.ref(1592, 1));
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(98, 1));
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.1, $p15);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, $sub.i64(0, 1));
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p14, $mul.ref($i18, 680));
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} $i20 := oz_build_endpoints_for_config($p7, $p0, $p19, 32);
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    call {:si_unique_call 845} {:cexpr "tmp"} boogie_si_record_i32($i20);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb6;

  $bb3:
    assume $i21 == 1;
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 12);
    goto $bb5;

  SeqInstr_586:
    assume !assertsPassed;
    return;

  SeqInstr_583:
    assume !assertsPassed;
    return;
}



const oz_hcd_complete_set_interface: ref;

axiom oz_hcd_complete_set_interface == $sub.ref(0, 396079);

procedure oz_hcd_complete_set_interface($p0: ref, $p1: ref, $i2: i8, $i3: i8, $i4: i8);
  free requires assertsPassed;
  modifies $M.1, $M.16, $M.15, $CurrAddr, assertsPassed, $M.30, $M.31, $M.32, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.40, $M.9, $M.13, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation oz_hcd_complete_set_interface($p0: ref, $p1: ref, $i2: i8, $i3: i8, $i4: i8)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i25: i32;
  var $i26: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p41: ref;
  var $i36: i32;
  var $i42: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} {:cexpr "oz_hcd_complete_set_interface:arg:rcode"} boogie_si_record_i8($i2);
    call {:si_unique_call 848} {:cexpr "oz_hcd_complete_set_interface:arg:if_num"} boogie_si_record_i8($i3);
    call {:si_unique_call 849} {:cexpr "oz_hcd_complete_set_interface:arg:alt"} boogie_si_record_i8($i4);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(16, 1));
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 3344)), $mul.ref(3336, 1));
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i2);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, 12);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} oz_complete_urb($p8, $p1, $i42);
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_598:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(98, 1));
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.1, $p11);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i3);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} oz_clean_endpoints_for_interface($p8, $p0, $i15);
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 2032)), $mul.ref(1592, 1));
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(98, 1));
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.1, $p20);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, $sub.i64(0, 1));
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i3);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p19, $mul.ref($i23, 680)), $mul.ref(408, 1)), $mul.ref($i26, 8));
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 8)), $mul.ref(8, 1));
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i64($i4);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p31, $mul.ref($i32, 40));
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} $i34 := oz_build_endpoints_for_interface($p8, $p0, $p33, 32);
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    call {:si_unique_call 852} {:cexpr "tmp___0"} boogie_si_record_i32($i34);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i35 == 1);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(104, 1));
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.1, $p37);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i64($i3);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p38, $mul.ref($i39, 8)), $mul.ref(4, 1));
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p41, $i4);
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $i42 := $i36;
    goto $bb9;

  $bb6:
    assume $i35 == 1;
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 12);
    goto $bb8;

  SeqInstr_595:
    assume !assertsPassed;
    return;

  SeqInstr_592:
    assume !assertsPassed;
    return;
}



const oz_clean_endpoints_for_interface: ref;

axiom oz_clean_endpoints_for_interface == $sub.ref(0, 397111);

procedure oz_clean_endpoints_for_interface($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.1, $M.16, $CurrAddr, assertsPassed, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.40, $M.9;



implementation oz_clean_endpoints_for_interface($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i64;
  var $i62: i1;
  var $p65: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $p63: ref;
  var $p64: ref;
  var $i74: i32;
  var $i75: i1;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i1;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $i93: i1;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p99: ref;
  var $i100: i32;
  var $i101: i1;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $i106: i1;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p112: ref;
  var $i113: i32;
  var $i114: i1;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $i119: i1;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p125: ref;
  var $i126: i32;
  var $i127: i1;
  var $p129: ref;
  var $p130: ref;
  var $i131: i64;
  var $i132: i1;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p138: ref;
  var $i139: i32;
  var $i140: i1;
  var $p142: ref;
  var $p143: ref;
  var $i144: i64;
  var $i145: i1;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p151: ref;
  var $i152: i32;
  var $i153: i1;
  var $p155: ref;
  var $p156: ref;
  var $i157: i64;
  var $i158: i1;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p164: ref;
  var $i165: i32;
  var $i166: i1;
  var $p168: ref;
  var $p169: ref;
  var $i170: i64;
  var $i171: i1;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p177: ref;
  var $i178: i32;
  var $i179: i1;
  var $p181: ref;
  var $p182: ref;
  var $i183: i64;
  var $i184: i1;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p190: ref;
  var $i191: i32;
  var $i192: i1;
  var $p194: ref;
  var $p195: ref;
  var $i196: i64;
  var $i197: i1;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p203: ref;
  var $i204: i32;
  var $i205: i1;
  var $p207: ref;
  var $p208: ref;
  var $i209: i64;
  var $i210: i1;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p216: ref;
  var $i217: i32;
  var $i218: i1;
  var $p220: ref;
  var $p221: ref;
  var $i222: i64;
  var $i223: i1;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p229: ref;
  var $i230: i32;
  var $i231: i1;
  var $p233: ref;
  var $p234: ref;
  var $i235: i64;
  var $i236: i1;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p242: ref;
  var $i243: i32;
  var $i244: i1;
  var $p246: ref;
  var $p247: ref;
  var $i248: i64;
  var $i249: i1;
  var $p251: ref;
  var $p252: ref;
  var $p253: ref;
  var $p255: ref;
  var $i256: i32;
  var $i257: i1;
  var $p259: ref;
  var $p260: ref;
  var $i261: i64;
  var $i262: i1;
  var $p264: ref;
  var $p265: ref;
  var $p266: ref;
  var $p268: ref;
  var $i269: i32;
  var $i270: i1;
  var $p272: ref;
  var $p273: ref;
  var $i274: i64;
  var $i275: i1;
  var $p277: ref;
  var $p278: ref;
  var $p279: ref;
  var $p281: ref;
  var $i282: i32;
  var $i283: i1;
  var $p285: ref;
  var $p286: ref;
  var $i287: i64;
  var $i288: i1;
  var $p290: ref;
  var $p291: ref;
  var $p292: ref;
  var $p294: ref;
  var $i295: i32;
  var $i296: i1;
  var $p298: ref;
  var $p299: ref;
  var $i300: i64;
  var $i301: i1;
  var $p303: ref;
  var $p304: ref;
  var $p305: ref;
  var $p307: ref;
  var $i308: i32;
  var $i309: i1;
  var $p311: ref;
  var $p312: ref;
  var $i313: i64;
  var $i314: i1;
  var $p316: ref;
  var $p317: ref;
  var $p318: ref;
  var $p320: ref;
  var $i321: i32;
  var $i322: i1;
  var $p324: ref;
  var $p325: ref;
  var $i326: i64;
  var $i327: i1;
  var $p329: ref;
  var $p330: ref;
  var $p331: ref;
  var $p333: ref;
  var $i334: i32;
  var $i335: i1;
  var $p337: ref;
  var $p338: ref;
  var $i339: i64;
  var $i340: i1;
  var $p342: ref;
  var $p343: ref;
  var $p344: ref;
  var $p346: ref;
  var $i347: i32;
  var $i348: i1;
  var $p350: ref;
  var $p351: ref;
  var $i352: i64;
  var $i353: i1;
  var $p355: ref;
  var $p356: ref;
  var $p357: ref;
  var $p359: ref;
  var $i360: i32;
  var $i361: i1;
  var $p363: ref;
  var $p364: ref;
  var $i365: i64;
  var $i366: i1;
  var $p368: ref;
  var $p369: ref;
  var $p370: ref;
  var $p372: ref;
  var $i373: i32;
  var $i374: i1;
  var $p376: ref;
  var $p377: ref;
  var $i378: i64;
  var $i379: i1;
  var $p381: ref;
  var $p382: ref;
  var $p383: ref;
  var $p385: ref;
  var $i386: i32;
  var $i387: i1;
  var $p389: ref;
  var $p390: ref;
  var $i391: i64;
  var $i392: i1;
  var $p394: ref;
  var $p395: ref;
  var $p396: ref;
  var $p398: ref;
  var $i399: i32;
  var $i400: i1;
  var $p402: ref;
  var $p403: ref;
  var $i404: i64;
  var $i405: i1;
  var $p407: ref;
  var $p408: ref;
  var $p409: ref;
  var $p411: ref;
  var $i412: i32;
  var $i413: i1;
  var $p415: ref;
  var $p416: ref;
  var $i417: i64;
  var $i418: i1;
  var $p420: ref;
  var $p421: ref;
  var $p422: ref;
  var $p424: ref;
  var $i425: i32;
  var $i426: i1;
  var $p428: ref;
  var $p429: ref;
  var $i430: i64;
  var $i431: i1;
  var $p433: ref;
  var $p434: ref;
  var $p435: ref;
  var $p437: ref;
  var $i438: i32;
  var $i439: i1;
  var $p441: ref;
  var $p442: ref;
  var $i443: i64;
  var $i444: i1;
  var $p446: ref;
  var $p447: ref;
  var $p448: ref;
  var $p450: ref;
  var $i451: i32;
  var $i452: i1;
  var $p454: ref;
  var $p455: ref;
  var $i456: i64;
  var $i457: i1;
  var $p459: ref;
  var $p460: ref;
  var $p461: ref;
  var $p463: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 855} {:cexpr "oz_clean_endpoints_for_interface:arg:if_ix"} boogie_si_record_i32($i2);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(16, 1));
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, $p3);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p7, $p3);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(100, 1));
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i10 := $sge.i32($i2, $i9);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} ldv_spin_lock_bh_126($p11);
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(104, 1));
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i2);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p13, $mul.ref($i14, 8)), $mul.ref(0, 1));
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.1, $p16);
    call {:si_unique_call 857} {:cexpr "mask"} boogie_si_record_i32($i17);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(104, 1));
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i2);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p19, $mul.ref($i20, 8)), $mul.ref(0, 1));
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p22, 0);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i17, 1);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i17, 65536);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i74 := $and.i32($i17, 2);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i87 := $and.i32($i17, 131072);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i100 := $and.i32($i17, 4);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i113 := $and.i32($i17, 262144);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $i114 := $ne.i32($i113, 0);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i114 == 1);
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i126 := $and.i32($i17, 8);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i127 == 1);
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i139 := $and.i32($i17, 524288);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $i140 := $ne.i32($i139, 0);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i140 == 1);
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i152 := $and.i32($i17, 16);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $i153 := $ne.i32($i152, 0);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i153 == 1);
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i165 := $and.i32($i17, 1048576);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $i166 := $ne.i32($i165, 0);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume !($i166 == 1);
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i178 := $and.i32($i17, 32);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $i179 := $ne.i32($i178, 0);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    assume {:branchcond $i179} true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i179 == 1);
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i191 := $and.i32($i17, 2097152);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $i192 := $ne.i32($i191, 0);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    assume {:branchcond $i192} true;
    goto $bb87, $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    assume !($i192 == 1);
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i204 := $and.i32($i17, 64);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i205 := $ne.i32($i204, 0);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i205} true;
    goto $bb94, $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume !($i205 == 1);
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $i217 := $and.i32($i17, 4194304);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $i218 := $ne.i32($i217, 0);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i218} true;
    goto $bb100, $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    assume !($i218 == 1);
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $i230 := $and.i32($i17, 128);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i231 := $ne.i32($i230, 0);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume !($i231 == 1);
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $i243 := $and.i32($i17, 8388608);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $i244 := $ne.i32($i243, 0);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i244} true;
    goto $bb113, $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    assume !($i244 == 1);
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $i256 := $and.i32($i17, 256);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i257 := $ne.i32($i256, 0);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    assume {:branchcond $i257} true;
    goto $bb120, $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    assume !($i257 == 1);
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $i269 := $and.i32($i17, 16777216);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $i270 := $ne.i32($i269, 0);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i270} true;
    goto $bb126, $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    assume !($i270 == 1);
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $i282 := $and.i32($i17, 512);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $i283 := $ne.i32($i282, 0);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i283} true;
    goto $bb133, $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    assume !($i283 == 1);
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $i295 := $and.i32($i17, 33554432);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $i296 := $ne.i32($i295, 0);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    assume {:branchcond $i296} true;
    goto $bb139, $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    assume !($i296 == 1);
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    $i308 := $and.i32($i17, 1024);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $i309 := $ne.i32($i308, 0);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    assume {:branchcond $i309} true;
    goto $bb146, $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    assume !($i309 == 1);
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $i321 := $and.i32($i17, 67108864);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $i322 := $ne.i32($i321, 0);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i322} true;
    goto $bb152, $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    assume !($i322 == 1);
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $i334 := $and.i32($i17, 2048);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $i335 := $ne.i32($i334, 0);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    assume {:branchcond $i335} true;
    goto $bb159, $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    assume !($i335 == 1);
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $i347 := $and.i32($i17, 134217728);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $i348 := $ne.i32($i347, 0);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    assume {:branchcond $i348} true;
    goto $bb165, $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    assume !($i348 == 1);
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $i360 := $and.i32($i17, 4096);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $i361 := $ne.i32($i360, 0);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i361} true;
    goto $bb172, $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    assume !($i361 == 1);
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    $i373 := $and.i32($i17, 268435456);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $i374 := $ne.i32($i373, 0);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    assume {:branchcond $i374} true;
    goto $bb178, $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    assume !($i374 == 1);
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $i386 := $and.i32($i17, 8192);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $i387 := $ne.i32($i386, 0);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    assume {:branchcond $i387} true;
    goto $bb185, $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    assume !($i387 == 1);
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    $i399 := $and.i32($i17, 536870912);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $i400 := $ne.i32($i399, 0);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    assume {:branchcond $i400} true;
    goto $bb191, $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    assume !($i400 == 1);
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    $i412 := $and.i32($i17, 16384);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $i413 := $ne.i32($i412, 0);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    assume {:branchcond $i413} true;
    goto $bb198, $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    assume !($i413 == 1);
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $i425 := $and.i32($i17, 1073741824);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $i426 := $ne.i32($i425, 0);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    assume {:branchcond $i426} true;
    goto $bb204, $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    assume !($i426 == 1);
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $i438 := $and.i32($i17, 32768);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i439 := $ne.i32($i438, 0);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    assume {:branchcond $i439} true;
    goto $bb211, $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    assume !($i439 == 1);
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    $i451 := $and.i32($i17, $sub.i32(0, 2147483648));
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $i452 := $ne.i32($i451, 0);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    assume {:branchcond $i452} true;
    goto $bb217, $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    assume !($i452 == 1);
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} ldv_spin_unlock_bh_127($p49);
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.1, $p50);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p52, $mul.ref($sub.ref(0, 16), 96));
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p52, $mul.ref($sub.ref(0, 16), 96)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.1, $p55);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p57, $mul.ref($sub.ref(0, 16), 96));
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p52, $mul.ref($sub.ref(0, 16), 96)), $mul.ref(16, 1));
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p3);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i60, $i61);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb21:
    assume $i62 == 1;
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $p63, $p64 := $p58, $p53;
    goto $bb24;

  $bb24:
    call $p65, $p67, $p68, $p69, $p70, $p71, $i72, $i73, $p63, $p64 := oz_clean_endpoints_for_interface_loop_$bb24($p1, $i61, $p65, $p67, $p68, $p69, $p70, $p71, $i72, $i73, $p63, $p64);
    goto $bb24_last;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} list_del_init($p65);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} oz_ep_free($p1, $p64);
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p63, $mul.ref(0, 96)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.1, $p67);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p69, $mul.ref($sub.ref(0, 16), 96));
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p63, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, $i61);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i73 == 1);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb26:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $p63, $p64 := $p70, $p63;
    goto $bb26_dummy;

  SeqInstr_607:
    assume !assertsPassed;
    return;

  SeqInstr_604:
    assume !assertsPassed;
    return;

  $bb217:
    assume $i452 == 1;
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $p454 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(15, 8));
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $p455 := $load.ref($M.1, $p454);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i456 := $p2i.ref.i64($p455);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $i457 := $ne.i64($i456, 0);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    assume {:branchcond $i457} true;
    goto $bb220, $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    assume !($i457 == 1);
    goto $bb219;

  $bb220:
    assume $i457 == 1;
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $p459 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(15, 8));
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $p460 := $load.ref($M.1, $p459);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($p460, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(15, 8));
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p463, $0.ref);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} list_move_tail($p461, $p3);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb211:
    assume $i439 == 1;
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(15, 8));
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $p442 := $load.ref($M.1, $p441);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i443 := $p2i.ref.i64($p442);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $i444 := $ne.i64($i443, 0);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    assume {:branchcond $i444} true;
    goto $bb214, $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    assume !($i444 == 1);
    goto $bb213;

  $bb214:
    assume $i444 == 1;
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(15, 8));
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $p447 := $load.ref($M.1, $p446);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $p448 := $add.ref($add.ref($p447, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(15, 8));
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p450, $0.ref);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} list_move_tail($p448, $p3);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb204:
    assume $i426 == 1;
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $p428 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(14, 8));
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $p429 := $load.ref($M.1, $p428);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $i430 := $p2i.ref.i64($p429);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $i431 := $ne.i64($i430, 0);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    assume {:branchcond $i431} true;
    goto $bb207, $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    assume !($i431 == 1);
    goto $bb206;

  $bb207:
    assume $i431 == 1;
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(14, 8));
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $p434 := $load.ref($M.1, $p433);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($p434, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $p437 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(14, 8));
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p437, $0.ref);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} list_move_tail($p435, $p3);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb198:
    assume $i413 == 1;
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(14, 8));
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $p416 := $load.ref($M.1, $p415);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i417 := $p2i.ref.i64($p416);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i418 := $ne.i64($i417, 0);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i418} true;
    goto $bb201, $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    assume !($i418 == 1);
    goto $bb200;

  $bb201:
    assume $i418 == 1;
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(14, 8));
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $p421 := $load.ref($M.1, $p420);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $p422 := $add.ref($add.ref($p421, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(14, 8));
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p424, $0.ref);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} list_move_tail($p422, $p3);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb191:
    assume $i400 == 1;
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(13, 8));
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $p403 := $load.ref($M.1, $p402);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i404 := $p2i.ref.i64($p403);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $i405 := $ne.i64($i404, 0);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    assume {:branchcond $i405} true;
    goto $bb194, $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    assume !($i405 == 1);
    goto $bb193;

  $bb194:
    assume $i405 == 1;
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(13, 8));
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $p408 := $load.ref($M.1, $p407);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($p408, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(13, 8));
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p411, $0.ref);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} list_move_tail($p409, $p3);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb185:
    assume $i387 == 1;
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(13, 8));
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $p390 := $load.ref($M.1, $p389);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $i391 := $p2i.ref.i64($p390);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $i392 := $ne.i64($i391, 0);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i392} true;
    goto $bb188, $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    assume !($i392 == 1);
    goto $bb187;

  $bb188:
    assume $i392 == 1;
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(13, 8));
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $p395 := $load.ref($M.1, $p394);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($p395, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(13, 8));
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p398, $0.ref);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} list_move_tail($p396, $p3);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb178:
    assume $i374 == 1;
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(12, 8));
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $p377 := $load.ref($M.1, $p376);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $i378 := $p2i.ref.i64($p377);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i379 := $ne.i64($i378, 0);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    assume {:branchcond $i379} true;
    goto $bb181, $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    assume !($i379 == 1);
    goto $bb180;

  $bb181:
    assume $i379 == 1;
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(12, 8));
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $p382 := $load.ref($M.1, $p381);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($p382, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(12, 8));
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p385, $0.ref);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} list_move_tail($p383, $p3);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb172:
    assume $i361 == 1;
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(12, 8));
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $p364 := $load.ref($M.1, $p363);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $i365 := $p2i.ref.i64($p364);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $i366 := $ne.i64($i365, 0);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    assume {:branchcond $i366} true;
    goto $bb175, $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    assume !($i366 == 1);
    goto $bb174;

  $bb175:
    assume $i366 == 1;
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(12, 8));
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $p369 := $load.ref($M.1, $p368);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($add.ref($p369, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(12, 8));
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p372, $0.ref);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} list_move_tail($p370, $p3);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb165:
    assume $i348 == 1;
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(11, 8));
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $p351 := $load.ref($M.1, $p350);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $i352 := $p2i.ref.i64($p351);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $i353 := $ne.i64($i352, 0);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    assume {:branchcond $i353} true;
    goto $bb168, $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    assume !($i353 == 1);
    goto $bb167;

  $bb168:
    assume $i353 == 1;
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(11, 8));
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $p356 := $load.ref($M.1, $p355);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($p356, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(11, 8));
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p359, $0.ref);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} list_move_tail($p357, $p3);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb159:
    assume $i335 == 1;
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(11, 8));
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $p338 := $load.ref($M.1, $p337);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $i339 := $p2i.ref.i64($p338);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $i340 := $ne.i64($i339, 0);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    assume {:branchcond $i340} true;
    goto $bb162, $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    assume !($i340 == 1);
    goto $bb161;

  $bb162:
    assume $i340 == 1;
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(11, 8));
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $p343 := $load.ref($M.1, $p342);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p343, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(11, 8));
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p346, $0.ref);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} list_move_tail($p344, $p3);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb152:
    assume $i322 == 1;
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(10, 8));
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $p325 := $load.ref($M.1, $p324);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i326 := $p2i.ref.i64($p325);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $i327 := $ne.i64($i326, 0);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    assume {:branchcond $i327} true;
    goto $bb155, $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    assume !($i327 == 1);
    goto $bb154;

  $bb155:
    assume $i327 == 1;
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(10, 8));
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $p330 := $load.ref($M.1, $p329);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p330, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(10, 8));
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p333, $0.ref);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} list_move_tail($p331, $p3);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb146:
    assume $i309 == 1;
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(10, 8));
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $p312 := $load.ref($M.1, $p311);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i313 := $p2i.ref.i64($p312);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $i314 := $ne.i64($i313, 0);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i314} true;
    goto $bb149, $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    assume !($i314 == 1);
    goto $bb148;

  $bb149:
    assume $i314 == 1;
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(10, 8));
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $p317 := $load.ref($M.1, $p316);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p317, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(10, 8));
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p320, $0.ref);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} list_move_tail($p318, $p3);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb139:
    assume $i296 == 1;
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(9, 8));
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $p299 := $load.ref($M.1, $p298);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $i300 := $p2i.ref.i64($p299);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $i301 := $ne.i64($i300, 0);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    assume {:branchcond $i301} true;
    goto $bb142, $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    assume !($i301 == 1);
    goto $bb141;

  $bb142:
    assume $i301 == 1;
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(9, 8));
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $p304 := $load.ref($M.1, $p303);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p304, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(9, 8));
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p307, $0.ref);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} list_move_tail($p305, $p3);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb133:
    assume $i283 == 1;
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(9, 8));
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $p286 := $load.ref($M.1, $p285);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $i287 := $p2i.ref.i64($p286);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i288 := $ne.i64($i287, 0);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    assume {:branchcond $i288} true;
    goto $bb136, $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    assume !($i288 == 1);
    goto $bb135;

  $bb136:
    assume $i288 == 1;
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(9, 8));
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $p291 := $load.ref($M.1, $p290);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p291, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(9, 8));
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p294, $0.ref);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} list_move_tail($p292, $p3);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb126:
    assume $i270 == 1;
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(8, 8));
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $p273 := $load.ref($M.1, $p272);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $i274 := $p2i.ref.i64($p273);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $i275 := $ne.i64($i274, 0);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    assume {:branchcond $i275} true;
    goto $bb129, $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    assume !($i275 == 1);
    goto $bb128;

  $bb129:
    assume $i275 == 1;
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(8, 8));
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $p278 := $load.ref($M.1, $p277);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p278, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(8, 8));
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p281, $0.ref);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} list_move_tail($p279, $p3);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb120:
    assume $i257 == 1;
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(8, 8));
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $p260 := $load.ref($M.1, $p259);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i261 := $p2i.ref.i64($p260);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $i262 := $ne.i64($i261, 0);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    assume {:branchcond $i262} true;
    goto $bb123, $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    assume !($i262 == 1);
    goto $bb122;

  $bb123:
    assume $i262 == 1;
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(8, 8));
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $p265 := $load.ref($M.1, $p264);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p265, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(8, 8));
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p268, $0.ref);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} list_move_tail($p266, $p3);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb113:
    assume $i244 == 1;
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(7, 8));
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $p247 := $load.ref($M.1, $p246);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i248 := $p2i.ref.i64($p247);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i249 := $ne.i64($i248, 0);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    assume !($i249 == 1);
    goto $bb115;

  $bb116:
    assume $i249 == 1;
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(7, 8));
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $p252 := $load.ref($M.1, $p251);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p252, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(7, 8));
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p255, $0.ref);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} list_move_tail($p253, $p3);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb107:
    assume $i231 == 1;
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(7, 8));
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $p234 := $load.ref($M.1, $p233);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i235 := $p2i.ref.i64($p234);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $i236 := $ne.i64($i235, 0);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    assume {:branchcond $i236} true;
    goto $bb110, $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    assume !($i236 == 1);
    goto $bb109;

  $bb110:
    assume $i236 == 1;
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(7, 8));
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $p239 := $load.ref($M.1, $p238);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p239, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(7, 8));
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p242, $0.ref);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} list_move_tail($p240, $p3);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb100:
    assume $i218 == 1;
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(6, 8));
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $p221 := $load.ref($M.1, $p220);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i222 := $p2i.ref.i64($p221);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $i223 := $ne.i64($i222, 0);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    assume {:branchcond $i223} true;
    goto $bb103, $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    assume !($i223 == 1);
    goto $bb102;

  $bb103:
    assume $i223 == 1;
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(6, 8));
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $p226 := $load.ref($M.1, $p225);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p226, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(6, 8));
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p229, $0.ref);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} list_move_tail($p227, $p3);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb94:
    assume $i205 == 1;
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(6, 8));
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.1, $p207);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $i209 := $p2i.ref.i64($p208);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $i210 := $ne.i64($i209, 0);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    assume {:branchcond $i210} true;
    goto $bb97, $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    assume !($i210 == 1);
    goto $bb96;

  $bb97:
    assume $i210 == 1;
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(6, 8));
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $p213 := $load.ref($M.1, $p212);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p213, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(6, 8));
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p216, $0.ref);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} list_move_tail($p214, $p3);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb87:
    assume $i192 == 1;
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(5, 8));
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $p195 := $load.ref($M.1, $p194);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i196 := $p2i.ref.i64($p195);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $i197 := $ne.i64($i196, 0);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    assume {:branchcond $i197} true;
    goto $bb90, $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    assume !($i197 == 1);
    goto $bb89;

  $bb90:
    assume $i197 == 1;
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(5, 8));
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $p200 := $load.ref($M.1, $p199);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p200, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(5, 8));
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p203, $0.ref);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} list_move_tail($p201, $p3);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb81:
    assume $i179 == 1;
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(5, 8));
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $p182 := $load.ref($M.1, $p181);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $i183 := $p2i.ref.i64($p182);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $i184 := $ne.i64($i183, 0);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    assume {:branchcond $i184} true;
    goto $bb84, $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    assume !($i184 == 1);
    goto $bb83;

  $bb84:
    assume $i184 == 1;
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(5, 8));
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $p187 := $load.ref($M.1, $p186);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p187, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(5, 8));
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p190, $0.ref);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} list_move_tail($p188, $p3);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb74:
    assume $i166 == 1;
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(4, 8));
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $p169 := $load.ref($M.1, $p168);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i170 := $p2i.ref.i64($p169);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $i171 := $ne.i64($i170, 0);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    assume {:branchcond $i171} true;
    goto $bb77, $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume !($i171 == 1);
    goto $bb76;

  $bb77:
    assume $i171 == 1;
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(4, 8));
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $p174 := $load.ref($M.1, $p173);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p174, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(4, 8));
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p177, $0.ref);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} list_move_tail($p175, $p3);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb68:
    assume $i153 == 1;
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(4, 8));
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.1, $p155);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $i157 := $p2i.ref.i64($p156);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $i158 := $ne.i64($i157, 0);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i158 == 1);
    goto $bb70;

  $bb71:
    assume $i158 == 1;
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(4, 8));
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $p161 := $load.ref($M.1, $p160);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p161, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(4, 8));
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p164, $0.ref);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} list_move_tail($p162, $p3);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb61:
    assume $i140 == 1;
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(3, 8));
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.1, $p142);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $i144 := $p2i.ref.i64($p143);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i145 := $ne.i64($i144, 0);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i145 == 1);
    goto $bb63;

  $bb64:
    assume $i145 == 1;
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(3, 8));
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.1, $p147);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p148, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(3, 8));
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p151, $0.ref);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} list_move_tail($p149, $p3);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb55:
    assume $i127 == 1;
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(3, 8));
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.1, $p129);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $i131 := $p2i.ref.i64($p130);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $i132 := $ne.i64($i131, 0);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i132 == 1);
    goto $bb57;

  $bb58:
    assume $i132 == 1;
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(3, 8));
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.1, $p134);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p135, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(3, 8));
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p138, $0.ref);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} list_move_tail($p136, $p3);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb48:
    assume $i114 == 1;
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(2, 8));
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.1, $p116);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $i118 := $p2i.ref.i64($p117);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $i119 := $ne.i64($i118, 0);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i119 == 1);
    goto $bb50;

  $bb51:
    assume $i119 == 1;
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(2, 8));
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.1, $p121);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p122, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(2, 8));
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p125, $0.ref);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} list_move_tail($p123, $p3);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb42:
    assume $i101 == 1;
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(2, 8));
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.1, $p103);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p104);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $i106 := $ne.i64($i105, 0);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i106 == 1);
    goto $bb44;

  $bb45:
    assume $i106 == 1;
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(2, 8));
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.1, $p108);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p109, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(2, 8));
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p112, $0.ref);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} list_move_tail($p110, $p3);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb35:
    assume $i88 == 1;
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(1, 8));
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.1, $p90);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p91);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $i93 := $ne.i64($i92, 0);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i93 == 1);
    goto $bb37;

  $bb38:
    assume $i93 == 1;
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(1, 8));
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.1, $p95);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p96, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(1, 8));
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p99, $0.ref);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} list_move_tail($p97, $p3);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb29:
    assume $i75 == 1;
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(1, 8));
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.1, $p77);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p78);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb31;

  $bb32:
    assume $i80 == 1;
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(1, 8));
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.1, $p82);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(1, 8));
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p86, $0.ref);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} list_move_tail($p84, $p3);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb13:
    assume $i37 == 1;
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(0, 8));
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.1, $p39);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb15;

  $bb16:
    assume $i42 == 1;
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(0, 8));
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(0, 8));
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p48, $0.ref);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} list_move_tail($p46, $p3);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb7:
    assume $i24 == 1;
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(0, 8));
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb9;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(0, 8));
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, $p31);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(0, 8));
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p35, $0.ref);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} list_move_tail($p33, $p3);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_601:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb26_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5241;
}



const oz_build_endpoints_for_interface: ref;

axiom oz_build_endpoints_for_interface == $sub.ref(0, 398143);

procedure oz_build_endpoints_for_interface($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.16, $CurrAddr, assertsPassed, $M.30, $M.31, $M.32, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.40, $M.9, $M.13, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation oz_build_endpoints_for_interface($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p55: ref;
  var $i56: i8;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i8;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $i82: i32;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $i89: i64;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i64;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $p102: ref;
  var $p103: ref;
  var $i104: i64;
  var $p106: ref;
  var $p107: ref;
  var $i108: i8;
  var $i109: i32;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $p113: ref;
  var $i114: i32;
  var $i116: i32;
  var $i117: i64;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i64;
  var $p124: ref;
  var $i125: i32;
  var $i126: i32;
  var $i127: i32;
  var $i128: i32;
  var $p129: ref;
  var $p130: ref;
  var $i131: i64;
  var $p133: ref;
  var $p134: ref;
  var $i135: i8;
  var $i136: i32;
  var $i137: i32;
  var $i138: i1;
  var $p139: ref;
  var $p140: ref;
  var $i141: i32;
  var $i115: i32;
  var $p142: ref;
  var $i143: i1;
  var $p144: ref;
  var $p145: ref;
  var $i146: i64;
  var $i147: i1;
  var $p148: ref;
  var $p149: ref;
  var $i150: i32;
  var $i151: i8;
  var $i152: i32;
  var $i153: i1;
  var $i23: i32;
  var $i24: i32;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} {:cexpr "oz_build_endpoints_for_interface:arg:mem_flags"} boogie_si_record_i32($i3);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(16, 1));
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.1, $p7);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    call {:si_unique_call 894} {:cexpr "if_ix"} boogie_si_record_i32($i9);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(100, 1));
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.1, $p10);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $i12 := $sge.i32($i9, $i11);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i12 == 1);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(104, 1));
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.1, $p19);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32(0, $i21);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $i23, $i24 := 0, 0;
    goto $bb11;

  $bb11:
    call $p25, $p26, $i27, $p30, $i31, $i32, $i33, $i34, $i35, $i36, $p38, $i39, $i40, $i41, $i42, $p44, $i45, $i46, $i47, $i48, $i49, $i50, $p51, $i52, $i53, $p55, $i56, $p57, $p58, $p59, $i60, $i61, $i62, $i63, $p64, $i65, $i66, $p67, $i68, $i69, $p70, $p71, $i72, $i73, $p74, $p75, $p76, $i77, $i78, $i79, $i80, $p81, $i82, $i83, $p84, $p85, $i86, $i87, $i88, $i89, $p91, $p92, $p93, $i94, $p96, $i97, $i98, $i99, $i100, $i101, $p102, $p103, $i104, $p106, $p107, $i108, $i109, $i110, $i111, $p112, $p113, $i114, $i116, $i117, $p119, $p120, $p121, $i122, $p124, $i125, $i126, $i127, $i128, $p129, $p130, $i131, $p133, $p134, $i135, $i136, $i137, $i138, $p139, $p140, $i141, $i115, $p142, $i143, $p144, $p145, $i146, $i147, $p148, $p149, $i150, $i151, $i152, $i153, $i23, $i24 := oz_build_endpoints_for_interface_loop_$bb11($p1, $p2, $i3, $p5, $i9, $p19, $p25, $p26, $i27, $p30, $i31, $i32, $i33, $i34, $i35, $i36, $p38, $i39, $i40, $i41, $i42, $p44, $i45, $i46, $i47, $i48, $i49, $i50, $p51, $i52, $i53, $p55, $i56, $p57, $p58, $p59, $i60, $i61, $i62, $i63, $p64, $i65, $i66, $p67, $i68, $i69, $p70, $p71, $i72, $i73, $p74, $p75, $p76, $i77, $i78, $i79, $i80, $p81, $i82, $i83, $p84, $p85, $i86, $i87, $i88, $i89, $p91, $p92, $p93, $i94, $p96, $i97, $i98, $i99, $i100, $i101, $p102, $p103, $i104, $p106, $p107, $i108, $i109, $i110, $i111, $p112, $p113, $i114, $i116, $i117, $p119, $p120, $p121, $i122, $p124, $i125, $i126, $i127, $i128, $p129, $p130, $i131, $p133, $p134, $i135, $i136, $i137, $i138, $p139, $p140, $i141, $i115, $p142, $i143, $p144, $p145, $i146, $i147, $p148, $p149, $i150, $i151, $i152, $i153, $i23, $i24);
    goto $bb11_last;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.1, $p25);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i24);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p26, $mul.ref($i27, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.1, $p30);
    call {:si_unique_call 895} {:cexpr "ep_addr"} boogie_si_record_i8($i31);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 15);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    call {:si_unique_call 896} {:cexpr "ep_num"} boogie_si_record_i8($i34);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $i35 := $sext.i8.i32($i31);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i35, 0);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i50 := 0;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} $p51 := oz_ep_alloc($i50, $i3);
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $i53 := $eq.i64($i52, 0);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p26, $mul.ref($i27, 72)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.1, $p55);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p51, $mul.ref(0, 96)), $mul.ref(57, 1));
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p57, $i56);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p51, $mul.ref(0, 96)), $mul.ref(56, 1));
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p58, $i34);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p51, $mul.ref(0, 96)), $mul.ref(57, 1));
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.1, $p59);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i61, 3);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 1);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} ldv_spin_lock_bh_126($p85);
    goto SeqInstr_619, SeqInstr_620;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  SeqInstr_621:
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i86 := $sext.i8.i32($i31);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i86, 0);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i87 == 1);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $i116 := $zext.i8.i32($i34);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $i117 := $sext.i32.i64($i116);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref($i117, 8));
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p119, $p51);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(104, 1));
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.1, $p120);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $i122 := $sext.i32.i64($i9);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p121, $mul.ref($i122, 8)), $mul.ref(0, 1));
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.1, $p124);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $i126 := $zext.i8.i32($i34);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $i127 := $shl.i32(1, $i126);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i128 := $or.i32($i125, $i127);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(104, 1));
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.1, $p129);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $i131 := $sext.i32.i64($i9);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p130, $mul.ref($i131, 8)), $mul.ref(0, 1));
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p133, $i128);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p51, $mul.ref(0, 96)), $mul.ref(57, 1));
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i135 := $load.i8($M.1, $p134);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $i136 := $zext.i8.i32($i135);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $i137 := $and.i32($i136, 3);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i137, 1);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    $i141 := $i23;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i115 := $i141;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} ldv_spin_unlock_bh_127($p142);
    goto SeqInstr_622, SeqInstr_623;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  SeqInstr_624:
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $i143 := $ne.i32($i115, 0);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i143 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i150 := $add.i32($i24, 1);
    call {:si_unique_call 906} {:cexpr "i"} boogie_si_record_i32($i150);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $i151 := $load.i8($M.1, $p19);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $i152 := $zext.i8.i32($i151);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $i153 := $slt.i32($i150, $i152);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i153 == 1);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb53:
    assume $i153 == 1;
    assume {:verifier.code 0} true;
    $i23, $i24 := $i115, $i150;
    goto $bb53_dummy;

  $bb47:
    assume $i143 == 1;
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(8, 1));
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $p145 := $load.ref($M.1, $p144);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $i146 := $p2i.ref.i64($p145);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $i147 := $ne.i64($i146, 0);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i147 == 1);
    goto $bb49;

  $bb50:
    assume $i147 == 1;
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(8, 1));
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.1, $p148);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} oz_usb_request_heartbeat($p149);
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_625:
    assume !assertsPassed;
    return;

  SeqInstr_622:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i138 == 1;
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p51, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(368, 1));
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} list_add_tail($p139, $p140);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $i141 := 1;
    goto $bb46;

  $bb38:
    assume $i87 == 1;
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i34);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $i89 := $sext.i32.i64($i88);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref($i89, 8));
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p91, $p51);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(104, 1));
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.1, $p92);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $i94 := $sext.i32.i64($i9);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p93, $mul.ref($i94, 8)), $mul.ref(0, 1));
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.1, $p96);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i34);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i98, 16);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $i100 := $shl.i32(1, $i99);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $i101 := $or.i32($i97, $i100);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(104, 1));
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.1, $p102);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $i104 := $sext.i32.i64($i9);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p103, $mul.ref($i104, 8)), $mul.ref(0, 1));
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p106, $i101);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p51, $mul.ref(0, 96)), $mul.ref(57, 1));
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.1, $p107);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i32($i108);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $i110 := $and.i32($i109, 3);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 1);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    $i114 := $i23;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $i115 := $i114;
    goto $bb43;

  $bb40:
    assume $i111 == 1;
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p51, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(384, 1));
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} list_add_tail($p112, $p113);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $i114 := 1;
    goto $bb42;

  SeqInstr_619:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i63 == 1;
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p51, $mul.ref(0, 96)), $mul.ref(52, 1));
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p64, 200);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $i65 := $sext.i8.i32($i31);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i65, 0);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i66 == 1);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p51, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.1, $p71);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $i73 := $or.i32($i72, 2);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p51, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p74, $i73);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(8, 1));
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.1, $p75);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i34);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i8($i77);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} $i79 := oz_usb_stream_create($p76, $i78);
    goto SeqInstr_616, SeqInstr_617;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  SeqInstr_618:
    call {:si_unique_call 900} {:cexpr "tmp___3"} boogie_si_record_i32($i79);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i80 == 1;
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p51, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.1, $p81);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $i83 := $and.i32($i82, $sub.i32(0, 3));
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p51, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p84, $i83);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    goto $bb36;

  SeqInstr_616:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i66 == 1;
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p51, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.1, $p67);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $i69 := $or.i32($i68, 1);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p51, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p70, $i69);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb26:
    assume $i53 == 1;
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} oz_clean_endpoints_for_interface($p0, $p1, $i9);
    goto SeqInstr_613, SeqInstr_614;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  SeqInstr_615:
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 12);
    goto $bb6;

  SeqInstr_613:
    assume !assertsPassed;
    return;

  SeqInstr_610:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i36 == 1;
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p26, $mul.ref($i27, 72)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.1, $p38);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 3);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 1);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p26, $mul.ref($i27, 72)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.1, $p44);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 3);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 3);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i49 := 0;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $i50 := $i49;
    goto $bb25;

  $bb19:
    assume $i48 == 1;
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i49 := 512;
    goto $bb24;

  $bb15:
    assume $i42 == 1;
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i49 := 24576;
    goto $bb24;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 12);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb53_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5788;
}



const oz_ep_alloc: ref;

axiom oz_ep_alloc == $sub.ref(0, 399175);

procedure oz_ep_alloc($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $CurrAddr;



implementation oz_ep_alloc($i0: i32, $i1: i32) returns ($r: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} {:cexpr "oz_ep_alloc:arg:buffer_size"} boogie_si_record_i32($i0);
    call {:si_unique_call 908} {:cexpr "oz_ep_alloc:arg:mem_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i0);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i2, 96);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} $p4 := kzalloc($i3, $i1);
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} INIT_LIST_HEAD($p8);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} INIT_LIST_HEAD($p9);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p10, $sub.i32(0, 1));
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i0, 0);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p12, $i0);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p5);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(1, 1));
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p15, $p14);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_628:
    assume !assertsPassed;
    return;
}



const oz_usb_stream_create: ref;

axiom oz_usb_stream_create == $sub.ref(0, 400207);

procedure oz_usb_stream_create($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.40, $M.9, assertsPassed, $CurrAddr;



implementation oz_usb_stream_create($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i8;
  var $p13: ref;
  var $i14: i32;
  var $i15: i8;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var vslice_dummy_var_145: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} {:cexpr "oz_usb_stream_create:arg:ep_num"} boogie_si_record_i8($i1);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1232)), $mul.ref(644, 1));
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.1, $p5);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 64);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} oz_pd_get($p4);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 1232)), $mul.ref(112, 1));
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i1);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 1232)), $mul.ref(640, 1));
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.1, $p16);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $i18 := $mul.i32($i17, 4);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $i19 := oz_elt_stream_create($p13, $i15, $i18);
    goto SeqInstr_634, SeqInstr_635;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  SeqInstr_636:
    call {:si_unique_call 916} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} oz_pd_put($p4);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 1);
    goto $bb6;

  SeqInstr_634:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i1);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} vslice_dummy_var_145 := oz_isoc_stream_create($p4, $i11);
    goto SeqInstr_631, SeqInstr_632;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  SeqInstr_633:
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_631:
    assume !assertsPassed;
    return;
}



const oz_isoc_stream_create: ref;

axiom oz_isoc_stream_create == $sub.ref(0, 401239);

procedure oz_isoc_stream_create($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.40, assertsPassed, $CurrAddr;



implementation oz_isoc_stream_create($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} {:cexpr "oz_isoc_stream_create:arg:ep_num"} boogie_si_record_i8($i1);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} $p2 := kzalloc(40, 32);
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p7, $i1);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(776, 1));
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} ldv_spin_lock_bh_143($p8);
    goto SeqInstr_640, SeqInstr_641;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  SeqInstr_642:
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i1);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} $p11 := pd_stream_find($p0, $i10);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $p16 := $p2;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(776, 1));
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} ldv_spin_unlock_bh_144($p17);
    goto SeqInstr_643, SeqInstr_644;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  SeqInstr_645:
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p16);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} kfree($p18);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_643:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(848, 1));
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} list_add($p14, $p15);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $p16 := $0.ref;
    goto $bb7;

  SeqInstr_640:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_637:
    assume !assertsPassed;
    return;
}



const oz_elt_stream_create: ref;

axiom oz_elt_stream_create == $sub.ref(0, 402271);

procedure oz_elt_stream_create($p0: ref, $i1: i8, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.9, assertsPassed, $CurrAddr;



implementation oz_elt_stream_create($p0: ref, $i1: i8, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} {:cexpr "oz_elt_stream_create:arg:id"} boogie_si_record_i8($i1);
    call {:si_unique_call 926} {:cexpr "oz_elt_stream_create:arg:max_buf_count"} boogie_si_record_i32($i2);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} $p3 := kzalloc(48, 32);
    goto SeqInstr_646, SeqInstr_647;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  SeqInstr_648:
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} atomic_set($p8, 1);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 48)), $mul.ref(45, 1));
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p9, $i1);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p10, $i2);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} INIT_LIST_HEAD($p11);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} ldv_spin_lock_bh_135($p12);
    goto SeqInstr_649, SeqInstr_650;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  SeqInstr_651:
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} list_add_tail($p13, $p14);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} ldv_spin_unlock_bh_136($p15);
    goto SeqInstr_652, SeqInstr_653;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  SeqInstr_654:
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_652:
    assume !assertsPassed;
    return;

  SeqInstr_649:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_646:
    assume !assertsPassed;
    return;
}



const list_add: ref;

axiom list_add == $sub.ref(0, 403303);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} __list_add($p0, $p1, $p3);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    return;
}



const oz_ep_free: ref;

axiom oz_ep_free == $sub.ref(0, 404335);

procedure oz_ep_free($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.16, $CurrAddr, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $M.40, $M.9;



implementation oz_ep_free($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i8;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var vslice_dummy_var_146: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p1);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} kfree($p24);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, $p2);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, $p2);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(16, 1));
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.1, $p9);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 2);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p8, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} ldv_spin_lock_bh_126($p20);
    goto SeqInstr_658, SeqInstr_659;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  SeqInstr_660:
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} list_replace_init($p21, $p2);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p8, $mul.ref(0, 3344)), $mul.ref(104, 1));
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} list_splice_tail($p2, $p22);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p8, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} ldv_spin_unlock_bh_127($p23);
    goto SeqInstr_661, SeqInstr_662;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  SeqInstr_663:
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_661:
    assume !assertsPassed;
    return;

  SeqInstr_658:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(8, 1));
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(56, 1));
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.1, $p15);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} vslice_dummy_var_146 := oz_usb_stream_delete($p14, $i18);
    goto SeqInstr_655, SeqInstr_656;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  SeqInstr_657:
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_655:
    assume !assertsPassed;
    return;
}



const oz_usb_stream_delete: ref;

axiom oz_usb_stream_delete == $sub.ref(0, 405367);

procedure oz_usb_stream_delete($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.40, $M.9, assertsPassed, $CurrAddr;



implementation oz_usb_stream_delete($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i8;
  var $p17: ref;
  var $i18: i32;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var vslice_dummy_var_147: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} {:cexpr "oz_usb_stream_delete:arg:ep_num"} boogie_si_record_i8($i1);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 1232)), $mul.ref(644, 1));
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.1, $p9);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 64);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 1232)), $mul.ref(112, 1));
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i1);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} $i20 := oz_elt_stream_delete($p17, $i19);
    goto SeqInstr_667, SeqInstr_668;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  SeqInstr_669:
    call {:si_unique_call 944} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} oz_pd_put($p6);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 1);
    goto $bb10;

  SeqInstr_667:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i1);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} vslice_dummy_var_147 := oz_isoc_stream_delete($p6, $i15);
    goto SeqInstr_664, SeqInstr_665;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  SeqInstr_666:
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_664:
    assume !assertsPassed;
    return;
}



const list_replace_init: ref;

axiom list_replace_init == $sub.ref(0, 406399);

procedure list_replace_init($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation list_replace_init($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} list_replace($p0, $p1);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} INIT_LIST_HEAD($p0);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    return;
}



const list_splice_tail: ref;

axiom list_splice_tail == $sub.ref(0, 407431);

procedure list_splice_tail($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation list_splice_tail($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} $i2 := list_empty($p0);
    call {:si_unique_call 949} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} __list_splice($p0, $p5, $p1);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __list_splice: ref;

axiom __list_splice == $sub.ref(0, 408463);

procedure __list_splice($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation __list_splice($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p7, $p1);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p8, $p4);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, $p2);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, $p6);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    return;
}



const list_replace: ref;

axiom list_replace == $sub.ref(0, 409495);

procedure list_replace($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation list_replace($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, $p3);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p7, $p1);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, $p9);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, $p1);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    return;
}



const oz_isoc_stream_delete: ref;

axiom oz_isoc_stream_delete == $sub.ref(0, 410527);

procedure oz_isoc_stream_delete($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.40, assertsPassed;



implementation oz_isoc_stream_delete($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i8;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} {:cexpr "oz_isoc_stream_delete:arg:ep_num"} boogie_si_record_i8($i1);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(776, 1));
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} ldv_spin_lock_bh_143($p2);
    goto SeqInstr_670, SeqInstr_671;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  SeqInstr_672:
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i1);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} $p5 := pd_stream_find($p0, $i4);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(776, 1));
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} ldv_spin_unlock_bh_144($p9);
    goto SeqInstr_673, SeqInstr_674;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  SeqInstr_675:
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p5);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} oz_isoc_stream_free($p5);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_673:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} list_del($p8);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_670:
    assume !assertsPassed;
    return;
}



const oz_elt_stream_delete: ref;

axiom oz_elt_stream_delete == $sub.ref(0, 411559);

procedure oz_elt_stream_delete($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.9, $CurrAddr, assertsPassed;



implementation oz_elt_stream_delete($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p11: ref;
  var $p20: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i24;
  var $i59: i24;
  var $i60: i24;
  var $p61: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i64;
  var $i65: i64;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $i69: i32;
  var $p70: ref;
  var $i71: i32;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $i77: i1;
  var $p38: ref;
  var $p39: ref;
  var $p78: ref;
  var $i28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 958} {:cexpr "oz_elt_stream_delete:arg:id"} boogie_si_record_i8($i1);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} ldv_spin_lock_bh_135($p3);
    goto SeqInstr_676, SeqInstr_677;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  SeqInstr_678:
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i7, $i9);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p20 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p20);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p31);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i34, $i36);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} ldv_spin_unlock_bh_136($p78);
    goto SeqInstr_682, SeqInstr_683;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  SeqInstr_684:
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} oz_elt_stream_put($p20);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  SeqInstr_682:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i37 == 1;
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $p38, $p39 := $p33, $p31;
    goto $bb20;

  $bb20:
    call $p40, $p41, $p42, $p43, $i44, $p45, $i46, $i47, $p48, $i49, $i50, $i51, $p52, $p53, $p54, $p55, $p56, $p57, $i58, $i59, $i60, $p61, $p62, $i63, $i64, $i65, $i66, $i67, $p68, $i69, $p70, $i71, $p72, $i73, $p74, $p75, $i76, $i77, $p38, $p39 := oz_elt_stream_delete_loop_$bb20($p0, $p2, $p20, $i36, $p40, $p41, $p42, $p43, $i44, $p45, $i46, $i47, $p48, $i49, $i50, $i51, $p52, $p53, $p54, $p55, $p56, $p57, $i58, $i59, $i60, $p61, $p62, $i63, $i64, $i65, $i66, $i67, $p68, $i69, $p70, $i71, $p72, $i73, $p74, $p75, $i76, $i77, $p38, $p39);
    goto $bb20_last;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 328)), $mul.ref(0, 1));
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} list_del_init($p41);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p40, $mul.ref(0, 328)), $mul.ref(16, 1));
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} list_del_init($p42);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(36, 1));
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.1, $p43);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p40, $mul.ref(0, 328)), $mul.ref(324, 1));
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.1, $p45);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32($i44, $i46);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(36, 1));
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p48, $i47);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $i49 := $M.23;
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i49, 1);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} oz_elt_stream_put($p20);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} oz_elt_info_free($p0, $p40);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p38, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.1, $p74);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p38);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i76, $i36);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i77 == 1);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb28:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    $p38, $p39 := $p75, $p38;
    goto $bb28_dummy;

  $bb22:
    assume $i51 == 1;
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p52, .str.4);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p53, .str.13);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p54, .str.14);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p55, .str.15);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i58 := $load.i24($M.28, $p57);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $i59 := $and.i24($i58, $sub.i24(0, 262144));
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $i60 := $or.i24($i59, 121);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p57, $i60);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p61, 0);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.29, $p62);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i64($i63);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $i65 := $and.i64($i64, 1);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} $i66 := ldv__builtin_expect($i65, 0);
    call {:si_unique_call 965} {:cexpr "tmp___1"} boogie_si_record_i64($i66);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i67 == 1;
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} $i69 := atomic_read($p68);
    call {:si_unique_call 967} {:cexpr "tmp___0"} boogie_si_record_i32($i69);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(36, 1));
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.1, $p70);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p40, $mul.ref(0, 328)), $mul.ref(324, 1));
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.1, $p72);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} __dynamic_pr_debug.ref.ref.i32.i32.i32($p2, .str.15, $i71, $i73, $i69);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} ldv_spin_unlock_bh_136($p27);
    goto SeqInstr_679, SeqInstr_680;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  SeqInstr_681:
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 1);
    goto $bb15;

  SeqInstr_679:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $p11 := $p6;
    goto $bb4;

  $bb4:
    call $p12, $p13, $i14, $i15, $i16, $i17, $p18, $p19, $p21, $p22, $i23, $i24, $p11 := oz_elt_stream_delete_loop_$bb4($i1, $i9, $p12, $p13, $i14, $i15, $i16, $i17, $p18, $p19, $p21, $p22, $i23, $i24, $p11);
    goto $bb4_last;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 48)), $mul.ref(45, 1));
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.1, $p13);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i1);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i15, $i16);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $p18, $p19 := $p11, $p11;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, $i9);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $p11 := $p22;
    goto $bb10_dummy;

  $bb6:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} list_del($p18);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $p20 := $p19;
    goto $bb8;

  SeqInstr_676:
    assume !assertsPassed;
    return;

  $bb28_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6274;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6234;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 412591);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    return;
}



const oz_clean_endpoints_for_config: ref;

axiom oz_clean_endpoints_for_config == $sub.ref(0, 413623);

procedure oz_clean_endpoints_for_config($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.16, $CurrAddr, assertsPassed, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.40, $M.9;



implementation oz_clean_endpoints_for_config($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i7: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(16, 1));
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(100, 1));
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32(0, $i5);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} ldv_spin_lock_bh_126($p11);
    goto SeqInstr_688, SeqInstr_689;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  SeqInstr_690:
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(104, 1));
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(100, 1));
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p20, 0);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} ldv_spin_unlock_bh_127($p21);
    goto SeqInstr_691, SeqInstr_692;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  SeqInstr_693:
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_691:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i15 == 1;
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(104, 1));
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} kfree($p18);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(104, 1));
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p19, $0.ref);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_688:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb4;

  $bb4:
    call $i8, $i9, $i10, $i7 := oz_clean_endpoints_for_config_loop_$bb4($p0, $p1, $p4, $i8, $i9, $i10, $i7);
    goto $bb4_last;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} oz_clean_endpoints_for_interface($p0, $p1, $i7);
    goto SeqInstr_685, SeqInstr_686;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  SeqInstr_687:
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, 1);
    call {:si_unique_call 974} {:cexpr "i"} boogie_si_record_i32($i8);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p4);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i8, $i9);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i8;
    goto $bb6_dummy;

  SeqInstr_685:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6349;
}



const oz_build_endpoints_for_config: ref;

axiom oz_build_endpoints_for_config == $sub.ref(0, 414655);

procedure oz_build_endpoints_for_config($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.16, assertsPassed, $CurrAddr, $M.30, $M.31, $M.32, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.40, $M.9, $M.13, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation oz_build_endpoints_for_config($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i11: i64;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i1;
  var $i24: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i23: i32;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} {:cexpr "oz_build_endpoints_for_config:arg:mem_flags"} boogie_si_record_i32($i3);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(16, 1));
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.1, $p7);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    call {:si_unique_call 979} {:cexpr "num_iface"} boogie_si_record_i32($i9);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32(0, $i9);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb11;

  $bb11:
    call $i24, $p26, $p27, $p28, $p29, $i30, $i31, $i32, $i33, $i23 := oz_build_endpoints_for_config_loop_$bb11($p0, $p1, $p2, $i3, $i9, $i24, $p26, $p27, $p28, $p29, $i30, $i31, $i32, $i33, $i23);
    goto $bb11_last;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 680)), $mul.ref(408, 1)), $mul.ref($i24, 8));
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 8)), $mul.ref(8, 1));
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} $i30 := oz_build_endpoints_for_interface($p0, $p1, $p29, $i3);
    goto SeqInstr_703, SeqInstr_704;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  SeqInstr_705:
    call {:si_unique_call 984} {:cexpr "tmp___0"} boogie_si_record_i32($i30);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i23, 1);
    call {:si_unique_call 986} {:cexpr "i"} boogie_si_record_i32($i32);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, $i9);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i33 == 1);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb17:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i23 := $i32;
    goto $bb17_dummy;

  $bb13:
    assume $i31 == 1;
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} oz_clean_endpoints_for_config($p0, $p1);
    goto SeqInstr_706, SeqInstr_707;

  SeqInstr_707:
    assume assertsPassed;
    goto SeqInstr_708;

  SeqInstr_708:
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 1);
    goto $bb5;

  SeqInstr_706:
    assume !assertsPassed;
    return;

  SeqInstr_703:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i9);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i3, 32768);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} $p13 := ldv_kmalloc_array_165($i11, 8, $i12);
    goto SeqInstr_694, SeqInstr_695;

  SeqInstr_695:
    assume assertsPassed;
    goto SeqInstr_696;

  SeqInstr_696:
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} ldv_spin_lock_bh_126($p18);
    goto SeqInstr_697, SeqInstr_698;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  SeqInstr_699:
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(104, 1));
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p19, $p13);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 400)), $mul.ref(100, 1));
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p20, $i9);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} ldv_spin_unlock_bh_127($p21);
    goto SeqInstr_700, SeqInstr_701;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  SeqInstr_702:
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_700:
    assume !assertsPassed;
    return;

  SeqInstr_697:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 12);
    goto $bb5;

  SeqInstr_694:
    assume !assertsPassed;
    return;

  $bb17_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6411;
}



const ldv_kmalloc_array_165: ref;

axiom ldv_kmalloc_array_165 == $sub.ref(0, 415687);

procedure ldv_kmalloc_array_165($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_kmalloc_array_165($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} {:cexpr "ldv_kmalloc_array_165:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 988} {:cexpr "ldv_kmalloc_array_165:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 989} {:cexpr "ldv_kmalloc_array_165:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} ldv_check_alloc_flags($i2);
    goto SeqInstr_709, SeqInstr_710;

  SeqInstr_710:
    assume assertsPassed;
    goto SeqInstr_711;

  SeqInstr_711:
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} $p3 := ldv_malloc_unknown_size();
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} ldv_after_alloc($p3);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_709:
    assume !assertsPassed;
    return;
}



const oz_dequeue_ep_urb: ref;

axiom oz_dequeue_ep_urb == $sub.ref(0, 416719);

procedure oz_dequeue_ep_urb($p0: ref, $i1: i8, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.16, assertsPassed;



implementation oz_dequeue_ep_urb($p0: ref, $i1: i8, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $p11: ref;
  var $p12: ref;
  var $i14: i32;
  var $i15: i64;
  var $p17: ref;
  var $p18: ref;
  var $p13: ref;
  var $i19: i64;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p28: ref;
  var $p37: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $i48: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} {:cexpr "oz_dequeue_ep_urb:arg:ep_addr"} boogie_si_record_i8($i1);
    call {:si_unique_call 994} {:cexpr "oz_dequeue_ep_urb:arg:in_dir"} boogie_si_record_i32($i2);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(16, 1));
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} ldv_spin_lock_bh_126($p6);
    goto SeqInstr_712, SeqInstr_713;

  SeqInstr_713:
    assume assertsPassed;
    goto SeqInstr_714;

  SeqInstr_714:
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i2, 0);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i1);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref($i15, 8));
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    assume {:verifier.code 0} true;
    $p13 := $p18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p13);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $p42 := $0.ref;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(16, 1));
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.1, $p43);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} ldv_spin_unlock_bh_127($p45);
    goto SeqInstr_715, SeqInstr_716;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  SeqInstr_717:
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} oz_free_urb_link($p42);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p42);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $i48 := (if $i47 == 1 then 0 else $sub.i32(0, 43));
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $r := $i48;
    return;

  SeqInstr_715:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p13, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i24, $i26);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p37 := $0.ref;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $p42 := $p37;
    goto $bb18;

  $bb6:
    assume $i27 == 1;
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $p28 := $p23;
    goto $bb9;

  $bb9:
    call $p29, $p30, $p31, $i32, $i33, $i34, $p35, $p36, $p38, $p39, $i40, $i41, $p28 := oz_dequeue_ep_urb_loop_$bb9($p3, $i26, $p29, $p30, $p31, $i32, $i33, $i34, $p35, $p36, $p38, $p39, $i40, $i41, $p28);
    goto $bb9_last;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p3);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i32, $i33);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $p35, $p36 := $p28, $p28;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p28, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.1, $p38);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, $i26);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i41 == 1);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb15:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $p28 := $p39;
    goto $bb15_dummy;

  $bb11:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} list_del_init($p35);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $p37 := $p36;
    goto $bb13;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i1);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref($i9, 8));
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb3;

  SeqInstr_712:
    assume !assertsPassed;
    return;

  $bb15_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6467;
}



const __le16_to_cpup: ref;

axiom __le16_to_cpup == $sub.ref(0, 417751);

procedure __le16_to_cpup($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation __le16_to_cpup($p0: ref) returns ($r: i16)
{
  var $i1: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $i1 := $load.i16($M.1, $p0);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const getnstimeofday: ref;

axiom getnstimeofday == $sub.ref(0, 418783);

procedure getnstimeofday($p0: ref);
  free requires assertsPassed;



implementation getnstimeofday($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} getnstimeofday64($p0);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    return;
}



const oz_hcd_pd_departed: ref;

axiom oz_hcd_pd_departed == $sub.ref(0, 419815);

procedure oz_hcd_pd_departed($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.16, assertsPassed, $M.43, $CurrAddr, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.40, $M.9;



implementation oz_hcd_pd_departed($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(16, 1));
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} ldv_spin_lock_bh_126($p7);
    goto SeqInstr_718, SeqInstr_719;

  SeqInstr_719:
    assume assertsPassed;
    goto SeqInstr_720;

  SeqInstr_720:
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 3344)), $mul.ref(120, 1));
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $i10 := $sge.i32($i9, 0);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(24, 1));
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} ldv_spin_lock_139($p21);
    goto SeqInstr_721, SeqInstr_722;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  SeqInstr_723:
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(0, 1));
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.1, $p22);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i23, 4);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(0, 1));
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p25, $i24);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(24, 1));
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} ldv_spin_unlock_140___0($p26);
    goto SeqInstr_724, SeqInstr_725;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  SeqInstr_726:
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} ldv_spin_unlock_bh_127($p27);
    goto SeqInstr_727, SeqInstr_728;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  SeqInstr_729:
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 3344)), $mul.ref(3336, 1));
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} oz_clean_endpoints_for_config($p29, $p0);
    goto SeqInstr_730, SeqInstr_731;

  SeqInstr_731:
    assume assertsPassed;
    goto SeqInstr_732;

  SeqInstr_732:
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(24, 1));
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} ldv_spin_lock_bh_148($p30);
    goto SeqInstr_733, SeqInstr_734;

  SeqInstr_734:
    assume assertsPassed;
    goto SeqInstr_735;

  SeqInstr_735:
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(8, 1));
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, $p31);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(8, 1));
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p33, $0.ref);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(96, 1));
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p34, $sub.i8(0, 1));
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(98, 1));
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p35, 0);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(0, 1));
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.1, $p36);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, $sub.i32(0, 6));
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(0, 1));
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p39, $i38);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(0, 1));
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.1, $p40);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $i42 := $or.i32($i41, 2);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(0, 1));
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p43, $i42);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(4, 1));
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.1, $p44);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, $sub.i32(0, 4));
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(4, 1));
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p47, $i46);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(4, 1));
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.1, $p48);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $i50 := $or.i32($i49, 65536);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(4, 1));
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p51, $i50);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(0, 8));
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.1, $p53);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $p62 := $0.ref;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(24, 1));
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} ldv_spin_unlock_bh_149($p63);
    goto SeqInstr_736, SeqInstr_737;

  SeqInstr_737:
    assume assertsPassed;
    goto SeqInstr_738;

  SeqInstr_738:
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p62);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref(0, 3344)), $mul.ref(3336, 1));
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.1, $p66);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} usb_hcd_poll_rh_status($p67);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} oz_usb_put($p32);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i65 == 1;
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} oz_ep_free($p0, $p62);
    goto SeqInstr_739, SeqInstr_740;

  SeqInstr_740:
    assume assertsPassed;
    goto SeqInstr_741;

  SeqInstr_741:
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_739:
    assume !assertsPassed;
    return;

  SeqInstr_736:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i56 == 1;
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(0, 8));
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.1, $p58);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(0, 8));
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p61, $0.ref);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $p62 := $p59;
    goto $bb16;

  SeqInstr_733:
    assume !assertsPassed;
    return;

  SeqInstr_730:
    assume !assertsPassed;
    return;

  SeqInstr_727:
    assume !assertsPassed;
    return;

  SeqInstr_724:
    assume !assertsPassed;
    return;

  SeqInstr_721:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p0);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 3344)), $mul.ref(128, 1));
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 3344)), $mul.ref(120, 1));
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.1, $p14);
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p13, $mul.ref($i16, 400));
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i11, $i18);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb10;

  $bb11:
    assume $i19 == 1;
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 3344)), $mul.ref(120, 1));
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p20, $sub.i32(0, 1));
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_718:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_spin_lock_139: ref;

axiom ldv_spin_lock_139 == $sub.ref(0, 420847);

procedure ldv_spin_lock_139($p0: ref);
  free requires assertsPassed;
  modifies $M.43, assertsPassed;



implementation ldv_spin_lock_139($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} ldv_linux_kernel_locking_spinlock_spin_lock_port_lock_of_oz_port();
    goto SeqInstr_742, SeqInstr_743;

  SeqInstr_743:
    assume assertsPassed;
    goto SeqInstr_744;

  SeqInstr_744:
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} spin_lock($p0);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_742:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_140___0: ref;

axiom ldv_spin_unlock_140___0 == $sub.ref(0, 421879);

procedure ldv_spin_unlock_140___0($p0: ref);
  free requires assertsPassed;
  modifies $M.43, assertsPassed;



implementation ldv_spin_unlock_140___0($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} ldv_linux_kernel_locking_spinlock_spin_unlock_port_lock_of_oz_port();
    goto SeqInstr_745, SeqInstr_746;

  SeqInstr_746:
    assume assertsPassed;
    goto SeqInstr_747;

  SeqInstr_747:
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} spin_unlock($p0);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_745:
    assume !assertsPassed;
    return;
}



const ldv_spin_lock_bh_148: ref;

axiom ldv_spin_lock_bh_148 == $sub.ref(0, 422911);

procedure ldv_spin_lock_bh_148($p0: ref);
  free requires assertsPassed;
  modifies $M.43, assertsPassed;



implementation ldv_spin_lock_bh_148($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} ldv_linux_kernel_locking_spinlock_spin_lock_port_lock_of_oz_port();
    goto SeqInstr_748, SeqInstr_749;

  SeqInstr_749:
    assume assertsPassed;
    goto SeqInstr_750;

  SeqInstr_750:
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} spin_lock_bh($p0);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_748:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_bh_149: ref;

axiom ldv_spin_unlock_bh_149 == $sub.ref(0, 423943);

procedure ldv_spin_unlock_bh_149($p0: ref);
  free requires assertsPassed;
  modifies $M.43, assertsPassed;



implementation ldv_spin_unlock_bh_149($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} ldv_linux_kernel_locking_spinlock_spin_unlock_port_lock_of_oz_port();
    goto SeqInstr_751, SeqInstr_752;

  SeqInstr_752:
    assume assertsPassed;
    goto SeqInstr_753;

  SeqInstr_753:
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} spin_unlock_bh($p0);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_751:
    assume !assertsPassed;
    return;
}



const usb_hcd_poll_rh_status: ref;

axiom usb_hcd_poll_rh_status == $sub.ref(0, 424975);

procedure usb_hcd_poll_rh_status($p0: ref);
  free requires assertsPassed;



implementation usb_hcd_poll_rh_status($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_port_lock_of_oz_port: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_port_lock_of_oz_port == $sub.ref(0, 426007);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_port_lock_of_oz_port();
  free requires assertsPassed;
  modifies $M.43, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_port_lock_of_oz_port()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $i0 := $M.43;
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_754, SeqInstr_755;

  SeqInstr_755:
    assume assertsPassed;
    goto SeqInstr_756;

  SeqInstr_756:
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $i3 := $M.43;
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} ldv_assume($i5);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1020} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_port_lock_of_oz_port"} boogie_si_record_i32(1);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_754:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_port_lock_of_oz_port: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_port_lock_of_oz_port == $sub.ref(0, 427039);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_port_lock_of_oz_port();
  free requires assertsPassed;
  modifies $M.43, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_port_lock_of_oz_port()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $i0 := $M.43;
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_757, SeqInstr_758;

  SeqInstr_758:
    assume assertsPassed;
    goto SeqInstr_759;

  SeqInstr_759:
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $i3 := $M.43;
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} ldv_assume($i5);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1023} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_port_lock_of_oz_port"} boogie_si_record_i32(2);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_757:
    assume !assertsPassed;
    return;
}



const getnstimeofday64: ref;

axiom getnstimeofday64 == $sub.ref(0, 428071);

procedure getnstimeofday64($p0: ref);
  free requires assertsPassed;



implementation getnstimeofday64($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    return;
}



const oz_hcd_pd_reset: ref;

axiom oz_hcd_pd_reset == $sub.ref(0, 429103);

procedure oz_hcd_pd_reset($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.43, $M.16, assertsPassed, $CurrAddr, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.40, $M.9;



implementation oz_hcd_pd_reset($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 400)), $mul.ref(16, 1));
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 400)), $mul.ref(24, 1));
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} ldv_spin_lock_bh_148($p5);
    goto SeqInstr_760, SeqInstr_761;

  SeqInstr_761:
    assume assertsPassed;
    goto SeqInstr_762;

  SeqInstr_762:
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 400)), $mul.ref(0, 1));
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, 2);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 400)), $mul.ref(0, 1));
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p9, $i8);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 400)), $mul.ref(4, 1));
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.1, $p10);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i11, 16);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 400)), $mul.ref(4, 1));
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p13, $i12);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 400)), $mul.ref(4, 1));
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.1, $p14);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 1048576);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 400)), $mul.ref(4, 1));
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p17, $i16);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 400)), $mul.ref(24, 1));
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} ldv_spin_unlock_bh_149($p18);
    goto SeqInstr_763, SeqInstr_764;

  SeqInstr_764:
    assume assertsPassed;
    goto SeqInstr_765;

  SeqInstr_765:
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 3344)), $mul.ref(3336, 1));
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} oz_clean_endpoints_for_config($p20, $p2);
    goto SeqInstr_766, SeqInstr_767;

  SeqInstr_767:
    assume assertsPassed;
    goto SeqInstr_768;

  SeqInstr_768:
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 3344)), $mul.ref(3336, 1));
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} usb_hcd_poll_rh_status($p22);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_766:
    assume !assertsPassed;
    return;

  SeqInstr_763:
    assume !assertsPassed;
    return;

  SeqInstr_760:
    assume !assertsPassed;
    return;
}



const oz_hcd_pd_arrived: ref;

axiom oz_hcd_pd_arrived == $sub.ref(0, 430135);

procedure oz_hcd_pd_arrived($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $M.16, $M.43, assertsPassed, $CurrAddr, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.45, $M.40, $M.9;



implementation oz_hcd_pd_arrived($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $i22: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p4: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} $p1 := oz_hcd_claim();
    goto SeqInstr_769, SeqInstr_770;

  SeqInstr_770:
    assume assertsPassed;
    goto SeqInstr_771;

  SeqInstr_771:
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} $p5 := oz_ep_alloc(0, 32);
    goto SeqInstr_772, SeqInstr_773;

  SeqInstr_773:
    assume assertsPassed;
    goto SeqInstr_774;

  SeqInstr_774:
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} ldv_spin_lock_bh_126($p8);
    goto SeqInstr_775, SeqInstr_776;

  SeqInstr_776:
    assume assertsPassed;
    goto SeqInstr_777;

  SeqInstr_777:
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 3344)), $mul.ref(120, 1));
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.1, $p9);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $i11 := $sge.i32($i10, 0);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 3344)), $mul.ref(128, 1));
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 400)), $mul.ref(24, 1));
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} ldv_spin_lock_139($p14);
    goto SeqInstr_784, SeqInstr_785;

  SeqInstr_785:
    assume assertsPassed;
    goto SeqInstr_786;

  SeqInstr_786:
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p13, $mul.ref(0, 400)), $mul.ref(0, 1));
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.1, $p15);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 3);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $i19, $p20 := 0, $p12;
    assume true;
    goto $bb15, $bb17;

  $bb17:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p13, $mul.ref(0, 400)), $mul.ref(24, 1));
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} ldv_spin_unlock_140___0($p23);
    goto SeqInstr_790, SeqInstr_791;

  SeqInstr_791:
    assume assertsPassed;
    goto SeqInstr_792;

  SeqInstr_792:
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 3344)), $mul.ref(128, 1));
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p43, $mul.ref(1, 400));
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p43, $mul.ref(1, 400)), $mul.ref(24, 1));
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} ldv_spin_lock_139($p45);
    goto SeqInstr_793, SeqInstr_794;

  SeqInstr_794:
    assume assertsPassed;
    goto SeqInstr_795;

  SeqInstr_795:
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p43, $mul.ref(1, 400)), $mul.ref(0, 1));
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.1, $p46);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 3);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $i19, $p20 := 1, $p44;
    assume {:branchcond $i49} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p43, $mul.ref(1, 400)), $mul.ref(24, 1));
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} ldv_spin_unlock_140___0($p50);
    goto SeqInstr_799, SeqInstr_800;

  SeqInstr_800:
    assume assertsPassed;
    goto SeqInstr_801;

  SeqInstr_801:
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 3344)), $mul.ref(128, 1));
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p52, $mul.ref(2, 400));
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p52, $mul.ref(2, 400)), $mul.ref(24, 1));
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} ldv_spin_lock_139($p54);
    goto SeqInstr_802, SeqInstr_803;

  SeqInstr_803:
    assume assertsPassed;
    goto SeqInstr_804;

  SeqInstr_804:
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p52, $mul.ref(2, 400)), $mul.ref(0, 1));
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.1, $p55);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, 3);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 0);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $i19, $p20 := 2, $p53;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p52, $mul.ref(2, 400)), $mul.ref(24, 1));
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} ldv_spin_unlock_140___0($p59);
    goto SeqInstr_805, SeqInstr_806;

  SeqInstr_806:
    assume assertsPassed;
    goto SeqInstr_807;

  SeqInstr_807:
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 3344)), $mul.ref(128, 1));
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref(3, 400));
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p61, $mul.ref(3, 400)), $mul.ref(24, 1));
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} ldv_spin_lock_139($p63);
    goto SeqInstr_808, SeqInstr_809;

  SeqInstr_809:
    assume assertsPassed;
    goto SeqInstr_810;

  SeqInstr_810:
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p61, $mul.ref(3, 400)), $mul.ref(0, 1));
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.1, $p64);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i65, 3);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 0);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $i19, $p20 := 3, $p62;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p61, $mul.ref(3, 400)), $mul.ref(24, 1));
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} ldv_spin_unlock_140___0($p68);
    goto SeqInstr_811, SeqInstr_812;

  SeqInstr_812:
    assume assertsPassed;
    goto SeqInstr_813;

  SeqInstr_813:
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 3344)), $mul.ref(128, 1));
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($p70, $mul.ref(4, 400));
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p70, $mul.ref(4, 400)), $mul.ref(24, 1));
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} ldv_spin_lock_139($p72);
    goto SeqInstr_814, SeqInstr_815;

  SeqInstr_815:
    assume assertsPassed;
    goto SeqInstr_816;

  SeqInstr_816:
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p70, $mul.ref(4, 400)), $mul.ref(0, 1));
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.1, $p73);
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i74, 3);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 0);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $i19, $p20 := 4, $p71;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p70, $mul.ref(4, 400)), $mul.ref(24, 1));
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} ldv_spin_unlock_140___0($p77);
    goto SeqInstr_817, SeqInstr_818;

  SeqInstr_818:
    assume assertsPassed;
    goto SeqInstr_819;

  SeqInstr_819:
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 3344)), $mul.ref(128, 1));
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p79, $mul.ref(5, 400));
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p79, $mul.ref(5, 400)), $mul.ref(24, 1));
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} ldv_spin_lock_139($p81);
    goto SeqInstr_820, SeqInstr_821;

  SeqInstr_821:
    assume assertsPassed;
    goto SeqInstr_822;

  SeqInstr_822:
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p79, $mul.ref(5, 400)), $mul.ref(0, 1));
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.1, $p82);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $i84 := $and.i32($i83, 3);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 0);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $i19, $p20 := 5, $p80;
    assume {:branchcond $i85} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p79, $mul.ref(5, 400)), $mul.ref(24, 1));
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} ldv_spin_unlock_140___0($p86);
    goto SeqInstr_823, SeqInstr_824;

  SeqInstr_824:
    assume assertsPassed;
    goto SeqInstr_825;

  SeqInstr_825:
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p1, $mul.ref(0, 3344)), $mul.ref(128, 1));
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p88, $mul.ref(6, 400));
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p88, $mul.ref(6, 400)), $mul.ref(24, 1));
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} ldv_spin_lock_139($p90);
    goto SeqInstr_826, SeqInstr_827;

  SeqInstr_827:
    assume assertsPassed;
    goto SeqInstr_828;

  SeqInstr_828:
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p88, $mul.ref(6, 400)), $mul.ref(0, 1));
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.1, $p91);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $i93 := $and.i32($i92, 3);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 0);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $i19, $p20 := 6, $p89;
    assume {:branchcond $i94} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p88, $mul.ref(6, 400)), $mul.ref(24, 1));
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} ldv_spin_unlock_140___0($p95);
    goto SeqInstr_829, SeqInstr_830;

  SeqInstr_830:
    assume assertsPassed;
    goto SeqInstr_831;

  SeqInstr_831:
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 3344)), $mul.ref(128, 1));
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($p97, $mul.ref(7, 400));
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p97, $mul.ref(7, 400)), $mul.ref(24, 1));
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} ldv_spin_lock_139($p99);
    goto SeqInstr_832, SeqInstr_833;

  SeqInstr_833:
    assume assertsPassed;
    goto SeqInstr_834;

  SeqInstr_834:
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p97, $mul.ref(7, 400)), $mul.ref(0, 1));
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.1, $p100);
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i101, 3);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i102, 0);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $i19, $p20 := 7, $p98;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p97, $mul.ref(7, 400)), $mul.ref(24, 1));
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} ldv_spin_unlock_140___0($p104);
    goto SeqInstr_835, SeqInstr_836;

  SeqInstr_836:
    assume assertsPassed;
    goto SeqInstr_837;

  SeqInstr_837:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i22 := 8;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i22, 8);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 3344)), $mul.ref(120, 1));
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p25, $i22);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 3344)), $mul.ref(128, 1));
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i22);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p27, $mul.ref($i28, 400));
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p27, $mul.ref($i28, 400)), $mul.ref(112, 1)), $mul.ref(0, 8));
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p31, $p5);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} ldv_spin_unlock_bh_127($p32);
    goto SeqInstr_796, SeqInstr_797;

  SeqInstr_797:
    assume assertsPassed;
    goto SeqInstr_798;

  SeqInstr_798:
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 3344)), $mul.ref(3328, 1));
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.1, $p33);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 1);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 3344)), $mul.ref(3336, 1));
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.1, $p39);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} usb_hcd_poll_rh_status($p40);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} oz_hcd_put($p1);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $p4 := $p29;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb25:
    assume $i36 == 1;
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 3344)), $mul.ref(3336, 1));
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.1, $p37);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} usb_hcd_resume_root_hub($p38);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    goto $bb27;

  SeqInstr_796:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i24 == 1;
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} ldv_spin_unlock_bh_127($p41);
    goto SeqInstr_778, SeqInstr_779;

  SeqInstr_779:
    assume assertsPassed;
    goto SeqInstr_780;

  SeqInstr_780:
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} oz_ep_free($0.ref, $p5);
    goto SeqInstr_781, SeqInstr_782;

  SeqInstr_782:
    assume assertsPassed;
    goto SeqInstr_783;

  SeqInstr_783:
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} oz_hcd_put($p1);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;

  SeqInstr_781:
    assume !assertsPassed;
    return;

  SeqInstr_778:
    assume !assertsPassed;
    return;

  SeqInstr_835:
    assume !assertsPassed;
    return;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i103 == 1;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} oz_acquire_port($p20, $p0);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 400)), $mul.ref(24, 1));
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} ldv_spin_unlock_140___0($p21);
    goto SeqInstr_787, SeqInstr_788;

  SeqInstr_788:
    assume assertsPassed;
    goto SeqInstr_789;

  SeqInstr_789:
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $i22 := $i19;
    goto $bb18;

  SeqInstr_787:
    assume !assertsPassed;
    return;

  SeqInstr_832:
    assume !assertsPassed;
    return;

  SeqInstr_829:
    assume !assertsPassed;
    return;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i94 == 1;
    goto $bb16;

  SeqInstr_826:
    assume !assertsPassed;
    return;

  SeqInstr_823:
    assume !assertsPassed;
    return;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i85 == 1;
    goto $bb16;

  SeqInstr_820:
    assume !assertsPassed;
    return;

  SeqInstr_817:
    assume !assertsPassed;
    return;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb16;

  SeqInstr_814:
    assume !assertsPassed;
    return;

  SeqInstr_811:
    assume !assertsPassed;
    return;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i67 == 1;
    goto $bb16;

  SeqInstr_808:
    assume !assertsPassed;
    return;

  SeqInstr_805:
    assume !assertsPassed;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb16;

  SeqInstr_802:
    assume !assertsPassed;
    return;

  SeqInstr_799:
    assume !assertsPassed;
    return;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb16;

  SeqInstr_793:
    assume !assertsPassed;
    return;

  SeqInstr_790:
    assume !assertsPassed;
    return;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb16;

  SeqInstr_784:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i11 == 1;
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_775:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_772:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;

  SeqInstr_769:
    assume !assertsPassed;
    return;
}



const oz_hcd_claim: ref;

axiom oz_hcd_claim == $sub.ref(0, 431167);

procedure oz_hcd_claim() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.45, assertsPassed;



implementation oz_hcd_claim() returns ($r: ref)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var vslice_dummy_var_148: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} ldv_spin_lock_bh_136(g_hcdlock);
    goto SeqInstr_838, SeqInstr_839;

  SeqInstr_839:
    assume assertsPassed;
    goto SeqInstr_840;

  SeqInstr_840:
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $p0 := $M.44;
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} ldv_spin_unlock_bh_137(g_hcdlock);
    goto SeqInstr_841, SeqInstr_842;

  SeqInstr_842:
    assume assertsPassed;
    goto SeqInstr_843;

  SeqInstr_843:
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;

  SeqInstr_841:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(3336, 1));
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} vslice_dummy_var_148 := usb_get_hcd($p4);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_838:
    assume !assertsPassed;
    return;
}



const oz_acquire_port: ref;

axiom oz_acquire_port == $sub.ref(0, 432199);

procedure oz_acquire_port($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation oz_acquire_port($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(368, 1));
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} INIT_LIST_HEAD($p2);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(384, 1));
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} INIT_LIST_HEAD($p3);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(0, 1));
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, 3);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(0, 1));
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p7, $i6);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(4, 1));
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, 65537);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(4, 1));
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p11, $i10);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} oz_usb_get($p1);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 400)), $mul.ref(8, 1));
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p12, $p1);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    return;
}



const usb_hcd_resume_root_hub: ref;

axiom usb_hcd_resume_root_hub == $sub.ref(0, 433231);

procedure usb_hcd_resume_root_hub($p0: ref);
  free requires assertsPassed;



implementation usb_hcd_resume_root_hub($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    return;
}



const oz_hcd_put: ref;

axiom oz_hcd_put == $sub.ref(0, 434263);

procedure oz_hcd_put($p0: ref);
  free requires assertsPassed;



implementation oz_hcd_put($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(3336, 1));
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} usb_put_hcd($p4);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_put_hcd: ref;

axiom usb_put_hcd == $sub.ref(0, 435295);

procedure usb_put_hcd($p0: ref);
  free requires assertsPassed;



implementation usb_put_hcd($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_bh_136: ref;

axiom ldv_spin_lock_bh_136 == $sub.ref(0, 436327);

procedure ldv_spin_lock_bh_136($p0: ref);
  free requires assertsPassed;
  modifies $M.45, assertsPassed;



implementation ldv_spin_lock_bh_136($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} ldv_linux_kernel_locking_spinlock_spin_lock_g_hcdlock();
    goto SeqInstr_844, SeqInstr_845;

  SeqInstr_845:
    assume assertsPassed;
    goto SeqInstr_846;

  SeqInstr_846:
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} spin_lock_bh($p0);
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_844:
    assume !assertsPassed;
    return;
}



const usb_get_hcd: ref;

axiom usb_get_hcd == $sub.ref(0, 437359);

procedure usb_get_hcd($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_hcd($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} $p1 := external_alloc();
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_spin_unlock_bh_137: ref;

axiom ldv_spin_unlock_bh_137 == $sub.ref(0, 438391);

procedure ldv_spin_unlock_bh_137($p0: ref);
  free requires assertsPassed;
  modifies $M.45, assertsPassed;



implementation ldv_spin_unlock_bh_137($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} ldv_linux_kernel_locking_spinlock_spin_unlock_g_hcdlock();
    goto SeqInstr_847, SeqInstr_848;

  SeqInstr_848:
    assume assertsPassed;
    goto SeqInstr_849;

  SeqInstr_849:
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} spin_unlock_bh($p0);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_847:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_g_hcdlock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_g_hcdlock == $sub.ref(0, 439423);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_g_hcdlock();
  free requires assertsPassed;
  modifies $M.45, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_g_hcdlock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $i0 := $M.45;
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_850, SeqInstr_851;

  SeqInstr_851:
    assume assertsPassed;
    goto SeqInstr_852;

  SeqInstr_852:
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $i3 := $M.45;
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} ldv_assume($i5);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1070} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_g_hcdlock"} boogie_si_record_i32(1);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_850:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_g_hcdlock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_g_hcdlock == $sub.ref(0, 440455);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_g_hcdlock();
  free requires assertsPassed;
  modifies $M.45, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_g_hcdlock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $i0 := $M.45;
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_853, SeqInstr_854;

  SeqInstr_854:
    assume assertsPassed;
    goto SeqInstr_855;

  SeqInstr_855:
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $i3 := $M.45;
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} ldv_assume($i5);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1073} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_g_hcdlock"} boogie_si_record_i32(2);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_853:
    assume !assertsPassed;
    return;
}



const oz_hcd_term: ref;

axiom oz_hcd_term == $sub.ref(0, 441487);

procedure oz_hcd_term();
  free requires assertsPassed;



implementation oz_hcd_term()
{
  var $p0: ref;
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} msleep(1500);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} tasklet_kill(g_urb_process_tasklet);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} tasklet_kill(g_urb_cancel_tasklet);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $p0 := $M.46;
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} platform_device_unregister($p0);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} ldv_platform_driver_unregister_209(g_oz_plat_drv);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $p1 := $M.14;
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} kmem_cache_destroy($p1);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 442519);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    return;
}



const platform_device_unregister: ref;

axiom platform_device_unregister == $sub.ref(0, 443551);

procedure platform_device_unregister($p0: ref);
  free requires assertsPassed;



implementation platform_device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    return;
}



const ldv_platform_driver_unregister_209: ref;

axiom ldv_platform_driver_unregister_209 == $sub.ref(0, 444583);

procedure ldv_platform_driver_unregister_209($p0: ref);
  free requires assertsPassed;



implementation ldv_platform_driver_unregister_209($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} platform_driver_unregister($p0);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} ldv_platform_driver_unregister($0.ref, $p0);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    return;
}



const kmem_cache_destroy: ref;

axiom kmem_cache_destroy == $sub.ref(0, 445615);

procedure kmem_cache_destroy($p0: ref);
  free requires assertsPassed;



implementation kmem_cache_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    return;
}



const platform_driver_unregister: ref;

axiom platform_driver_unregister == $sub.ref(0, 446647);

procedure platform_driver_unregister($p0: ref);
  free requires assertsPassed;



implementation platform_driver_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    return;
}



const ldv_platform_driver_unregister: ref;

axiom ldv_platform_driver_unregister == $sub.ref(0, 447679);

procedure ldv_platform_driver_unregister($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_platform_driver_unregister($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} ldv_dispatch_deregister_8_1($p1);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_8_1: ref;

axiom ldv_dispatch_deregister_8_1 == $sub.ref(0, 448711);

procedure ldv_dispatch_deregister_8_1($p0: ref);
  free requires assertsPassed;



implementation ldv_dispatch_deregister_8_1($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    return;
}



const oz_hcd_init: ref;

axiom oz_hcd_init == $sub.ref(0, 449743);

procedure oz_hcd_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14, $M.46, $M.1, $M.12, $M.48, $M.13, $CurrAddr, $M.96, $M.97, $M.44, $M.95, assertsPassed, $M.45, $M.33, $M.103, $M.17, $M.16, $M.104, $M.105, $M.15, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.41, $M.106, $M.107, $M.42, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation oz_hcd_init() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i14: i32;
  var $i9: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} $i0 := usb_disabled();
    call {:si_unique_call 1085} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} $p3 := kmem_cache_create(.str.11, 40, 8, 0, $0.ref);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $M.14 := $p3;
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $p4 := $M.14;
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} tasklet_init(g_urb_process_tasklet, oz_urb_process_tasklet, 0);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} tasklet_init(g_urb_cancel_tasklet, oz_urb_cancel_tasklet, 0);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} $i7 := ldv___platform_driver_register_207(g_oz_plat_drv, __this_module);
    goto SeqInstr_856, SeqInstr_857;

  SeqInstr_857:
    assume assertsPassed;
    goto SeqInstr_858;

  SeqInstr_858:
    call {:si_unique_call 1090} {:cexpr "err"} boogie_si_record_i32($i7);
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} $p10 := platform_device_alloc(.str.4, $sub.i32(0, 1));
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $M.46 := $p10;
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $p11 := $M.46;
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p15 := $M.46;
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} $i16 := platform_device_add($p15);
    call {:si_unique_call 1096} {:cexpr "err"} boogie_si_record_i32($i16);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb16:
    assume $i17 == 1;
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p18 := $M.46;
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} platform_device_put($p18);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $i14 := $i16;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} ldv_platform_driver_unregister_208(g_oz_plat_drv);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $i9 := $i14;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} tasklet_disable(g_urb_process_tasklet);
    goto SeqInstr_859, SeqInstr_860;

  SeqInstr_860:
    assume assertsPassed;
    goto SeqInstr_861;

  SeqInstr_861:
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} tasklet_disable(g_urb_cancel_tasklet);
    goto SeqInstr_862, SeqInstr_863;

  SeqInstr_863:
    assume assertsPassed;
    goto SeqInstr_864;

  SeqInstr_864:
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i2 := $i9;
    goto $bb3;

  SeqInstr_862:
    assume !assertsPassed;
    return;

  SeqInstr_859:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i13 == 1;
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 12);
    goto $bb14;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb10;

  SeqInstr_856:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 19);
    goto $bb3;
}



const usb_disabled: ref;

axiom usb_disabled == $sub.ref(0, 450775);

procedure usb_disabled() returns ($r: i32);
  free requires assertsPassed;



implementation usb_disabled() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1098} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1099} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const kmem_cache_create: ref;

axiom kmem_cache_create == $sub.ref(0, 451807);

procedure kmem_cache_create($p0: ref, $i1: i64, $i2: i64, $i3: i64, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kmem_cache_create($p0: ref, $i1: i64, $i2: i64, $i3: i64, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} {:cexpr "kmem_cache_create:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1101} {:cexpr "kmem_cache_create:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1102} {:cexpr "kmem_cache_create:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} $p5 := external_alloc();
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const oz_urb_process_tasklet: ref;

axiom oz_urb_process_tasklet == $sub.ref(0, 452839);

procedure oz_urb_process_tasklet($i0: i64);



const tasklet_init: ref;

axiom tasklet_init == $sub.ref(0, 453871);

procedure tasklet_init($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation tasklet_init($p0: ref, $p1: ref, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} {:cexpr "tasklet_init:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    return;
}



const oz_urb_cancel_tasklet: ref;

axiom oz_urb_cancel_tasklet == $sub.ref(0, 454903);

procedure oz_urb_cancel_tasklet($i0: i64);



const ldv___platform_driver_register_207: ref;

axiom ldv___platform_driver_register_207 == $sub.ref(0, 455935);

procedure ldv___platform_driver_register_207($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.48, $CurrAddr, $M.96, $M.97, $M.44, $M.95, $M.45, assertsPassed, $M.33, $M.103, $M.17, $M.16, $M.104, $M.105, $M.15, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.41, $M.106, $M.107, $M.42, $M.12, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv___platform_driver_register_207($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} $i2 := __platform_driver_register($p0, $p1);
    call {:si_unique_call 1106} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} $i3 := ldv___platform_driver_register($i2, $p0, $p1);
    goto SeqInstr_865, SeqInstr_866;

  SeqInstr_866:
    assume assertsPassed;
    goto SeqInstr_867;

  SeqInstr_867:
    call {:si_unique_call 1108} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_865:
    assume !assertsPassed;
    return;
}



const platform_device_alloc: ref;

axiom platform_device_alloc == $sub.ref(0, 456967);

procedure platform_device_alloc($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation platform_device_alloc($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} {:cexpr "platform_device_alloc:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} $p2 := external_alloc();
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const platform_device_add: ref;

axiom platform_device_add == $sub.ref(0, 457999);

procedure platform_device_add($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation platform_device_add($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1111} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1112} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const platform_device_put: ref;

axiom platform_device_put == $sub.ref(0, 459031);

procedure platform_device_put($p0: ref);
  free requires assertsPassed;



implementation platform_device_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    return;
}



const ldv_platform_driver_unregister_208: ref;

axiom ldv_platform_driver_unregister_208 == $sub.ref(0, 460063);

procedure ldv_platform_driver_unregister_208($p0: ref);
  free requires assertsPassed;



implementation ldv_platform_driver_unregister_208($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} platform_driver_unregister($p0);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} ldv_platform_driver_unregister($0.ref, $p0);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    return;
}



const tasklet_disable: ref;

axiom tasklet_disable == $sub.ref(0, 461095);

procedure tasklet_disable($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.12, $M.13, assertsPassed;



implementation tasklet_disable($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} tasklet_disable_nosync($p0);
    goto SeqInstr_868, SeqInstr_869;

  SeqInstr_869:
    assume assertsPassed;
    goto SeqInstr_870;

  SeqInstr_870:
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} tasklet_unlock_wait($p0);
    goto SeqInstr_871, SeqInstr_872;

  SeqInstr_872:
    assume assertsPassed;
    goto SeqInstr_873;

  SeqInstr_873:
    call {:si_unique_call 1117} devirtbounce.3(0);
    goto SeqInstr_874, SeqInstr_875;

  SeqInstr_875:
    assume assertsPassed;
    goto SeqInstr_876;

  SeqInstr_876:
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_874:
    assume !assertsPassed;
    return;

  SeqInstr_871:
    assume !assertsPassed;
    return;

  SeqInstr_868:
    assume !assertsPassed;
    return;
}



const tasklet_disable_nosync: ref;

axiom tasklet_disable_nosync == $sub.ref(0, 462127);

procedure tasklet_disable_nosync($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.12, $M.13, assertsPassed;



implementation tasklet_disable_nosync($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} atomic_inc($p1);
    call {:si_unique_call 1119} devirtbounce.3(0);
    goto SeqInstr_877, SeqInstr_878;

  SeqInstr_878:
    assume assertsPassed;
    goto SeqInstr_879;

  SeqInstr_879:
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_877:
    assume !assertsPassed;
    return;
}



const tasklet_unlock_wait: ref;

axiom tasklet_unlock_wait == $sub.ref(0, 463159);

procedure tasklet_unlock_wait($p0: ref);
  free requires assertsPassed;
  modifies $M.12, $M.13, assertsPassed;



implementation tasklet_unlock_wait($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} $i2 := constant_test_bit(1, $p1);
    call {:si_unique_call 1121} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i4, $i5 := tasklet_unlock_wait_loop_$bb4($p1, $i4, $i5);
    goto $bb4_last;

  $bb5:
    call {:si_unique_call 1122} devirtbounce.3(0);
    goto SeqInstr_880, SeqInstr_881;

  SeqInstr_881:
    assume assertsPassed;
    goto SeqInstr_882;

  SeqInstr_882:
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} $i4 := constant_test_bit(1, $p1);
    call {:si_unique_call 1124} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb6_dummy;

  SeqInstr_880:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 464191);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.1, $p3);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const __platform_driver_register: ref;

axiom __platform_driver_register == $sub.ref(0, 465223);

procedure __platform_driver_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __platform_driver_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1126} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1127} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv___platform_driver_register: ref;

axiom ldv___platform_driver_register == $sub.ref(0, 466255);

procedure ldv___platform_driver_register($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.48, $CurrAddr, $M.96, $M.97, $M.44, $M.95, $M.45, assertsPassed, $M.33, $M.103, $M.17, $M.16, $M.104, $M.105, $M.15, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.41, $M.106, $M.107, $M.42, $M.12, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv___platform_driver_register($i0: i32, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} {:cexpr "ldv___platform_driver_register:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} $i3 := ldv_undef_int();
    call {:si_unique_call 1130} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i0, 0);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} ldv_assume($i8);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} ldv_assume($i6);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} ldv_dispatch_register_5_2($p1);
    goto SeqInstr_883, SeqInstr_884;

  SeqInstr_884:
    assume assertsPassed;
    goto SeqInstr_885;

  SeqInstr_885:
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_883:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_5_2: ref;

axiom ldv_dispatch_register_5_2 == $sub.ref(0, 467287);

procedure ldv_dispatch_register_5_2($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.48, $CurrAddr, $M.96, $M.97, $M.44, $M.95, $M.45, assertsPassed, $M.33, $M.103, $M.17, $M.16, $M.104, $M.105, $M.15, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.41, $M.106, $M.107, $M.42, $M.12, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_dispatch_register_5_2($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} $p1 := ldv_xmalloc(16);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, $p0);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} ldv_platform_platform_instance_1($p4);
    goto SeqInstr_886, SeqInstr_887;

  SeqInstr_887:
    assume assertsPassed;
    goto SeqInstr_888;

  SeqInstr_888:
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_886:
    assume !assertsPassed;
    return;
}



const ldv_xmalloc: ref;

axiom ldv_xmalloc == $sub.ref(0, 468319);

procedure ldv_xmalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_xmalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} {:cexpr "ldv_xmalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} $p1 := malloc($i0);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} ldv_assume($i4);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} $i5 := ldv_is_err($p1);
    call {:si_unique_call 1140} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} ldv_assume($i7);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_platform_platform_instance_1: ref;

axiom ldv_platform_platform_instance_1 == $sub.ref(0, 469351);

procedure ldv_platform_platform_instance_1($p0: ref);
  free requires assertsPassed;
  modifies $M.48, $CurrAddr, $M.96, $M.97, $M.1, $M.44, $M.95, $M.45, assertsPassed, $M.33, $M.103, $M.17, $M.16, $M.104, $M.105, $M.15, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.41, $M.106, $M.107, $M.42, $M.12, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_platform_platform_instance_1($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $p8 := $u4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} $p9 := ldv_xmalloc(1464);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} $i11 := ldv_undef_int();
    call {:si_unique_call 1146} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p10);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} ldv_free($p25);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $p13, $p14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $p33, $i34, $p35, $p36 := ldv_platform_platform_instance_1_loop_$bb7($p1, $p8, $p10, $p13, $p14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $p33, $i34, $p35, $p36);
    goto $bb7_last;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p8, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} $i15 := ldv_platform_instance_probe_1_14($p14, $p10);
    goto SeqInstr_889, SeqInstr_890;

  SeqInstr_890:
    assume assertsPassed;
    goto SeqInstr_891;

  SeqInstr_891:
    call {:si_unique_call 1150} {:cexpr "ldv_1_probed_default"} boogie_si_record_i32($i15);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} $i16 := ldv_ldv_post_probe_211($i15);
    goto SeqInstr_892, SeqInstr_893;

  SeqInstr_893:
    assume assertsPassed;
    goto SeqInstr_894;

  SeqInstr_894:
    call {:si_unique_call 1152} {:cexpr "ldv_1_probed_default"} boogie_si_record_i32($i16);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} $i17 := ldv_undef_int();
    call {:si_unique_call 1154} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i16, 0);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} ldv_assume($i22);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} $i23 := ldv_undef_int();
    call {:si_unique_call 1160} {:cexpr "tmp___1"} boogie_si_record_i32($i23);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i24 == 1);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb12_dummy;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i16, 0);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} ldv_assume($i20);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $i26, $i27, $i28, $i29, $i30, $i31, $p33, $i34 := ldv_platform_platform_instance_1_loop_$bb10($p1, $p10, $i26, $i27, $i28, $i29, $i30, $i31, $p33, $i34);
    goto $bb10_last;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 1);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i26, 2);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i26, 3);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i26, 4);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $i31 := $i26;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 5);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} ldv_stop();
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb31:
    assume $i32 == 1;
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p8, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.1, $p35);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} ldv_platform_instance_release_1_3($p36, $p10);
    goto SeqInstr_898, SeqInstr_899;

  SeqInstr_899:
    assume assertsPassed;
    goto SeqInstr_900;

  SeqInstr_900:
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_898:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i30 == 1;
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} ldv_dispatch_pm_register_1_6();
    goto SeqInstr_895, SeqInstr_896;

  SeqInstr_896:
    assume assertsPassed;
    goto SeqInstr_897;

  SeqInstr_897:
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} ldv_dispatch_pm_deregister_1_5();
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb36_dummy;

  SeqInstr_895:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i29 == 1;
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} ldv_platform_instance_callback_1_7($u7, $p10);
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb19:
    assume $i28 == 1;
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} ldv_platform_instance_callback_1_20($u6, $p10);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb15:
    assume $i27 == 1;
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.47, $p33);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} ldv_platform_instance_callback_1_21($u5, $p10, $i34);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    goto $bb36;

  SeqInstr_892:
    assume !assertsPassed;
    return;

  SeqInstr_889:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} ldv_free($p7);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $p8 := $p6;
    goto $bb3;

  $bb36_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} $i26 := ldv_undef_int();
    call {:si_unique_call 1158} {:cexpr "tmp___2"} boogie_si_record_i32($i26);
    goto corral_source_split_7133;

  $bb12_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} ldv_ldv_pre_probe_210();
    goto corral_source_split_7115;
}



const ldv_free: ref;

axiom ldv_free == $sub.ref(0, 470383);

procedure ldv_free($p0: ref);
  free requires assertsPassed;



implementation ldv_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} free_($p0);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    return;
}



const ldv_ldv_pre_probe_210: ref;

axiom ldv_ldv_pre_probe_210 == $sub.ref(0, 471415);

procedure ldv_ldv_pre_probe_210();
  free requires assertsPassed;
  modifies $M.96, $M.97;



implementation ldv_ldv_pre_probe_210()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} ldv_pre_probe();
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    return;
}



const ldv_platform_instance_probe_1_14: ref;

axiom ldv_platform_instance_probe_1_14 == $sub.ref(0, 472447);

procedure ldv_platform_instance_probe_1_14($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.44, $M.45, $CurrAddr, assertsPassed;



implementation ldv_platform_instance_probe_1_14($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} $i2 := oz_plat_probe($p1);
    goto SeqInstr_901, SeqInstr_902;

  SeqInstr_902:
    assume assertsPassed;
    goto SeqInstr_903;

  SeqInstr_903:
    call {:si_unique_call 1173} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_901:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_probe_211: ref;

axiom ldv_ldv_post_probe_211 == $sub.ref(0, 473479);

procedure ldv_ldv_post_probe_211($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.96, $M.97, assertsPassed;



implementation ldv_ldv_post_probe_211($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} {:cexpr "ldv_ldv_post_probe_211:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} ldv_linux_net_register_check_return_value_probe($i0);
    goto SeqInstr_904, SeqInstr_905;

  SeqInstr_905:
    assume assertsPassed;
    goto SeqInstr_906;

  SeqInstr_906:
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} ldv_linux_usb_register_check_return_value_probe($i0);
    goto SeqInstr_907, SeqInstr_908;

  SeqInstr_908:
    assume assertsPassed;
    goto SeqInstr_909;

  SeqInstr_909:
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} $i1 := ldv_post_probe($i0);
    call {:si_unique_call 1178} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_907:
    assume !assertsPassed;
    return;

  SeqInstr_904:
    assume !assertsPassed;
    return;
}



const ldv_platform_instance_callback_1_21: ref;

axiom ldv_platform_instance_callback_1_21 == $sub.ref(0, 474511);

procedure ldv_platform_instance_callback_1_21($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.48, $M.95, $CurrAddr;



implementation ldv_platform_instance_callback_1_21($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var vslice_dummy_var_149: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.48 := $store.i32($M.48, $p4, $i2);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.48, $p5);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} vslice_dummy_var_149 := oz_plat_suspend($p1, $i6);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    return;
}



const ldv_platform_instance_callback_1_20: ref;

axiom ldv_platform_instance_callback_1_20 == $sub.ref(0, 475543);

procedure ldv_platform_instance_callback_1_20($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_platform_instance_callback_1_20($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} oz_plat_shutdown($p1);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    return;
}



const ldv_platform_instance_callback_1_7: ref;

axiom ldv_platform_instance_callback_1_7 == $sub.ref(0, 476575);

procedure ldv_platform_instance_callback_1_7($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_platform_instance_callback_1_7($p0: ref, $p1: ref)
{
  var vslice_dummy_var_150: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} vslice_dummy_var_150 := oz_plat_resume($p1);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_pm_register_1_6: ref;

axiom ldv_dispatch_pm_register_1_6 == $sub.ref(0, 477607);

procedure ldv_dispatch_pm_register_1_6();
  free requires assertsPassed;
  modifies $CurrAddr, $M.44, $M.1, $M.33, $M.103, $M.17, $M.45, $M.16, $M.104, $M.105, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $M.41, $M.106, $M.107, $M.42, $M.15, $M.12, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_dispatch_pm_register_1_6()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} $p0 := ldv_xmalloc(16);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} ldv_platform_pm_ops_instance_2($p2);
    goto SeqInstr_910, SeqInstr_911;

  SeqInstr_911:
    assume assertsPassed;
    goto SeqInstr_912;

  SeqInstr_912:
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_910:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_pm_deregister_1_5: ref;

axiom ldv_dispatch_pm_deregister_1_5 == $sub.ref(0, 478639);

procedure ldv_dispatch_pm_deregister_1_5();
  free requires assertsPassed;



implementation ldv_dispatch_pm_deregister_1_5()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    return;
}



const ldv_platform_instance_release_1_3: ref;

axiom ldv_platform_instance_release_1_3 == $sub.ref(0, 479671);

procedure ldv_platform_instance_release_1_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.44, $M.45, $M.1, assertsPassed, $M.15;



implementation ldv_platform_instance_release_1_3($p0: ref, $p1: ref)
{
  var vslice_dummy_var_151: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} vslice_dummy_var_151 := oz_plat_remove($p1);
    goto SeqInstr_913, SeqInstr_914;

  SeqInstr_914:
    assume assertsPassed;
    goto SeqInstr_915;

  SeqInstr_915:
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_913:
    assume !assertsPassed;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 480703);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const oz_plat_remove: ref;

axiom oz_plat_remove == $sub.ref(0, 481735);

procedure oz_plat_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.44, $M.45, $M.1, assertsPassed, $M.15;



implementation oz_plat_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} $p1 := platform_get_drvdata($p0);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} $p6 := oz_hcd_private($p2);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} ldv_spin_lock_bh_136(g_hcdlock);
    goto SeqInstr_916, SeqInstr_917;

  SeqInstr_917:
    assume assertsPassed;
    goto SeqInstr_918;

  SeqInstr_918:
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $p8 := $M.44;
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i7, $i9);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} ldv_spin_unlock_bh_137(g_hcdlock);
    goto SeqInstr_919, SeqInstr_920;

  SeqInstr_920:
    assume assertsPassed;
    goto SeqInstr_921;

  SeqInstr_921:
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} oz_hcd_clear_orphanage($p6, $sub.i32(0, 32));
    goto SeqInstr_922, SeqInstr_923;

  SeqInstr_923:
    assume assertsPassed;
    goto SeqInstr_924;

  SeqInstr_924:
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} usb_remove_hcd($p2);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} usb_put_hcd($p2);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_922:
    assume !assertsPassed;
    return;

  SeqInstr_919:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $M.44 := $0.ref;
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_916:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 1);
    goto $bb3;
}



const platform_get_drvdata: ref;

axiom platform_get_drvdata == $sub.ref(0, 482767);

procedure platform_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation platform_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const oz_hcd_clear_orphanage: ref;

axiom oz_hcd_clear_orphanage == $sub.ref(0, 483799);

procedure oz_hcd_clear_orphanage($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1, $M.15, assertsPassed;



implementation oz_hcd_clear_orphanage($p0: ref, $i1: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p17: ref;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} {:cexpr "oz_hcd_clear_orphanage:arg:status"} boogie_si_record_i32($i1);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(104, 1)), $mul.ref(0, 1));
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(104, 1));
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i13, $i15);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $p17, $p18 := $p10, $p6;
    goto $bb6;

  $bb6:
    call $p19, $p20, $p21, $p22, $p23, $p25, $p26, $p28, $i29, $i30, $p17, $p18 := oz_hcd_clear_orphanage_loop_$bb6($p0, $i1, $i15, $p19, $p20, $p21, $p22, $p23, $p25, $p26, $p28, $i29, $i30, $p17, $p18);
    goto $bb6_last;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} list_del($p19);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(3336, 1));
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} oz_complete_urb($p21, $p23, $i1);
    goto SeqInstr_925, SeqInstr_926;

  SeqInstr_926:
    assume assertsPassed;
    goto SeqInstr_927;

  SeqInstr_927:
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} oz_free_urb_link($p18);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.1, $p25);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, $i15);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $p17, $p18 := $p26, $p17;
    goto $bb8_dummy;

  SeqInstr_925:
    assume !assertsPassed;
    return;

  $bb8_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7264;
}



const usb_remove_hcd: ref;

axiom usb_remove_hcd == $sub.ref(0, 484831);

procedure usb_remove_hcd($p0: ref);
  free requires assertsPassed;



implementation usb_remove_hcd($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 485863);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(512, 1));
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_platform_pm_ops_instance_2: ref;

axiom ldv_platform_pm_ops_instance_2 == $sub.ref(0, 486895);

procedure ldv_platform_pm_ops_instance_2($p0: ref);
  free requires assertsPassed;
  modifies $M.44, $M.1, $M.33, $M.103, $M.17, $M.45, $M.16, $M.104, $M.105, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.41, $M.106, $M.107, $M.42, $M.15, $M.12, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_platform_pm_ops_instance_2($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i64;
  var $i96: i1;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i64;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $p120: ref;
  var $i121: i64;
  var $i122: i1;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i64;
  var $i128: i1;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i64;
  var $i134: i1;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i64;
  var $i140: i1;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i64;
  var $i146: i1;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: i64;
  var $i152: i1;
  var $p153: ref;
  var $p154: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i1, $i2, $i3, $i4, $i5, $p7, $p8, $i9, $i10, $p11, $p12, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $p26, $i27, $i28, $p29, $p30, $i31, $i32, $i33, $i34, $p35, $p36, $i37, $i38, $p39, $p40, $i41, $i42, $p43, $p44, $i45, $i46, $p47, $p48, $p49, $p50, $i51, $i52, $p53, $p54, $p55, $p56, $i57, $i58, $p59, $p60, $p61, $p62, $i63, $i64, $p65, $p66, $p67, $p68, $i69, $i70, $p71, $p72, $p73, $p74, $i75, $i76, $p77, $p78, $i79, $i80, $p81, $p82, $i83, $i84, $p85, $p86, $p87, $p88, $i89, $i90, $p91, $p92, $p93, $p94, $i95, $i96, $p97, $p98, $p99, $p100, $i101, $i102, $p103, $p104, $p105, $p106, $i107, $i108, $p109, $p110, $p111, $p112, $i113, $i114, $p115, $p116, $i117, $i118, $p119, $p120, $i121, $i122, $p123, $p124, $p125, $p126, $i127, $i128, $p129, $p130, $p131, $p132, $i133, $i134, $p135, $p136, $p137, $p138, $i139, $i140, $p141, $p142, $p143, $p144, $i145, $i146, $p147, $p148, $p149, $p150, $i151, $i152, $p153, $p154 := ldv_platform_pm_ops_instance_2_loop_$bb1($i1, $i2, $i3, $i4, $i5, $p7, $p8, $i9, $i10, $p11, $p12, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $p26, $i27, $i28, $p29, $p30, $i31, $i32, $i33, $i34, $p35, $p36, $i37, $i38, $p39, $p40, $i41, $i42, $p43, $p44, $i45, $i46, $p47, $p48, $p49, $p50, $i51, $i52, $p53, $p54, $p55, $p56, $i57, $i58, $p59, $p60, $p61, $p62, $i63, $i64, $p65, $p66, $p67, $p68, $i69, $i70, $p71, $p72, $p73, $p74, $i75, $i76, $p77, $p78, $i79, $i80, $p81, $p82, $i83, $i84, $p85, $p86, $p87, $p88, $i89, $i90, $p91, $p92, $p93, $p94, $i95, $i96, $p97, $p98, $p99, $p100, $i101, $i102, $p103, $p104, $p105, $p106, $i107, $i108, $p109, $p110, $p111, $p112, $i113, $i114, $p115, $p116, $i117, $i118, $p119, $p120, $i121, $i122, $p123, $p124, $p125, $p126, $i127, $i128, $p129, $p130, $p131, $p132, $i133, $i134, $p135, $p136, $p137, $p138, $i139, $i140, $p141, $p142, $p143, $p144, $i145, $i146, $p147, $p148, $p149, $p150, $i151, $i152, $p153, $p154);
    goto $bb1_last;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 3);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $i5 := $i1;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 4);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} ldv_stop();
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i6 == 1;
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb10:
    assume $i4 == 1;
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.55, $p25);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} $i31 := ldv_undef_int();
    call {:si_unique_call 1206} {:cexpr "tmp___0"} boogie_si_record_i32($i31);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 1);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i31, 2);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i31, 3);
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} ldv_stop();
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.93, $p149);
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $i151 := $p2i.ref.i64($p150);
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $i152 := $ne.i64($i151, 0);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb22_dummy;

  $bb110:
    assume $i152 == 1;
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $p154 := $load.ref($M.94, $p153);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} ldv_pm_ops_instance_complete_2_3($p154, $u9);
    goto SeqInstr_994, SeqInstr_995;

  SeqInstr_995:
    assume assertsPassed;
    goto SeqInstr_996;

  SeqInstr_996:
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    goto $bb112;

  SeqInstr_994:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i34 == 1;
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.81, $p111);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $i113 := $p2i.ref.i64($p112);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $i114 := $ne.i64($i113, 0);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} $i117 := ldv_undef_int();
    call {:si_unique_call 1226} {:cexpr "tmp___3"} boogie_si_record_i32($i117);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i118 == 1);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.87, $p131);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $i133 := $p2i.ref.i64($p132);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $i134 := $ne.i64($i133, 0);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.89, $p137);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $i139 := $p2i.ref.i64($p138);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $i140 := $ne.i64($i139, 0);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.91, $p143);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $i145 := $p2i.ref.i64($p144);
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $i146 := $ne.i64($i145, 0);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb106:
    assume $i146 == 1;
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.92, $p147);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} ldv_pm_ops_instance_restore_2_4($p148, $u9);
    goto SeqInstr_991, SeqInstr_992;

  SeqInstr_992:
    assume assertsPassed;
    goto SeqInstr_993;

  SeqInstr_993:
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    goto $bb108;

  SeqInstr_991:
    assume !assertsPassed;
    return;

  $bb103:
    assume $i140 == 1;
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.90, $p141);
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} ldv_pm_ops_instance_restore_noirq_2_5($p142, $u9);
    goto SeqInstr_988, SeqInstr_989;

  SeqInstr_989:
    assume assertsPassed;
    goto SeqInstr_990;

  SeqInstr_990:
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    goto $bb105;

  SeqInstr_988:
    assume !assertsPassed;
    return;

  $bb100:
    assume $i134 == 1;
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.88, $p135);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} ldv_pm_ops_instance_poweroff_noirq_2_6($p136, $u9);
    goto SeqInstr_985, SeqInstr_986;

  SeqInstr_986:
    assume assertsPassed;
    goto SeqInstr_987;

  SeqInstr_987:
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    goto $bb102;

  SeqInstr_985:
    assume !assertsPassed;
    return;

  $bb91:
    assume $i118 == 1;
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.83, $p119);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $i121 := $p2i.ref.i64($p120);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $i122 := $ne.i64($i121, 0);
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.85, $p125);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $i127 := $p2i.ref.i64($p126);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $i128 := $ne.i64($i127, 0);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb96:
    assume $i128 == 1;
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.86, $p129);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} ldv_pm_ops_instance_restore_early_2_7($p130, $u9);
    goto SeqInstr_982, SeqInstr_983;

  SeqInstr_983:
    assume assertsPassed;
    goto SeqInstr_984;

  SeqInstr_984:
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    goto $bb98;

  SeqInstr_982:
    assume !assertsPassed;
    return;

  $bb93:
    assume $i122 == 1;
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.84, $p123);
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} ldv_pm_ops_instance_poweroff_late_2_8($p124, $u9);
    goto SeqInstr_979, SeqInstr_980;

  SeqInstr_980:
    assume assertsPassed;
    goto SeqInstr_981;

  SeqInstr_981:
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    goto $bb95;

  SeqInstr_979:
    assume !assertsPassed;
    return;

  $bb88:
    assume $i114 == 1;
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.82, $p115);
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} ldv_pm_ops_instance_poweroff_2_9($p116, $u9);
    goto SeqInstr_976, SeqInstr_977;

  SeqInstr_977:
    assume assertsPassed;
    goto SeqInstr_978;

  SeqInstr_978:
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    goto $bb90;

  SeqInstr_976:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i33 == 1;
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.69, $p73);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p74);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} $i79 := ldv_undef_int();
    call {:si_unique_call 1218} {:cexpr "tmp___2"} boogie_si_record_i32($i79);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i80 == 1);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.75, $p93);
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $i95 := $p2i.ref.i64($p94);
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $i96 := $ne.i64($i95, 0);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.77, $p99);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p100);
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $i102 := $ne.i64($i101, 0);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.79, $p105);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p106);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i107, 0);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb85:
    assume $i108 == 1;
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.80, $p109);
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} ldv_pm_ops_instance_thaw_2_10($p110, $u9);
    goto SeqInstr_973, SeqInstr_974;

  SeqInstr_974:
    assume assertsPassed;
    goto SeqInstr_975;

  SeqInstr_975:
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    goto $bb87;

  SeqInstr_973:
    assume !assertsPassed;
    return;

  $bb82:
    assume $i102 == 1;
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.78, $p103);
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} ldv_pm_ops_instance_thaw_noirq_2_11($p104, $u9);
    goto SeqInstr_970, SeqInstr_971;

  SeqInstr_971:
    assume assertsPassed;
    goto SeqInstr_972;

  SeqInstr_972:
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_970:
    assume !assertsPassed;
    return;

  $bb79:
    assume $i96 == 1;
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.76, $p97);
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} ldv_pm_ops_instance_freeze_noirq_2_12($p98, $u9);
    goto SeqInstr_967, SeqInstr_968;

  SeqInstr_968:
    assume assertsPassed;
    goto SeqInstr_969;

  SeqInstr_969:
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    goto $bb81;

  SeqInstr_967:
    assume !assertsPassed;
    return;

  $bb70:
    assume $i80 == 1;
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.71, $p81);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p82);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i83, 0);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.73, $p87);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $i90 := $ne.i64($i89, 0);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb75:
    assume $i90 == 1;
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.74, $p91);
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} ldv_pm_ops_instance_thaw_early_2_13($p92, $u9);
    goto SeqInstr_964, SeqInstr_965;

  SeqInstr_965:
    assume assertsPassed;
    goto SeqInstr_966;

  SeqInstr_966:
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    goto $bb77;

  SeqInstr_964:
    assume !assertsPassed;
    return;

  $bb72:
    assume $i84 == 1;
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.72, $p85);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} ldv_pm_ops_instance_freeze_late_2_14($p86, $u9);
    goto SeqInstr_961, SeqInstr_962;

  SeqInstr_962:
    assume assertsPassed;
    goto SeqInstr_963;

  SeqInstr_963:
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    goto $bb74;

  SeqInstr_961:
    assume !assertsPassed;
    return;

  $bb67:
    assume $i76 == 1;
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.70, $p77);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} ldv_pm_ops_instance_freeze_2_15($p78, $u9);
    goto SeqInstr_958, SeqInstr_959;

  SeqInstr_959:
    assume assertsPassed;
    goto SeqInstr_960;

  SeqInstr_960:
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_958:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i32 == 1;
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.57, $p35);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} $i41 := ldv_undef_int();
    call {:si_unique_call 1210} {:cexpr "tmp___1"} boogie_si_record_i32($i41);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i42 == 1);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.63, $p55);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.65, $p61);
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.67, $p67);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb63:
    assume $i70 == 1;
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.68, $p71);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} ldv_pm_ops_instance_resume_2_16($p72, $u9);
    goto SeqInstr_955, SeqInstr_956;

  SeqInstr_956:
    assume assertsPassed;
    goto SeqInstr_957;

  SeqInstr_957:
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    goto $bb65;

  SeqInstr_955:
    assume !assertsPassed;
    return;

  $bb60:
    assume $i64 == 1;
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.66, $p65);
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} ldv_pm_ops_instance_resume_early_2_17($p66, $u9);
    goto SeqInstr_952, SeqInstr_953;

  SeqInstr_953:
    assume assertsPassed;
    goto SeqInstr_954;

  SeqInstr_954:
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    goto $bb62;

  SeqInstr_952:
    assume !assertsPassed;
    return;

  $bb57:
    assume $i58 == 1;
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.64, $p59);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} ldv_pm_ops_instance_suspend_late_2_18($p60, $u9);
    goto SeqInstr_949, SeqInstr_950;

  SeqInstr_950:
    assume assertsPassed;
    goto SeqInstr_951;

  SeqInstr_951:
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    goto $bb59;

  SeqInstr_949:
    assume !assertsPassed;
    return;

  $bb48:
    assume $i42 == 1;
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.59, $p43);
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.61, $p49);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb53:
    assume $i52 == 1;
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.62, $p53);
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} ldv_pm_ops_instance_resume_noirq_2_19($p54, $u9);
    goto SeqInstr_946, SeqInstr_947;

  SeqInstr_947:
    assume assertsPassed;
    goto SeqInstr_948;

  SeqInstr_948:
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    goto $bb55;

  SeqInstr_946:
    assume !assertsPassed;
    return;

  $bb50:
    assume $i46 == 1;
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.60, $p47);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} ldv_pm_ops_instance_suspend_noirq_2_20($p48, $u9);
    goto SeqInstr_943, SeqInstr_944;

  SeqInstr_944:
    assume assertsPassed;
    goto SeqInstr_945;

  SeqInstr_945:
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_943:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i38 == 1;
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.58, $p39);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} ldv_pm_ops_instance_suspend_2_21($p40, $u9);
    goto SeqInstr_940, SeqInstr_941;

  SeqInstr_941:
    assume assertsPassed;
    goto SeqInstr_942;

  SeqInstr_942:
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_940:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i28 == 1;
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.56, $p29);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} ldv_pm_ops_instance_prepare_2_22($p30, $u9);
    goto SeqInstr_937, SeqInstr_938;

  SeqInstr_938:
    assume assertsPassed;
    goto SeqInstr_939;

  SeqInstr_939:
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_937:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.51, $p13);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.53, $p19);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb26:
    assume $i22 == 1;
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.54, $p23);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} ldv_pm_ops_instance_runtime_resume_2_24($p24, $u9);
    goto SeqInstr_934, SeqInstr_935;

  SeqInstr_935:
    assume assertsPassed;
    goto SeqInstr_936;

  SeqInstr_936:
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_934:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i16 == 1;
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.52, $p17);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} ldv_pm_ops_instance_runtime_suspend_2_25($p18, $u9);
    goto SeqInstr_931, SeqInstr_932;

  SeqInstr_932:
    assume assertsPassed;
    goto SeqInstr_933;

  SeqInstr_933:
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_931:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i2 == 1;
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.49, $p7);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i10 == 1;
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.50, $p11);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} ldv_pm_ops_instance_runtime_idle_2_27($p12, $u9);
    goto SeqInstr_928, SeqInstr_929;

  SeqInstr_929:
    assume assertsPassed;
    goto SeqInstr_930;

  SeqInstr_930:
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_928:
    assume !assertsPassed;
    return;

  $bb22_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} $i1 := ldv_undef_int();
    call {:si_unique_call 1199} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7291;
}



const ldv_pm_ops_instance_runtime_idle_2_27: ref;

axiom ldv_pm_ops_instance_runtime_idle_2_27 == $sub.ref(0, 487927);

procedure ldv_pm_ops_instance_runtime_idle_2_27($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.44, $M.1, $M.33, $M.103, $M.17, $M.45, $M.16, $M.104, $M.105, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.41, $M.106, $M.107, $M.42, $M.15, $M.12, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_pm_ops_instance_runtime_idle_2_27($p0: ref, $p1: ref)
{
  var vslice_dummy_var_152: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} vslice_dummy_var_152 := devirtbounce.4($p0, $p1);
    goto SeqInstr_997, SeqInstr_998;

  SeqInstr_998:
    assume assertsPassed;
    goto SeqInstr_999;

  SeqInstr_999:
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_997:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_runtime_suspend_2_25: ref;

axiom ldv_pm_ops_instance_runtime_suspend_2_25 == $sub.ref(0, 488959);

procedure ldv_pm_ops_instance_runtime_suspend_2_25($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.44, $M.1, $M.33, $M.103, $M.17, $M.45, $M.16, $M.104, $M.105, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.41, $M.106, $M.107, $M.42, $M.15, $M.12, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_pm_ops_instance_runtime_suspend_2_25($p0: ref, $p1: ref)
{
  var vslice_dummy_var_153: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} vslice_dummy_var_153 := devirtbounce.4($p0, $p1);
    goto SeqInstr_1000, SeqInstr_1001;

  SeqInstr_1001:
    assume assertsPassed;
    goto SeqInstr_1002;

  SeqInstr_1002:
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1000:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_runtime_resume_2_24: ref;

axiom ldv_pm_ops_instance_runtime_resume_2_24 == $sub.ref(0, 489991);

procedure ldv_pm_ops_instance_runtime_resume_2_24($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.44, $M.1, $M.33, $M.103, $M.17, $M.45, $M.16, $M.104, $M.105, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.41, $M.106, $M.107, $M.42, $M.15, $M.12, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_pm_ops_instance_runtime_resume_2_24($p0: ref, $p1: ref)
{
  var vslice_dummy_var_154: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} vslice_dummy_var_154 := devirtbounce.4($p0, $p1);
    goto SeqInstr_1003, SeqInstr_1004;

  SeqInstr_1004:
    assume assertsPassed;
    goto SeqInstr_1005;

  SeqInstr_1005:
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1003:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_prepare_2_22: ref;

axiom ldv_pm_ops_instance_prepare_2_22 == $sub.ref(0, 491023);

procedure ldv_pm_ops_instance_prepare_2_22($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.44, $M.1, $M.33, $M.103, $M.17, $M.45, $M.16, $M.104, $M.105, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.41, $M.106, $M.107, $M.42, $M.15, $M.12, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_pm_ops_instance_prepare_2_22($p0: ref, $p1: ref)
{
  var vslice_dummy_var_155: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} vslice_dummy_var_155 := devirtbounce.4($p0, $p1);
    goto SeqInstr_1006, SeqInstr_1007;

  SeqInstr_1007:
    assume assertsPassed;
    goto SeqInstr_1008;

  SeqInstr_1008:
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1006:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_suspend_2_21: ref;

axiom ldv_pm_ops_instance_suspend_2_21 == $sub.ref(0, 492055);

procedure ldv_pm_ops_instance_suspend_2_21($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.44, $M.1, $M.33, $M.103, $M.17, $M.45, $M.16, $M.104, $M.105, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.41, $M.106, $M.107, $M.42, $M.15, $M.12, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_pm_ops_instance_suspend_2_21($p0: ref, $p1: ref)
{
  var vslice_dummy_var_156: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} vslice_dummy_var_156 := devirtbounce.4($p0, $p1);
    goto SeqInstr_1009, SeqInstr_1010;

  SeqInstr_1010:
    assume assertsPassed;
    goto SeqInstr_1011;

  SeqInstr_1011:
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1009:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_suspend_noirq_2_20: ref;

axiom ldv_pm_ops_instance_suspend_noirq_2_20 == $sub.ref(0, 493087);

procedure ldv_pm_ops_instance_suspend_noirq_2_20($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.44, $M.1, $M.33, $M.103, $M.17, $M.45, $M.16, $M.104, $M.105, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.41, $M.106, $M.107, $M.42, $M.15, $M.12, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_pm_ops_instance_suspend_noirq_2_20($p0: ref, $p1: ref)
{
  var vslice_dummy_var_157: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} vslice_dummy_var_157 := devirtbounce.4($p0, $p1);
    goto SeqInstr_1012, SeqInstr_1013;

  SeqInstr_1013:
    assume assertsPassed;
    goto SeqInstr_1014;

  SeqInstr_1014:
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1012:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_resume_noirq_2_19: ref;

axiom ldv_pm_ops_instance_resume_noirq_2_19 == $sub.ref(0, 494119);

procedure ldv_pm_ops_instance_resume_noirq_2_19($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.44, $M.1, $M.33, $M.103, $M.17, $M.45, $M.16, $M.104, $M.105, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.41, $M.106, $M.107, $M.42, $M.15, $M.12, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_pm_ops_instance_resume_noirq_2_19($p0: ref, $p1: ref)
{
  var vslice_dummy_var_158: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} vslice_dummy_var_158 := devirtbounce.4($p0, $p1);
    goto SeqInstr_1015, SeqInstr_1016;

  SeqInstr_1016:
    assume assertsPassed;
    goto SeqInstr_1017;

  SeqInstr_1017:
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1015:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_suspend_late_2_18: ref;

axiom ldv_pm_ops_instance_suspend_late_2_18 == $sub.ref(0, 495151);

procedure ldv_pm_ops_instance_suspend_late_2_18($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.44, $M.1, $M.33, $M.103, $M.17, $M.45, $M.16, $M.104, $M.105, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.41, $M.106, $M.107, $M.42, $M.15, $M.12, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_pm_ops_instance_suspend_late_2_18($p0: ref, $p1: ref)
{
  var vslice_dummy_var_159: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} vslice_dummy_var_159 := devirtbounce.4($p0, $p1);
    goto SeqInstr_1018, SeqInstr_1019;

  SeqInstr_1019:
    assume assertsPassed;
    goto SeqInstr_1020;

  SeqInstr_1020:
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1018:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_resume_early_2_17: ref;

axiom ldv_pm_ops_instance_resume_early_2_17 == $sub.ref(0, 496183);

procedure ldv_pm_ops_instance_resume_early_2_17($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.44, $M.1, $M.33, $M.103, $M.17, $M.45, $M.16, $M.104, $M.105, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.41, $M.106, $M.107, $M.42, $M.15, $M.12, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_pm_ops_instance_resume_early_2_17($p0: ref, $p1: ref)
{
  var vslice_dummy_var_160: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} vslice_dummy_var_160 := devirtbounce.4($p0, $p1);
    goto SeqInstr_1021, SeqInstr_1022;

  SeqInstr_1022:
    assume assertsPassed;
    goto SeqInstr_1023;

  SeqInstr_1023:
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1021:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_resume_2_16: ref;

axiom ldv_pm_ops_instance_resume_2_16 == $sub.ref(0, 497215);

procedure ldv_pm_ops_instance_resume_2_16($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.44, $M.1, $M.33, $M.103, $M.17, $M.45, $M.16, $M.104, $M.105, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.41, $M.106, $M.107, $M.42, $M.15, $M.12, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_pm_ops_instance_resume_2_16($p0: ref, $p1: ref)
{
  var vslice_dummy_var_161: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} vslice_dummy_var_161 := devirtbounce.4($p0, $p1);
    goto SeqInstr_1024, SeqInstr_1025;

  SeqInstr_1025:
    assume assertsPassed;
    goto SeqInstr_1026;

  SeqInstr_1026:
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1024:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_freeze_2_15: ref;

axiom ldv_pm_ops_instance_freeze_2_15 == $sub.ref(0, 498247);

procedure ldv_pm_ops_instance_freeze_2_15($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.44, $M.1, $M.33, $M.103, $M.17, $M.45, $M.16, $M.104, $M.105, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.41, $M.106, $M.107, $M.42, $M.15, $M.12, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_pm_ops_instance_freeze_2_15($p0: ref, $p1: ref)
{
  var vslice_dummy_var_162: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} vslice_dummy_var_162 := devirtbounce.4($p0, $p1);
    goto SeqInstr_1027, SeqInstr_1028;

  SeqInstr_1028:
    assume assertsPassed;
    goto SeqInstr_1029;

  SeqInstr_1029:
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1027:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_freeze_late_2_14: ref;

axiom ldv_pm_ops_instance_freeze_late_2_14 == $sub.ref(0, 499279);

procedure ldv_pm_ops_instance_freeze_late_2_14($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.44, $M.1, $M.33, $M.103, $M.17, $M.45, $M.16, $M.104, $M.105, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.41, $M.106, $M.107, $M.42, $M.15, $M.12, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_pm_ops_instance_freeze_late_2_14($p0: ref, $p1: ref)
{
  var vslice_dummy_var_163: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} vslice_dummy_var_163 := devirtbounce.4($p0, $p1);
    goto SeqInstr_1030, SeqInstr_1031;

  SeqInstr_1031:
    assume assertsPassed;
    goto SeqInstr_1032;

  SeqInstr_1032:
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1030:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_thaw_early_2_13: ref;

axiom ldv_pm_ops_instance_thaw_early_2_13 == $sub.ref(0, 500311);

procedure ldv_pm_ops_instance_thaw_early_2_13($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.44, $M.1, $M.33, $M.103, $M.17, $M.45, $M.16, $M.104, $M.105, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.41, $M.106, $M.107, $M.42, $M.15, $M.12, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_pm_ops_instance_thaw_early_2_13($p0: ref, $p1: ref)
{
  var vslice_dummy_var_164: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} vslice_dummy_var_164 := devirtbounce.4($p0, $p1);
    goto SeqInstr_1033, SeqInstr_1034;

  SeqInstr_1034:
    assume assertsPassed;
    goto SeqInstr_1035;

  SeqInstr_1035:
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1033:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_freeze_noirq_2_12: ref;

axiom ldv_pm_ops_instance_freeze_noirq_2_12 == $sub.ref(0, 501343);

procedure ldv_pm_ops_instance_freeze_noirq_2_12($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.44, $M.1, $M.33, $M.103, $M.17, $M.45, $M.16, $M.104, $M.105, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.41, $M.106, $M.107, $M.42, $M.15, $M.12, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_pm_ops_instance_freeze_noirq_2_12($p0: ref, $p1: ref)
{
  var vslice_dummy_var_165: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} vslice_dummy_var_165 := devirtbounce.4($p0, $p1);
    goto SeqInstr_1036, SeqInstr_1037;

  SeqInstr_1037:
    assume assertsPassed;
    goto SeqInstr_1038;

  SeqInstr_1038:
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1036:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_thaw_noirq_2_11: ref;

axiom ldv_pm_ops_instance_thaw_noirq_2_11 == $sub.ref(0, 502375);

procedure ldv_pm_ops_instance_thaw_noirq_2_11($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.44, $M.1, $M.33, $M.103, $M.17, $M.45, $M.16, $M.104, $M.105, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.41, $M.106, $M.107, $M.42, $M.15, $M.12, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_pm_ops_instance_thaw_noirq_2_11($p0: ref, $p1: ref)
{
  var vslice_dummy_var_166: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} vslice_dummy_var_166 := devirtbounce.4($p0, $p1);
    goto SeqInstr_1039, SeqInstr_1040;

  SeqInstr_1040:
    assume assertsPassed;
    goto SeqInstr_1041;

  SeqInstr_1041:
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1039:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_thaw_2_10: ref;

axiom ldv_pm_ops_instance_thaw_2_10 == $sub.ref(0, 503407);

procedure ldv_pm_ops_instance_thaw_2_10($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.44, $M.1, $M.33, $M.103, $M.17, $M.45, $M.16, $M.104, $M.105, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.41, $M.106, $M.107, $M.42, $M.15, $M.12, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_pm_ops_instance_thaw_2_10($p0: ref, $p1: ref)
{
  var vslice_dummy_var_167: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} vslice_dummy_var_167 := devirtbounce.4($p0, $p1);
    goto SeqInstr_1042, SeqInstr_1043;

  SeqInstr_1043:
    assume assertsPassed;
    goto SeqInstr_1044;

  SeqInstr_1044:
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1042:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_poweroff_2_9: ref;

axiom ldv_pm_ops_instance_poweroff_2_9 == $sub.ref(0, 504439);

procedure ldv_pm_ops_instance_poweroff_2_9($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.44, $M.1, $M.33, $M.103, $M.17, $M.45, $M.16, $M.104, $M.105, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.41, $M.106, $M.107, $M.42, $M.15, $M.12, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_pm_ops_instance_poweroff_2_9($p0: ref, $p1: ref)
{
  var vslice_dummy_var_168: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} vslice_dummy_var_168 := devirtbounce.4($p0, $p1);
    goto SeqInstr_1045, SeqInstr_1046;

  SeqInstr_1046:
    assume assertsPassed;
    goto SeqInstr_1047;

  SeqInstr_1047:
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1045:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_poweroff_late_2_8: ref;

axiom ldv_pm_ops_instance_poweroff_late_2_8 == $sub.ref(0, 505471);

procedure ldv_pm_ops_instance_poweroff_late_2_8($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.44, $M.1, $M.33, $M.103, $M.17, $M.45, $M.16, $M.104, $M.105, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.41, $M.106, $M.107, $M.42, $M.15, $M.12, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_pm_ops_instance_poweroff_late_2_8($p0: ref, $p1: ref)
{
  var vslice_dummy_var_169: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} vslice_dummy_var_169 := devirtbounce.4($p0, $p1);
    goto SeqInstr_1048, SeqInstr_1049;

  SeqInstr_1049:
    assume assertsPassed;
    goto SeqInstr_1050;

  SeqInstr_1050:
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1048:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_restore_early_2_7: ref;

axiom ldv_pm_ops_instance_restore_early_2_7 == $sub.ref(0, 506503);

procedure ldv_pm_ops_instance_restore_early_2_7($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.44, $M.1, $M.33, $M.103, $M.17, $M.45, $M.16, $M.104, $M.105, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.41, $M.106, $M.107, $M.42, $M.15, $M.12, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_pm_ops_instance_restore_early_2_7($p0: ref, $p1: ref)
{
  var vslice_dummy_var_170: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} vslice_dummy_var_170 := devirtbounce.4($p0, $p1);
    goto SeqInstr_1051, SeqInstr_1052;

  SeqInstr_1052:
    assume assertsPassed;
    goto SeqInstr_1053;

  SeqInstr_1053:
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1051:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_poweroff_noirq_2_6: ref;

axiom ldv_pm_ops_instance_poweroff_noirq_2_6 == $sub.ref(0, 507535);

procedure ldv_pm_ops_instance_poweroff_noirq_2_6($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.44, $M.1, $M.33, $M.103, $M.17, $M.45, $M.16, $M.104, $M.105, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.41, $M.106, $M.107, $M.42, $M.15, $M.12, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_pm_ops_instance_poweroff_noirq_2_6($p0: ref, $p1: ref)
{
  var vslice_dummy_var_171: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} vslice_dummy_var_171 := devirtbounce.4($p0, $p1);
    goto SeqInstr_1054, SeqInstr_1055;

  SeqInstr_1055:
    assume assertsPassed;
    goto SeqInstr_1056;

  SeqInstr_1056:
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1054:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_restore_noirq_2_5: ref;

axiom ldv_pm_ops_instance_restore_noirq_2_5 == $sub.ref(0, 508567);

procedure ldv_pm_ops_instance_restore_noirq_2_5($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.44, $M.1, $M.33, $M.103, $M.17, $M.45, $M.16, $M.104, $M.105, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.41, $M.106, $M.107, $M.42, $M.15, $M.12, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_pm_ops_instance_restore_noirq_2_5($p0: ref, $p1: ref)
{
  var vslice_dummy_var_172: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} vslice_dummy_var_172 := devirtbounce.4($p0, $p1);
    goto SeqInstr_1057, SeqInstr_1058;

  SeqInstr_1058:
    assume assertsPassed;
    goto SeqInstr_1059;

  SeqInstr_1059:
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1057:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_restore_2_4: ref;

axiom ldv_pm_ops_instance_restore_2_4 == $sub.ref(0, 509599);

procedure ldv_pm_ops_instance_restore_2_4($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.44, $M.1, $M.33, $M.103, $M.17, $M.45, $M.16, $M.104, $M.105, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.41, $M.106, $M.107, $M.42, $M.15, $M.12, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_pm_ops_instance_restore_2_4($p0: ref, $p1: ref)
{
  var vslice_dummy_var_173: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} vslice_dummy_var_173 := devirtbounce.4($p0, $p1);
    goto SeqInstr_1060, SeqInstr_1061;

  SeqInstr_1061:
    assume assertsPassed;
    goto SeqInstr_1062;

  SeqInstr_1062:
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1060:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_complete_2_3: ref;

axiom ldv_pm_ops_instance_complete_2_3 == $sub.ref(0, 510631);

procedure ldv_pm_ops_instance_complete_2_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.9, assertsPassed, $M.2, $M.16, $M.15, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, $M.30, $M.31, $M.32, $M.40, $M.13, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_pm_ops_instance_complete_2_3($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} devirtbounce.5($p0, $p1);
    goto SeqInstr_1063, SeqInstr_1064;

  SeqInstr_1064:
    assume assertsPassed;
    goto SeqInstr_1065;

  SeqInstr_1065:
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1063:
    assume !assertsPassed;
    return;
}



const oz_plat_resume: ref;

axiom oz_plat_resume == $sub.ref(0, 511663);

procedure oz_plat_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation oz_plat_resume($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const oz_plat_shutdown: ref;

axiom oz_plat_shutdown == $sub.ref(0, 512695);

procedure oz_plat_shutdown($p0: ref);
  free requires assertsPassed;



implementation oz_plat_shutdown($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    return;
}



const oz_plat_suspend: ref;

axiom oz_plat_suspend == $sub.ref(0, 513727);

procedure oz_plat_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.95, $CurrAddr;



implementation oz_plat_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.95 := $store.i32($M.95, $p3, $i1);
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const ldv_linux_net_register_check_return_value_probe: ref;

axiom ldv_linux_net_register_check_return_value_probe == $sub.ref(0, 514759);

procedure ldv_linux_net_register_check_return_value_probe($i0: i32);
  free requires assertsPassed;
  modifies $M.96, assertsPassed;



implementation ldv_linux_net_register_check_return_value_probe($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} {:cexpr "ldv_linux_net_register_check_return_value_probe:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $i1 := $M.96;
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} ldv_assert_linux_net_register__wrong_return_value($i4);
    goto SeqInstr_1066, SeqInstr_1067;

  SeqInstr_1067:
    assume assertsPassed;
    goto SeqInstr_1068;

  SeqInstr_1068:
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1066:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_register_check_return_value_probe: ref;

axiom ldv_linux_usb_register_check_return_value_probe == $sub.ref(0, 515791);

procedure ldv_linux_usb_register_check_return_value_probe($i0: i32);
  free requires assertsPassed;
  modifies $M.97, assertsPassed;



implementation ldv_linux_usb_register_check_return_value_probe($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} {:cexpr "ldv_linux_usb_register_check_return_value_probe:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $i1 := $M.97;
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} ldv_assert_linux_usb_register__wrong_return_value($i4);
    goto SeqInstr_1069, SeqInstr_1070;

  SeqInstr_1070:
    assume assertsPassed;
    goto SeqInstr_1071;

  SeqInstr_1071:
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1069:
    assume !assertsPassed;
    return;
}



const ldv_post_probe: ref;

axiom ldv_post_probe == $sub.ref(0, 516823);

procedure ldv_post_probe($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_post_probe($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} {:cexpr "ldv_post_probe:arg:probe_ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 1265} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_filter_positive_int: ref;

axiom ldv_filter_positive_int == $sub.ref(0, 517855);

procedure ldv_filter_positive_int($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_filter_positive_int($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} {:cexpr "ldv_filter_positive_int:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $i1 := $sle.i32($i0, 0);
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} ldv_assume($i2);
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_assert_linux_usb_register__wrong_return_value: ref;

axiom ldv_assert_linux_usb_register__wrong_return_value == $sub.ref(0, 518887);

procedure ldv_assert_linux_usb_register__wrong_return_value($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_register__wrong_return_value($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} {:cexpr "ldv_assert_linux_usb_register__wrong_return_value:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1269} __VERIFIER_error();
    goto SeqInstr_1072, SeqInstr_1073;

  SeqInstr_1073:
    assume assertsPassed;
    goto SeqInstr_1074;

  SeqInstr_1074:
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1072:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_usb_register_reset_error_counter: ref;

axiom ldv_linux_usb_register_reset_error_counter == $sub.ref(0, 519919);

procedure ldv_linux_usb_register_reset_error_counter();
  free requires assertsPassed;
  modifies $M.97;



implementation ldv_linux_usb_register_reset_error_counter()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $M.97 := 0;
    call {:si_unique_call 1270} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_net_register__wrong_return_value: ref;

axiom ldv_assert_linux_net_register__wrong_return_value == $sub.ref(0, 520951);

procedure ldv_assert_linux_net_register__wrong_return_value($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_register__wrong_return_value($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} {:cexpr "ldv_assert_linux_net_register__wrong_return_value:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1272} __VERIFIER_error();
    goto SeqInstr_1075, SeqInstr_1076;

  SeqInstr_1076:
    assume assertsPassed;
    goto SeqInstr_1077;

  SeqInstr_1077:
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1075:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_net_register_reset_error_counter: ref;

axiom ldv_linux_net_register_reset_error_counter == $sub.ref(0, 521983);

procedure ldv_linux_net_register_reset_error_counter();
  free requires assertsPassed;
  modifies $M.96;



implementation ldv_linux_net_register_reset_error_counter()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $M.96 := 0;
    call {:si_unique_call 1273} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    return;
}



const oz_plat_probe: ref;

axiom oz_plat_probe == $sub.ref(0, 523015);

procedure oz_plat_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.44, $M.45, $CurrAddr, assertsPassed;



implementation oz_plat_probe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p36: ref;
  var $p37: ref;
  var $i9: i32;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p121: ref;
  var $p122: ref;
  var cmdloc_dummy_var_113: [ref]i8;
  var cmdloc_dummy_var_114: [ref]i8;
  var vslice_dummy_var_174: ref;
  var vslice_dummy_var_175: ref;
  var vslice_dummy_var_176: ref;
  var vslice_dummy_var_177: i32;
  var vslice_dummy_var_178: ref;
  var vslice_dummy_var_179: ref;
  var vslice_dummy_var_180: ref;
  var vslice_dummy_var_181: ref;
  var vslice_dummy_var_182: ref;
  var vslice_dummy_var_183: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} $p4 := dev_name($p3);
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} $p6 := usb_create_hcd(g_oz_hc_drv, $p5, $p4);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} $p10 := oz_hcd_private($p6);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_113 := $M.1;
    call {:si_unique_call 1279} cmdloc_dummy_var_114 := $memset.i8(cmdloc_dummy_var_113, $p11, 0, 3344, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_114;
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p10, $mul.ref(0, 3344)), $mul.ref(72, 1));
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} INIT_LIST_HEAD($p12);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref(0, 3344)), $mul.ref(88, 1));
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} INIT_LIST_HEAD($p13);
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p10, $mul.ref(0, 3344)), $mul.ref(104, 1));
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} INIT_LIST_HEAD($p14);
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p10, $mul.ref(0, 3344)), $mul.ref(3336, 1));
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p15, $p6);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p10, $mul.ref(0, 3344)), $mul.ref(120, 1));
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p16, $sub.i32(0, 1));
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p10, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} vslice_dummy_var_174 := spinlock_check($p17);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 3344)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} __raw_spin_lock_init($p21, .str.76, $p1);
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p10, $mul.ref(0, 3344)), $mul.ref(128, 1));
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 400)), $mul.ref(16, 1));
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p24, $p10);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p23, $mul.ref(0, 400)), $mul.ref(0, 1));
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p25, 0);
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p23, $mul.ref(0, 400)), $mul.ref(4, 1));
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p26, 0);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p23, $mul.ref(0, 400)), $mul.ref(96, 1));
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p27, $sub.i8(0, 1));
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p23, $mul.ref(0, 400)), $mul.ref(24, 1));
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} vslice_dummy_var_175 := spinlock_check($p28);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 400)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} __raw_spin_lock_init($p32, .str.77, $p2);
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p10, $mul.ref(0, 3344)), $mul.ref(128, 1));
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p40, $mul.ref(1, 400)), $mul.ref(16, 1));
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p42, $p10);
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p40, $mul.ref(1, 400)), $mul.ref(0, 1));
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p43, 0);
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p40, $mul.ref(1, 400)), $mul.ref(4, 1));
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p44, 0);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p40, $mul.ref(1, 400)), $mul.ref(96, 1));
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p45, $sub.i8(0, 1));
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p40, $mul.ref(1, 400)), $mul.ref(24, 1));
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} vslice_dummy_var_176 := spinlock_check($p46);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p40, $mul.ref(1, 400)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} __raw_spin_lock_init($p50, .str.77, $p2);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p10, $mul.ref(0, 3344)), $mul.ref(128, 1));
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p52, $mul.ref(2, 400)), $mul.ref(16, 1));
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p54, $p10);
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p52, $mul.ref(2, 400)), $mul.ref(0, 1));
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p55, 0);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p52, $mul.ref(2, 400)), $mul.ref(4, 1));
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p56, 0);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p52, $mul.ref(2, 400)), $mul.ref(96, 1));
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p57, $sub.i8(0, 1));
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p52, $mul.ref(2, 400)), $mul.ref(24, 1));
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} vslice_dummy_var_178 := spinlock_check($p58);
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p52, $mul.ref(2, 400)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} __raw_spin_lock_init($p62, .str.77, $p2);
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p10, $mul.ref(0, 3344)), $mul.ref(128, 1));
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p64, $mul.ref(3, 400)), $mul.ref(16, 1));
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p66, $p10);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p64, $mul.ref(3, 400)), $mul.ref(0, 1));
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p67, 0);
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p64, $mul.ref(3, 400)), $mul.ref(4, 1));
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p68, 0);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p64, $mul.ref(3, 400)), $mul.ref(96, 1));
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p69, $sub.i8(0, 1));
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p64, $mul.ref(3, 400)), $mul.ref(24, 1));
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} vslice_dummy_var_179 := spinlock_check($p70);
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p64, $mul.ref(3, 400)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} __raw_spin_lock_init($p74, .str.77, $p2);
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p10, $mul.ref(0, 3344)), $mul.ref(128, 1));
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p76, $mul.ref(4, 400)), $mul.ref(16, 1));
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p78, $p10);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p76, $mul.ref(4, 400)), $mul.ref(0, 1));
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p79, 0);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p76, $mul.ref(4, 400)), $mul.ref(4, 1));
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p80, 0);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p76, $mul.ref(4, 400)), $mul.ref(96, 1));
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p81, $sub.i8(0, 1));
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p76, $mul.ref(4, 400)), $mul.ref(24, 1));
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} vslice_dummy_var_180 := spinlock_check($p82);
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p76, $mul.ref(4, 400)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} __raw_spin_lock_init($p86, .str.77, $p2);
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p10, $mul.ref(0, 3344)), $mul.ref(128, 1));
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p88, $mul.ref(5, 400)), $mul.ref(16, 1));
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p90, $p10);
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p88, $mul.ref(5, 400)), $mul.ref(0, 1));
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p91, 0);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p88, $mul.ref(5, 400)), $mul.ref(4, 1));
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p92, 0);
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p88, $mul.ref(5, 400)), $mul.ref(96, 1));
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p93, $sub.i8(0, 1));
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p88, $mul.ref(5, 400)), $mul.ref(24, 1));
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} vslice_dummy_var_181 := spinlock_check($p94);
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p88, $mul.ref(5, 400)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} __raw_spin_lock_init($p98, .str.77, $p2);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p10, $mul.ref(0, 3344)), $mul.ref(128, 1));
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p100, $mul.ref(6, 400)), $mul.ref(16, 1));
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p102, $p10);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p100, $mul.ref(6, 400)), $mul.ref(0, 1));
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p103, 0);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p100, $mul.ref(6, 400)), $mul.ref(4, 1));
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p104, 0);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p100, $mul.ref(6, 400)), $mul.ref(96, 1));
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p105, $sub.i8(0, 1));
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p100, $mul.ref(6, 400)), $mul.ref(24, 1));
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} vslice_dummy_var_182 := spinlock_check($p106);
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p100, $mul.ref(6, 400)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} __raw_spin_lock_init($p110, .str.77, $p2);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p10, $mul.ref(0, 3344)), $mul.ref(128, 1));
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p112, $mul.ref(7, 400)), $mul.ref(16, 1));
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p114, $p10);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p112, $mul.ref(7, 400)), $mul.ref(0, 1));
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p115, 0);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p112, $mul.ref(7, 400)), $mul.ref(4, 1));
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p116, 0);
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p112, $mul.ref(7, 400)), $mul.ref(96, 1));
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p117, $sub.i8(0, 1));
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p112, $mul.ref(7, 400)), $mul.ref(24, 1));
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} vslice_dummy_var_183 := spinlock_check($p118);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p112, $mul.ref(7, 400)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p121);
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} __raw_spin_lock_init($p122, .str.77, $p2);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} $i33 := usb_add_hcd($p6, 0, 0);
    call {:si_unique_call 1290} {:cexpr "err"} boogie_si_record_i32($i33);
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.1, $p36);
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} vslice_dummy_var_177 := device_wakeup_enable($p37);
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} ldv_spin_lock_bh_136(g_hcdlock);
    goto SeqInstr_1078, SeqInstr_1079;

  SeqInstr_1079:
    assume assertsPassed;
    goto SeqInstr_1080;

  SeqInstr_1080:
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $M.44 := $p10;
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} ldv_spin_unlock_bh_137(g_hcdlock);
    goto SeqInstr_1081, SeqInstr_1082;

  SeqInstr_1082:
    assume assertsPassed;
    goto SeqInstr_1083;

  SeqInstr_1083:
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_1081:
    assume !assertsPassed;
    return;

  SeqInstr_1078:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i34 == 1;
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} usb_put_hcd($p6);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 1);
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 524047);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(312, 1));
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(16, 1));
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} $p9 := kobject_name($p8);
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(312, 1));
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const usb_create_hcd: ref;

axiom usb_create_hcd == $sub.ref(0, 525079);

procedure usb_create_hcd($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_create_hcd($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} $p3 := external_alloc();
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 526111);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 527143);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    return;
}



const usb_add_hcd: ref;

axiom usb_add_hcd == $sub.ref(0, 528175);

procedure usb_add_hcd($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation usb_add_hcd($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1309} {:cexpr "usb_add_hcd:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1310} {:cexpr "usb_add_hcd:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1311} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1312} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const device_wakeup_enable: ref;

axiom device_wakeup_enable == $sub.ref(0, 529207);

procedure device_wakeup_enable($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_wakeup_enable($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1313} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1314} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 530239);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_pre_probe: ref;

axiom ldv_pre_probe == $sub.ref(0, 531271);

procedure ldv_pre_probe();
  free requires assertsPassed;



implementation ldv_pre_probe()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    return;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 532303);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 1315} $r := $malloc($i0);
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_183: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_183 == $sub.ref(0, 533335);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_183($p0: ref);



const oz_urb_cancel: ref;

axiom oz_urb_cancel == $sub.ref(0, 534367);

procedure oz_urb_cancel($p0: ref, $i1: i8, $p2: ref);



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_185: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_185 == $sub.ref(0, 535399);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_185($p0: ref);



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_178: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_178 == $sub.ref(0, 536431);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_178($p0: ref);



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_181: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_181 == $sub.ref(0, 537463);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_181($p0: ref);



const oz_remove_urb: ref;

axiom oz_remove_urb == $sub.ref(0, 538495);

procedure oz_remove_urb($p0: ref, $p1: ref) returns ($r: ref);



const ldv_spin_unlock_irqrestore_182: ref;

axiom ldv_spin_unlock_irqrestore_182 == $sub.ref(0, 539527);

procedure ldv_spin_unlock_irqrestore_182($p0: ref, $i1: i64);



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_174: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_174 == $sub.ref(0, 540559);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_174($p0: ref);



const oz_urb_process: ref;

axiom oz_urb_process == $sub.ref(0, 541591);

procedure oz_urb_process($p0: ref, $p1: ref) returns ($r: i32);



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_176: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_176 == $sub.ref(0, 542623);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_176($p0: ref);



const oz_remember_urb: ref;

axiom oz_remember_urb == $sub.ref(0, 543655);

procedure oz_remember_urb($p0: ref);



const oz_hcd_start: ref;

axiom oz_hcd_start == $sub.ref(0, 544687);

procedure oz_hcd_start($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation oz_hcd_start($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i16;
  var $i6: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(608, 1));
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p1, 200);
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, 1);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(576, 1));
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.1, $p3);
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    $i5 := $and.i16($i4, $sub.i16(0, 17));
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $i6 := $or.i16($i5, 16);
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p3, $i6);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const oz_hcd_stop: ref;

axiom oz_hcd_stop == $sub.ref(0, 545719);

procedure oz_hcd_stop($p0: ref);
  free requires assertsPassed;



implementation oz_hcd_stop($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    return;
}



const oz_hcd_shutdown: ref;

axiom oz_hcd_shutdown == $sub.ref(0, 546751);

procedure oz_hcd_shutdown($p0: ref);
  free requires assertsPassed;



implementation oz_hcd_shutdown($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    return;
}



const oz_hcd_get_frame_number: ref;

axiom oz_hcd_get_frame_number == $sub.ref(0, 547783);

procedure oz_hcd_get_frame_number($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41;



implementation oz_hcd_get_frame_number($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} $i1 := oz_usb_get_frame_number();
    call {:si_unique_call 1317} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const oz_hcd_urb_enqueue: ref;

axiom oz_hcd_urb_enqueue == $sub.ref(0, 548815);

procedure oz_hcd_urb_enqueue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.1, $M.15, $CurrAddr, assertsPassed, $M.12, $M.13;



implementation oz_hcd_urb_enqueue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i64;
  var $i27: i1;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i24;
  var $i42: i24;
  var $i43: i24;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i64;
  var $i48: i64;
  var $i49: i64;
  var $i50: i1;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i64;
  var $i57: i64;
  var $i58: i1;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i24;
  var $i69: i24;
  var $i70: i24;
  var $p71: ref;
  var $p72: ref;
  var $i73: i8;
  var $i74: i64;
  var $i75: i64;
  var $i76: i64;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i8;
  var $i83: i32;
  var $i84: i8;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $p90: ref;
  var $i91: i64;
  var $i92: i1;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $i96: i1;
  var $p98: ref;
  var $p99: ref;
  var $i100: i64;
  var $i101: i1;
  var $i102: i32;
  var $i103: i64;
  var $i104: i64;
  var $i105: i1;
  var $p106: ref;
  var $i107: i32;
  var $i108: i1;
  var $i109: i32;
  var $i110: i64;
  var $i111: i64;
  var $i112: i1;
  var $p113: ref;
  var $p114: ref;
  var $i51: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1321} {:cexpr "oz_hcd_urb_enqueue:arg:mem_flags"} boogie_si_record_i32($i2);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} $p6 := oz_hcd_private($p0);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $i7 := $M.23;
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 2);
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p6);
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 1327} {:cexpr "tmp___2"} boogie_si_record_i64($i30);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.1, $p52);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 1);
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $i55 := $zext.i1.i32($i54);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i55);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} $i57 := ldv__builtin_expect($i56, 0);
    call {:si_unique_call 1332} {:cexpr "tmp___4"} boogie_si_record_i64($i57);
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.1, $p78);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 2032)), $mul.ref(0, 1));
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.1, $p80);
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i32.i8($i81);
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i8($i83);
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} $i85 := oz_get_port_from_addr($p6, $i84);
    call {:si_unique_call 1337} {:cexpr "port_ix"} boogie_si_record_i32($i85);
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i85, 0);
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p6, $mul.ref(0, 3344)), $mul.ref(128, 1));
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $i89 := $sext.i32.i64($i85);
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($p88, $mul.ref($i89, 400));
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p90);
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $i92 := $eq.i64($i91, 0);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p90);
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p93, $mul.ref(0, 4));
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.1, $p94);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 1);
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p98, $p90);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} $p99 := oz_alloc_urb_link();
    goto SeqInstr_1084, SeqInstr_1085;

  SeqInstr_1085:
    assume assertsPassed;
    goto SeqInstr_1086;

  SeqInstr_1086:
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p99);
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $i101 := $eq.i64($i100, 0);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $i102 := $zext.i1.i32($i101);
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $i103 := $sext.i32.i64($i102);
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} $i104 := ldv__builtin_expect($i103, 0);
    call {:si_unique_call 1340} {:cexpr "tmp___6"} boogie_si_record_i64($i104);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    $i105 := $ne.i64($i104, 0);
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p99, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p106, $p1);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_187(g_tasklet_lock);
    goto SeqInstr_1087, SeqInstr_1088;

  SeqInstr_1088:
    assume assertsPassed;
    goto SeqInstr_1089;

  SeqInstr_1089:
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} $i107 := usb_hcd_link_urb_to_ep($p0, $p1);
    call {:si_unique_call 1343} {:cexpr "rc"} boogie_si_record_i32($i107);
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i107, 0);
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    $i109 := $zext.i1.i32($i108);
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $i110 := $sext.i32.i64($i109);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} $i111 := ldv__builtin_expect($i110, 0);
    call {:si_unique_call 1345} {:cexpr "tmp___7"} boogie_si_record_i64($i111);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $i112 := $ne.i64($i111, 0);
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p99, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p6, $mul.ref(0, 3344)), $mul.ref(72, 1));
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} list_add_tail($p113, $p114);
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} ldv_spin_unlock_irqrestore_125(g_tasklet_lock, $u0);
    goto SeqInstr_1093, SeqInstr_1094;

  SeqInstr_1094:
    assume assertsPassed;
    goto SeqInstr_1095;

  SeqInstr_1095:
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} tasklet_schedule(g_urb_process_tasklet);
    goto SeqInstr_1096, SeqInstr_1097;

  SeqInstr_1097:
    assume assertsPassed;
    goto SeqInstr_1098;

  SeqInstr_1098:
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} atomic_inc(g_pending_urbs);
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $i51 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $r := $i51;
    return;

  SeqInstr_1096:
    assume !assertsPassed;
    return;

  SeqInstr_1093:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i112 == 1;
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} ldv_spin_unlock_irqrestore_125(g_tasklet_lock, $u0);
    goto SeqInstr_1090, SeqInstr_1091;

  SeqInstr_1091:
    assume assertsPassed;
    goto SeqInstr_1092;

  SeqInstr_1092:
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} oz_free_urb_link($p99);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $i51 := $i107;
    goto $bb15;

  SeqInstr_1090:
    assume !assertsPassed;
    return;

  SeqInstr_1087:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i105 == 1;
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32(0, 12);
    goto $bb15;

  SeqInstr_1084:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i96 == 1;
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32(0, 32);
    goto $bb15;

  $bb29:
    assume $i92 == 1;
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32(0, 32);
    goto $bb15;

  $bb26:
    assume $i86 == 1;
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32(0, 32);
    goto $bb15;

  $bb17:
    assume $i58 == 1;
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $i59 := $M.23;
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i59, 2);
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32(0, 32);
    goto $bb15;

  $bb19:
    assume $i61 == 1;
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p62, .str.4);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p63, .str.73);
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p64, .str.36);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p65, .str.75);
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $i68 := $load.i24($M.28, $p67);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    $i69 := $and.i24($i68, $sub.i24(0, 262144));
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $i70 := $or.i24($i69, 1747);
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p67, $i70);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p71, 0);
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.29, $p72);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i64($i73);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $i75 := $and.i64($i74, 1);
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} $i76 := ldv__builtin_expect($i75, 0);
    call {:si_unique_call 1334} {:cexpr "tmp___3"} boogie_si_record_i64($i76);
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i76, 0);
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i77 == 1;
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} __dynamic_pr_debug.ref.ref.ref($p5, .str.75, $p1);
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb7:
    assume $i31 == 1;
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $i32 := $M.23;
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 2);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32(0, 32);
    goto $bb15;

  $bb9:
    assume $i34 == 1;
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p35, .str.4);
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p36, .str.73);
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p37, .str.36);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p38, .str.74);
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $i41 := $load.i24($M.28, $p40);
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $i42 := $and.i24($i41, $sub.i24(0, 262144));
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $i43 := $or.i24($i42, 1743);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p40, $i43);
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p44, 0);
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.29, $p45);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i64($i46);
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $i48 := $and.i64($i47, 1);
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} $i49 := ldv__builtin_expect($i48, 0);
    call {:si_unique_call 1329} {:cexpr "tmp___1"} boogie_si_record_i64($i49);
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i50 == 1;
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} __dynamic_pr_debug.ref.ref.ref($p4, .str.74, $p1);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p10, .str.4);
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p11, .str.73);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p12, .str.36);
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p13, .str.72);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.28, $p15);
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 1741);
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p15, $i18);
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p19, 0);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.29, $p20);
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 1324} {:cexpr "tmp___0"} boogie_si_record_i64($i24);
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} __dynamic_pr_debug.ref.ref.ref.ref($p3, .str.72, .str.73, $p1);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const oz_hcd_urb_dequeue: ref;

axiom oz_hcd_urb_dequeue == $sub.ref(0, 549847);

procedure oz_hcd_urb_dequeue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.1, $M.15, $CurrAddr, assertsPassed, $M.12, $M.13;



implementation oz_hcd_urb_dequeue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i8;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i8;
  var $i57: i32;
  var $i58: i32;
  var $i59: i8;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1353} {:cexpr "oz_hcd_urb_dequeue:arg:status"} boogie_si_record_i32($i2);
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} $p4 := oz_hcd_private($p0);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    $i5 := $M.23;
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 2);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} $p24 := oz_alloc_urb_link();
    goto SeqInstr_1099, SeqInstr_1100;

  SeqInstr_1100:
    assume assertsPassed;
    goto SeqInstr_1101;

  SeqInstr_1101:
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 1360} {:cexpr "tmp___1"} boogie_si_record_i64($i29);
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_190(g_tasklet_lock);
    goto SeqInstr_1102, SeqInstr_1103;

  SeqInstr_1103:
    assume assertsPassed;
    goto SeqInstr_1104;

  SeqInstr_1104:
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} $i32 := usb_hcd_check_unlink_urb($p0, $p1, $i2);
    call {:si_unique_call 1363} {:cexpr "rc"} boogie_si_record_i32($i32);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} ldv_spin_unlock_irqrestore_125(g_tasklet_lock, $u0);
    goto SeqInstr_1105, SeqInstr_1106;

  SeqInstr_1106:
    assume assertsPassed;
    goto SeqInstr_1107;

  SeqInstr_1107:
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} oz_free_urb_link($p24);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i31 := $i32;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  SeqInstr_1105:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i33 == 1;
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb13;

  $bb14:
    assume $i37 == 1;
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p24, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p38, $p1);
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.1, $p39);
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p24, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p42, $p40);
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.1, $p43);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $i45 := $lshr.i32($i44, 15);
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 15);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p24, $mul.ref(0, 40)), $mul.ref(33, 1));
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p50, $i49);
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.1, $p51);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 128);
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p24, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref(0, 3344)), $mul.ref(88, 1));
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} list_add_tail($p61, $p62);
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} ldv_spin_unlock_irqrestore_125(g_tasklet_lock, $u0);
    goto SeqInstr_1108, SeqInstr_1109;

  SeqInstr_1109:
    assume assertsPassed;
    goto SeqInstr_1110;

  SeqInstr_1110:
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} tasklet_schedule(g_urb_cancel_tasklet);
    goto SeqInstr_1111, SeqInstr_1112;

  SeqInstr_1112:
    assume assertsPassed;
    goto SeqInstr_1113;

  SeqInstr_1113:
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_1111:
    assume !assertsPassed;
    return;

  SeqInstr_1108:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i54 == 1;
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p24, $mul.ref(0, 40)), $mul.ref(33, 1));
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.1, $p55);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $i58 := $or.i32($i57, 128);
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i8($i58);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p24, $mul.ref(0, 40)), $mul.ref(33, 1));
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p60, $i59);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_1102:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 12);
    goto $bb9;

  SeqInstr_1099:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p8, .str.4);
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p9, .str.71);
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p10, .str.36);
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p11, .str.72);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.28, $p13);
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 1819);
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p13, $i16);
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p17, 0);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.29, $p18);
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 1356} {:cexpr "tmp___0"} boogie_si_record_i64($i22);
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i23 == 1;
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} __dynamic_pr_debug.ref.ref.ref.ref($p3, .str.72, .str.71, $p1);
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const oz_hcd_endpoint_disable: ref;

axiom oz_hcd_endpoint_disable == $sub.ref(0, 550879);

procedure oz_hcd_endpoint_disable($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation oz_hcd_endpoint_disable($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    return;
}



const oz_hcd_endpoint_reset: ref;

axiom oz_hcd_endpoint_reset == $sub.ref(0, 551911);

procedure oz_hcd_endpoint_reset($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation oz_hcd_endpoint_reset($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    return;
}



const oz_hcd_hub_status_data: ref;

axiom oz_hcd_hub_status_data == $sub.ref(0, 552943);

procedure oz_hcd_hub_status_data($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.16, $CurrAddr, assertsPassed;



implementation oz_hcd_hub_status_data($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i7: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i24;
  var $i24: i24;
  var $i25: i24;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $i33: i64;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i64;
  var $p42: ref;
  var $i43: i1;
  var $i44: i8;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i8;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i8;
  var $i58: i32;
  var $i59: i32;
  var $i60: i8;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $i6: i32;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} $p3 := oz_hcd_private($p0);
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1, 0);
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p4, 0);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} ldv_spin_lock_bh_126($p5);
    goto SeqInstr_1114, SeqInstr_1115;

  SeqInstr_1115:
    assume assertsPassed;
    goto SeqInstr_1116;

  SeqInstr_1116:
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb1;

  $bb1:
    call $i7, $p10, $i11, $i12, $i13, $i14, $i15, $i16, $p17, $p18, $p19, $p20, $p21, $p22, $i23, $i24, $i25, $p26, $p27, $i28, $i29, $i30, $i31, $i32, $i33, $p36, $i37, $i38, $i39, $p42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $p52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $p61, $i62, $i63, $i64, $i6 := oz_hcd_hub_status_data_loop_$bb1($p1, $p2, $p3, $i7, $p10, $i11, $i12, $i13, $i14, $i15, $i16, $p17, $p18, $p19, $p20, $p21, $p22, $i23, $i24, $i25, $p26, $p27, $i28, $i29, $i30, $i31, $i32, $i33, $p36, $i37, $i38, $i39, $p42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $p52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $p61, $i62, $i63, $i64, $i6);
    goto $bb1_last;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(128, 1)), $mul.ref($i7, 400)), $mul.ref(0, 1));
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.1, $p10);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 2);
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i62 := $i6;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i62, 1);
    call {:si_unique_call 1375} {:cexpr "i"} boogie_si_record_i32($i63);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $i64 := $sle.i32($i63, 7);
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} ldv_spin_unlock_bh_127($p65);
    goto SeqInstr_1117, SeqInstr_1118;

  SeqInstr_1118:
    assume assertsPassed;
    goto SeqInstr_1119;

  SeqInstr_1119:
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.1, $p1);
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $i67 := $sext.i8.i32($i66);
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb18, $bb20;

  $bb20:
    assume !($i68 == 1);
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.1, $p69);
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $i71 := $sext.i8.i32($i70);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i73 := 0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $r := $i73;
    return;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i72 == 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i73 := 2;
    goto $bb23;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i68 == 1;
    goto $bb19;

  SeqInstr_1117:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i63;
    goto $bb15_dummy;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $i14 := $M.23;
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 8);
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i6);
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(128, 1)), $mul.ref($i33, 400)), $mul.ref(0, 1));
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.1, $p36);
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, $sub.i32(0, 3));
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i6);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(128, 1)), $mul.ref($i39, 400)), $mul.ref(0, 1));
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p42, $i38);
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $i43 := $sle.i32($i6, 6);
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i43 == 1);
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.1, $p52);
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $i54 := $sext.i8.i32($i53);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i6, $sub.i32(0, 7));
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    $i56 := $shl.i32(1, $i55);
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i8($i56);
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $i58 := $sext.i8.i32($i57);
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $i59 := $or.i32($i54, $i58);
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i59);
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p61, $i60);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i62 := $i6;
    goto $bb14;

  $bb11:
    assume $i43 == 1;
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.1, $p1);
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $i45 := $sext.i8.i32($i44);
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i6, 1);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $i47 := $shl.i32(1, $i46);
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i47);
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $i49 := $sext.i8.i32($i48);
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $i50 := $or.i32($i45, $i49);
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1, $i51);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p17, .str.4);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p18, .str.69);
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p19, .str.36);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p20, .str.70);
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $i23 := $load.i24($M.28, $p22);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $i24 := $and.i24($i23, $sub.i24(0, 262144));
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $i25 := $or.i24($i24, 1891);
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p22, $i25);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p26, 0);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.29, $p27);
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i64($i28);
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $i30 := $and.i64($i29, 1);
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 1373} {:cexpr "tmp___0"} boogie_si_record_i64($i31);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i32 == 1;
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} __dynamic_pr_debug.ref.ref.i32($p2, .str.70, $i6);
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_1114:
    assume !assertsPassed;
    return;

  $bb15_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8185;
}



const oz_hcd_hub_control: ref;

axiom oz_hcd_hub_control == $sub.ref(0, 553975);

procedure oz_hcd_hub_control($p0: ref, $i1: i16, $i2: i16, $i3: i16, $p4: ref, $i5: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.1, $CurrAddr, $M.43, assertsPassed;



implementation oz_hcd_hub_control($p0: ref, $i1: i16, $i2: i16, $i3: i16, $p4: ref, $i5: i16) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i24;
  var $i34: i24;
  var $i35: i24;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $i43: i32;
  var $i45: i32;
  var $i46: i16;
  var $i47: i32;
  var $i48: i16;
  var $i49: i32;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i24;
  var $i61: i24;
  var $i62: i24;
  var $p63: ref;
  var $p64: ref;
  var $i65: i8;
  var $i66: i64;
  var $i67: i64;
  var $i68: i64;
  var $i69: i1;
  var $i70: i32;
  var $i71: i32;
  var $i72: i16;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i24;
  var $i84: i24;
  var $i85: i24;
  var $p86: ref;
  var $p87: ref;
  var $i88: i8;
  var $i89: i64;
  var $i90: i64;
  var $i91: i64;
  var $i92: i1;
  var $i93: i32;
  var $i94: i32;
  var $i95: i16;
  var $i96: i32;
  var $i97: i16;
  var $i98: i32;
  var $i99: i32;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i24;
  var $i109: i24;
  var $i110: i24;
  var $p111: ref;
  var $p112: ref;
  var $i113: i8;
  var $i114: i64;
  var $i115: i64;
  var $i116: i64;
  var $i117: i1;
  var $i118: i32;
  var $i44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1381} {:cexpr "oz_hcd_hub_control:arg:req_type"} boogie_si_record_i16($i1);
    call {:si_unique_call 1382} {:cexpr "oz_hcd_hub_control:arg:wvalue"} boogie_si_record_i16($i2);
    call {:si_unique_call 1383} {:cexpr "oz_hcd_hub_control:arg:windex"} boogie_si_record_i16($i3);
    call {:si_unique_call 1384} {:cexpr "oz_hcd_hub_control:arg:wlength"} boogie_si_record_i16($i5);
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i1);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 8193);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i1);
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 8961);
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i1);
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 40966);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i1);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 40960);
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i1);
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 41728);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i1);
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 8195);
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i1);
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 8963);
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i99 := $M.23;
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $i100 := $and.i32($i99, 8);
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    $r := $i44;
    return;

  $bb56:
    assume $i101 == 1;
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p102, .str.4);
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p103, .str.43);
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p104, .str.36);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p105, .str.47);
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p106);
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    $i108 := $load.i24($M.28, $p107);
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $i109 := $and.i24($i108, $sub.i24(0, 262144));
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    $i110 := $or.i24($i109, 2118);
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p107, $i110);
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p111, 0);
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.29, $p112);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    $i114 := $zext.i8.i64($i113);
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $i115 := $and.i64($i114, 1);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} $i116 := ldv__builtin_expect($i115, 0);
    call {:si_unique_call 1406} {:cexpr "tmp___2"} boogie_si_record_i64($i116);
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    $i117 := $ne.i64($i116, 0);
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb58:
    assume $i117 == 1;
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $i118 := $zext.i16.i32($i1);
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} __dynamic_pr_debug.ref.ref.i32($p9, .str.47, $i118);
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb25:
    assume $i23 == 1;
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i94 := $zext.i16.i32($i2);
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i16($i94);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    $i96 := $zext.i16.i32($i3);
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i16($i96);
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} $i98 := oz_set_port_feature($p0, $i95, $i97);
    goto SeqInstr_1123, SeqInstr_1124;

  SeqInstr_1124:
    assume assertsPassed;
    goto SeqInstr_1125;

  SeqInstr_1125:
    call {:si_unique_call 1391} {:cexpr "err"} boogie_si_record_i32($i98);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $i44 := $i98;
    goto $bb36;

  SeqInstr_1123:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i21 == 1;
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i74 := $M.23;
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i74, 8);
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb36;

  $bb50:
    assume $i76 == 1;
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p77, .str.4);
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p78, .str.43);
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p79, .str.36);
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p80, .str.46);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $i83 := $load.i24($M.28, $p82);
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    $i84 := $and.i24($i83, $sub.i24(0, 262144));
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $i85 := $or.i24($i84, 2112);
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p82, $i85);
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p86, 0);
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.29, $p87);
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i64($i88);
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    $i90 := $and.i64($i89, 1);
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} $i91 := ldv__builtin_expect($i90, 0);
    call {:si_unique_call 1403} {:cexpr "tmp___1"} boogie_si_record_i64($i91);
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    $i92 := $ne.i64($i91, 0);
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb52:
    assume $i92 == 1;
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $i93 := $zext.i16.i32($i1);
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} __dynamic_pr_debug.ref.ref.i32($p8, .str.46, $i93);
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb17:
    assume $i19 == 1;
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i3);
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i16($i71);
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} $i73 := oz_get_port_status($p0, $i72, $p4);
    call {:si_unique_call 1389} {:cexpr "err"} boogie_si_record_i32($i73);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $i44 := $i73;
    goto $bb36;

  $bb13:
    assume $i17 == 1;
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i51 := $M.23;
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 8);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} put_unaligned_le32(0, $p4);
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb36;

  $bb37:
    assume $i53 == 1;
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p54, .str.4);
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p55, .str.43);
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p56, .str.36);
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p57, .str.45);
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $i60 := $load.i24($M.28, $p59);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    $i61 := $and.i24($i60, $sub.i24(0, 262144));
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $i62 := $or.i24($i61, 2105);
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p59, $i62);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p63, 0);
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.29, $p64);
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i64($i65);
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    $i67 := $and.i64($i66, 1);
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} $i68 := ldv__builtin_expect($i67, 0);
    call {:si_unique_call 1396} {:cexpr "tmp___0"} boogie_si_record_i64($i68);
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb39:
    assume $i69 == 1;
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i1);
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} __dynamic_pr_debug.ref.ref.i32($p7, .str.45, $i70);
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb9:
    assume $i15 == 1;
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p4);
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} oz_get_hub_descriptor($p0, $p50);
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb36;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i2);
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i16($i45);
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i3);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i16($i47);
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} $i49 := oz_clear_port_feature($p0, $i46, $i48);
    goto SeqInstr_1120, SeqInstr_1121;

  SeqInstr_1121:
    assume assertsPassed;
    goto SeqInstr_1122;

  SeqInstr_1122:
    call {:si_unique_call 1386} {:cexpr "err"} boogie_si_record_i32($i49);
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    $i44 := $i49;
    goto $bb36;

  SeqInstr_1120:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i24 := $M.23;
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 8);
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb36;

  $bb30:
    assume $i26 == 1;
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p27, .str.4);
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p28, .str.43);
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p29, .str.36);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p30, .str.44);
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $i33 := $load.i24($M.28, $p32);
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $i34 := $and.i24($i33, $sub.i24(0, 262144));
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $i35 := $or.i24($i34, 2096);
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p32, $i35);
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p36, 0);
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.29, $p37);
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i64($i38);
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    $i40 := $and.i64($i39, 1);
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} $i41 := ldv__builtin_expect($i40, 0);
    call {:si_unique_call 1393} {:cexpr "tmp"} boogie_si_record_i64($i41);
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb32:
    assume $i42 == 1;
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i1);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} __dynamic_pr_debug.ref.ref.i32($p6, .str.44, $i43);
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    goto $bb34;
}



const oz_hcd_bus_suspend: ref;

axiom oz_hcd_bus_suspend == $sub.ref(0, 555007);

procedure oz_hcd_bus_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.16, assertsPassed;



implementation oz_hcd_bus_suspend($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} $p1 := oz_hcd_private($p0);
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} ldv_spin_lock_bh_126($p2);
    goto SeqInstr_1126, SeqInstr_1127;

  SeqInstr_1127:
    assume assertsPassed;
    goto SeqInstr_1128;

  SeqInstr_1128:
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p3, 4);
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 3344)), $mul.ref(3328, 1));
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, 1);
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 3344)), $mul.ref(3328, 1));
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p7, $i6);
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} ldv_spin_unlock_bh_127($p8);
    goto SeqInstr_1129, SeqInstr_1130;

  SeqInstr_1130:
    assume assertsPassed;
    goto SeqInstr_1131;

  SeqInstr_1131:
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_1129:
    assume !assertsPassed;
    return;

  SeqInstr_1126:
    assume !assertsPassed;
    return;
}



const oz_hcd_bus_resume: ref;

axiom oz_hcd_bus_resume == $sub.ref(0, 556039);

procedure oz_hcd_bus_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.16, assertsPassed;



implementation oz_hcd_bus_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} $p1 := oz_hcd_private($p0);
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} ldv_spin_lock_bh_126($p2);
    goto SeqInstr_1132, SeqInstr_1133;

  SeqInstr_1133:
    assume assertsPassed;
    goto SeqInstr_1134;

  SeqInstr_1134:
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 3344)), $mul.ref(3328, 1));
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, $sub.i32(0, 2));
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 3344)), $mul.ref(3328, 1));
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p6, $i5);
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p7, 1);
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} ldv_spin_unlock_bh_127($p8);
    goto SeqInstr_1135, SeqInstr_1136;

  SeqInstr_1136:
    assume assertsPassed;
    goto SeqInstr_1137;

  SeqInstr_1137:
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_1135:
    assume !assertsPassed;
    return;

  SeqInstr_1132:
    assume !assertsPassed;
    return;
}



const oz_clear_port_feature: ref;

axiom oz_clear_port_feature == $sub.ref(0, 557071);

procedure oz_clear_port_feature($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.1, $M.43, $CurrAddr, assertsPassed;



implementation oz_clear_port_feature($p0: ref, $i1: i16, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i24;
  var $i68: i24;
  var $i69: i24;
  var $p70: ref;
  var $p71: ref;
  var $i72: i8;
  var $i73: i64;
  var $i74: i64;
  var $i75: i64;
  var $i76: i1;
  var $i78: i32;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i24;
  var $i88: i24;
  var $i89: i24;
  var $p90: ref;
  var $p91: ref;
  var $i92: i8;
  var $i93: i64;
  var $i94: i64;
  var $i95: i64;
  var $i96: i1;
  var $i97: i32;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i24;
  var $i107: i24;
  var $i108: i24;
  var $p109: ref;
  var $p110: ref;
  var $i111: i8;
  var $i112: i64;
  var $i113: i64;
  var $i114: i64;
  var $i115: i1;
  var $i116: i32;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i24;
  var $i126: i24;
  var $i127: i24;
  var $p128: ref;
  var $p129: ref;
  var $i130: i8;
  var $i131: i64;
  var $i132: i64;
  var $i133: i64;
  var $i134: i1;
  var $i135: i32;
  var $i136: i32;
  var $i137: i1;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i24;
  var $i145: i24;
  var $i146: i24;
  var $p147: ref;
  var $p148: ref;
  var $i149: i8;
  var $i150: i64;
  var $i151: i64;
  var $i152: i64;
  var $i153: i1;
  var $i154: i32;
  var $i155: i32;
  var $i156: i1;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $i163: i24;
  var $i164: i24;
  var $i165: i24;
  var $p166: ref;
  var $p167: ref;
  var $i168: i8;
  var $i169: i64;
  var $i170: i64;
  var $i171: i64;
  var $i172: i1;
  var $i173: i32;
  var $i174: i32;
  var $i175: i32;
  var $i176: i1;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $i183: i24;
  var $i184: i24;
  var $i185: i24;
  var $p186: ref;
  var $p187: ref;
  var $i188: i8;
  var $i189: i64;
  var $i190: i64;
  var $i191: i64;
  var $i192: i1;
  var $i193: i32;
  var $i194: i32;
  var $i195: i1;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $i202: i24;
  var $i203: i24;
  var $i204: i24;
  var $p205: ref;
  var $p206: ref;
  var $i207: i8;
  var $i208: i64;
  var $i209: i64;
  var $i210: i64;
  var $i211: i1;
  var $i212: i32;
  var $i213: i32;
  var $i214: i1;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $i221: i24;
  var $i222: i24;
  var $i223: i24;
  var $p224: ref;
  var $p225: ref;
  var $i226: i8;
  var $i227: i64;
  var $i228: i64;
  var $i229: i64;
  var $i230: i1;
  var $i231: i32;
  var $i232: i32;
  var $i233: i1;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $i240: i24;
  var $i241: i24;
  var $i242: i24;
  var $p243: ref;
  var $p244: ref;
  var $i245: i8;
  var $i246: i64;
  var $i247: i64;
  var $i248: i64;
  var $i249: i1;
  var $i250: i32;
  var $i251: i32;
  var $i252: i1;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $i259: i24;
  var $i260: i24;
  var $i261: i24;
  var $p262: ref;
  var $p263: ref;
  var $i264: i8;
  var $i265: i64;
  var $i266: i64;
  var $i267: i64;
  var $i268: i1;
  var $i269: i32;
  var $i270: i32;
  var $i271: i1;
  var $p272: ref;
  var $p273: ref;
  var $p274: ref;
  var $p275: ref;
  var $p276: ref;
  var $p277: ref;
  var $i278: i24;
  var $i279: i24;
  var $i280: i24;
  var $p281: ref;
  var $p282: ref;
  var $i283: i8;
  var $i284: i64;
  var $i285: i64;
  var $i286: i64;
  var $i287: i1;
  var $i288: i32;
  var $i289: i32;
  var $i290: i1;
  var $p291: ref;
  var $p292: ref;
  var $p293: ref;
  var $p294: ref;
  var $p295: ref;
  var $p296: ref;
  var $i297: i24;
  var $i298: i24;
  var $i299: i24;
  var $p300: ref;
  var $p301: ref;
  var $i302: i8;
  var $i303: i64;
  var $i304: i64;
  var $i305: i64;
  var $i306: i1;
  var $i307: i32;
  var $i308: i32;
  var $i309: i1;
  var $p310: ref;
  var $p311: ref;
  var $p312: ref;
  var $p313: ref;
  var $p314: ref;
  var $p315: ref;
  var $i316: i24;
  var $i317: i24;
  var $i318: i24;
  var $p319: ref;
  var $p320: ref;
  var $i321: i8;
  var $i322: i64;
  var $i323: i64;
  var $i324: i64;
  var $i325: i1;
  var $i326: i32;
  var $i327: i32;
  var $i328: i1;
  var $p329: ref;
  var $p330: ref;
  var $p331: ref;
  var $p332: ref;
  var $p333: ref;
  var $p334: ref;
  var $i335: i24;
  var $i336: i24;
  var $i337: i24;
  var $p338: ref;
  var $p339: ref;
  var $i340: i8;
  var $i341: i64;
  var $i342: i64;
  var $i343: i64;
  var $i344: i1;
  var $i345: i32;
  var $i77: i32;
  var $i346: i1;
  var $p347: ref;
  var $p348: ref;
  var $i349: i32;
  var $i350: i32;
  var $i351: i32;
  var $p352: ref;
  var $p353: ref;
  var $i354: i32;
  var $i355: i32;
  var $i356: i1;
  var $p357: ref;
  var $p358: ref;
  var $p359: ref;
  var $p360: ref;
  var $p361: ref;
  var $p362: ref;
  var $i363: i24;
  var $i364: i24;
  var $i365: i24;
  var $p366: ref;
  var $p367: ref;
  var $i368: i8;
  var $i369: i64;
  var $i370: i64;
  var $i371: i64;
  var $i372: i1;
  var $i373: i32;
  var $i374: i32;
  var $i375: i32;
  var $i376: i64;
  var $p379: ref;
  var $i380: i32;
  var $i24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} $p12 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} $p13 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} $p14 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} $p15 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} $p16 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} $p17 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} $p18 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1430} {:cexpr "oz_clear_port_feature:arg:wvalue"} boogie_si_record_i16($i1);
    call {:si_unique_call 1431} {:cexpr "oz_clear_port_feature:arg:windex"} boogie_si_record_i16($i2);
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i16.i8($i2);
    call {:si_unique_call 1432} {:cexpr "port_id"} boogie_si_record_i8($i19);
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} $p20 := oz_hcd_private($p0);
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i19);
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32($i21, 1);
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $i23 := $ugt.i32($i22, 7);
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p20, $mul.ref(0, 3344)), $mul.ref(128, 1));
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i64($i19);
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, $sub.i64(0, 1));
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i1);
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i1);
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 1);
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i1);
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 2);
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i1);
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 3);
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i1);
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 4);
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i1);
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 8);
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i1);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 9);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i1);
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 16);
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i1);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 17);
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i1);
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 18);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i1);
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 19);
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i1);
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 20);
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i1);
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 21);
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i1);
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 22);
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i326 := $M.23;
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    $i327 := $and.i32($i326, 8);
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    $i328 := $ne.i32($i327, 0);
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    assume {:branchcond $i328} true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i328 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $i77 := 0;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    $i346 := $ne.i32($i77, 0);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    assume {:branchcond $i346} true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i346 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $i354 := $M.23;
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    $i355 := $and.i32($i354, 8);
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    $i356 := $ne.i32($i355, 0);
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    assume {:branchcond $i356} true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i356 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb157:
    assume $i356 == 1;
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p357, .str.4);
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p358, .str.48);
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p359, .str.36);
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p360, .str.64);
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    $p362 := $bitcast.ref.ref($p361);
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    $i363 := $load.i24($M.28, $p362);
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    $i364 := $and.i24($i363, $sub.i24(0, 262144));
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    $i365 := $or.i24($i364, 2064);
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p362, $i365);
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p366, 0);
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    $i368 := $load.i8($M.29, $p367);
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    $i369 := $zext.i8.i64($i368);
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    $i370 := $and.i64($i369, 1);
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} $i371 := ldv__builtin_expect($i370, 0);
    call {:si_unique_call 1483} {:cexpr "tmp___15"} boogie_si_record_i64($i371);
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    $i372 := $ne.i64($i371, 0);
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    assume {:branchcond $i372} true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i372 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb159:
    assume $i372 == 1;
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    $i373 := $zext.i8.i32($i19);
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    $i374 := $zext.i8.i32($i19);
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    $i375 := $add.i32($i374, $sub.i32(0, 1));
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    $i376 := $sext.i32.i64($i375);
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($add.ref($add.ref($add.ref($p20, $mul.ref(0, 3344)), $mul.ref(128, 1)), $mul.ref($i376, 400)), $mul.ref(4, 1));
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    $i380 := $load.i32($M.1, $p379);
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} __dynamic_pr_debug.ref.ref.i32.i32($p18, .str.64, $i373, $i380);
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb154:
    assume $i346 == 1;
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p26, $mul.ref($i28, 400)), $mul.ref(24, 1));
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} ldv_spin_lock_bh_148($p347);
    goto SeqInstr_1138, SeqInstr_1139;

  SeqInstr_1139:
    assume assertsPassed;
    goto SeqInstr_1140;

  SeqInstr_1140:
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p26, $mul.ref($i28, 400)), $mul.ref(4, 1));
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    $i349 := $load.i32($M.1, $p348);
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    $i350 := $xor.i32($i77, $sub.i32(0, 1));
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    $i351 := $and.i32($i349, $i350);
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($add.ref($p26, $mul.ref($i28, 400)), $mul.ref(4, 1));
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p352, $i351);
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($p26, $mul.ref($i28, 400)), $mul.ref(24, 1));
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} ldv_spin_unlock_bh_149($p353);
    goto SeqInstr_1141, SeqInstr_1142;

  SeqInstr_1142:
    assume assertsPassed;
    goto SeqInstr_1143;

  SeqInstr_1143:
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    goto $bb156;

  SeqInstr_1141:
    assume !assertsPassed;
    return;

  SeqInstr_1138:
    assume !assertsPassed;
    return;

  $bb147:
    assume $i328 == 1;
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p329, .str.4);
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p330, .str.48);
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p331, .str.36);
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p332, .str.63);
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    $p334 := $bitcast.ref.ref($p333);
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    $i335 := $load.i24($M.28, $p334);
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    $i336 := $and.i24($i335, $sub.i24(0, 262144));
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    $i337 := $or.i24($i336, 2055);
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p334, $i337);
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p338, 0);
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    $i340 := $load.i8($M.29, $p339);
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    $i341 := $zext.i8.i64($i340);
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    $i342 := $and.i64($i341, 1);
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} $i343 := ldv__builtin_expect($i342, 0);
    call {:si_unique_call 1478} {:cexpr "tmp___14"} boogie_si_record_i64($i343);
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    $i344 := $ne.i64($i343, 0);
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    assume {:branchcond $i344} true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb149:
    assume $i344 == 1;
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    $i345 := $zext.i16.i32($i1);
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} __dynamic_pr_debug.ref.ref.i32($p17, .str.63, $i345);
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb57:
    assume $i57 == 1;
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i307 := $M.23;
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    $i308 := $and.i32($i307, 8);
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    $i309 := $ne.i32($i308, 0);
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    assume {:branchcond $i309} true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $i77 := 0;
    goto $bb68;

  $bb141:
    assume $i309 == 1;
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p310, .str.4);
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p311, .str.48);
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p312, .str.36);
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p313, .str.62);
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    $p315 := $bitcast.ref.ref($p314);
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $i316 := $load.i24($M.28, $p315);
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    $i317 := $and.i24($i316, $sub.i24(0, 262144));
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    $i318 := $or.i24($i317, 2052);
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p315, $i318);
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p319, 0);
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    $i321 := $load.i8($M.29, $p320);
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    $i322 := $zext.i8.i64($i321);
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    $i323 := $and.i64($i322, 1);
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} $i324 := ldv__builtin_expect($i323, 0);
    call {:si_unique_call 1475} {:cexpr "tmp___13"} boogie_si_record_i64($i324);
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    $i325 := $ne.i64($i324, 0);
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i325} true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i325 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb143:
    assume $i325 == 1;
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} __dynamic_pr_debug.ref.ref($p16, .str.62);
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb53:
    assume $i55 == 1;
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i288 := $M.23;
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $i289 := $and.i32($i288, 8);
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    $i290 := $ne.i32($i289, 0);
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    assume {:branchcond $i290} true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $i77 := 0;
    goto $bb68;

  $bb135:
    assume $i290 == 1;
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p291, .str.4);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p292, .str.48);
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p293, .str.36);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p294, .str.61);
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    $p296 := $bitcast.ref.ref($p295);
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    $i297 := $load.i24($M.28, $p296);
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    $i298 := $and.i24($i297, $sub.i24(0, 262144));
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    $i299 := $or.i24($i298, 2049);
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p296, $i299);
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p300, 0);
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    $i302 := $load.i8($M.29, $p301);
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $i303 := $zext.i8.i64($i302);
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $i304 := $and.i64($i303, 1);
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} $i305 := ldv__builtin_expect($i304, 0);
    call {:si_unique_call 1472} {:cexpr "tmp___12"} boogie_si_record_i64($i305);
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $i306 := $ne.i64($i305, 0);
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    assume {:branchcond $i306} true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb137:
    assume $i306 == 1;
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} __dynamic_pr_debug.ref.ref($p15, .str.61);
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb49:
    assume $i53 == 1;
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i269 := $M.23;
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $i270 := $and.i32($i269, 8);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    $i271 := $ne.i32($i270, 0);
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    assume {:branchcond $i271} true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $i77 := 1310720;
    goto $bb68;

  $bb129:
    assume $i271 == 1;
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p272, .str.4);
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p273, .str.48);
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p274, .str.36);
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p275, .str.60);
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $p277 := $bitcast.ref.ref($p276);
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    $i278 := $load.i24($M.28, $p277);
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    $i279 := $and.i24($i278, $sub.i24(0, 262144));
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    $i280 := $or.i24($i279, 2045);
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p277, $i280);
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p281, 0);
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    $i283 := $load.i8($M.29, $p282);
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    $i284 := $zext.i8.i64($i283);
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    $i285 := $and.i64($i284, 1);
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} $i286 := ldv__builtin_expect($i285, 0);
    call {:si_unique_call 1469} {:cexpr "tmp___11"} boogie_si_record_i64($i286);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $i287 := $ne.i64($i286, 0);
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    assume {:branchcond $i287} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb131:
    assume $i287 == 1;
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} __dynamic_pr_debug.ref.ref($p14, .str.60);
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb45:
    assume $i51 == 1;
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i250 := $M.23;
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $i251 := $and.i32($i250, 8);
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    $i252 := $ne.i32($i251, 0);
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    assume {:branchcond $i252} true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i77 := 0;
    goto $bb68;

  $bb123:
    assume $i252 == 1;
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p253, .str.4);
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p254, .str.48);
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p255, .str.36);
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p256, .str.59);
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    $p258 := $bitcast.ref.ref($p257);
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $i259 := $load.i24($M.28, $p258);
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    $i260 := $and.i24($i259, $sub.i24(0, 262144));
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    $i261 := $or.i24($i260, 2042);
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p258, $i261);
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p262, 0);
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    $i264 := $load.i8($M.29, $p263);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    $i265 := $zext.i8.i64($i264);
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    $i266 := $and.i64($i265, 1);
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} $i267 := ldv__builtin_expect($i266, 0);
    call {:si_unique_call 1466} {:cexpr "tmp___10"} boogie_si_record_i64($i267);
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    $i268 := $ne.i64($i267, 0);
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    assume {:branchcond $i268} true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb125:
    assume $i268 == 1;
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} __dynamic_pr_debug.ref.ref($p13, .str.59);
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb41:
    assume $i49 == 1;
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i231 := $M.23;
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $i232 := $and.i32($i231, 8);
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $i233 := $ne.i32($i232, 0);
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    assume {:branchcond $i233} true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $i77 := 0;
    goto $bb68;

  $bb117:
    assume $i233 == 1;
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p234, .str.4);
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p235, .str.48);
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p236, .str.36);
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p237, .str.58);
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    $p239 := $bitcast.ref.ref($p238);
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $i240 := $load.i24($M.28, $p239);
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    $i241 := $and.i24($i240, $sub.i24(0, 262144));
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    $i242 := $or.i24($i241, 2039);
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p239, $i242);
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p243, 0);
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $i245 := $load.i8($M.29, $p244);
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    $i246 := $zext.i8.i64($i245);
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    $i247 := $and.i64($i246, 1);
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} $i248 := ldv__builtin_expect($i247, 0);
    call {:si_unique_call 1463} {:cexpr "tmp___9"} boogie_si_record_i64($i248);
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    $i249 := $ne.i64($i248, 0);
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb119:
    assume $i249 == 1;
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} __dynamic_pr_debug.ref.ref($p12, .str.58);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb37:
    assume $i47 == 1;
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i212 := $M.23;
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    $i213 := $and.i32($i212, 8);
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $i214 := $ne.i32($i213, 0);
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    assume {:branchcond $i214} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $i77 := 131072;
    goto $bb68;

  $bb111:
    assume $i214 == 1;
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p215, .str.4);
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p216, .str.48);
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p217, .str.36);
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p218, .str.57);
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $p220 := $bitcast.ref.ref($p219);
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    $i221 := $load.i24($M.28, $p220);
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    $i222 := $and.i24($i221, $sub.i24(0, 262144));
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    $i223 := $or.i24($i222, 2035);
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p220, $i223);
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p224, 0);
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    $i226 := $load.i8($M.29, $p225);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    $i227 := $zext.i8.i64($i226);
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    $i228 := $and.i64($i227, 1);
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} $i229 := ldv__builtin_expect($i228, 0);
    call {:si_unique_call 1460} {:cexpr "tmp___8"} boogie_si_record_i64($i229);
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    $i230 := $ne.i64($i229, 0);
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    assume {:branchcond $i230} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb113:
    assume $i230 == 1;
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} __dynamic_pr_debug.ref.ref($p11, .str.57);
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb33:
    assume $i45 == 1;
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i193 := $M.23;
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $i194 := $and.i32($i193, 8);
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    $i195 := $ne.i32($i194, 0);
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    assume {:branchcond $i195} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $i77 := 65536;
    goto $bb68;

  $bb105:
    assume $i195 == 1;
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p196, .str.4);
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p197, .str.48);
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p198, .str.36);
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p199, .str.56);
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $p201 := $bitcast.ref.ref($p200);
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    $i202 := $load.i24($M.28, $p201);
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    $i203 := $and.i24($i202, $sub.i24(0, 262144));
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $i204 := $or.i24($i203, 2031);
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p201, $i204);
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p205, 0);
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    $i207 := $load.i8($M.29, $p206);
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    $i208 := $zext.i8.i64($i207);
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    $i209 := $and.i64($i208, 1);
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} $i210 := ldv__builtin_expect($i209, 0);
    call {:si_unique_call 1457} {:cexpr "tmp___7"} boogie_si_record_i64($i210);
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    $i211 := $ne.i64($i210, 0);
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb107:
    assume $i211 == 1;
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} __dynamic_pr_debug.ref.ref($p10, .str.56);
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb29:
    assume $i43 == 1;
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i174 := $M.23;
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $i175 := $and.i32($i174, 8);
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $i176 := $ne.i32($i175, 0);
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    assume {:branchcond $i176} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i77 := 0;
    goto $bb68;

  $bb99:
    assume $i176 == 1;
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p177, .str.4);
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p178, .str.48);
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p179, .str.36);
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p180, .str.55);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    $p182 := $bitcast.ref.ref($p181);
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $i183 := $load.i24($M.28, $p182);
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    $i184 := $and.i24($i183, $sub.i24(0, 262144));
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    $i185 := $or.i24($i184, 2028);
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p182, $i185);
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p186, 0);
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $i188 := $load.i8($M.29, $p187);
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    $i189 := $zext.i8.i64($i188);
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    $i190 := $and.i64($i189, 1);
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} $i191 := ldv__builtin_expect($i190, 0);
    call {:si_unique_call 1454} {:cexpr "tmp___6"} boogie_si_record_i64($i191);
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    $i192 := $ne.i64($i191, 0);
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    assume {:branchcond $i192} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb101:
    assume $i192 == 1;
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} __dynamic_pr_debug.ref.ref($p9, .str.55);
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb25:
    assume $i41 == 1;
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i154 := $M.23;
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $i155 := $and.i32($i154, 8);
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $i156 := $ne.i32($i155, 0);
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i156} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $i173 := $or.i32(0, 256);
    call {:si_unique_call 1452} {:cexpr "clear_bits"} boogie_si_record_i32($i173);
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    $i77 := $i173;
    goto $bb68;

  $bb93:
    assume $i156 == 1;
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p157, .str.4);
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p158, .str.48);
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p159, .str.36);
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p160, .str.54);
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    $p162 := $bitcast.ref.ref($p161);
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $i163 := $load.i24($M.28, $p162);
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    $i164 := $and.i24($i163, $sub.i24(0, 262144));
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $i165 := $or.i24($i164, 2024);
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p162, $i165);
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p166, 0);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    $i168 := $load.i8($M.29, $p167);
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    $i169 := $zext.i8.i64($i168);
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    $i170 := $and.i64($i169, 1);
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} $i171 := ldv__builtin_expect($i170, 0);
    call {:si_unique_call 1450} {:cexpr "tmp___5"} boogie_si_record_i64($i171);
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $i172 := $ne.i64($i171, 0);
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i172} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb95:
    assume $i172 == 1;
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} __dynamic_pr_debug.ref.ref($p8, .str.54);
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb21:
    assume $i39 == 1;
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i135 := $M.23;
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    $i136 := $and.i32($i135, 8);
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $i137 := $ne.i32($i136, 0);
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    assume {:branchcond $i137} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i77 := 0;
    goto $bb68;

  $bb87:
    assume $i137 == 1;
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p138, .str.4);
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p139, .str.48);
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p140, .str.36);
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p141, .str.53);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    $p143 := $bitcast.ref.ref($p142);
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $i144 := $load.i24($M.28, $p143);
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    $i145 := $and.i24($i144, $sub.i24(0, 262144));
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    $i146 := $or.i24($i145, 2021);
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p143, $i146);
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p147, 0);
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    $i149 := $load.i8($M.29, $p148);
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    $i150 := $zext.i8.i64($i149);
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $i151 := $and.i64($i150, 1);
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} $i152 := ldv__builtin_expect($i151, 0);
    call {:si_unique_call 1447} {:cexpr "tmp___4"} boogie_si_record_i64($i152);
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    $i153 := $ne.i64($i152, 0);
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb89:
    assume $i153 == 1;
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} __dynamic_pr_debug.ref.ref($p7, .str.53);
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb17:
    assume $i37 == 1;
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i116 := $M.23;
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $i117 := $and.i32($i116, 8);
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i77 := 0;
    goto $bb68;

  $bb81:
    assume $i118 == 1;
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p119, .str.4);
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p120, .str.48);
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p121, .str.36);
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p122, .str.52);
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $i125 := $load.i24($M.28, $p124);
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    $i126 := $and.i24($i125, $sub.i24(0, 262144));
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $i127 := $or.i24($i126, 2018);
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p124, $i127);
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p128, 0);
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    $i130 := $load.i8($M.29, $p129);
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $i131 := $zext.i8.i64($i130);
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    $i132 := $and.i64($i131, 1);
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} $i133 := ldv__builtin_expect($i132, 0);
    call {:si_unique_call 1444} {:cexpr "tmp___3"} boogie_si_record_i64($i133);
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    $i134 := $ne.i64($i133, 0);
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb83:
    assume $i134 == 1;
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} __dynamic_pr_debug.ref.ref($p6, .str.52);
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb13:
    assume $i35 == 1;
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i97 := $M.23;
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $i98 := $and.i32($i97, 8);
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 0);
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i77 := 0;
    goto $bb68;

  $bb75:
    assume $i99 == 1;
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p100, .str.4);
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p101, .str.48);
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p102, .str.36);
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p103, .str.51);
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $i106 := $load.i24($M.28, $p105);
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    $i107 := $and.i24($i106, $sub.i24(0, 262144));
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    $i108 := $or.i24($i107, 2015);
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p105, $i108);
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p109, 0);
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.29, $p110);
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i64($i111);
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $i113 := $and.i64($i112, 1);
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} $i114 := ldv__builtin_expect($i113, 0);
    call {:si_unique_call 1441} {:cexpr "tmp___2"} boogie_si_record_i64($i114);
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $i115 := $ne.i64($i114, 0);
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb77:
    assume $i115 == 1;
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} __dynamic_pr_debug.ref.ref($p5, .str.51);
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb9:
    assume $i33 == 1;
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i78 := $M.23;
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    $i79 := $and.i32($i78, 8);
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i77 := 2;
    goto $bb68;

  $bb69:
    assume $i80 == 1;
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p81, .str.4);
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p82, .str.48);
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p83, .str.36);
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p84, .str.50);
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $i87 := $load.i24($M.28, $p86);
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    $i88 := $and.i24($i87, $sub.i24(0, 262144));
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $i89 := $or.i24($i88, 2011);
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p86, $i89);
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p90, 0);
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.29, $p91);
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    $i93 := $zext.i8.i64($i92);
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    $i94 := $and.i64($i93, 1);
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} $i95 := ldv__builtin_expect($i94, 0);
    call {:si_unique_call 1438} {:cexpr "tmp___1"} boogie_si_record_i64($i95);
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    $i96 := $ne.i64($i95, 0);
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb71:
    assume $i96 == 1;
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} __dynamic_pr_debug.ref.ref($p4, .str.50);
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb5:
    assume $i31 == 1;
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i58 := $M.23;
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i58, 8);
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i77 := 0;
    goto $bb68;

  $bb62:
    assume $i60 == 1;
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p61, .str.4);
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p62, .str.48);
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p63, .str.36);
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p64, .str.49);
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $i67 := $load.i24($M.28, $p66);
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    $i68 := $and.i24($i67, $sub.i24(0, 262144));
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $i69 := $or.i24($i68, 2008);
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p66, $i69);
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p70, 0);
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.29, $p71);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i64($i72);
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    $i74 := $and.i64($i73, 1);
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} $i75 := ldv__builtin_expect($i74, 0);
    call {:si_unique_call 1435} {:cexpr "tmp___0"} boogie_si_record_i64($i75);
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb64:
    assume $i76 == 1;
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} __dynamic_pr_debug.ref.ref($p3, .str.49);
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 32);
    goto $bb3;
}



const oz_get_hub_descriptor: ref;

axiom oz_get_hub_descriptor == $sub.ref(0, 558103);

procedure oz_get_hub_descriptor($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation oz_get_hub_descriptor($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var cmdloc_dummy_var_115: [ref]i8;
  var cmdloc_dummy_var_116: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_115 := $M.1;
    call {:si_unique_call 1485} cmdloc_dummy_var_116 := $memset.i8(cmdloc_dummy_var_115, $p2, 0, 15, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_116;
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p3, 41);
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p4, 9);
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p5, 1);
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p6, 8);
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    return;
}



const oz_get_port_status: ref;

axiom oz_get_port_status == $sub.ref(0, 559135);

procedure oz_get_port_status($p0: ref, $i1: i16, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.1, $CurrAddr;



implementation oz_get_port_status($p0: ref, $i1: i16, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i24;
  var $i20: i24;
  var $i21: i24;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i64;
  var $p35: ref;
  var $i36: i32;
  var $i37: i8;
  var $i38: i16;
  var $i39: i32;
  var $i40: i16;
  var $i41: i64;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i24;
  var $i52: i24;
  var $i53: i24;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $i61: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1488} {:cexpr "oz_get_port_status:arg:windex"} boogie_si_record_i16($i1);
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i1);
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i5, 1);
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i32($i6, 7);
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} $p9 := oz_hcd_private($p0);
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    $i10 := $M.23;
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 8);
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i1);
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i30, $sub.i32(0, 1));
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($p9, $mul.ref(0, 3344)), $mul.ref(128, 1)), $mul.ref($i32, 400)), $mul.ref(4, 1));
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.1, $p35);
    call {:si_unique_call 1493} {:cexpr "status"} boogie_si_record_i32($i36);
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} put_unaligned_le32($i36, $p2);
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i42 := $M.23;
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 8);
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb18:
    assume $i44 == 1;
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p45, .str.4);
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p46, .str.65);
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p47, .str.36);
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p48, .str.67);
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    $i51 := $load.i24($M.28, $p50);
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    $i52 := $and.i24($i51, $sub.i24(0, 262144));
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    $i53 := $or.i24($i52, 2082);
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p50, $i53);
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p54, 0);
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.29, $p55);
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i64($i56);
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    $i58 := $and.i64($i57, 1);
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} $i59 := ldv__builtin_expect($i58, 0);
    call {:si_unique_call 1499} {:cexpr "tmp___0"} boogie_si_record_i64($i59);
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i60 == 1;
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i1);
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} __dynamic_pr_debug.ref.ref.i32.i32($p4, .str.67, $i61, $i36);
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p13, .str.4);
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p14, .str.65);
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p15, .str.36);
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p16, .str.66);
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    $i19 := $load.i24($M.28, $p18);
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    $i20 := $and.i24($i19, $sub.i24(0, 262144));
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    $i21 := $or.i24($i20, 2079);
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p18, $i21);
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p22, 0);
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.29, $p23);
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i64($i24);
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 1);
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 1491} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i1);
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} __dynamic_pr_debug.ref.ref.i32($p3, .str.66, $i29);
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 32);
    goto $bb3;
}



const oz_set_port_feature: ref;

axiom oz_set_port_feature == $sub.ref(0, 560167);

procedure oz_set_port_feature($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.1, $M.43, $CurrAddr, assertsPassed;



implementation oz_set_port_feature($p0: ref, $i1: i16, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i24;
  var $i68: i24;
  var $i69: i24;
  var $p70: ref;
  var $p71: ref;
  var $i72: i8;
  var $i73: i64;
  var $i74: i64;
  var $i75: i64;
  var $i76: i1;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i24;
  var $i89: i24;
  var $i90: i24;
  var $p91: ref;
  var $p92: ref;
  var $i93: i8;
  var $i94: i64;
  var $i95: i64;
  var $i96: i64;
  var $i97: i1;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i24;
  var $i108: i24;
  var $i109: i24;
  var $p110: ref;
  var $p111: ref;
  var $i112: i8;
  var $i113: i64;
  var $i114: i64;
  var $i115: i64;
  var $i116: i1;
  var $i117: i32;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i24;
  var $i127: i24;
  var $i128: i24;
  var $p129: ref;
  var $p130: ref;
  var $i131: i8;
  var $i132: i64;
  var $i133: i64;
  var $i134: i64;
  var $i135: i1;
  var $i136: i32;
  var $i137: i32;
  var $i138: i1;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i24;
  var $i146: i24;
  var $i147: i24;
  var $p148: ref;
  var $p149: ref;
  var $i150: i8;
  var $i151: i64;
  var $i152: i64;
  var $i153: i64;
  var $i154: i1;
  var $i155: i32;
  var $i156: i32;
  var $i157: i64;
  var $p160: ref;
  var $i161: i32;
  var $i162: i32;
  var $i163: i1;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $i170: i24;
  var $i171: i24;
  var $i172: i24;
  var $p173: ref;
  var $p174: ref;
  var $i175: i8;
  var $i176: i64;
  var $i177: i64;
  var $i178: i64;
  var $i179: i1;
  var $i180: i32;
  var $i181: i32;
  var $i182: i32;
  var $i183: i1;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $i190: i24;
  var $i191: i24;
  var $i192: i24;
  var $p193: ref;
  var $p194: ref;
  var $i195: i8;
  var $i196: i64;
  var $i197: i64;
  var $i198: i64;
  var $i199: i1;
  var $i200: i32;
  var $i201: i32;
  var $i202: i1;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $i209: i24;
  var $i210: i24;
  var $i211: i24;
  var $p212: ref;
  var $p213: ref;
  var $i214: i8;
  var $i215: i64;
  var $i216: i64;
  var $i217: i64;
  var $i218: i1;
  var $i219: i32;
  var $i220: i32;
  var $i221: i1;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $i228: i24;
  var $i229: i24;
  var $i230: i24;
  var $p231: ref;
  var $p232: ref;
  var $i233: i8;
  var $i234: i64;
  var $i235: i64;
  var $i236: i64;
  var $i237: i1;
  var $i238: i32;
  var $i239: i32;
  var $i240: i1;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $i247: i24;
  var $i248: i24;
  var $i249: i24;
  var $p250: ref;
  var $p251: ref;
  var $i252: i8;
  var $i253: i64;
  var $i254: i64;
  var $i255: i64;
  var $i256: i1;
  var $i257: i32;
  var $i258: i32;
  var $i259: i1;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $p265: ref;
  var $i266: i24;
  var $i267: i24;
  var $i268: i24;
  var $p269: ref;
  var $p270: ref;
  var $i271: i8;
  var $i272: i64;
  var $i273: i64;
  var $i274: i64;
  var $i275: i1;
  var $i276: i32;
  var $i277: i32;
  var $i278: i1;
  var $p279: ref;
  var $p280: ref;
  var $p281: ref;
  var $p282: ref;
  var $p283: ref;
  var $p284: ref;
  var $i285: i24;
  var $i286: i24;
  var $i287: i24;
  var $p288: ref;
  var $p289: ref;
  var $i290: i8;
  var $i291: i64;
  var $i292: i64;
  var $i293: i64;
  var $i294: i1;
  var $i295: i32;
  var $i296: i32;
  var $i297: i1;
  var $p298: ref;
  var $p299: ref;
  var $p300: ref;
  var $p301: ref;
  var $p302: ref;
  var $p303: ref;
  var $i304: i24;
  var $i305: i24;
  var $i306: i24;
  var $p307: ref;
  var $p308: ref;
  var $i309: i8;
  var $i310: i64;
  var $i311: i64;
  var $i312: i64;
  var $i313: i1;
  var $i314: i32;
  var $i315: i32;
  var $i316: i1;
  var $p317: ref;
  var $p318: ref;
  var $p319: ref;
  var $p320: ref;
  var $p321: ref;
  var $p322: ref;
  var $i323: i24;
  var $i324: i24;
  var $i325: i24;
  var $p326: ref;
  var $p327: ref;
  var $i328: i8;
  var $i329: i64;
  var $i330: i64;
  var $i331: i64;
  var $i332: i1;
  var $i333: i32;
  var $i334: i32;
  var $i335: i1;
  var $p336: ref;
  var $p337: ref;
  var $p338: ref;
  var $p339: ref;
  var $p340: ref;
  var $p341: ref;
  var $i342: i24;
  var $i343: i24;
  var $i344: i24;
  var $p345: ref;
  var $p346: ref;
  var $i347: i8;
  var $i348: i64;
  var $i349: i64;
  var $i350: i64;
  var $i351: i1;
  var $i352: i32;
  var $i77: i32;
  var $i78: i32;
  var $i353: i32;
  var $i354: i1;
  var $p355: ref;
  var $p356: ref;
  var $i357: i32;
  var $i358: i32;
  var $i359: i32;
  var $p360: ref;
  var $p361: ref;
  var $i362: i32;
  var $i363: i32;
  var $p364: ref;
  var $p365: ref;
  var $i366: i32;
  var $i367: i32;
  var $i368: i1;
  var $p369: ref;
  var $p370: ref;
  var $p371: ref;
  var $p372: ref;
  var $p373: ref;
  var $p374: ref;
  var $i375: i24;
  var $i376: i24;
  var $i377: i24;
  var $p378: ref;
  var $p379: ref;
  var $i380: i8;
  var $i381: i64;
  var $i382: i64;
  var $i383: i64;
  var $i384: i1;
  var $i385: i32;
  var $p386: ref;
  var $i387: i32;
  var $i24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} $p12 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} $p13 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} $p14 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} $p15 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} $p16 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} $p17 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} $p18 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1517} {:cexpr "oz_set_port_feature:arg:wvalue"} boogie_si_record_i16($i1);
    call {:si_unique_call 1518} {:cexpr "oz_set_port_feature:arg:windex"} boogie_si_record_i16($i2);
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i16.i8($i2);
    call {:si_unique_call 1519} {:cexpr "port_id"} boogie_si_record_i8($i19);
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} $p20 := oz_hcd_private($p0);
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i19);
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32($i21, 1);
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    $i23 := $ugt.i32($i22, 7);
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p20, $mul.ref(0, 3344)), $mul.ref(128, 1));
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i64($i19);
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i27, $sub.i64(0, 1));
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i1);
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i1);
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 1);
    goto corral_source_split_9237;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i1);
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 2);
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i1);
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 3);
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i1);
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 4);
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i1);
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 8);
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i1);
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 9);
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i1);
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 16);
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i1);
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 17);
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i1);
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 18);
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i1);
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 19);
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i1);
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 20);
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i1);
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 21);
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i1);
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 22);
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i333 := $M.23;
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    $i334 := $and.i32($i333, 8);
    goto corral_source_split_9354;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    $i335 := $ne.i32($i334, 0);
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i335} true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i335 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $i77, $i78 := 0, 0;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    $i353 := $or.i32($i77, $i78);
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    $i354 := $ne.i32($i353, 0);
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    assume {:branchcond $i354} true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i354 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $i366 := $M.23;
    goto corral_source_split_9792;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    $i367 := $and.i32($i366, 8);
    goto corral_source_split_9793;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    $i368 := $ne.i32($i367, 0);
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    assume {:branchcond $i368} true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i368 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb157:
    assume $i368 == 1;
    goto corral_source_split_9796;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9797;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p369, .str.4);
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9799;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p370, .str.68);
    goto corral_source_split_9800;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p371, .str.36);
    goto corral_source_split_9802;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9803;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p372, .str.64);
    goto corral_source_split_9804;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9805;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    $p374 := $bitcast.ref.ref($p373);
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    $i375 := $load.i24($M.28, $p374);
    goto corral_source_split_9807;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    $i376 := $and.i24($i375, $sub.i24(0, 262144));
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    $i377 := $or.i24($i376, 1989);
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p374, $i377);
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p378, 0);
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9813;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    $i380 := $load.i8($M.29, $p379);
    goto corral_source_split_9814;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    $i381 := $zext.i8.i64($i380);
    goto corral_source_split_9815;

  corral_source_split_9815:
    assume {:verifier.code 0} true;
    $i382 := $and.i64($i381, 1);
    goto corral_source_split_9816;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} $i383 := ldv__builtin_expect($i382, 0);
    call {:si_unique_call 1570} {:cexpr "tmp___15"} boogie_si_record_i64($i383);
    goto corral_source_split_9817;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    $i384 := $ne.i64($i383, 0);
    goto corral_source_split_9818;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    assume {:branchcond $i384} true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i384 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb159:
    assume $i384 == 1;
    goto corral_source_split_9820;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    $i385 := $zext.i8.i32($i19);
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($p26, $mul.ref($i28, 400)), $mul.ref(4, 1));
    goto corral_source_split_9822;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    $i387 := $load.i32($M.1, $p386);
    goto corral_source_split_9823;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} __dynamic_pr_debug.ref.ref.i32.i32($p18, .str.64, $i385, $i387);
    goto corral_source_split_9824;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb154:
    assume $i354 == 1;
    goto corral_source_split_9775;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($p26, $mul.ref($i28, 400)), $mul.ref(24, 1));
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} ldv_spin_lock_bh_148($p355);
    goto SeqInstr_1144, SeqInstr_1145;

  SeqInstr_1145:
    assume assertsPassed;
    goto SeqInstr_1146;

  SeqInstr_1146:
    goto corral_source_split_9777;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p26, $mul.ref($i28, 400)), $mul.ref(4, 1));
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    $i357 := $load.i32($M.1, $p356);
    goto corral_source_split_9779;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    $i358 := $xor.i32($i78, $sub.i32(0, 1));
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    $i359 := $and.i32($i357, $i358);
    goto corral_source_split_9781;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($p26, $mul.ref($i28, 400)), $mul.ref(4, 1));
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p360, $i359);
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p26, $mul.ref($i28, 400)), $mul.ref(4, 1));
    goto corral_source_split_9784;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    $i362 := $load.i32($M.1, $p361);
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    $i363 := $or.i32($i362, $i77);
    goto corral_source_split_9786;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p26, $mul.ref($i28, 400)), $mul.ref(4, 1));
    goto corral_source_split_9787;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p364, $i363);
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($p26, $mul.ref($i28, 400)), $mul.ref(24, 1));
    goto corral_source_split_9789;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} ldv_spin_unlock_bh_149($p365);
    goto SeqInstr_1147, SeqInstr_1148;

  SeqInstr_1148:
    assume assertsPassed;
    goto SeqInstr_1149;

  SeqInstr_1149:
    goto corral_source_split_9790;

  corral_source_split_9790:
    assume {:verifier.code 0} true;
    goto $bb156;

  SeqInstr_1147:
    assume !assertsPassed;
    return;

  SeqInstr_1144:
    assume !assertsPassed;
    return;

  $bb147:
    assume $i335 == 1;
    goto corral_source_split_9747;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9748;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p336, .str.4);
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9750;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p337, .str.68);
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p338, .str.36);
    goto corral_source_split_9753;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p339, .str.63);
    goto corral_source_split_9755;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    $p341 := $bitcast.ref.ref($p340);
    goto corral_source_split_9757;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    $i342 := $load.i24($M.28, $p341);
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    $i343 := $and.i24($i342, $sub.i24(0, 262144));
    goto corral_source_split_9759;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    $i344 := $or.i24($i343, 1980);
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p341, $i344);
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9762;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p345, 0);
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    $i347 := $load.i8($M.29, $p346);
    goto corral_source_split_9765;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    $i348 := $zext.i8.i64($i347);
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    $i349 := $and.i64($i348, 1);
    goto corral_source_split_9767;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} $i350 := ldv__builtin_expect($i349, 0);
    call {:si_unique_call 1565} {:cexpr "tmp___14"} boogie_si_record_i64($i350);
    goto corral_source_split_9768;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    $i351 := $ne.i64($i350, 0);
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    assume {:branchcond $i351} true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i351 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb149:
    assume $i351 == 1;
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    $i352 := $zext.i16.i32($i1);
    goto corral_source_split_9772;

  corral_source_split_9772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} __dynamic_pr_debug.ref.ref.i32($p17, .str.63, $i352);
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb57:
    assume $i57 == 1;
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i314 := $M.23;
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    $i315 := $and.i32($i314, 8);
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    $i316 := $ne.i32($i315, 0);
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    assume {:branchcond $i316} true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $i77, $i78 := 0, 0;
    goto $bb68;

  $bb141:
    assume $i316 == 1;
    goto corral_source_split_9720;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9721;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p317, .str.4);
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9723;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p318, .str.68);
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p319, .str.36);
    goto corral_source_split_9726;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p320, .str.62);
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    $p322 := $bitcast.ref.ref($p321);
    goto corral_source_split_9730;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    $i323 := $load.i24($M.28, $p322);
    goto corral_source_split_9731;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    $i324 := $and.i24($i323, $sub.i24(0, 262144));
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    $i325 := $or.i24($i324, 1977);
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p322, $i325);
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p326, 0);
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    $i328 := $load.i8($M.29, $p327);
    goto corral_source_split_9738;

  corral_source_split_9738:
    assume {:verifier.code 0} true;
    $i329 := $zext.i8.i64($i328);
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    $i330 := $and.i64($i329, 1);
    goto corral_source_split_9740;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} $i331 := ldv__builtin_expect($i330, 0);
    call {:si_unique_call 1562} {:cexpr "tmp___13"} boogie_si_record_i64($i331);
    goto corral_source_split_9741;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    $i332 := $ne.i64($i331, 0);
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    assume {:branchcond $i332} true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i332 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb143:
    assume $i332 == 1;
    goto corral_source_split_9744;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} __dynamic_pr_debug.ref.ref($p16, .str.62);
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb53:
    assume $i55 == 1;
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i295 := $M.23;
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    $i296 := $and.i32($i295, 8);
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    $i297 := $ne.i32($i296, 0);
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i297} true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $i77, $i78 := 0, 0;
    goto $bb68;

  $bb135:
    assume $i297 == 1;
    goto corral_source_split_9693;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p298, .str.4);
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9696;

  corral_source_split_9696:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p299, .str.68);
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9698;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p300, .str.36);
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p301, .str.61);
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9702;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    $p303 := $bitcast.ref.ref($p302);
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    $i304 := $load.i24($M.28, $p303);
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    $i305 := $and.i24($i304, $sub.i24(0, 262144));
    goto corral_source_split_9705;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    $i306 := $or.i24($i305, 1974);
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p303, $i306);
    goto corral_source_split_9707;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p307, 0);
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    $i309 := $load.i8($M.29, $p308);
    goto corral_source_split_9711;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    $i310 := $zext.i8.i64($i309);
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    $i311 := $and.i64($i310, 1);
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} $i312 := ldv__builtin_expect($i311, 0);
    call {:si_unique_call 1559} {:cexpr "tmp___12"} boogie_si_record_i64($i312);
    goto corral_source_split_9714;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    $i313 := $ne.i64($i312, 0);
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    assume {:branchcond $i313} true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i313 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb137:
    assume $i313 == 1;
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} __dynamic_pr_debug.ref.ref($p15, .str.61);
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb49:
    assume $i53 == 1;
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i276 := $M.23;
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    $i277 := $and.i32($i276, 8);
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    $i278 := $ne.i32($i277, 0);
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i278} true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $i77, $i78 := 0, 0;
    goto $bb68;

  $bb129:
    assume $i278 == 1;
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p279, .str.4);
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p280, .str.68);
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p281, .str.36);
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p282, .str.60);
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    $p284 := $bitcast.ref.ref($p283);
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    $i285 := $load.i24($M.28, $p284);
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    $i286 := $and.i24($i285, $sub.i24(0, 262144));
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    $i287 := $or.i24($i286, 1971);
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p284, $i287);
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p288, 0);
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    $i290 := $load.i8($M.29, $p289);
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    $i291 := $zext.i8.i64($i290);
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    $i292 := $and.i64($i291, 1);
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} $i293 := ldv__builtin_expect($i292, 0);
    call {:si_unique_call 1556} {:cexpr "tmp___11"} boogie_si_record_i64($i293);
    goto corral_source_split_9687;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    $i294 := $ne.i64($i293, 0);
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    assume {:branchcond $i294} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb131:
    assume $i294 == 1;
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} __dynamic_pr_debug.ref.ref($p14, .str.60);
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb45:
    assume $i51 == 1;
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i257 := $M.23;
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    $i258 := $and.i32($i257, 8);
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    $i259 := $ne.i32($i258, 0);
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    assume {:branchcond $i259} true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i77, $i78 := 0, 0;
    goto $bb68;

  $bb123:
    assume $i259 == 1;
    goto corral_source_split_9639;

  corral_source_split_9639:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p260, .str.4);
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9642;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p261, .str.68);
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9644;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p262, .str.36);
    goto corral_source_split_9645;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p263, .str.59);
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9648;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    $p265 := $bitcast.ref.ref($p264);
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    $i266 := $load.i24($M.28, $p265);
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    $i267 := $and.i24($i266, $sub.i24(0, 262144));
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    $i268 := $or.i24($i267, 1968);
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p265, $i268);
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9654;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p269, 0);
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    $i271 := $load.i8($M.29, $p270);
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    $i272 := $zext.i8.i64($i271);
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    $i273 := $and.i64($i272, 1);
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} $i274 := ldv__builtin_expect($i273, 0);
    call {:si_unique_call 1553} {:cexpr "tmp___10"} boogie_si_record_i64($i274);
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    $i275 := $ne.i64($i274, 0);
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    assume {:branchcond $i275} true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i275 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb125:
    assume $i275 == 1;
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} __dynamic_pr_debug.ref.ref($p13, .str.59);
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb41:
    assume $i49 == 1;
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i238 := $M.23;
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    $i239 := $and.i32($i238, 8);
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    $i240 := $ne.i32($i239, 0);
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    assume {:branchcond $i240} true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $i77, $i78 := 0, 0;
    goto $bb68;

  $bb117:
    assume $i240 == 1;
    goto corral_source_split_9612;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p241, .str.4);
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9615;

  corral_source_split_9615:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p242, .str.68);
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p243, .str.36);
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p244, .str.58);
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    $p246 := $bitcast.ref.ref($p245);
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    $i247 := $load.i24($M.28, $p246);
    goto corral_source_split_9623;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    $i248 := $and.i24($i247, $sub.i24(0, 262144));
    goto corral_source_split_9624;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    $i249 := $or.i24($i248, 1965);
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p246, $i249);
    goto corral_source_split_9626;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p250, 0);
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    $i252 := $load.i8($M.29, $p251);
    goto corral_source_split_9630;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    $i253 := $zext.i8.i64($i252);
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    $i254 := $and.i64($i253, 1);
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} $i255 := ldv__builtin_expect($i254, 0);
    call {:si_unique_call 1550} {:cexpr "tmp___9"} boogie_si_record_i64($i255);
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    $i256 := $ne.i64($i255, 0);
    goto corral_source_split_9634;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i256 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb119:
    assume $i256 == 1;
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} __dynamic_pr_debug.ref.ref($p12, .str.58);
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb37:
    assume $i47 == 1;
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i219 := $M.23;
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    $i220 := $and.i32($i219, 8);
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    $i221 := $ne.i32($i220, 0);
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $i77, $i78 := 0, 0;
    goto $bb68;

  $bb111:
    assume $i221 == 1;
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p222, .str.4);
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p223, .str.68);
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p224, .str.36);
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p225, .str.57);
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    $p227 := $bitcast.ref.ref($p226);
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    $i228 := $load.i24($M.28, $p227);
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    $i229 := $and.i24($i228, $sub.i24(0, 262144));
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    $i230 := $or.i24($i229, 1962);
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p227, $i230);
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p231, 0);
    goto corral_source_split_9601;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    $i233 := $load.i8($M.29, $p232);
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    $i234 := $zext.i8.i64($i233);
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    $i235 := $and.i64($i234, 1);
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} $i236 := ldv__builtin_expect($i235, 0);
    call {:si_unique_call 1547} {:cexpr "tmp___8"} boogie_si_record_i64($i236);
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    $i237 := $ne.i64($i236, 0);
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i237} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb113:
    assume $i237 == 1;
    goto corral_source_split_9609;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} __dynamic_pr_debug.ref.ref($p11, .str.57);
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb33:
    assume $i45 == 1;
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i200 := $M.23;
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    $i201 := $and.i32($i200, 8);
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    $i202 := $ne.i32($i201, 0);
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i202} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $i77, $i78 := 0, 0;
    goto $bb68;

  $bb105:
    assume $i202 == 1;
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p203, .str.4);
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p204, .str.68);
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p205, .str.36);
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p206, .str.56);
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    $p208 := $bitcast.ref.ref($p207);
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    $i209 := $load.i24($M.28, $p208);
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    $i210 := $and.i24($i209, $sub.i24(0, 262144));
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    $i211 := $or.i24($i210, 1959);
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p208, $i211);
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p212, 0);
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    $i214 := $load.i8($M.29, $p213);
    goto corral_source_split_9576;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    $i215 := $zext.i8.i64($i214);
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    $i216 := $and.i64($i215, 1);
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} $i217 := ldv__builtin_expect($i216, 0);
    call {:si_unique_call 1544} {:cexpr "tmp___7"} boogie_si_record_i64($i217);
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    $i218 := $ne.i64($i217, 0);
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    assume {:branchcond $i218} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb107:
    assume $i218 == 1;
    goto corral_source_split_9582;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} __dynamic_pr_debug.ref.ref($p10, .str.56);
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb29:
    assume $i43 == 1;
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i181 := $M.23;
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    $i182 := $and.i32($i181, 8);
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    $i183 := $ne.i32($i182, 0);
    goto corral_source_split_9288;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    assume {:branchcond $i183} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i77, $i78 := 0, 0;
    goto $bb68;

  $bb99:
    assume $i183 == 1;
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9532;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p184, .str.4);
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p185, .str.68);
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p186, .str.36);
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9538;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p187, .str.55);
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9540;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    $p189 := $bitcast.ref.ref($p188);
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    $i190 := $load.i24($M.28, $p189);
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    $i191 := $and.i24($i190, $sub.i24(0, 262144));
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    $i192 := $or.i24($i191, 1956);
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p189, $i192);
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p193, 0);
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    $i195 := $load.i8($M.29, $p194);
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    $i196 := $zext.i8.i64($i195);
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    $i197 := $and.i64($i196, 1);
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} $i198 := ldv__builtin_expect($i197, 0);
    call {:si_unique_call 1541} {:cexpr "tmp___6"} boogie_si_record_i64($i198);
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    $i199 := $ne.i64($i198, 0);
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i199} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb101:
    assume $i199 == 1;
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} __dynamic_pr_debug.ref.ref($p9, .str.55);
    goto corral_source_split_9556;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb25:
    assume $i41 == 1;
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i161 := $M.23;
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    $i162 := $and.i32($i161, 8);
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    $i163 := $ne.i32($i162, 0);
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $i180 := $or.i32(0, 256);
    call {:si_unique_call 1539} {:cexpr "set_bits"} boogie_si_record_i32($i180);
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    $i77, $i78 := $i180, 0;
    goto $bb68;

  $bb93:
    assume $i163 == 1;
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9503;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p164, .str.4);
    goto corral_source_split_9504;

  corral_source_split_9504:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p165, .str.68);
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p166, .str.36);
    goto corral_source_split_9508;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p167, .str.54);
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9511;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    $p169 := $bitcast.ref.ref($p168);
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    $i170 := $load.i24($M.28, $p169);
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    $i171 := $and.i24($i170, $sub.i24(0, 262144));
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    $i172 := $or.i24($i171, 1952);
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p169, $i172);
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p173, 0);
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    $i175 := $load.i8($M.29, $p174);
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    $i176 := $zext.i8.i64($i175);
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    $i177 := $and.i64($i176, 1);
    goto corral_source_split_9522;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} $i178 := ldv__builtin_expect($i177, 0);
    call {:si_unique_call 1537} {:cexpr "tmp___5"} boogie_si_record_i64($i178);
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    $i179 := $ne.i64($i178, 0);
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    assume {:branchcond $i179} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb95:
    assume $i179 == 1;
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} __dynamic_pr_debug.ref.ref($p8, .str.54);
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb21:
    assume $i39 == 1;
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i136 := $M.23;
    goto corral_source_split_9268;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    $i137 := $and.i32($i136, 8);
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    $i138 := $ne.i32($i137, 0);
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i155 := $zext.i8.i32($i19);
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    $i156 := $add.i32($i155, $sub.i32(0, 1));
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    $i157 := $sext.i32.i64($i156);
    goto corral_source_split_9498;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($add.ref($p20, $mul.ref(0, 3344)), $mul.ref(128, 1)), $mul.ref($i157, 400)), $mul.ref(96, 1));
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p160, 0);
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    $i77, $i78 := 1048578, 16;
    goto $bb68;

  $bb87:
    assume $i138 == 1;
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p139, .str.4);
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p140, .str.68);
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p141, .str.36);
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p142, .str.53);
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p143);
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    $i145 := $load.i24($M.28, $p144);
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    $i146 := $and.i24($i145, $sub.i24(0, 262144));
    goto corral_source_split_9481;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    $i147 := $or.i24($i146, 1946);
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p144, $i147);
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p148, 0);
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    $i150 := $load.i8($M.29, $p149);
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    $i151 := $zext.i8.i64($i150);
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    $i152 := $and.i64($i151, 1);
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} $i153 := ldv__builtin_expect($i152, 0);
    call {:si_unique_call 1534} {:cexpr "tmp___4"} boogie_si_record_i64($i153);
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    $i154 := $ne.i64($i153, 0);
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb89:
    assume $i154 == 1;
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} __dynamic_pr_debug.ref.ref($p7, .str.53);
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb17:
    assume $i37 == 1;
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i117 := $M.23;
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    $i118 := $and.i32($i117, 8);
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 0);
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i77, $i78 := 0, 0;
    goto $bb68;

  $bb81:
    assume $i119 == 1;
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p120, .str.4);
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p121, .str.68);
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p122, .str.36);
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p123, .str.52);
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    $i126 := $load.i24($M.28, $p125);
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    $i127 := $and.i24($i126, $sub.i24(0, 262144));
    goto corral_source_split_9454;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    $i128 := $or.i24($i127, 1943);
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p125, $i128);
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p129, 0);
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9459;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    $i131 := $load.i8($M.29, $p130);
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i64($i131);
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    $i133 := $and.i64($i132, 1);
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} $i134 := ldv__builtin_expect($i133, 0);
    call {:si_unique_call 1531} {:cexpr "tmp___3"} boogie_si_record_i64($i134);
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    $i135 := $ne.i64($i134, 0);
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb83:
    assume $i135 == 1;
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} __dynamic_pr_debug.ref.ref($p6, .str.52);
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb13:
    assume $i35 == 1;
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i98 := $M.23;
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $i99 := $and.i32($i98, 8);
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i77, $i78 := 0, 0;
    goto $bb68;

  $bb75:
    assume $i100 == 1;
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p101, .str.4);
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p102, .str.68);
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p103, .str.36);
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p104, .str.51);
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    $i107 := $load.i24($M.28, $p106);
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    $i108 := $and.i24($i107, $sub.i24(0, 262144));
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    $i109 := $or.i24($i108, 1940);
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p106, $i109);
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p110, 0);
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.29, $p111);
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i64($i112);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    $i114 := $and.i64($i113, 1);
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} $i115 := ldv__builtin_expect($i114, 0);
    call {:si_unique_call 1528} {:cexpr "tmp___2"} boogie_si_record_i64($i115);
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    $i116 := $ne.i64($i115, 0);
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb77:
    assume $i116 == 1;
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} __dynamic_pr_debug.ref.ref($p5, .str.51);
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb9:
    assume $i33 == 1;
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i79 := $M.23;
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i79, 8);
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i77, $i78 := 0, 0;
    goto $bb68;

  $bb69:
    assume $i81 == 1;
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p82, .str.4);
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p83, .str.68);
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p84, .str.36);
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p85, .str.50);
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    $i88 := $load.i24($M.28, $p87);
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    $i89 := $and.i24($i88, $sub.i24(0, 262144));
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    $i90 := $or.i24($i89, 1937);
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p87, $i90);
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9403;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p91, 0);
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.29, $p92);
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i64($i93);
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    $i95 := $and.i64($i94, 1);
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} $i96 := ldv__builtin_expect($i95, 0);
    call {:si_unique_call 1525} {:cexpr "tmp___1"} boogie_si_record_i64($i96);
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    $i97 := $ne.i64($i96, 0);
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb71:
    assume $i97 == 1;
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} __dynamic_pr_debug.ref.ref($p4, .str.50);
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb5:
    assume $i31 == 1;
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i58 := $M.23;
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i58, 8);
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i77, $i78 := 0, 0;
    goto $bb68;

  $bb62:
    assume $i60 == 1;
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p61, .str.4);
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p62, .str.68);
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p63, .str.36);
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p64, .str.49);
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_9367;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    $i67 := $load.i24($M.28, $p66);
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    $i68 := $and.i24($i67, $sub.i24(0, 262144));
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    $i69 := $or.i24($i68, 1934);
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, $p66, $i69);
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p70, 0);
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.29, $p71);
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i64($i72);
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    $i74 := $and.i64($i73, 1);
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} $i75 := ldv__builtin_expect($i74, 0);
    call {:si_unique_call 1522} {:cexpr "tmp___0"} boogie_si_record_i64($i75);
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb64:
    assume $i76 == 1;
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} __dynamic_pr_debug.ref.ref($p3, .str.49);
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 32);
    goto $bb3;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_190: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_190 == $sub.ref(0, 561199);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_190($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_190($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} ldv_linux_kernel_locking_spinlock_spin_lock_g_tasklet_lock();
    goto SeqInstr_1150, SeqInstr_1151;

  SeqInstr_1151:
    assume assertsPassed;
    goto SeqInstr_1152;

  SeqInstr_1152:
    goto corral_source_split_9827;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1150:
    assume !assertsPassed;
    return;
}



const usb_hcd_check_unlink_urb: ref;

axiom usb_hcd_check_unlink_urb == $sub.ref(0, 562231);

procedure usb_hcd_check_unlink_urb($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_hcd_check_unlink_urb($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1574} {:cexpr "usb_hcd_check_unlink_urb:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1575} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1576} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_9831;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const tasklet_schedule: ref;

axiom tasklet_schedule == $sub.ref(0, 563263);

procedure tasklet_schedule($p0: ref);
  free requires assertsPassed;
  modifies $M.12, $M.13, assertsPassed;



implementation tasklet_schedule($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9833;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} $i2 := test_and_set_bit(0, $p1);
    goto SeqInstr_1153, SeqInstr_1154;

  SeqInstr_1154:
    assume assertsPassed;
    goto SeqInstr_1155;

  SeqInstr_1155:
    call {:si_unique_call 1578} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_9835;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9838;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} __tasklet_schedule($p0);
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1153:
    assume !assertsPassed;
    return;
}



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 564295);

procedure test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.13, assertsPassed;



implementation test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1581} devirtbounce.3(0);
    goto SeqInstr_1156, SeqInstr_1157;

  SeqInstr_1157:
    assume assertsPassed;
    goto SeqInstr_1158;

  SeqInstr_1158:
    goto corral_source_split_9841;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_1156:
    assume !assertsPassed;
    return;
}



const __tasklet_schedule: ref;

axiom __tasklet_schedule == $sub.ref(0, 565327);

procedure __tasklet_schedule($p0: ref);
  free requires assertsPassed;



implementation __tasklet_schedule($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9843;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_187: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_187 == $sub.ref(0, 566359);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_187($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_187($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} ldv_linux_kernel_locking_spinlock_spin_lock_g_tasklet_lock();
    goto SeqInstr_1159, SeqInstr_1160;

  SeqInstr_1160:
    assume assertsPassed;
    goto SeqInstr_1161;

  SeqInstr_1161:
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1159:
    assume !assertsPassed;
    return;
}



const usb_hcd_link_urb_to_ep: ref;

axiom usb_hcd_link_urb_to_ep == $sub.ref(0, 567391);

procedure usb_hcd_link_urb_to_ep($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_hcd_link_urb_to_ep($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9849;

  corral_source_split_9849:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1584} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1585} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9850;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const oz_cdev_read: ref;

axiom oz_cdev_read == $sub.ref(0, 568423);

procedure oz_cdev_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1, $M.10, assertsPassed, $M.2, $CurrAddr;



implementation oz_cdev_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i64;
  var $i23: i1;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i64;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i64;
  var $i45: i1;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $i40: i64;
  var $i13: i64;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} {:cexpr "oz_cdev_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_9852;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} ldv_spin_lock_bh_123___4($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(432, 1)));
    goto SeqInstr_1162, SeqInstr_1163;

  SeqInstr_1163:
    assume assertsPassed;
    goto SeqInstr_1164;

  SeqInstr_1164:
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(512, 1)));
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_9855;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} ldv_spin_unlock_bh_124___3($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(432, 1)));
    goto SeqInstr_1165, SeqInstr_1166;

  SeqInstr_1166:
    assume assertsPassed;
    goto SeqInstr_1167;

  SeqInstr_1167:
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p4);
    goto corral_source_split_9862;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_9863;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} $p10 := oz_cdev_claim_ctx($p4);
    goto SeqInstr_1168, SeqInstr_1169;

  SeqInstr_1169:
    assume assertsPassed;
    goto SeqInstr_1170;

  SeqInstr_1170:
    goto corral_source_split_9869;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_9870;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_9871;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p10, $mul.ref(0, 272)), $mul.ref(264, 1));
    goto corral_source_split_9878;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.1, $p14);
    goto corral_source_split_9879;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p10, $mul.ref(0, 272)), $mul.ref(268, 1));
    goto corral_source_split_9880;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.1, $p16);
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32($i15, $i17);
    call {:si_unique_call 1592} {:cexpr "n"} boogie_si_record_i32($i18);
    goto corral_source_split_9882;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 0);
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i21 := $i18;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_9888;

  corral_source_split_9888:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_9889;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    $i23 := $ugt.i64($i2, $i22);
    goto corral_source_split_9890;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i25 := $i2;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p10, $mul.ref(0, 272)), $mul.ref(268, 1));
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.1, $p26);
    call {:si_unique_call 1595} {:cexpr "ix"} boogie_si_record_i32($i27);
    goto corral_source_split_9897;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(256, $i27);
    call {:si_unique_call 1596} {:cexpr "n"} boogie_si_record_i32($i28);
    goto corral_source_split_9898;

  corral_source_split_9898:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_9899;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    $i30 := $ugt.i64($i29, $i25);
    goto corral_source_split_9900;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i32 := $i28;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_9905;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p10, $mul.ref(0, 272)), $mul.ref(6, 1));
    goto corral_source_split_9906;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_9907;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i27);
    goto corral_source_split_9908;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p34, $mul.ref($i35, 1));
    goto corral_source_split_9909;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i32);
    goto corral_source_split_9910;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} $i38 := copy_to_user($p1, $p36, $i37);
    call {:si_unique_call 1599} {:cexpr "tmp"} boogie_si_record_i64($i38);
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_9912;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i27, $i32);
    call {:si_unique_call 1601} {:cexpr "ix"} boogie_si_record_i32($i41);
    goto corral_source_split_9919;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 256);
    goto corral_source_split_9920;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $i41;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_9924;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i32);
    goto corral_source_split_9925;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    $i45 := $ult.i64($i44, $i25);
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i56 := $i43;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p10, $mul.ref(0, 272)), $mul.ref(268, 1));
    goto corral_source_split_9944;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p57, $i56);
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    $i40 := $i25;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_9916;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} oz_cdev_release_ctx($p10);
    goto corral_source_split_9917;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    $i13 := $i40;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_9875;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} oz_pd_put($p4);
    goto corral_source_split_9876;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    $i9 := $i13;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9867;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb28:
    assume $i45 == 1;
    goto corral_source_split_9928;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i32);
    goto corral_source_split_9929;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p1, $mul.ref($i46, 1));
    goto corral_source_split_9930;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p10, $mul.ref(0, 272)), $mul.ref(6, 1));
    goto corral_source_split_9931;

  corral_source_split_9931:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_9932;

  corral_source_split_9932:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i32);
    goto corral_source_split_9933;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    $i51 := $sub.i64($i25, $i50);
    goto corral_source_split_9934;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} $i52 := copy_to_user($p47, $p49, $i51);
    call {:si_unique_call 1603} {:cexpr "tmp___0"} boogie_si_record_i64($i52);
    goto corral_source_split_9935;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i64.i32($i25);
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32($i54, $i32);
    call {:si_unique_call 1604} {:cexpr "ix"} boogie_si_record_i32($i55);
    goto corral_source_split_9941;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    $i56 := $i55;
    goto $bb33;

  $bb30:
    assume $i53 == 1;
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb23;

  $bb25:
    assume $i42 == 1;
    goto corral_source_split_9922;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb27;

  $bb21:
    assume $i39 == 1;
    goto corral_source_split_9914;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb23;

  $bb18:
    assume $i30 == 1;
    goto corral_source_split_9902;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i64.i32($i25);
    call {:si_unique_call 1597} {:cexpr "n"} boogie_si_record_i32($i31);
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb20;

  $bb15:
    assume $i23 == 1;
    goto corral_source_split_9892;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i21);
    call {:si_unique_call 1594} {:cexpr "count"} boogie_si_record_i64($i24);
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb17;

  $bb12:
    assume $i19 == 1;
    goto corral_source_split_9885;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i18, 256);
    call {:si_unique_call 1593} {:cexpr "n"} boogie_si_record_i32($i20);
    goto corral_source_split_9886;

  corral_source_split_9886:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb14;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    $i13 := $i2;
    goto $bb10;

  SeqInstr_1168:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_9865;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64(0, 1);
    goto $bb6;

  SeqInstr_1165:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} oz_pd_get($p4);
    goto corral_source_split_9859;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1162:
    assume !assertsPassed;
    return;
}



const oz_cdev_write: ref;

axiom oz_cdev_write == $sub.ref(0, 569455);

procedure oz_cdev_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.10, $M.2, $M.9, assertsPassed, $CurrAddr;



implementation oz_cdev_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $i4: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i8;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $i52: i8;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $i56: i32;
  var $i57: i8;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i19: i64;
  var $p20: ref;
  var $i74: i64;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} {:cexpr "oz_cdev_write:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_9947;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    $i4 := $ugt.i64($i2, 253);
    goto corral_source_split_9948;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} ldv_spin_lock_bh_123___4($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(432, 1)));
    goto SeqInstr_1171, SeqInstr_1172;

  SeqInstr_1172:
    assume assertsPassed;
    goto SeqInstr_1173;

  SeqInstr_1173:
    goto corral_source_split_9954;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(512, 1)));
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_9956;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_9957;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} ldv_spin_unlock_bh_124___3($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(432, 1)));
    goto SeqInstr_1174, SeqInstr_1175;

  SeqInstr_1175:
    assume assertsPassed;
    goto SeqInstr_1176;

  SeqInstr_1176:
    goto corral_source_split_9962;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p6);
    goto corral_source_split_9963;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 1232)), $mul.ref(28, 1));
    goto corral_source_split_9968;

  corral_source_split_9968:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.1, $p11);
    goto corral_source_split_9969;

  corral_source_split_9969:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 2);
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 1232)), $mul.ref(112, 1));
    goto corral_source_split_9975;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} $p16 := oz_elt_info_alloc($p15);
    goto SeqInstr_1177, SeqInstr_1178;

  SeqInstr_1178:
    assume assertsPassed;
    goto SeqInstr_1179;

  SeqInstr_1179:
    goto corral_source_split_9976;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_9977;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p16, $mul.ref(0, 328)), $mul.ref(64, 1));
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_9987;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_9988;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref(1, 2));
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i64.i8($i2);
    goto corral_source_split_9990;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_9991;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, 2);
    goto corral_source_split_9992;

  corral_source_split_9992:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_9993;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p22, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_9994;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p29, $i28);
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p22, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_9996;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p30, 49);
    goto corral_source_split_9997;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p16, $mul.ref(0, 328)), $mul.ref(33, 1));
    goto corral_source_split_9998;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p31, 4);
    goto corral_source_split_9999;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p22, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_10000;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.1, $p32);
    goto corral_source_split_10001;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i34, 2);
    goto corral_source_split_10003;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p16, $mul.ref(0, 328)), $mul.ref(324, 1));
    goto corral_source_split_10004;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p36, $i35);
    goto corral_source_split_10005;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p23, $mul.ref(1, 2)), $mul.ref(0, 1));
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p37, 4);
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p24);
    goto corral_source_split_10008;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p38, $mul.ref(1, 1));
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} $i40 := copy_from_user($p39, $p1, $i2);
    call {:si_unique_call 1611} {:cexpr "tmp"} boogie_si_record_i64($i40);
    goto corral_source_split_10010;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_10011;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p6, $mul.ref(0, 1232)), $mul.ref(280, 1));
    goto corral_source_split_10015;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_10016;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p43, $mul.ref(1, 72));
    goto corral_source_split_10017;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} ldv_spin_lock_bh_121___0($p44);
    goto SeqInstr_1180, SeqInstr_1181;

  SeqInstr_1181:
    assume assertsPassed;
    goto SeqInstr_1182;

  SeqInstr_1182:
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1232)), $mul.ref(240, 1)), $mul.ref(4, 8));
    goto corral_source_split_10019;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.1, $p46);
    goto corral_source_split_10020;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_10021;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_10022;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_10023;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $p70 := $p16;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_10056;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p6, $mul.ref(0, 1232)), $mul.ref(280, 1));
    goto corral_source_split_10057;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_10058;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p72, $mul.ref(1, 72));
    goto corral_source_split_10059;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} ldv_spin_unlock_bh_122___0($p73);
    goto SeqInstr_1189, SeqInstr_1190;

  SeqInstr_1190:
    assume assertsPassed;
    goto SeqInstr_1191;

  SeqInstr_1191:
    goto corral_source_split_10060;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    $i19, $p20 := $i2, $p70;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9982;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p20);
    goto corral_source_split_9983;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_9984;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i78 := $i19;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_10067;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} oz_pd_put($p6);
    goto corral_source_split_10068;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    $i5 := $i78;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9952;

  corral_source_split_9952:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb30:
    assume $i75 == 1;
    $p76 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1232)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_10062;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} ldv_spin_lock_bh_135($p76);
    goto SeqInstr_1192, SeqInstr_1193;

  SeqInstr_1193:
    assume assertsPassed;
    goto SeqInstr_1194;

  SeqInstr_1194:
    goto corral_source_split_10063;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} oz_elt_info_free($p15, $p20);
    $p77 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1232)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_10064;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} ldv_spin_unlock_bh_136($p77);
    goto SeqInstr_1195, SeqInstr_1196;

  SeqInstr_1196:
    assume assertsPassed;
    goto SeqInstr_1197;

  SeqInstr_1197:
    goto corral_source_split_10065;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    $i78 := 0;
    goto $bb32;

  SeqInstr_1195:
    assume !assertsPassed;
    return;

  SeqInstr_1192:
    assume !assertsPassed;
    return;

  SeqInstr_1189:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i50 == 1;
    goto corral_source_split_10025;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p48, $mul.ref(0, 272)), $mul.ref(4, 1));
    goto corral_source_split_10026;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.1, $p51);
    call {:si_unique_call 1613} {:cexpr "tmp___0"} boogie_si_record_i8($i52);
    goto corral_source_split_10027;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p48, $mul.ref(0, 272)), $mul.ref(4, 1));
    goto corral_source_split_10028;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.1, $p53);
    goto corral_source_split_10029;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_10030;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i55, 1);
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i8($i56);
    goto corral_source_split_10032;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p48, $mul.ref(0, 272)), $mul.ref(4, 1));
    goto corral_source_split_10033;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p58, $i57);
    goto corral_source_split_10034;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p23, $mul.ref(1, 2)), $mul.ref(1, 1));
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p59, $i52);
    goto corral_source_split_10036;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p48, $mul.ref(0, 272)), $mul.ref(4, 1));
    goto corral_source_split_10037;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.1, $p60);
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 0);
    goto corral_source_split_10040;

  corral_source_split_10040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    $p65 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1232)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} ldv_spin_lock_128___0($p65);
    goto SeqInstr_1183, SeqInstr_1184;

  SeqInstr_1184:
    assume assertsPassed;
    goto SeqInstr_1185;

  SeqInstr_1185:
    goto corral_source_split_10047;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} $i66 := oz_queue_elt_info($p15, 0, 0, $p16);
    call {:si_unique_call 1616} {:cexpr "tmp___1"} boogie_si_record_i32($i66);
    goto corral_source_split_10048;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 0);
    goto corral_source_split_10049;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    $p68 := $p16;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1232)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_10053;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} ldv_spin_unlock_129___0($p69);
    goto SeqInstr_1186, SeqInstr_1187;

  SeqInstr_1187:
    assume assertsPassed;
    goto SeqInstr_1188;

  SeqInstr_1188:
    goto corral_source_split_10054;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    $p70 := $p68;
    goto $bb29;

  SeqInstr_1186:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i67 == 1;
    goto corral_source_split_10051;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    $p68 := $0.ref;
    goto $bb28;

  SeqInstr_1183:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i63 == 1;
    goto corral_source_split_10042;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p48, $mul.ref(0, 272)), $mul.ref(4, 1));
    goto corral_source_split_10043;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p64, 1);
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_1180:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i41 == 1;
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    $i19, $p20 := $i2, $p16;
    goto $bb16;

  $bb14:
    assume $i18 == 1;
    goto corral_source_split_9980;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    $i19, $p20 := 0, $p16;
    goto $bb16;

  SeqInstr_1177:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i14 == 1;
    goto corral_source_split_9973;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, 11);
    goto $bb3;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_9966;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, 6);
    goto $bb3;

  SeqInstr_1174:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_9959;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} oz_pd_get($p6);
    goto corral_source_split_9960;

  corral_source_split_9960:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_1171:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, 22);
    goto $bb3;
}



const oz_cdev_poll: ref;

axiom oz_cdev_poll == $sub.ref(0, 570487);

procedure oz_cdev_poll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, assertsPassed, $M.2, $M.1;



implementation oz_cdev_poll($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_10071;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_10072;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10073;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 520)), $mul.ref(432, 1));
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} ldv_spin_lock_bh_123___4($p5);
    goto SeqInstr_1198, SeqInstr_1199;

  SeqInstr_1199:
    assume assertsPassed;
    goto SeqInstr_1200;

  SeqInstr_1200:
    goto corral_source_split_10075;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 520)), $mul.ref(512, 1));
    goto corral_source_split_10076;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_10077;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_10078;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_10079;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_10103;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 520)), $mul.ref(432, 1));
    goto corral_source_split_10104;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} ldv_spin_unlock_bh_124___3($p24);
    goto SeqInstr_1204, SeqInstr_1205;

  SeqInstr_1205:
    assume assertsPassed;
    goto SeqInstr_1206;

  SeqInstr_1206:
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p1);
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_10109;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 520)), $mul.ref(344, 1));
    goto corral_source_split_10110;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} poll_wait($p0, $p27, $p1);
    goto corral_source_split_10111;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_1204:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 520)), $mul.ref(512, 1));
    goto corral_source_split_10082;

  corral_source_split_10082:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} $p12 := oz_cdev_claim_ctx($p11);
    goto SeqInstr_1201, SeqInstr_1202;

  SeqInstr_1202:
    assume assertsPassed;
    goto SeqInstr_1203;

  SeqInstr_1203:
    goto corral_source_split_10084;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_10086;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_10101;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb9;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_10088;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p12, $mul.ref(0, 272)), $mul.ref(264, 1));
    goto corral_source_split_10089;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.1, $p15);
    goto corral_source_split_10090;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p12, $mul.ref(0, 272)), $mul.ref(268, 1));
    goto corral_source_split_10091;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.1, $p17);
    goto corral_source_split_10092;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i16, $i18);
    goto corral_source_split_10093;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} oz_cdev_release_ctx($p12);
    goto corral_source_split_10099;

  corral_source_split_10099:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb8;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_10095;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    $i20 := $or.i32(0, 65);
    call {:si_unique_call 1625} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb7;

  SeqInstr_1201:
    assume !assertsPassed;
    return;

  SeqInstr_1198:
    assume !assertsPassed;
    return;
}



const oz_cdev_ioctl: ref;

axiom oz_cdev_ioctl == $sub.ref(0, 571519);

procedure oz_cdev_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1, $M.5, $M.10, $CurrAddr, $M.13, assertsPassed, $M.99, $M.2, $M.16, $M.15, $M.9, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.43, $M.30, $M.31, $M.32, $M.40, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation oz_cdev_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i22: i8;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i28: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i64;
  var $i35: i64;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $i40: i8;
  var $i41: i1;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $i46: i32;
  var $i47: i32;
  var $i29: i32;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $i69: i32;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $p80: ref;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i63: i32;
  var $i86: i64;
  var $i10: i64;
  var cmdloc_dummy_var_117: [ref]i8;
  var cmdloc_dummy_var_118: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} $p3 := $alloc($mul.ref(52, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} $p4 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} $p5 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} $p6 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 1633} {:cexpr "oz_cdev_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 1634} {:cexpr "oz_cdev_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_10113;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    $i7 := $lshr.i32($i1, 8);
    goto corral_source_split_10114;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 255);
    goto corral_source_split_10115;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 244);
    goto corral_source_split_10116;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i1, 255);
    goto corral_source_split_10122;

  corral_source_split_10122:
    assume {:verifier.code 0} true;
    $i12 := $ugt.i32($i11, 5);
    goto corral_source_split_10123;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i1, 0);
    goto corral_source_split_10127;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i1, 1073741824);
    goto corral_source_split_10141;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_10142;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i29 := $i47;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_10152;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i29, 0);
    goto corral_source_split_10153;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i1, $sub.i32(0, 2144013312));
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i1, 1074197505);
    goto corral_source_split_10192;

  corral_source_split_10192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i1, $sub.i32(0, 2147027966));
    goto corral_source_split_10201;

  corral_source_split_10201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i1, 1075901443);
    goto corral_source_split_10214;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i1, 1075901444);
    goto corral_source_split_10218;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i63 := $i29;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_10229;

  corral_source_split_10229:
    assume {:verifier.code 0} true;
    $i86 := $sext.i32.i64($i63);
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    $i10 := $i86;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10120;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb39:
    assume $i53 == 1;
    goto corral_source_split_10220;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p6);
    goto corral_source_split_10222;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    $p76 := $i2p.i64.ref($i2);
    goto corral_source_split_10223;

  corral_source_split_10223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} $i77 := copy_from_user($p75, $p76, 32);
    call {:si_unique_call 1660} {:cexpr "tmp___14"} boogie_si_record_i64($i77);
    goto corral_source_split_10224;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, 0);
    goto corral_source_split_10225;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(31, 1));
    goto corral_source_split_10241;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p80, 0);
    goto corral_source_split_10242;

  corral_source_split_10242:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i1, 1075901443);
    goto corral_source_split_10243;

  corral_source_split_10243:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i81 == 1);
    goto corral_source_split_10250;

  corral_source_split_10250:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_10251;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_10252;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} oz_binding_remove($p85);
    goto SeqInstr_1222, SeqInstr_1223;

  SeqInstr_1223:
    assume assertsPassed;
    goto SeqInstr_1224;

  SeqInstr_1224:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i63 := $i29;
    goto $bb47;

  SeqInstr_1222:
    assume !assertsPassed;
    return;

  $bb57:
    assume $i81 == 1;
    goto corral_source_split_10245;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_10246;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_10247;

  corral_source_split_10247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} oz_binding_add($p83);
    goto SeqInstr_1219, SeqInstr_1220;

  SeqInstr_1220:
    assume assertsPassed;
    goto SeqInstr_1221;

  SeqInstr_1221:
    goto corral_source_split_10248;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    goto $bb59;

  SeqInstr_1219:
    assume !assertsPassed;
    return;

  $bb54:
    assume $i78 == 1;
    goto corral_source_split_10239;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 14);
    goto $bb3;

  $bb35:
    assume $i52 == 1;
    goto corral_source_split_10216;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb31:
    assume $i51 == 1;
    goto corral_source_split_10203;

  corral_source_split_10203:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} ldv_spin_lock_bh_123___4($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(432, 1)));
    goto SeqInstr_1210, SeqInstr_1211;

  SeqInstr_1211:
    assume assertsPassed;
    goto SeqInstr_1212;

  SeqInstr_1212:
    goto corral_source_split_10205;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p5);
    goto corral_source_split_10206;

  corral_source_split_10206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} ether_addr_copy($p70, $add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(504, 1)), $mul.ref(0, 1)));
    goto corral_source_split_10207;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} ldv_spin_unlock_bh_124___3($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(432, 1)));
    goto SeqInstr_1213, SeqInstr_1214;

  SeqInstr_1214:
    assume assertsPassed;
    goto SeqInstr_1215;

  SeqInstr_1215:
    goto corral_source_split_10208;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    $p71 := $i2p.i64.ref($i2);
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p5);
    goto corral_source_split_10210;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} $i73 := copy_to_user($p71, $p72, 6);
    call {:si_unique_call 1658} {:cexpr "tmp___13"} boogie_si_record_i64($i73);
    goto corral_source_split_10211;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, 0);
    goto corral_source_split_10212;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i63 := $i29;
    goto $bb47;

  $bb51:
    assume $i74 == 1;
    goto corral_source_split_10237;

  corral_source_split_10237:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 14);
    goto $bb3;

  SeqInstr_1213:
    assume !assertsPassed;
    return;

  SeqInstr_1210:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i50 == 1;
    goto corral_source_split_10194;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p4);
    goto corral_source_split_10196;

  corral_source_split_10196:
    assume {:verifier.code 0} true;
    $p65 := $i2p.i64.ref($i2);
    goto corral_source_split_10197;

  corral_source_split_10197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} $i66 := copy_from_user($p64, $p65, 6);
    call {:si_unique_call 1653} {:cexpr "tmp___11"} boogie_si_record_i64($i66);
    goto corral_source_split_10198;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p4);
    goto corral_source_split_10234;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} $i69 := oz_set_active_pd($p68);
    goto SeqInstr_1216, SeqInstr_1217;

  SeqInstr_1217:
    assume assertsPassed;
    goto SeqInstr_1218;

  SeqInstr_1218:
    call {:si_unique_call 1662} {:cexpr "rc"} boogie_si_record_i32($i69);
    goto corral_source_split_10235;

  corral_source_split_10235:
    assume {:verifier.code 0} true;
    $i63 := $i69;
    goto $bb47;

  SeqInstr_1216:
    assume !assertsPassed;
    return;

  $bb48:
    assume $i67 == 1;
    goto corral_source_split_10232;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 14);
    goto $bb3;

  $bb23:
    assume $i49 == 1;
    goto corral_source_split_10178;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p3);
    goto corral_source_split_10180;

  corral_source_split_10180:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_117 := $M.1;
    call {:si_unique_call 1647} cmdloc_dummy_var_118 := $memset.i8(cmdloc_dummy_var_117, $p54, 0, 52, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_118;
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 52)), $mul.ref(4, 1));
    goto corral_source_split_10182;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} $i57 := oz_get_pd_list($p56, 8);
    goto SeqInstr_1207, SeqInstr_1208;

  SeqInstr_1208:
    assume assertsPassed;
    goto SeqInstr_1209;

  SeqInstr_1209:
    call {:si_unique_call 1649} {:cexpr "tmp___8"} boogie_si_record_i32($i57);
    goto corral_source_split_10184;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 52)), $mul.ref(0, 1));
    goto corral_source_split_10185;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p58, $i57);
    goto corral_source_split_10186;

  corral_source_split_10186:
    assume {:verifier.code 0} true;
    $p59 := $i2p.i64.ref($i2);
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p3);
    goto corral_source_split_10188;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} $i61 := copy_to_user($p59, $p60, 52);
    call {:si_unique_call 1651} {:cexpr "tmp___9"} boogie_si_record_i64($i61);
    goto corral_source_split_10189;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_10190;

  corral_source_split_10190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i63 := $i29;
    goto $bb47;

  $bb44:
    assume $i62 == 1;
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 14);
    goto $bb3;

  SeqInstr_1207:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i48 == 1;
    goto corral_source_split_10174;

  corral_source_split_10174:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 14);
    goto $bb3;

  $bb14:
    assume $i31 == 1;
    goto corral_source_split_10155;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} $p32 := current_thread_info();
    goto corral_source_split_10156;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    $i33 := $lshr.i32($i1, 16);
    goto corral_source_split_10157;

  corral_source_split_10157:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i33);
    goto corral_source_split_10158;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    $i35 := $and.i64($i34, 16383);
    goto corral_source_split_10159;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 56)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.5, $p37);
    goto corral_source_split_10161;

  corral_source_split_10161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} $i39 := __chk_range_not_ok($i2, $i35, $i38);
    goto corral_source_split_10162;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i8($i39);
    call {:si_unique_call 1643} {:cexpr "tmp___4"} boogie_si_record_i8($i40);
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i8.i1($i40);
    goto corral_source_split_10164;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i42);
    goto corral_source_split_10169;

  corral_source_split_10169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} $i44 := ldv__builtin_expect($i43, 1);
    call {:si_unique_call 1645} {:cexpr "tmp___6"} boogie_si_record_i64($i44);
    goto corral_source_split_10170;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    $i45 := $eq.i64($i44, 0);
    goto corral_source_split_10171;

  corral_source_split_10171:
    assume {:verifier.code 0} true;
    $i46 := $zext.i1.i32($i45);
    call {:si_unique_call 1646} {:cexpr "rc"} boogie_si_record_i32($i46);
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    $i47 := $i46;
    goto $bb19;

  $bb16:
    assume $i41 == 1;
    goto corral_source_split_10166;

  corral_source_split_10166:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb18;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_10129;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} $p14 := current_thread_info();
    goto corral_source_split_10130;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    $i15 := $lshr.i32($i1, 16);
    goto corral_source_split_10131;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i15);
    goto corral_source_split_10132;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 16383);
    goto corral_source_split_10133;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 56)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.5, $p19);
    goto corral_source_split_10135;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} $i21 := __chk_range_not_ok($i2, $i17, $i20);
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i8($i21);
    call {:si_unique_call 1637} {:cexpr "tmp___0"} boogie_si_record_i8($i22);
    goto corral_source_split_10137;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i22);
    goto corral_source_split_10138;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_10146;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_10147;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} $i26 := ldv__builtin_expect($i25, 1);
    call {:si_unique_call 1639} {:cexpr "tmp___2"} boogie_si_record_i64($i26);
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_10149;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    call {:si_unique_call 1640} {:cexpr "rc"} boogie_si_record_i32($i28);
    goto corral_source_split_10150;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb13;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_10144;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb12;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_10125;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 25);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_10118;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 25);
    goto $bb3;
}



const oz_cdev_open: ref;

axiom oz_cdev_open == $sub.ref(0, 572551);

procedure oz_cdev_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation oz_cdev_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10254;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(944, 1));
    goto corral_source_split_10255;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_10256;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_10257;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_10258;

  corral_source_split_10258:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 8), 520));
    goto corral_source_split_10259;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    goto corral_source_split_10260;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_10261;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p8, $p6);
    goto corral_source_split_10262;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const oz_cdev_release: ref;

axiom oz_cdev_release == $sub.ref(0, 573583);

procedure oz_cdev_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation oz_cdev_release($p0: ref, $p1: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const current_thread_info: ref;

axiom current_thread_info == $sub.ref(0, 574615);

procedure current_thread_info() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.5;



implementation current_thread_info() returns ($r: ref)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10266;

  corral_source_split_10266:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call {:si_unique_call 1665} $i3 := devirtbounce.6(0, kernel_stack);
    call {:si_unique_call 1666} {:cexpr "pfo_ret__"} boogie_si_record_i64($i3);
    goto corral_source_split_10268;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i4 := $sub.i64($i3, 32728);
    goto corral_source_split_10273;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_10274;

  corral_source_split_10274:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const __chk_range_not_ok: ref;

axiom __chk_range_not_ok == $sub.ref(0, 575647);

procedure __chk_range_not_ok($i0: i64, $i1: i64, $i2: i64) returns ($r: i1);
  free requires assertsPassed;



implementation __chk_range_not_ok($i0: i64, $i1: i64, $i2: i64) returns ($r: i1)
{
  var $i3: i64;
  var $i4: i1;
  var $i6: i1;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} {:cexpr "__chk_range_not_ok:arg:addr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1672} {:cexpr "__chk_range_not_ok:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1673} {:cexpr "__chk_range_not_ok:arg:limit"} boogie_si_record_i64($i2);
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i0, $i1);
    call {:si_unique_call 1674} {:cexpr "addr"} boogie_si_record_i64($i3);
    goto corral_source_split_10285;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    $i4 := $ult.i64($i3, $i1);
    goto corral_source_split_10286;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i64($i3, $i2);
    goto corral_source_split_10292;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    $i5 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10290;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_10288;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;
}



const oz_get_pd_list: ref;

axiom oz_get_pd_list == $sub.ref(0, 576679);

procedure oz_get_pd_list($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.1, assertsPassed;



implementation oz_get_pd_list($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i10: i1;
  var $i11: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $i8: i32;
  var $p9: ref;
  var $i26: i32;
  var $i7: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} {:cexpr "oz_get_pd_list:arg:max_count"} boogie_si_record_i32($i1);
    goto corral_source_split_10294;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} ldv_spin_lock_bh_121(g_polling_lock);
    goto SeqInstr_1225, SeqInstr_1226;

  SeqInstr_1226:
    assume assertsPassed;
    goto SeqInstr_1227;

  SeqInstr_1227:
    goto corral_source_split_10295;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, g_pd_list);
    goto corral_source_split_10296;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_10297;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1232)), $mul.ref(0, 1));
    goto corral_source_split_10298;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_10299;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, $p2i.ref.i64(g_pd_list));
    goto corral_source_split_10300;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i12 := $i7;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_10310;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} ldv_spin_unlock_bh_122(g_polling_lock);
    goto SeqInstr_1228, SeqInstr_1229;

  SeqInstr_1229:
    assume assertsPassed;
    goto SeqInstr_1230;

  SeqInstr_1230:
    goto corral_source_split_10311;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_1228:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_10302;

  corral_source_split_10302:
    assume {:verifier.code 0} true;
    $i8, $p9 := 0, $p2;
    goto $bb4;

  $bb4:
    call $i10, $i11, $i13, $p14, $i15, $p16, $p17, $p18, $p20, $p21, $p22, $p23, $i24, $i25, $i8, $p9, $i26 := oz_get_pd_list_loop_$bb4($p0, $i1, $i10, $i11, $i13, $p14, $i15, $p16, $p17, $p18, $p20, $p21, $p22, $p23, $i24, $i25, $i8, $p9, $i26);
    goto $bb4_last;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i10 := $sge.i32($i8, $i1);
    goto corral_source_split_10306;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    $i11 := $i8;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i8, 1);
    call {:si_unique_call 1678} {:cexpr "count"} boogie_si_record_i32($i13);
    goto corral_source_split_10313;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p0);
    goto corral_source_split_10314;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i8);
    goto corral_source_split_10315;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p14, $mul.ref($i15, 1));
    goto corral_source_split_10316;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p9, $mul.ref(0, 1232)), $mul.ref(20, 1));
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_10318;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} ether_addr_copy($p16, $p18);
    goto corral_source_split_10319;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 1232)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_10320;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_10321;

  corral_source_split_10321:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_10322;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 1232)), $mul.ref(0, 1));
    goto corral_source_split_10323;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_10324;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, $p2i.ref.i64(g_pd_list));
    goto corral_source_split_10325;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    $i26 := $i13;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_10327;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    $i7 := $i26;
    goto $bb3;

  $bb10:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i8, $p9 := $i13, $p21;
    goto $bb10_dummy;

  $bb6:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_10308;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb8;

  SeqInstr_1225:
    assume !assertsPassed;
    return;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10304;
}



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 577711);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} {:cexpr "copy_to_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_10329;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1681} might_fault();
    goto corral_source_split_10330;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($sub.i32(0, 1), 0);
    goto corral_source_split_10331;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_10332;

  corral_source_split_10332:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_10333;

  corral_source_split_10333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} $i6 := ldv__builtin_expect($i5, 1);
    call {:si_unique_call 1683} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_10334;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_10335;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_10341;

  corral_source_split_10341:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($sub.i32(0, 1));
    goto corral_source_split_10342;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    $i12 := $uge.i64($i11, $i2);
    goto corral_source_split_10343;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_10344;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_10345;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} $i15 := ldv__builtin_expect($i14, 1);
    call {:si_unique_call 1687} {:cexpr "tmp___0"} boogie_si_record_i64($i15);
    goto corral_source_split_10346;

  corral_source_split_10346:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_10347;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    goto corral_source_split_10355;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} __copy_to_user_overflow();
    assume {:verifier.code 0} true;
    $i19 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i10 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10349;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_10351;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i2);
    goto corral_source_split_10352;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} $i18 := _copy_to_user($p0, $p1, $i17);
    call {:si_unique_call 1689} {:cexpr "n"} boogie_si_record_i64($i18);
    goto corral_source_split_10353;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i2);
    goto corral_source_split_10338;

  corral_source_split_10338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} $i9 := _copy_to_user($p0, $p1, $i8);
    call {:si_unique_call 1685} {:cexpr "n"} boogie_si_record_i64($i9);
    goto corral_source_split_10339;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 578743);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1691} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_10357;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} might_fault();
    goto corral_source_split_10358;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($sub.i32(0, 1), 0);
    goto corral_source_split_10359;

  corral_source_split_10359:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_10360;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1693} $i6 := ldv__builtin_expect($i5, 1);
    call {:si_unique_call 1694} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_10362;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_10363;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_10369;

  corral_source_split_10369:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($sub.i32(0, 1));
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    $i12 := $uge.i64($i11, $i2);
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_10372;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_10373;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1697} $i15 := ldv__builtin_expect($i14, 1);
    call {:si_unique_call 1698} {:cexpr "tmp___0"} boogie_si_record_i64($i15);
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_10375;

  corral_source_split_10375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    goto corral_source_split_10383;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} __copy_from_user_overflow();
    assume {:verifier.code 0} true;
    $i19 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i10 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10377;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_10379;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i2);
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} $i18 := _copy_from_user($p0, $p1, $i17);
    call {:si_unique_call 1700} {:cexpr "n"} boogie_si_record_i64($i18);
    goto corral_source_split_10381;

  corral_source_split_10381:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_10365;

  corral_source_split_10365:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i2);
    goto corral_source_split_10366;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} $i9 := _copy_from_user($p0, $p1, $i8);
    call {:si_unique_call 1696} {:cexpr "n"} boogie_si_record_i64($i9);
    goto corral_source_split_10367;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const oz_set_active_pd: ref;

axiom oz_set_active_pd == $sub.ref(0, 579775);

procedure oz_set_active_pd($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.10, $M.13, assertsPassed, $CurrAddr;



implementation oz_set_active_pd($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i7: i32;
  var cmdloc_dummy_var_119: [ref]i8;
  var cmdloc_dummy_var_120: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10385;

  corral_source_split_10385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} $p1 := oz_pd_find($p0);
    goto SeqInstr_1231, SeqInstr_1232;

  SeqInstr_1232:
    assume assertsPassed;
    goto SeqInstr_1233;

  SeqInstr_1233:
    goto corral_source_split_10386;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_10387;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_10388;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_10399;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} $i8 := is_zero_ether_addr($p0);
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 1707} {:cexpr "tmp"} boogie_si_record_i8($i9);
    goto corral_source_split_10401;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_10402;

  corral_source_split_10402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i7 := $i14;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_10407;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb7:
    assume $i10 == 1;
    goto corral_source_split_10409;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} ldv_spin_lock_bh_123___4($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(432, 1)));
    goto SeqInstr_1240, SeqInstr_1241;

  SeqInstr_1241:
    assume assertsPassed;
    goto SeqInstr_1242;

  SeqInstr_1242:
    goto corral_source_split_10410;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(512, 1)));
    goto corral_source_split_10411;

  corral_source_split_10411:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(512, 1)), $0.ref);
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_119 := $M.1;
    call {:si_unique_call 1710} cmdloc_dummy_var_120 := $memset.i8(cmdloc_dummy_var_119, $add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(504, 1)), $mul.ref(0, 1)), 0, 6, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_120;
    goto corral_source_split_10413;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} ldv_spin_unlock_bh_124___3($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(432, 1)));
    goto SeqInstr_1243, SeqInstr_1244;

  SeqInstr_1244:
    assume assertsPassed;
    goto SeqInstr_1245;

  SeqInstr_1245:
    goto corral_source_split_10414;

  corral_source_split_10414:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_10415;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_10416;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb12;

  $bb9:
    assume $i13 == 1;
    goto corral_source_split_10418;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} oz_pd_put($p11);
    goto corral_source_split_10419;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_1243:
    assume !assertsPassed;
    return;

  SeqInstr_1240:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10390;

  corral_source_split_10390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1703} ldv_spin_lock_bh_123___4($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(432, 1)));
    goto SeqInstr_1234, SeqInstr_1235;

  SeqInstr_1235:
    assume assertsPassed;
    goto SeqInstr_1236;

  SeqInstr_1236:
    goto corral_source_split_10391;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} ether_addr_copy($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(504, 1)), $mul.ref(0, 1)), $p0);
    goto corral_source_split_10392;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(512, 1)));
    goto corral_source_split_10393;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(512, 1)), $p1);
    goto corral_source_split_10394;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} ldv_spin_unlock_bh_124___3($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(432, 1)));
    goto SeqInstr_1237, SeqInstr_1238;

  SeqInstr_1238:
    assume assertsPassed;
    goto SeqInstr_1239;

  SeqInstr_1239:
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_10396;

  corral_source_split_10396:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_10397;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb6;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_10404;

  corral_source_split_10404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} oz_pd_put($p4);
    goto corral_source_split_10405;

  corral_source_split_10405:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_1237:
    assume !assertsPassed;
    return;

  SeqInstr_1234:
    assume !assertsPassed;
    return;

  SeqInstr_1231:
    assume !assertsPassed;
    return;
}



const ldv_spin_lock_bh_123___4: ref;

axiom ldv_spin_lock_bh_123___4 == $sub.ref(0, 580807);

procedure ldv_spin_lock_bh_123___4($p0: ref);
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_spin_lock_bh_123___4($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_oz_cdev();
    goto SeqInstr_1246, SeqInstr_1247;

  SeqInstr_1247:
    assume assertsPassed;
    goto SeqInstr_1248;

  SeqInstr_1248:
    goto corral_source_split_10422;

  corral_source_split_10422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} spin_lock_bh($p0);
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1246:
    assume !assertsPassed;
    return;
}



const ether_addr_copy: ref;

axiom ether_addr_copy == $sub.ref(0, 581839);

procedure ether_addr_copy($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation ether_addr_copy($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10425;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_10426;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_10427;

  corral_source_split_10427:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_10428;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p4, $i3);
    goto corral_source_split_10429;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_10430;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(4, 2));
    goto corral_source_split_10431;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.1, $p6);
    goto corral_source_split_10432;

  corral_source_split_10432:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_10433;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(4, 2));
    goto corral_source_split_10434;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p9, $i7);
    goto corral_source_split_10435;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_bh_124___3: ref;

axiom ldv_spin_unlock_bh_124___3 == $sub.ref(0, 582871);

procedure ldv_spin_unlock_bh_124___3($p0: ref);
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_spin_unlock_bh_124___3($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_oz_cdev();
    goto SeqInstr_1249, SeqInstr_1250;

  SeqInstr_1250:
    assume assertsPassed;
    goto SeqInstr_1251;

  SeqInstr_1251:
    goto corral_source_split_10438;

  corral_source_split_10438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1716} spin_unlock_bh($p0);
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1249:
    assume !assertsPassed;
    return;
}



const oz_binding_add: ref;

axiom oz_binding_add == $sub.ref(0, 583903);

procedure oz_binding_add($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.99, assertsPassed, $CurrAddr;



implementation oz_binding_add($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var cmdloc_dummy_var_121: [ref]i8;
  var cmdloc_dummy_var_122: [ref]i8;
  var cmdloc_dummy_var_123: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} $p1 := kzalloc(104, 208);
    goto SeqInstr_1252, SeqInstr_1253;

  SeqInstr_1253:
    assume assertsPassed;
    goto SeqInstr_1254;

  SeqInstr_1254:
    goto corral_source_split_10442;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_10444;

  corral_source_split_10444:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p6, 11913);
    goto corral_source_split_10450;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_10452;

  corral_source_split_10452:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, oz_pkt_recv);
    goto corral_source_split_10453;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    goto corral_source_split_10454;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_10478;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} dev_add_pack($p26);
    goto corral_source_split_10479;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} ldv_spin_lock_bh_132___0(g_binding_lock);
    goto SeqInstr_1255, SeqInstr_1256;

  SeqInstr_1256:
    assume assertsPassed;
    goto SeqInstr_1257;

  SeqInstr_1257:
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_10481;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} list_add_tail($p27, g_binding);
    goto corral_source_split_10482;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} ldv_spin_unlock_bh_133___0(g_binding_lock);
    goto SeqInstr_1258, SeqInstr_1259;

  SeqInstr_1259:
    assume assertsPassed;
    goto SeqInstr_1260;

  SeqInstr_1260:
    goto corral_source_split_10483;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1258:
    assume !assertsPassed;
    return;

  SeqInstr_1255:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_10457;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.1, $p0);
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    $i13 := $sext.i8.i32($i12);
    goto corral_source_split_10459;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_10460;

  corral_source_split_10460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb7;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_10462;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(56, 1));
    goto corral_source_split_10463;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_10464;

  corral_source_split_10464:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_121 := $M.1;
    cmdloc_dummy_var_122 := $M.1;
    call {:si_unique_call 1718} cmdloc_dummy_var_123 := $memcpy.i8(cmdloc_dummy_var_121, cmdloc_dummy_var_122, $p16, $p0, 32, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_123;
    goto corral_source_split_10465;

  corral_source_split_10465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} $p17 := dev_get_by_name(init_net, $p0);
    goto corral_source_split_10466;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_10467;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p19, $p17);
    goto corral_source_split_10468;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_10469;

  corral_source_split_10469:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_10470;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_10471;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_10474;

  corral_source_split_10474:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p2);
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} kfree($p25);
    goto corral_source_split_10476;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1252:
    assume !assertsPassed;
    return;
}



const oz_binding_remove: ref;

axiom oz_binding_remove == $sub.ref(0, 584935);

procedure oz_binding_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.99, $M.13, assertsPassed, $CurrAddr, $M.2, $M.16, $M.15, $M.9, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.10, $M.43, $M.30, $M.31, $M.32, $M.40, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation oz_binding_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p8: ref;
  var $p24: ref;
  var $p7: ref;
  var $p14: ref;
  var $i15: i32;
  var $i25: i1;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10485;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} ldv_spin_lock_bh_132___0(g_binding_lock);
    goto SeqInstr_1261, SeqInstr_1262;

  SeqInstr_1262:
    assume assertsPassed;
    goto SeqInstr_1263;

  SeqInstr_1263:
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.1, g_binding);
    goto corral_source_split_10487;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 88), 104));
    goto corral_source_split_10489;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 88), 104)), $mul.ref(88, 1));
    goto corral_source_split_10490;

  corral_source_split_10490:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_10491;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, $p2i.ref.i64(g_binding));
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    $p7 := $p3;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p14, $i15 := $p7, 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10505;

  corral_source_split_10505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} ldv_spin_unlock_bh_133___0(g_binding_lock);
    goto SeqInstr_1264, SeqInstr_1265;

  SeqInstr_1265:
    assume assertsPassed;
    goto SeqInstr_1266;

  SeqInstr_1266:
    goto corral_source_split_10506;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i15, 0);
    goto corral_source_split_10507;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i25 == 1;
    goto corral_source_split_10519;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p14, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_10520;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} dev_remove_pack($p26);
    goto corral_source_split_10521;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_10522;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_10523;

  corral_source_split_10523:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_10525;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p14, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_10535;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} list_del($p38);
    goto corral_source_split_10536;

  corral_source_split_10536:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p14);
    goto corral_source_split_10537;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} kfree($p39);
    goto corral_source_split_10538;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i31 == 1;
    goto corral_source_split_10527;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_10528;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_10529;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} dev_put___0($p34);
    goto SeqInstr_1267, SeqInstr_1268;

  SeqInstr_1268:
    assume assertsPassed;
    goto SeqInstr_1269;

  SeqInstr_1269:
    goto corral_source_split_10530;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_10531;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.1, $p36);
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} pd_stop_all_for_device($p37);
    goto SeqInstr_1270, SeqInstr_1271;

  SeqInstr_1271:
    assume assertsPassed;
    goto SeqInstr_1272;

  SeqInstr_1272:
    goto corral_source_split_10533;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_1270:
    assume !assertsPassed;
    return;

  SeqInstr_1267:
    assume !assertsPassed;
    return;

  SeqInstr_1264:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_10494;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    $p8 := $p3;
    goto $bb4;

  $bb4:
    call $p9, $p10, $i11, $i12, $p13, $p17, $p18, $p19, $p20, $p21, $i22, $i23, $p8, $p24 := oz_binding_remove_loop_$bb4($p0, $p9, $p10, $i11, $i12, $p13, $p17, $p18, $p19, $p20, $p21, $i22, $i23, $p8, $p24);
    goto $bb4_last;

  corral_source_split_10496:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 104)), $mul.ref(56, 1));
    goto corral_source_split_10498;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_10499;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} $i11 := strncmp($p10, $p0, 32);
    call {:si_unique_call 1727} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_10500;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_10501;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    $p13 := $p8;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 104)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_10509;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_10510;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_10511;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p19, $mul.ref($sub.ref(0, 88), 104));
    goto corral_source_split_10512;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p19, $mul.ref($sub.ref(0, 88), 104)), $mul.ref(88, 1));
    goto corral_source_split_10513;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_10514;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, $p2i.ref.i64(g_binding));
    goto corral_source_split_10515;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    $p24 := $p20;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_10517;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    $p7 := $p24;
    goto $bb3;

  $bb10:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $p8 := $p20;
    goto $bb10_dummy;

  $bb6:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_10503;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    $p14, $i15 := $p13, 1;
    goto $bb8;

  SeqInstr_1261:
    assume !assertsPassed;
    return;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10496;
}



const ldv_spin_lock_bh_132___0: ref;

axiom ldv_spin_lock_bh_132___0 == $sub.ref(0, 585967);

procedure ldv_spin_lock_bh_132___0($p0: ref);
  free requires assertsPassed;
  modifies $M.99, assertsPassed;



implementation ldv_spin_lock_bh_132___0($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10540;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} ldv_linux_kernel_locking_spinlock_spin_lock_g_binding_lock();
    goto SeqInstr_1273, SeqInstr_1274;

  SeqInstr_1274:
    assume assertsPassed;
    goto SeqInstr_1275;

  SeqInstr_1275:
    goto corral_source_split_10541;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} spin_lock_bh($p0);
    goto corral_source_split_10542;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1273:
    assume !assertsPassed;
    return;
}



const strncmp: ref;

axiom strncmp == $sub.ref(0, 586999);

procedure strncmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const ldv_spin_unlock_bh_133___0: ref;

axiom ldv_spin_unlock_bh_133___0 == $sub.ref(0, 588031);

procedure ldv_spin_unlock_bh_133___0($p0: ref);
  free requires assertsPassed;
  modifies $M.99, assertsPassed;



implementation ldv_spin_unlock_bh_133___0($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10544;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} ldv_linux_kernel_locking_spinlock_spin_unlock_g_binding_lock();
    goto SeqInstr_1276, SeqInstr_1277;

  SeqInstr_1277:
    assume assertsPassed;
    goto SeqInstr_1278;

  SeqInstr_1278:
    goto corral_source_split_10545;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} spin_unlock_bh($p0);
    goto corral_source_split_10546;

  corral_source_split_10546:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1276:
    assume !assertsPassed;
    return;
}



const dev_remove_pack: ref;

axiom dev_remove_pack == $sub.ref(0, 589063);

procedure dev_remove_pack($p0: ref);
  free requires assertsPassed;



implementation dev_remove_pack($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10548;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    return;
}



const dev_put___0: ref;

axiom dev_put___0 == $sub.ref(0, 590095);

procedure dev_put___0($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.16, assertsPassed, $M.15, $M.9, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, $M.30, $M.31, $M.32, $M.40, $M.13, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation dev_put___0($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10550;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(1232, 1));
    goto corral_source_split_10580;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    call {:si_unique_call 1748} devirtbounce.1(0, $p22, $p22);
    goto SeqInstr_1303, SeqInstr_1304;

  SeqInstr_1304:
    assume assertsPassed;
    goto SeqInstr_1305;

  SeqInstr_1305:
    goto corral_source_split_10581;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1303:
    assume !assertsPassed;
    return;
}



const pd_stop_all_for_device: ref;

axiom pd_stop_all_for_device == $sub.ref(0, 591127);

procedure pd_stop_all_for_device($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.13, $CurrAddr, assertsPassed, $M.2, $M.16, $M.10, $M.43, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.40, $M.9, $M.15;



implementation pd_stop_all_for_device($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p13: ref;
  var $p14: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10611;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $p1);
    goto corral_source_split_10612;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_10613;

  corral_source_split_10613:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, $p1);
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} ldv_spin_lock_bh_121(g_polling_lock);
    goto SeqInstr_1327, SeqInstr_1328;

  SeqInstr_1328:
    assume assertsPassed;
    goto SeqInstr_1329;

  SeqInstr_1329:
    goto corral_source_split_10615;

  corral_source_split_10615:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, g_pd_list);
    goto corral_source_split_10616;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_10617;

  corral_source_split_10617:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1232)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_10618;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    goto corral_source_split_10620;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 1232)), $mul.ref(0, 1));
    goto corral_source_split_10621;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, $p2i.ref.i64(g_pd_list));
    goto corral_source_split_10623;

  corral_source_split_10623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} ldv_spin_unlock_bh_122(g_polling_lock);
    goto SeqInstr_1330, SeqInstr_1331;

  SeqInstr_1331:
    assume assertsPassed;
    goto SeqInstr_1332;

  SeqInstr_1332:
    goto corral_source_split_10649;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} $i28 := list_empty($p1);
    call {:si_unique_call 1765} {:cexpr "tmp"} boogie_si_record_i32($i28);
    goto corral_source_split_10650;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_10651;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i29 == 1;
    goto corral_source_split_10653;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    call $p30, $p31, $p32, $i33, $i34 := pd_stop_all_for_device_loop_$bb15($p1, $p30, $p31, $p32, $i33, $i34);
    goto $bb15_last;

  $bb16:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10655;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    goto corral_source_split_10656;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_10657;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} oz_pd_stop($p32);
    goto SeqInstr_1333, SeqInstr_1334;

  SeqInstr_1334:
    assume assertsPassed;
    goto SeqInstr_1335;

  SeqInstr_1335:
    goto corral_source_split_10658;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1767} oz_pd_put($p32);
    goto corral_source_split_10659;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} $i33 := list_empty($p1);
    call {:si_unique_call 1769} {:cexpr "tmp"} boogie_si_record_i32($i33);
    goto corral_source_split_10660;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i34 == 1);
    goto corral_source_split_10663;

  corral_source_split_10663:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb17_dummy;

  SeqInstr_1333:
    assume !assertsPassed;
    return;

  SeqInstr_1330:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_10625;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    $p13, $p14 := $p8, $p4;
    goto $bb4;

  $bb4:
    call $p15, $p16, $i17, $i18, $i19, $p20, $p22, $p23, $p25, $i26, $i27, $p13, $p14 := pd_stop_all_for_device_loop_$bb4($p0, $p1, $p15, $p16, $i17, $i18, $i19, $p20, $p22, $p23, $p25, $i26, $i27, $p13, $p14);
    goto $bb4_last;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1232)), $mul.ref(864, 1));
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_10630;

  corral_source_split_10630:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p0);
    goto corral_source_split_10632;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i17, $i18);
    goto corral_source_split_10633;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 1232)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_10641;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    goto corral_source_split_10642;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p13, $mul.ref(0, 1232)), $mul.ref(0, 1));
    goto corral_source_split_10643;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_10644;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, $p2i.ref.i64(g_pd_list));
    goto corral_source_split_10645;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i27 == 1);
    goto corral_source_split_10647;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $p13, $p14 := $p23, $p13;
    goto $bb9_dummy;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p14, $mul.ref(0, 1232)), $mul.ref(0, 1));
    goto corral_source_split_10636;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} list_move($p20, $p1);
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} oz_pd_get($p14);
    goto corral_source_split_10638;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_1327:
    assume !assertsPassed;
    return;

  $bb17_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10627;
}



const list_move: ref;

axiom list_move == $sub.ref(0, 592159);

procedure list_move($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_move($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10665;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} __list_del_entry($p0);
    goto corral_source_split_10666;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1771} list_add($p0, $p1);
    goto corral_source_split_10667;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    return;
}



const oz_pd_stop: ref;

axiom oz_pd_stop == $sub.ref(0, 593191);

procedure oz_pd_stop($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.13, assertsPassed, $CurrAddr, $M.2, $M.16, $M.10, $M.43, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.40, $M.9, $M.15;



implementation oz_pd_stop($p0: ref)
{
  var $p1: ref;
  var $i2: i16;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i16;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10669;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} oz_pd_indicate_farewells($p0);
    goto SeqInstr_1336, SeqInstr_1337;

  SeqInstr_1337:
    assume assertsPassed;
    goto SeqInstr_1338;

  SeqInstr_1338:
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} ldv_spin_lock_bh_121(g_polling_lock);
    goto SeqInstr_1339, SeqInstr_1340;

  SeqInstr_1340:
    assume assertsPassed;
    goto SeqInstr_1341;

  SeqInstr_1341:
    goto corral_source_split_10671;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(40, 1));
    goto corral_source_split_10672;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.1, $p1);
    call {:si_unique_call 1774} {:cexpr "stop_apps"} boogie_si_record_i16($i2);
    goto corral_source_split_10673;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(40, 1));
    goto corral_source_split_10674;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p3, 0);
    goto corral_source_split_10675;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(42, 1));
    goto corral_source_split_10676;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p4, 0);
    goto corral_source_split_10677;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} ldv_spin_unlock_bh_122(g_polling_lock);
    goto SeqInstr_1342, SeqInstr_1343;

  SeqInstr_1343:
    assume assertsPassed;
    goto SeqInstr_1344;

  SeqInstr_1344:
    goto corral_source_split_10678;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i2);
    goto corral_source_split_10679;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_10680;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} oz_services_stop($p0, $i6, 0);
    goto SeqInstr_1345, SeqInstr_1346;

  SeqInstr_1346:
    assume assertsPassed;
    goto SeqInstr_1347;

  SeqInstr_1347:
    goto corral_source_split_10681;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1777} ldv_spin_lock_bh_121(g_polling_lock);
    goto SeqInstr_1348, SeqInstr_1349;

  SeqInstr_1349:
    assume assertsPassed;
    goto SeqInstr_1350;

  SeqInstr_1350:
    goto corral_source_split_10682;

  corral_source_split_10682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} oz_pd_set_state($p0, 8);
    goto corral_source_split_10683;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(0, 1));
    goto corral_source_split_10684;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1779} list_del($p7);
    goto corral_source_split_10685;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} ldv_spin_unlock_bh_122(g_polling_lock);
    goto SeqInstr_1351, SeqInstr_1352;

  SeqInstr_1352:
    assume assertsPassed;
    goto SeqInstr_1353;

  SeqInstr_1353:
    goto corral_source_split_10686;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} oz_pd_put($p0);
    goto corral_source_split_10687;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1351:
    assume !assertsPassed;
    return;

  SeqInstr_1348:
    assume !assertsPassed;
    return;

  SeqInstr_1345:
    assume !assertsPassed;
    return;

  SeqInstr_1342:
    assume !assertsPassed;
    return;

  SeqInstr_1339:
    assume !assertsPassed;
    return;

  SeqInstr_1336:
    assume !assertsPassed;
    return;
}



const oz_pd_indicate_farewells: ref;

axiom oz_pd_indicate_farewells == $sub.ref(0, 594223);

procedure oz_pd_indicate_farewells($p0: ref);
  free requires assertsPassed;
  modifies $M.13, assertsPassed, $M.1, $M.2, $M.16, $M.15, $CurrAddr;



implementation oz_pd_indicate_farewells($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i8;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i8;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10689;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} ldv_spin_lock_bh_121(g_polling_lock);
    goto SeqInstr_1354, SeqInstr_1355;

  SeqInstr_1355:
    assume assertsPassed;
    goto SeqInstr_1356;

  SeqInstr_1356:
    goto corral_source_split_10690;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(760, 1));
    goto corral_source_split_10691;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} $i2 := list_empty($p1);
    call {:si_unique_call 1784} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_10692;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_10693;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_10697;

  corral_source_split_10697:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p5, $p6, $p7, $p8, $p9, $p10, $i11, $i12, $p13, $p14, $p15, $i16, $i17, $i18, $p19, $p20, $p21, $i22, $i23, $i24, $p25, $i26, $i27 := oz_pd_indicate_farewells_loop_$bb4($p0, $p1, $p5, $p6, $p7, $p8, $p9, $p10, $i11, $i12, $p13, $p14, $p15, $i16, $i17, $i18, $p19, $p20, $p21, $i22, $i23, $i24, $p25, $i26, $i27);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(760, 1)), $mul.ref(0, 1));
    goto corral_source_split_10701;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_10703;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_10704;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} list_del($p8);
    goto corral_source_split_10705;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} ldv_spin_unlock_bh_122(g_polling_lock);
    goto SeqInstr_1360, SeqInstr_1361;

  SeqInstr_1361:
    assume assertsPassed;
    goto SeqInstr_1362;

  SeqInstr_1362:
    $p9 := $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(1, 56)), $mul.ref(48, 1));
    goto corral_source_split_10706;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.98, $p9);
    goto corral_source_split_10707;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_10708;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_10709;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p7);
    goto corral_source_split_10724;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} kfree($p25);
    goto corral_source_split_10725;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} ldv_spin_lock_bh_121(g_polling_lock);
    goto SeqInstr_1366, SeqInstr_1367;

  SeqInstr_1367:
    assume assertsPassed;
    goto SeqInstr_1368;

  SeqInstr_1368:
    goto corral_source_split_10726;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} $i26 := list_empty($p1);
    call {:si_unique_call 1792} {:cexpr "tmp"} boogie_si_record_i32($i26);
    goto corral_source_split_10727;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_10728;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb11_dummy;

  $bb5:
    assume $i27 == 1;
    goto corral_source_split_10699;

  corral_source_split_10699:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} ldv_spin_unlock_bh_122(g_polling_lock);
    goto SeqInstr_1357, SeqInstr_1358;

  SeqInstr_1358:
    assume assertsPassed;
    goto SeqInstr_1359;

  SeqInstr_1359:
    goto corral_source_split_10695;

  corral_source_split_10695:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1357:
    assume !assertsPassed;
    return;

  SeqInstr_1366:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i12 == 1;
    $p13 := $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(1, 56)), $mul.ref(48, 1));
    goto corral_source_split_10711;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.98, $p13);
    goto corral_source_split_10712;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_10713;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.1, $p15);
    goto corral_source_split_10714;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_10715;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_10716;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p7, $mul.ref(0, 24)), $mul.ref(19, 1));
    goto corral_source_split_10717;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_10718;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p7, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_10719;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.1, $p21);
    goto corral_source_split_10720;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_10721;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    call {:si_unique_call 1788} devirtbounce.7($p14, $p0, $i18, $p20, $i24);
    goto SeqInstr_1363, SeqInstr_1364;

  SeqInstr_1364:
    assume assertsPassed;
    goto SeqInstr_1365;

  SeqInstr_1365:
    goto corral_source_split_10722;

  corral_source_split_10722:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_1363:
    assume !assertsPassed;
    return;

  SeqInstr_1360:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  SeqInstr_1354:
    assume !assertsPassed;
    return;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const oz_services_stop: ref;

axiom oz_services_stop == $sub.ref(0, 595255);

procedure oz_services_stop($p0: ref, $i1: i16, $i2: i32);
  free requires assertsPassed;
  modifies $M.1, $M.13, assertsPassed, $CurrAddr, $M.2, $M.16, $M.10, $M.43, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.40, $M.9;



implementation oz_services_stop($p0: ref, $i1: i16, $i2: i32)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i32;
  var $i11: i16;
  var $p12: ref;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i32;
  var $i17: i16;
  var $p18: ref;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $i22: i32;
  var $i23: i16;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i1;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $i33: i32;
  var $i34: i16;
  var $p35: ref;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $i39: i32;
  var $i40: i16;
  var $p41: ref;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $i45: i32;
  var $i46: i16;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i52: i1;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i32;
  var $i57: i16;
  var $p58: ref;
  var $p59: ref;
  var $i60: i16;
  var $i61: i32;
  var $i62: i32;
  var $i63: i16;
  var $p64: ref;
  var $p65: ref;
  var $i66: i16;
  var $i67: i32;
  var $i68: i32;
  var $i69: i16;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $i75: i1;
  var $p76: ref;
  var $i77: i16;
  var $i78: i32;
  var $i79: i32;
  var $i80: i16;
  var $p81: ref;
  var $p82: ref;
  var $i83: i16;
  var $i84: i32;
  var $i85: i32;
  var $i86: i16;
  var $p87: ref;
  var $p88: ref;
  var $i89: i16;
  var $i90: i32;
  var $i91: i32;
  var $i92: i16;
  var $p93: ref;
  var $i94: i32;
  var $i95: i32;
  var $i96: i32;
  var $i97: i1;
  var $i98: i1;
  var $p99: ref;
  var $i100: i16;
  var $i101: i32;
  var $i102: i32;
  var $i103: i16;
  var $p104: ref;
  var $p105: ref;
  var $i106: i16;
  var $i107: i32;
  var $i108: i32;
  var $i109: i16;
  var $p110: ref;
  var $p111: ref;
  var $i112: i16;
  var $i113: i32;
  var $i114: i32;
  var $i115: i16;
  var $p116: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} {:cexpr "oz_services_stop:arg:apps"} boogie_si_record_i16($i1);
    call {:si_unique_call 1794} {:cexpr "oz_services_stop:arg:pause"} boogie_si_record_i32($i2);
    goto corral_source_split_10730;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb44:
    assume 1 == 1;
    goto corral_source_split_10876;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    $i94 := $zext.i16.i32($i1);
    goto corral_source_split_10877;

  corral_source_split_10877:
    assume {:verifier.code 0} true;
    $i95 := $ashr.i32($i94, 4);
    goto corral_source_split_10878;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    $i96 := $and.i32($i95, 1);
    goto corral_source_split_10879;

  corral_source_split_10879:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 0);
    goto corral_source_split_10880;

  corral_source_split_10880:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i97 == 1);
    goto $bb46;

  $bb47:
    assume $i97 == 1;
    goto corral_source_split_10882;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} ldv_spin_lock_bh_121(g_polling_lock);
    goto SeqInstr_1405, SeqInstr_1406;

  SeqInstr_1406:
    assume assertsPassed;
    goto SeqInstr_1407;

  SeqInstr_1407:
    goto corral_source_split_10883;

  corral_source_split_10883:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i2, 0);
    goto corral_source_split_10884;

  corral_source_split_10884:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i98 == 1);
    goto corral_source_split_10895;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(40, 1));
    goto corral_source_split_10896;

  corral_source_split_10896:
    assume {:verifier.code 0} true;
    $i100 := $load.i16($M.1, $p99);
    goto corral_source_split_10897;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    $i101 := $sext.i16.i32($i100);
    goto corral_source_split_10898;

  corral_source_split_10898:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i101, $sub.i32(0, 17));
    goto corral_source_split_10899;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i16($i102);
    goto corral_source_split_10900;

  corral_source_split_10900:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(40, 1));
    goto corral_source_split_10901;

  corral_source_split_10901:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p104, $i103);
    goto corral_source_split_10902;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(42, 1));
    goto corral_source_split_10903;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    $i106 := $load.i16($M.1, $p105);
    goto corral_source_split_10904;

  corral_source_split_10904:
    assume {:verifier.code 0} true;
    $i107 := $sext.i16.i32($i106);
    goto corral_source_split_10905;

  corral_source_split_10905:
    assume {:verifier.code 0} true;
    $i108 := $and.i32($i107, $sub.i32(0, 17));
    goto corral_source_split_10906;

  corral_source_split_10906:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i32.i16($i108);
    goto corral_source_split_10907;

  corral_source_split_10907:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(42, 1));
    goto corral_source_split_10908;

  corral_source_split_10908:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p110, $i109);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1808} ldv_spin_unlock_bh_122(g_polling_lock);
    goto SeqInstr_1408, SeqInstr_1409;

  SeqInstr_1409:
    assume assertsPassed;
    goto SeqInstr_1410;

  SeqInstr_1410:
    goto corral_source_split_10910;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} oz_cdev_stop($p0, $i2);
    goto SeqInstr_1411, SeqInstr_1412;

  SeqInstr_1412:
    assume assertsPassed;
    goto SeqInstr_1413;

  SeqInstr_1413:
    goto corral_source_split_10911;

  corral_source_split_10911:
    assume {:verifier.code 0} true;
    goto $bb49;

  SeqInstr_1411:
    assume !assertsPassed;
    return;

  SeqInstr_1408:
    assume !assertsPassed;
    return;

  $bb50:
    assume $i98 == 1;
    goto corral_source_split_10886;

  corral_source_split_10886:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(42, 1));
    goto corral_source_split_10887;

  corral_source_split_10887:
    assume {:verifier.code 0} true;
    $i112 := $load.i16($M.1, $p111);
    goto corral_source_split_10888;

  corral_source_split_10888:
    assume {:verifier.code 0} true;
    $i113 := $sext.i16.i32($i112);
    goto corral_source_split_10889;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    $i114 := $or.i32($i113, 16);
    goto corral_source_split_10890;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i32.i16($i114);
    goto corral_source_split_10891;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(42, 1));
    goto corral_source_split_10892;

  corral_source_split_10892:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p116, $i115);
    goto corral_source_split_10893;

  corral_source_split_10893:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_1405:
    assume !assertsPassed;
    return;

  $bb34:
    assume 0 == 1;
    goto corral_source_split_10840;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i1);
    goto corral_source_split_10841;

  corral_source_split_10841:
    assume {:verifier.code 0} true;
    $i72 := $ashr.i32($i71, 3);
    goto corral_source_split_10842;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, 1);
    goto corral_source_split_10843;

  corral_source_split_10843:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_10844;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb36;

  $bb37:
    assume $i74 == 1;
    goto corral_source_split_10846;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} ldv_spin_lock_bh_121(g_polling_lock);
    goto SeqInstr_1396, SeqInstr_1397;

  SeqInstr_1397:
    assume assertsPassed;
    goto SeqInstr_1398;

  SeqInstr_1398:
    goto corral_source_split_10847;

  corral_source_split_10847:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i2, 0);
    goto corral_source_split_10848;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i75 == 1);
    goto corral_source_split_10859;

  corral_source_split_10859:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(40, 1));
    goto corral_source_split_10860;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    $i77 := $load.i16($M.1, $p76);
    goto corral_source_split_10861;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    $i78 := $sext.i16.i32($i77);
    goto corral_source_split_10862;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    $i79 := $and.i32($i78, $sub.i32(0, 9));
    goto corral_source_split_10863;

  corral_source_split_10863:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i32.i16($i79);
    goto corral_source_split_10864;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(40, 1));
    goto corral_source_split_10865;

  corral_source_split_10865:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p81, $i80);
    goto corral_source_split_10866;

  corral_source_split_10866:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(42, 1));
    goto corral_source_split_10867;

  corral_source_split_10867:
    assume {:verifier.code 0} true;
    $i83 := $load.i16($M.1, $p82);
    goto corral_source_split_10868;

  corral_source_split_10868:
    assume {:verifier.code 0} true;
    $i84 := $sext.i16.i32($i83);
    goto corral_source_split_10869;

  corral_source_split_10869:
    assume {:verifier.code 0} true;
    $i85 := $and.i32($i84, $sub.i32(0, 9));
    goto corral_source_split_10870;

  corral_source_split_10870:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i16($i85);
    goto corral_source_split_10871;

  corral_source_split_10871:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(42, 1));
    goto corral_source_split_10872;

  corral_source_split_10872:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p87, $i86);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} ldv_spin_unlock_bh_122(g_polling_lock);
    goto SeqInstr_1399, SeqInstr_1400;

  SeqInstr_1400:
    assume assertsPassed;
    goto SeqInstr_1401;

  SeqInstr_1401:
    call {:si_unique_call 1806} devirtbounce.8($0.ref, $p0, $i2);
    goto SeqInstr_1402, SeqInstr_1403;

  SeqInstr_1403:
    assume assertsPassed;
    goto SeqInstr_1404;

  SeqInstr_1404:
    goto corral_source_split_10874;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    goto $bb39;

  SeqInstr_1402:
    assume !assertsPassed;
    return;

  SeqInstr_1399:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i75 == 1;
    goto corral_source_split_10850;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(42, 1));
    goto corral_source_split_10851;

  corral_source_split_10851:
    assume {:verifier.code 0} true;
    $i89 := $load.i16($M.1, $p88);
    goto corral_source_split_10852;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    $i90 := $sext.i16.i32($i89);
    goto corral_source_split_10853;

  corral_source_split_10853:
    assume {:verifier.code 0} true;
    $i91 := $or.i32($i90, 8);
    goto corral_source_split_10854;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i32.i16($i91);
    goto corral_source_split_10855;

  corral_source_split_10855:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(42, 1));
    goto corral_source_split_10856;

  corral_source_split_10856:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p93, $i92);
    goto corral_source_split_10857;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    goto $bb42;

  SeqInstr_1396:
    assume !assertsPassed;
    return;

  $bb24:
    assume 0 == 1;
    goto corral_source_split_10804;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i1);
    goto corral_source_split_10805;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    $i49 := $ashr.i32($i48, 2);
    goto corral_source_split_10806;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i49, 1);
    goto corral_source_split_10807;

  corral_source_split_10807:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_10808;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb26;

  $bb27:
    assume $i51 == 1;
    goto corral_source_split_10810;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} ldv_spin_lock_bh_121(g_polling_lock);
    goto SeqInstr_1387, SeqInstr_1388;

  SeqInstr_1388:
    assume assertsPassed;
    goto SeqInstr_1389;

  SeqInstr_1389:
    goto corral_source_split_10811;

  corral_source_split_10811:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i2, 0);
    goto corral_source_split_10812;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i52 == 1);
    goto corral_source_split_10823;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(40, 1));
    goto corral_source_split_10824;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.1, $p53);
    goto corral_source_split_10825;

  corral_source_split_10825:
    assume {:verifier.code 0} true;
    $i55 := $sext.i16.i32($i54);
    goto corral_source_split_10826;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i55, $sub.i32(0, 5));
    goto corral_source_split_10827;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i16($i56);
    goto corral_source_split_10828;

  corral_source_split_10828:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(40, 1));
    goto corral_source_split_10829;

  corral_source_split_10829:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p58, $i57);
    goto corral_source_split_10830;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(42, 1));
    goto corral_source_split_10831;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.1, $p59);
    goto corral_source_split_10832;

  corral_source_split_10832:
    assume {:verifier.code 0} true;
    $i61 := $sext.i16.i32($i60);
    goto corral_source_split_10833;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i61, $sub.i32(0, 5));
    goto corral_source_split_10834;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i16($i62);
    goto corral_source_split_10835;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(42, 1));
    goto corral_source_split_10836;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p64, $i63);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} ldv_spin_unlock_bh_122(g_polling_lock);
    goto SeqInstr_1390, SeqInstr_1391;

  SeqInstr_1391:
    assume assertsPassed;
    goto SeqInstr_1392;

  SeqInstr_1392:
    call {:si_unique_call 1803} devirtbounce.8($0.ref, $p0, $i2);
    goto SeqInstr_1393, SeqInstr_1394;

  SeqInstr_1394:
    assume assertsPassed;
    goto SeqInstr_1395;

  SeqInstr_1395:
    goto corral_source_split_10838;

  corral_source_split_10838:
    assume {:verifier.code 0} true;
    goto $bb29;

  SeqInstr_1393:
    assume !assertsPassed;
    return;

  SeqInstr_1390:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i52 == 1;
    goto corral_source_split_10814;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(42, 1));
    goto corral_source_split_10815;

  corral_source_split_10815:
    assume {:verifier.code 0} true;
    $i66 := $load.i16($M.1, $p65);
    goto corral_source_split_10816;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    $i67 := $sext.i16.i32($i66);
    goto corral_source_split_10817;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    $i68 := $or.i32($i67, 4);
    goto corral_source_split_10818;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i16($i68);
    goto corral_source_split_10819;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(42, 1));
    goto corral_source_split_10820;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p70, $i69);
    goto corral_source_split_10821;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_1387:
    assume !assertsPassed;
    return;

  $bb14:
    assume 1 == 1;
    goto corral_source_split_10767;

  corral_source_split_10767:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i1);
    goto corral_source_split_10768;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    $i26 := $ashr.i32($i25, 1);
    goto corral_source_split_10769;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 1);
    goto corral_source_split_10770;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_10771;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb16;

  $bb17:
    assume $i28 == 1;
    goto corral_source_split_10773;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} ldv_spin_lock_bh_121(g_polling_lock);
    goto SeqInstr_1378, SeqInstr_1379;

  SeqInstr_1379:
    assume assertsPassed;
    goto SeqInstr_1380;

  SeqInstr_1380:
    goto corral_source_split_10774;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i2, 0);
    goto corral_source_split_10775;

  corral_source_split_10775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i29 == 1);
    goto corral_source_split_10786;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(40, 1));
    goto corral_source_split_10787;

  corral_source_split_10787:
    assume {:verifier.code 0} true;
    $i31 := $load.i16($M.1, $p30);
    goto corral_source_split_10788;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    $i32 := $sext.i16.i32($i31);
    goto corral_source_split_10789;

  corral_source_split_10789:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, $sub.i32(0, 3));
    goto corral_source_split_10790;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i16($i33);
    goto corral_source_split_10791;

  corral_source_split_10791:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(40, 1));
    goto corral_source_split_10792;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p35, $i34);
    goto corral_source_split_10793;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(42, 1));
    goto corral_source_split_10794;

  corral_source_split_10794:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.1, $p36);
    goto corral_source_split_10795;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    $i38 := $sext.i16.i32($i37);
    goto corral_source_split_10796;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, $sub.i32(0, 3));
    goto corral_source_split_10797;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i16($i39);
    goto corral_source_split_10798;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(42, 1));
    goto corral_source_split_10799;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p41, $i40);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} ldv_spin_unlock_bh_122(g_polling_lock);
    goto SeqInstr_1381, SeqInstr_1382;

  SeqInstr_1382:
    assume assertsPassed;
    goto SeqInstr_1383;

  SeqInstr_1383:
    goto corral_source_split_10801;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} oz_usb_stop($p0, $i2);
    goto SeqInstr_1384, SeqInstr_1385;

  SeqInstr_1385:
    assume assertsPassed;
    goto SeqInstr_1386;

  SeqInstr_1386:
    goto corral_source_split_10802;

  corral_source_split_10802:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_1384:
    assume !assertsPassed;
    return;

  SeqInstr_1381:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i29 == 1;
    goto corral_source_split_10777;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(42, 1));
    goto corral_source_split_10778;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.1, $p42);
    goto corral_source_split_10779;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    $i44 := $sext.i16.i32($i43);
    goto corral_source_split_10780;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    $i45 := $or.i32($i44, 2);
    goto corral_source_split_10781;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i16($i45);
    goto corral_source_split_10782;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(42, 1));
    goto corral_source_split_10783;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p47, $i46);
    goto corral_source_split_10784;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_1378:
    assume !assertsPassed;
    return;

  $bb3:
    assume 0 == 1;
    goto corral_source_split_10732;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i1);
    goto corral_source_split_10733;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 1);
    goto corral_source_split_10734;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10735;

  corral_source_split_10735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb5;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_10737;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} ldv_spin_lock_bh_121(g_polling_lock);
    goto SeqInstr_1369, SeqInstr_1370;

  SeqInstr_1370:
    assume assertsPassed;
    goto SeqInstr_1371;

  SeqInstr_1371:
    goto corral_source_split_10738;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i2, 0);
    goto corral_source_split_10739;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i6 == 1);
    goto corral_source_split_10750;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(40, 1));
    goto corral_source_split_10751;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.1, $p13);
    goto corral_source_split_10752;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    $i15 := $sext.i16.i32($i14);
    goto corral_source_split_10753;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, $sub.i32(0, 2));
    goto corral_source_split_10754;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_10755;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(40, 1));
    goto corral_source_split_10756;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p18, $i17);
    goto corral_source_split_10757;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(42, 1));
    goto corral_source_split_10758;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.1, $p19);
    goto corral_source_split_10759;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    $i21 := $sext.i16.i32($i20);
    goto corral_source_split_10760;

  corral_source_split_10760:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, $sub.i32(0, 2));
    goto corral_source_split_10761;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i16($i22);
    goto corral_source_split_10762;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(42, 1));
    goto corral_source_split_10763;

  corral_source_split_10763:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p24, $i23);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} ldv_spin_unlock_bh_122(g_polling_lock);
    goto SeqInstr_1372, SeqInstr_1373;

  SeqInstr_1373:
    assume assertsPassed;
    goto SeqInstr_1374;

  SeqInstr_1374:
    call {:si_unique_call 1797} devirtbounce.8($0.ref, $p0, $i2);
    goto SeqInstr_1375, SeqInstr_1376;

  SeqInstr_1376:
    assume assertsPassed;
    goto SeqInstr_1377;

  SeqInstr_1377:
    goto corral_source_split_10765;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_1375:
    assume !assertsPassed;
    return;

  SeqInstr_1372:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i6 == 1;
    goto corral_source_split_10741;

  corral_source_split_10741:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(42, 1));
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.1, $p7);
    goto corral_source_split_10743;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    $i9 := $sext.i16.i32($i8);
    goto corral_source_split_10744;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, 1);
    goto corral_source_split_10745;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_10746;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(42, 1));
    goto corral_source_split_10747;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p12, $i11);
    goto corral_source_split_10748;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_1369:
    assume !assertsPassed;
    return;
}



const oz_pd_set_state: ref;

axiom oz_pd_set_state == $sub.ref(0, 596287);

procedure oz_pd_set_state($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation oz_pd_set_state($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1810} {:cexpr "oz_pd_set_state:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_10913;

  corral_source_split_10913:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1232)), $mul.ref(28, 1));
    goto corral_source_split_10914;

  corral_source_split_10914:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, $i1);
    goto corral_source_split_10915;

  corral_source_split_10915:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 1);
    goto corral_source_split_10916;

  corral_source_split_10916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 2);
    goto corral_source_split_10920;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 8);
    goto corral_source_split_10924;

  corral_source_split_10924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 4);
    goto corral_source_split_10928;

  corral_source_split_10928:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i6 == 1;
    goto corral_source_split_10930;

  corral_source_split_10930:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb9:
    assume $i5 == 1;
    goto corral_source_split_10926;

  corral_source_split_10926:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb5:
    assume $i4 == 1;
    goto corral_source_split_10922;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10918;

  corral_source_split_10918:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb18;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_g_binding_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_g_binding_lock == $sub.ref(0, 597319);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_g_binding_lock();
  free requires assertsPassed;
  modifies $M.99, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_g_binding_lock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10932;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    $i0 := $M.99;
    goto corral_source_split_10933;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_10934;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10935;

  corral_source_split_10935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_1414, SeqInstr_1415;

  SeqInstr_1415:
    assume assertsPassed;
    goto SeqInstr_1416;

  SeqInstr_1416:
    goto corral_source_split_10936;

  corral_source_split_10936:
    assume {:verifier.code 0} true;
    $i3 := $M.99;
    goto corral_source_split_10937;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_10938;

  corral_source_split_10938:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_10939;

  corral_source_split_10939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} ldv_assume($i5);
    goto corral_source_split_10940;

  corral_source_split_10940:
    assume {:verifier.code 0} true;
    $M.99 := 1;
    call {:si_unique_call 1813} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_g_binding_lock"} boogie_si_record_i32(1);
    goto corral_source_split_10941;

  corral_source_split_10941:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1414:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_g_binding_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_g_binding_lock == $sub.ref(0, 598351);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_g_binding_lock();
  free requires assertsPassed;
  modifies $M.99, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_g_binding_lock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10943;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    $i0 := $M.99;
    goto corral_source_split_10944;

  corral_source_split_10944:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_10945;

  corral_source_split_10945:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10946;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1814} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_1417, SeqInstr_1418;

  SeqInstr_1418:
    assume assertsPassed;
    goto SeqInstr_1419;

  SeqInstr_1419:
    goto corral_source_split_10947;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    $i3 := $M.99;
    goto corral_source_split_10948;

  corral_source_split_10948:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_10949;

  corral_source_split_10949:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_10950;

  corral_source_split_10950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} ldv_assume($i5);
    goto corral_source_split_10951;

  corral_source_split_10951:
    assume {:verifier.code 0} true;
    $M.99 := 2;
    call {:si_unique_call 1816} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_g_binding_lock"} boogie_si_record_i32(2);
    goto corral_source_split_10952;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1417:
    assume !assertsPassed;
    return;
}



const oz_pkt_recv: ref;

axiom oz_pkt_recv == $sub.ref(0, 599383);

procedure oz_pkt_recv($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);



const dev_get_by_name: ref;

axiom dev_get_by_name == $sub.ref(0, 600415);

procedure dev_get_by_name($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_by_name($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10954;

  corral_source_split_10954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} $p2 := external_alloc();
    goto corral_source_split_10955;

  corral_source_split_10955:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_10956;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const dev_add_pack: ref;

axiom dev_add_pack == $sub.ref(0, 601447);

procedure dev_add_pack($p0: ref);
  free requires assertsPassed;



implementation dev_add_pack($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10958;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    return;
}



const skb_share_check: ref;

axiom skb_share_check == $sub.ref(0, 602479);

procedure skb_share_check($p0: ref, $i1: i32) returns ($r: ref);



const ldv_spin_lock_bh_151___0: ref;

axiom ldv_spin_lock_bh_151___0 == $sub.ref(0, 603511);

procedure ldv_spin_lock_bh_151___0($p0: ref);



const __skb_queue_head: ref;

axiom __skb_queue_head == $sub.ref(0, 604543);

procedure __skb_queue_head($p0: ref, $p1: ref);



const ldv_spin_unlock_bh_152___0: ref;

axiom ldv_spin_unlock_bh_152___0 == $sub.ref(0, 605575);

procedure ldv_spin_unlock_bh_152___0($p0: ref);



const oz_rx_frame: ref;

axiom oz_rx_frame == $sub.ref(0, 606607);

procedure oz_rx_frame($p0: ref);



const skb_queue_empty: ref;

axiom skb_queue_empty == $sub.ref(0, 607639);

procedure skb_queue_empty($p0: ref) returns ($r: i32);



const __skb_dequeue: ref;

axiom __skb_dequeue == $sub.ref(0, 608671);

procedure __skb_dequeue($p0: ref) returns ($r: ref);



const skb_peek: ref;

axiom skb_peek == $sub.ref(0, 609703);

procedure skb_peek($p0: ref) returns ($r: ref);



const __skb_unlink: ref;

axiom __skb_unlink == $sub.ref(0, 610735);

procedure __skb_unlink($p0: ref, $p1: ref);



const skb_network_header: ref;

axiom skb_network_header == $sub.ref(0, 611767);

procedure skb_network_header($p0: ref) returns ($r: ref);



const skb_mac_header: ref;

axiom skb_mac_header == $sub.ref(0, 612799);

procedure skb_mac_header($p0: ref) returns ($r: ref);



const get_unaligned_le32: ref;

axiom get_unaligned_le32 == $sub.ref(0, 613831);

procedure get_unaligned_le32($p0: ref) returns ($r: i32);



const oz_pd_find: ref;

axiom oz_pd_find == $sub.ref(0, 614863);

procedure oz_pd_find($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.13, $M.1, assertsPassed;



implementation oz_pd_find($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p6: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10960;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1818} ldv_spin_lock_bh_121(g_polling_lock);
    goto SeqInstr_1420, SeqInstr_1421;

  SeqInstr_1421:
    assume assertsPassed;
    goto SeqInstr_1422;

  SeqInstr_1422:
    goto corral_source_split_10961;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.1, g_pd_list);
    goto corral_source_split_10962;

  corral_source_split_10962:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_10963;

  corral_source_split_10963:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1232)), $mul.ref(0, 1));
    goto corral_source_split_10964;

  corral_source_split_10964:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_10965;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, $p2i.ref.i64(g_pd_list));
    goto corral_source_split_10966;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1823} ldv_spin_unlock_bh_122(g_polling_lock);
    goto SeqInstr_1426, SeqInstr_1427;

  SeqInstr_1427:
    assume assertsPassed;
    goto SeqInstr_1428;

  SeqInstr_1428:
    goto corral_source_split_10993;

  corral_source_split_10993:
    assume {:verifier.code 0} true;
    $p13 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_10982;

  corral_source_split_10982:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  SeqInstr_1426:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_10968;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    $p6 := $p1;
    goto $bb4;

  $bb4:
    call $p7, $p8, $i9, $i10, $i11, $p12, $p15, $p16, $p17, $p18, $i19, $i20, $p6 := oz_pd_find_loop_$bb4($p0, $p7, $p8, $i9, $i10, $i11, $p12, $p15, $p16, $p17, $p18, $i19, $i20, $p6);
    goto $bb4_last;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1232)), $mul.ref(20, 1));
    goto corral_source_split_10972;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_10973;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} $i9 := ether_addr_equal($p8, $p0);
    goto corral_source_split_10974;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 1820} {:cexpr "tmp"} boogie_si_record_i8($i10);
    goto corral_source_split_10975;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_10976;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    $p12 := $p6;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1232)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_10984;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_10985;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_10986;

  corral_source_split_10986:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 1232)), $mul.ref(0, 1));
    goto corral_source_split_10987;

  corral_source_split_10987:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_10988;

  corral_source_split_10988:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, $p2i.ref.i64(g_pd_list));
    goto corral_source_split_10989;

  corral_source_split_10989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    goto corral_source_split_10991;

  corral_source_split_10991:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $p6 := $p16;
    goto $bb10_dummy;

  $bb6:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_10978;

  corral_source_split_10978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} oz_pd_get($p12);
    goto corral_source_split_10979;

  corral_source_split_10979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} ldv_spin_unlock_bh_122(g_polling_lock);
    goto SeqInstr_1423, SeqInstr_1424;

  SeqInstr_1424:
    assume assertsPassed;
    goto SeqInstr_1425;

  SeqInstr_1425:
    goto corral_source_split_10980;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb8;

  SeqInstr_1423:
    assume !assertsPassed;
    return;

  SeqInstr_1420:
    assume !assertsPassed;
    return;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10970;
}



const oz_retire_tx_frames: ref;

axiom oz_retire_tx_frames == $sub.ref(0, 615895);

procedure oz_retire_tx_frames($p0: ref, $i1: i8);



const oz_send_queued_frames: ref;

axiom oz_send_queued_frames == $sub.ref(0, 616927);

procedure oz_send_queued_frames($p0: ref, $i1: i32);



const oz_connect_req: ref;

axiom oz_connect_req == $sub.ref(0, 617959);

procedure oz_connect_req($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref);



const oz_pd_sleep: ref;

axiom oz_pd_sleep == $sub.ref(0, 618991);

procedure oz_pd_sleep($p0: ref) returns ($r: i32);



const ldv_spin_lock_122: ref;

axiom ldv_spin_lock_122 == $sub.ref(0, 620023);

procedure ldv_spin_lock_122($p0: ref);



const pd_set_keepalive: ref;

axiom pd_set_keepalive == $sub.ref(0, 621055);

procedure pd_set_keepalive($p0: ref, $i1: i8);



const pd_set_presleep: ref;

axiom pd_set_presleep == $sub.ref(0, 622087);

procedure pd_set_presleep($p0: ref, $i1: i8, $i2: i8);



const ldv_spin_unlock_121: ref;

axiom ldv_spin_unlock_121 == $sub.ref(0, 623119);

procedure ldv_spin_unlock_121($p0: ref);



const oz_add_farewell: ref;

axiom oz_add_farewell == $sub.ref(0, 624151);

procedure oz_add_farewell($p0: ref, $i1: i8, $i2: i8, $p3: ref, $i4: i8);



const oz_handle_app_elt: ref;

axiom oz_handle_app_elt == $sub.ref(0, 625183);

procedure oz_handle_app_elt($p0: ref, $i1: i8, $p2: ref);



const consume_skb: ref;

axiom consume_skb == $sub.ref(0, 626215);

procedure consume_skb($p0: ref);



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 627247);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);



const oz_pd_alloc: ref;

axiom oz_pd_alloc == $sub.ref(0, 628279);

procedure oz_pd_alloc($p0: ref) returns ($r: ref);



const dev_hold: ref;

axiom dev_hold == $sub.ref(0, 629311);

procedure dev_hold($p0: ref);



const oz_get_new_session_id: ref;

axiom oz_get_new_session_id == $sub.ref(0, 630343);

procedure oz_get_new_session_id($i0: i8) returns ($r: i8);



const oz_services_start: ref;

axiom oz_services_start == $sub.ref(0, 631375);

procedure oz_services_start($p0: ref, $i1: i16, $i2: i32) returns ($r: i32);



const oz_send_conn_rsp: ref;

axiom oz_send_conn_rsp == $sub.ref(0, 632407);

procedure oz_send_conn_rsp($p0: ref, $i1: i8);



const oz_elt_buf_init: ref;

axiom oz_elt_buf_init == $sub.ref(0, 633439);

procedure oz_elt_buf_init($p0: ref);



const oz_pd_heartbeat_handler: ref;

axiom oz_pd_heartbeat_handler == $sub.ref(0, 634471);

procedure oz_pd_heartbeat_handler($i0: i64);



const oz_pd_timeout_handler: ref;

axiom oz_pd_timeout_handler == $sub.ref(0, 635503);

procedure oz_pd_timeout_handler($i0: i64);



const hrtimer_init: ref;

axiom hrtimer_init == $sub.ref(0, 636535);

procedure hrtimer_init($p0: ref, $i1: i32, $i2: i32);



const oz_pd_heartbeat_event: ref;

axiom oz_pd_heartbeat_event == $sub.ref(0, 637567);

procedure oz_pd_heartbeat_event($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.33, $M.103, $M.104, $M.105, $M.1, $CurrAddr, $M.106, $M.107, $M.12, $M.13, assertsPassed;



implementation oz_pd_heartbeat_event($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p19: ref;
  var cmdloc_dummy_var_124: [ref]i8;
  var cmdloc_dummy_var_125: [ref]i8;
  var cmdloc_dummy_var_126: [ref]i8;
  var vslice_dummy_var_184: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_10995;

  corral_source_split_10995:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_10996;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 872), 1232));
    goto corral_source_split_10997;

  corral_source_split_10997:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 872), 1232)), $mul.ref(88, 1));
    goto corral_source_split_10998;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.1, $p5);
    goto corral_source_split_10999;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    $i7 := $udiv.i64($i6, 1000);
    goto corral_source_split_11000;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 872), 1232)), $mul.ref(88, 1));
    goto corral_source_split_11001;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.1, $p8);
    goto corral_source_split_11002;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    $i10 := $urem.i64($i9, 1000);
    goto corral_source_split_11003;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    $i11 := $mul.i64($i10, 1000000);
    goto corral_source_split_11004;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1826} $i12 := ktime_set($i7, $i11);
    goto corral_source_split_11005;

  corral_source_split_11005:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_11006;

  corral_source_split_11006:
    assume {:verifier.code 0} true;
    $M.103 := $store.i64($M.103, $p13, $i12);
    goto corral_source_split_11007;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p1);
    goto corral_source_split_11008;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p2);
    goto corral_source_split_11009;

  corral_source_split_11009:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_124 := $M.103;
    cmdloc_dummy_var_125 := $M.103;
    call {:si_unique_call 1827} cmdloc_dummy_var_126 := $memcpy.i8(cmdloc_dummy_var_124, cmdloc_dummy_var_125, $p14, $p15, 8, $zext.i32.i64(8), 0 == 1);
    $M.103 := cmdloc_dummy_var_126;
    goto corral_source_split_11010;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_11011;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.103, $p16);
    goto corral_source_split_11012;

  corral_source_split_11012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} vslice_dummy_var_184 := hrtimer_forward_now($p0, $i17);
    goto corral_source_split_11013;

  corral_source_split_11013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} oz_pd_get($p4);
    goto corral_source_split_11014;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 872), 1232)), $mul.ref(1072, 1));
    goto corral_source_split_11015;

  corral_source_split_11015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1830} tasklet_schedule($p19);
    goto SeqInstr_1429, SeqInstr_1430;

  SeqInstr_1430:
    assume assertsPassed;
    goto SeqInstr_1431;

  SeqInstr_1431:
    goto corral_source_split_11016;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  SeqInstr_1429:
    assume !assertsPassed;
    return;
}



const oz_pd_timeout_event: ref;

axiom oz_pd_timeout_event == $sub.ref(0, 638599);

procedure oz_pd_timeout_event($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.12, $M.13, assertsPassed;



implementation oz_pd_timeout_event($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11018;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_11019;

  corral_source_split_11019:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 968), 1232));
    goto corral_source_split_11020;

  corral_source_split_11020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} oz_pd_get($p2);
    goto corral_source_split_11021;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 968), 1232)), $mul.ref(1112, 1));
    goto corral_source_split_11022;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} tasklet_schedule($p3);
    goto SeqInstr_1432, SeqInstr_1433;

  SeqInstr_1433:
    assume assertsPassed;
    goto SeqInstr_1434;

  SeqInstr_1434:
    goto corral_source_split_11023;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_1432:
    assume !assertsPassed;
    return;
}



const hrtimer_forward_now: ref;

axiom hrtimer_forward_now == $sub.ref(0, 639631);

procedure hrtimer_forward_now($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.104, $M.105, $M.106, $M.107, $CurrAddr;



implementation hrtimer_forward_now($p0: ref, $i1: i64) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var cmdloc_dummy_var_127: [ref]i8;
  var cmdloc_dummy_var_128: [ref]i8;
  var cmdloc_dummy_var_129: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.104 := $store.i64($M.104, $p5, $i1);
    goto corral_source_split_11025;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_11026;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_11027;

  corral_source_split_11027:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_11028;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    call {:si_unique_call 1836} $i10 := devirtbounce.11($p9);
    goto corral_source_split_11029;

  corral_source_split_11029:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_11030;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    $M.105 := $store.i64($M.105, $p11, $i10);
    goto corral_source_split_11031;

  corral_source_split_11031:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_11032;

  corral_source_split_11032:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p4);
    goto corral_source_split_11033;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_127 := $M.105;
    cmdloc_dummy_var_128 := $M.105;
    call {:si_unique_call 1837} cmdloc_dummy_var_129 := $memcpy.i8(cmdloc_dummy_var_127, cmdloc_dummy_var_128, $p12, $p13, 8, $zext.i32.i64(8), 0 == 1);
    $M.105 := cmdloc_dummy_var_129;
    goto corral_source_split_11034;

  corral_source_split_11034:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_11035;

  corral_source_split_11035:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.105, $p14);
    goto corral_source_split_11036;

  corral_source_split_11036:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_11037;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.104, $p16);
    goto corral_source_split_11038;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} $i18 := hrtimer_forward($p0, $i15, $i17);
    call {:si_unique_call 1839} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_11039;

  corral_source_split_11039:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;
}



const hrtimer_forward: ref;

axiom hrtimer_forward == $sub.ref(0, 640663);

procedure hrtimer_forward($p0: ref, $i1: i64, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.106, $M.107, $CurrAddr;



implementation hrtimer_forward($p0: ref, $i1: i64, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 1} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1841} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.106 := $store.i64($M.106, $p5, $i1);
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.107 := $store.i64($M.107, $p6, $i2);
    goto corral_source_split_11041;

  corral_source_split_11041:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1842} $i7 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1843} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i7);
    goto corral_source_split_11042;

  corral_source_split_11042:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const oz_pd_heartbeat: ref;

axiom oz_pd_heartbeat == $sub.ref(0, 641695);

procedure oz_pd_heartbeat($p0: ref, $i1: i16);



const oz_send_isoc_frame: ref;

axiom oz_send_isoc_frame == $sub.ref(0, 642727);

procedure oz_send_isoc_frame($p0: ref) returns ($r: i32);



const oz_select_elts_for_tx: ref;

axiom oz_select_elts_for_tx == $sub.ref(0, 643759);

procedure oz_select_elts_for_tx($p0: ref, $i1: i8, $p2: ref, $i3: i32, $p4: ref) returns ($r: i32);



const oz_elt_info_free_chain: ref;

axiom oz_elt_info_free_chain == $sub.ref(0, 644791);

procedure oz_elt_info_free_chain($p0: ref, $p1: ref);



const oz_prepare_frame: ref;

axiom oz_prepare_frame == $sub.ref(0, 645823);

procedure oz_prepare_frame($p0: ref, $i1: i32) returns ($r: i32);



const oz_send_next_queued_frame: ref;

axiom oz_send_next_queued_frame == $sub.ref(0, 646855);

procedure oz_send_next_queued_frame($p0: ref, $i1: i32) returns ($r: i32);



const oz_set_more_bit: ref;

axiom oz_set_more_bit == $sub.ref(0, 647887);

procedure oz_set_more_bit($p0: ref);



const oz_set_last_pkt_nb: ref;

axiom oz_set_last_pkt_nb == $sub.ref(0, 648919);

procedure oz_set_last_pkt_nb($p0: ref, $p1: ref);



const oz_build_frame: ref;

axiom oz_build_frame == $sub.ref(0, 649951);

procedure oz_build_frame($p0: ref, $p1: ref) returns ($r: ref);



const oz_are_elts_available: ref;

axiom oz_are_elts_available == $sub.ref(0, 650983);

procedure oz_are_elts_available($p0: ref) returns ($r: i32);



const list_cut_position: ref;

axiom list_cut_position == $sub.ref(0, 652015);

procedure list_cut_position($p0: ref, $p1: ref, $p2: ref);



const list_is_singular: ref;

axiom list_is_singular == $sub.ref(0, 653047);

procedure list_is_singular($p0: ref) returns ($r: i32);



const __list_cut_position: ref;

axiom __list_cut_position == $sub.ref(0, 654079);

procedure __list_cut_position($p0: ref, $p1: ref, $p2: ref);



const __le32_to_cpup: ref;

axiom __le32_to_cpup == $sub.ref(0, 655111);

procedure __le32_to_cpup($p0: ref) returns ($r: i32);



const ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_sk_buff_head: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_sk_buff_head == $sub.ref(0, 656143);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_sk_buff_head();



const __skb_queue_after: ref;

axiom __skb_queue_after == $sub.ref(0, 657175);

procedure __skb_queue_after($p0: ref, $p1: ref, $p2: ref);



const __skb_insert: ref;

axiom __skb_insert == $sub.ref(0, 658207);

procedure __skb_insert($p0: ref, $p1: ref, $p2: ref, $p3: ref);



const ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_sk_buff_head: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_sk_buff_head == $sub.ref(0, 659239);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_sk_buff_head();



const is_zero_ether_addr: ref;

axiom is_zero_ether_addr == $sub.ref(0, 660271);

procedure is_zero_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_zero_ether_addr($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11044;

  corral_source_split_11044:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_11045;

  corral_source_split_11045:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.1, $p1);
    goto corral_source_split_11046;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_11047;

  corral_source_split_11047:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(4, 2));
    goto corral_source_split_11048;

  corral_source_split_11048:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.1, $p4);
    goto corral_source_split_11049;

  corral_source_split_11049:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_11050;

  corral_source_split_11050:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i2, $i6);
    goto corral_source_split_11051;

  corral_source_split_11051:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_11052;

  corral_source_split_11052:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const might_fault: ref;

axiom might_fault == $sub.ref(0, 661303);

procedure might_fault();
  free requires assertsPassed;



implementation might_fault()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11054;

  corral_source_split_11054:
    assume {:verifier.code 0} true;
    return;
}



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 662335);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1844} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_11056;

  corral_source_split_11056:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1845} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1846} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_11057;

  corral_source_split_11057:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_from_user_overflow: ref;

axiom __copy_from_user_overflow == $sub.ref(0, 663367);

procedure __copy_from_user_overflow();
  free requires assertsPassed;



implementation __copy_from_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11059;

  corral_source_split_11059:
    assume {:verifier.code 0} true;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 664399);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1847} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_11061;

  corral_source_split_11061:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1848} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1849} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_11062;

  corral_source_split_11062:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_to_user_overflow: ref;

axiom __copy_to_user_overflow == $sub.ref(0, 665431);

procedure __copy_to_user_overflow();
  free requires assertsPassed;



implementation __copy_to_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11064;

  corral_source_split_11064:
    assume {:verifier.code 0} true;
    return;
}



const poll_wait: ref;

axiom poll_wait == $sub.ref(0, 666463);

procedure poll_wait($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation poll_wait($p0: ref, $p1: ref, $p2: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11066;

  corral_source_split_11066:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_11067;

  corral_source_split_11067:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_11068;

  corral_source_split_11068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_11070;

  corral_source_split_11070:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11071;

  corral_source_split_11071:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.5, $p5);
    goto corral_source_split_11072;

  corral_source_split_11072:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_11073;

  corral_source_split_11073:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_11074;

  corral_source_split_11074:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_11076;

  corral_source_split_11076:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_11077;

  corral_source_split_11077:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_11078;

  corral_source_split_11078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_11080;

  corral_source_split_11080:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11081;

  corral_source_split_11081:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.5, $p11);
    call {:si_unique_call 1850} devirtbounce.13($p12, $p0, $p1, $p2);
    goto corral_source_split_11082;

  corral_source_split_11082:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const ldv_spin_lock_128___0: ref;

axiom ldv_spin_lock_128___0 == $sub.ref(0, 667495);

procedure ldv_spin_lock_128___0($p0: ref);
  free requires assertsPassed;
  modifies $M.9, assertsPassed;



implementation ldv_spin_lock_128___0($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11084;

  corral_source_split_11084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1851} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_oz_elt_buf();
    goto SeqInstr_1435, SeqInstr_1436;

  SeqInstr_1436:
    assume assertsPassed;
    goto SeqInstr_1437;

  SeqInstr_1437:
    goto corral_source_split_11085;

  corral_source_split_11085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1852} spin_lock($p0);
    goto corral_source_split_11086;

  corral_source_split_11086:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1435:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_129___0: ref;

axiom ldv_spin_unlock_129___0 == $sub.ref(0, 668527);

procedure ldv_spin_unlock_129___0($p0: ref);
  free requires assertsPassed;
  modifies $M.9, assertsPassed;



implementation ldv_spin_unlock_129___0($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11088;

  corral_source_split_11088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1853} ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_oz_elt_buf();
    goto SeqInstr_1438, SeqInstr_1439;

  SeqInstr_1439:
    assume assertsPassed;
    goto SeqInstr_1440;

  SeqInstr_1440:
    goto corral_source_split_11089;

  corral_source_split_11089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} spin_unlock($p0);
    goto corral_source_split_11090;

  corral_source_split_11090:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1438:
    assume !assertsPassed;
    return;
}



const ldv_create_class: ref;

axiom ldv_create_class == $sub.ref(0, 669559);

procedure ldv_create_class() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.109, assertsPassed;



implementation ldv_create_class() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11092;

  corral_source_split_11092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1855} $p0 := ldv_linux_drivers_base_class_create_class();
    goto SeqInstr_1441, SeqInstr_1442;

  SeqInstr_1442:
    assume assertsPassed;
    goto SeqInstr_1443;

  SeqInstr_1443:
    goto corral_source_split_11093;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} $p1 := ldv_linux_usb_gadget_create_class();
    goto SeqInstr_1444, SeqInstr_1445;

  SeqInstr_1445:
    assume assertsPassed;
    goto SeqInstr_1446;

  SeqInstr_1446:
    goto corral_source_split_11094;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_11095;

  corral_source_split_11095:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_11096;

  corral_source_split_11096:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i2, $i3);
    goto corral_source_split_11097;

  corral_source_split_11097:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_11098;

  corral_source_split_11098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1857} ldv_assume($i5);
    goto corral_source_split_11099;

  corral_source_split_11099:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;

  SeqInstr_1444:
    assume !assertsPassed;
    return;

  SeqInstr_1441:
    assume !assertsPassed;
    return;
}



const ldv_linux_drivers_base_class_create_class: ref;

axiom ldv_linux_drivers_base_class_create_class == $sub.ref(0, 670591);

procedure ldv_linux_drivers_base_class_create_class() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.109, assertsPassed;



implementation ldv_linux_drivers_base_class_create_class() returns ($r: ref)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i32;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11101;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} $p0 := ldv_undef_ptr();
    goto corral_source_split_11102;

  corral_source_split_11102:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_11103;

  corral_source_split_11103:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i1);
    goto corral_source_split_11104;

  corral_source_split_11104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} ldv_assume($i2);
    goto corral_source_split_11105;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} $i3 := ldv_is_err($p0);
    call {:si_unique_call 1861} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_11106;

  corral_source_split_11106:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_11107;

  corral_source_split_11107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_11109;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    $i5 := $M.109;
    goto corral_source_split_11110;

  corral_source_split_11110:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_11111;

  corral_source_split_11111:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_11112;

  corral_source_split_11112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} ldv_assert_linux_drivers_base_class__double_registration($i7);
    goto SeqInstr_1447, SeqInstr_1448;

  SeqInstr_1448:
    assume assertsPassed;
    goto SeqInstr_1449;

  SeqInstr_1449:
    goto corral_source_split_11113;

  corral_source_split_11113:
    assume {:verifier.code 0} true;
    $M.109 := 1;
    call {:si_unique_call 1863} {:cexpr "ldv_linux_drivers_base_class_usb_gadget_class"} boogie_si_record_i32(1);
    goto corral_source_split_11114;

  corral_source_split_11114:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1447:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_gadget_create_class: ref;

axiom ldv_linux_usb_gadget_create_class == $sub.ref(0, 671623);

procedure ldv_linux_usb_gadget_create_class() returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_create_class() returns ($r: ref)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i32;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11116;

  corral_source_split_11116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1864} $p0 := ldv_undef_ptr();
    goto corral_source_split_11117;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_11118;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i1);
    goto corral_source_split_11119;

  corral_source_split_11119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1865} ldv_assume($i2);
    goto corral_source_split_11120;

  corral_source_split_11120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} $i3 := ldv_is_err($p0);
    call {:si_unique_call 1867} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_11121;

  corral_source_split_11121:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_11122;

  corral_source_split_11122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_11124;

  corral_source_split_11124:
    assume {:verifier.code 0} true;
    $i5 := $M.110;
    goto corral_source_split_11125;

  corral_source_split_11125:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_11126;

  corral_source_split_11126:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_11127;

  corral_source_split_11127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1868} ldv_assert_linux_usb_gadget__class_registration_with_usb_gadget($i7);
    goto SeqInstr_1450, SeqInstr_1451;

  SeqInstr_1451:
    assume assertsPassed;
    goto SeqInstr_1452;

  SeqInstr_1452:
    goto corral_source_split_11128;

  corral_source_split_11128:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1450:
    assume !assertsPassed;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 672655);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11130;

  corral_source_split_11130:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1869} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 1870} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_11131;

  corral_source_split_11131:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_assert_linux_usb_gadget__class_registration_with_usb_gadget: ref;

axiom ldv_assert_linux_usb_gadget__class_registration_with_usb_gadget == $sub.ref(0, 673687);

procedure ldv_assert_linux_usb_gadget__class_registration_with_usb_gadget($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_gadget__class_registration_with_usb_gadget($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} {:cexpr "ldv_assert_linux_usb_gadget__class_registration_with_usb_gadget:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11133;

  corral_source_split_11133:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11134;

  corral_source_split_11134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11136;

  corral_source_split_11136:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1872} __VERIFIER_error();
    goto SeqInstr_1453, SeqInstr_1454;

  SeqInstr_1454:
    assume assertsPassed;
    goto SeqInstr_1455;

  SeqInstr_1455:
    goto corral_source_split_11137;

  corral_source_split_11137:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1453:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_drivers_base_class__double_registration: ref;

axiom ldv_assert_linux_drivers_base_class__double_registration == $sub.ref(0, 674719);

procedure ldv_assert_linux_drivers_base_class__double_registration($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_drivers_base_class__double_registration($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} {:cexpr "ldv_assert_linux_drivers_base_class__double_registration:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11139;

  corral_source_split_11139:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11140;

  corral_source_split_11140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11142;

  corral_source_split_11142:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1874} __VERIFIER_error();
    goto SeqInstr_1456, SeqInstr_1457;

  SeqInstr_1457:
    assume assertsPassed;
    goto SeqInstr_1458;

  SeqInstr_1458:
    goto corral_source_split_11143;

  corral_source_split_11143:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1456:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_undef_int_nonpositive: ref;

axiom ldv_undef_int_nonpositive == $sub.ref(0, 675751);

procedure ldv_undef_int_nonpositive() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int_nonpositive() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11145;

  corral_source_split_11145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} $i0 := ldv_undef_int();
    call {:si_unique_call 1876} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_11146;

  corral_source_split_11146:
    assume {:verifier.code 0} true;
    $i1 := $sle.i32($i0, 0);
    goto corral_source_split_11147;

  corral_source_split_11147:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11148;

  corral_source_split_11148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} ldv_assume($i2);
    goto corral_source_split_11149;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_EMGentry_exit_ozwpan_exit_9_2: ref;

axiom ldv_EMGentry_exit_ozwpan_exit_9_2 == $sub.ref(0, 676783);

procedure ldv_EMGentry_exit_ozwpan_exit_9_2($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.99, $M.13, $M.12, assertsPassed, $M.112, $M.2, $M.16, $CurrAddr, $M.10, $M.109, $M.15, $M.9, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.43, $M.40, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_EMGentry_exit_ozwpan_exit_9_2($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11151;

  corral_source_split_11151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1878} ozwpan_exit();
    goto SeqInstr_1459, SeqInstr_1460;

  SeqInstr_1460:
    assume assertsPassed;
    goto SeqInstr_1461;

  SeqInstr_1461:
    goto corral_source_split_11152;

  corral_source_split_11152:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1459:
    assume !assertsPassed;
    return;
}



const ozwpan_exit: ref;

axiom ozwpan_exit == $sub.ref(0, 677815);

procedure ozwpan_exit();
  free requires assertsPassed;
  modifies $M.1, $M.99, $M.13, $M.12, assertsPassed, $M.112, $M.2, $M.16, $CurrAddr, $M.10, $M.109, $M.15, $M.9, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.43, $M.40, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ozwpan_exit()
{
  var vslice_dummy_var_185: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11154;

  corral_source_split_11154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} oz_protocol_term();
    goto SeqInstr_1462, SeqInstr_1463;

  SeqInstr_1463:
    assume assertsPassed;
    goto SeqInstr_1464;

  SeqInstr_1464:
    goto corral_source_split_11155;

  corral_source_split_11155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1880} oz_apps_term();
    goto SeqInstr_1465, SeqInstr_1466;

  SeqInstr_1466:
    assume assertsPassed;
    goto SeqInstr_1467;

  SeqInstr_1467:
    goto corral_source_split_11156;

  corral_source_split_11156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} vslice_dummy_var_185 := oz_cdev_deregister();
    goto SeqInstr_1468, SeqInstr_1469;

  SeqInstr_1469:
    assume assertsPassed;
    goto SeqInstr_1470;

  SeqInstr_1470:
    goto corral_source_split_11157;

  corral_source_split_11157:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1468:
    assume !assertsPassed;
    return;

  SeqInstr_1465:
    assume !assertsPassed;
    return;

  SeqInstr_1462:
    assume !assertsPassed;
    return;
}



const oz_protocol_term: ref;

axiom oz_protocol_term == $sub.ref(0, 678847);

procedure oz_protocol_term();
  free requires assertsPassed;
  modifies $M.1, $M.99, $M.13, assertsPassed, $M.2, $M.16, $CurrAddr, $M.10, $M.15, $M.9, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.43, $M.40, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation oz_protocol_term()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p11: ref;
  var $p12: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11159;

  corral_source_split_11159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1882} ldv_spin_lock_bh_132___0(g_binding_lock);
    goto SeqInstr_1471, SeqInstr_1472;

  SeqInstr_1472:
    assume assertsPassed;
    goto SeqInstr_1473;

  SeqInstr_1473:
    goto corral_source_split_11160;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.1, g_binding);
    goto corral_source_split_11161;

  corral_source_split_11161:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_11162;

  corral_source_split_11162:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 88), 104));
    goto corral_source_split_11163;

  corral_source_split_11163:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 88), 104)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_11164;

  corral_source_split_11164:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_11165;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_11166;

  corral_source_split_11166:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref($sub.ref(0, 88), 104));
    goto corral_source_split_11167;

  corral_source_split_11167:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 88), 104)), $mul.ref(88, 1));
    goto corral_source_split_11168;

  corral_source_split_11168:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_11169;

  corral_source_split_11169:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, $p2i.ref.i64(g_binding));
    goto corral_source_split_11170;

  corral_source_split_11170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} ldv_spin_unlock_bh_133___0(g_binding_lock);
    goto SeqInstr_1483, SeqInstr_1484;

  SeqInstr_1484:
    assume assertsPassed;
    goto SeqInstr_1485;

  SeqInstr_1485:
    goto corral_source_split_11204;

  corral_source_split_11204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1890} ldv_spin_lock_bh_121(g_polling_lock);
    goto SeqInstr_1486, SeqInstr_1487;

  SeqInstr_1487:
    assume assertsPassed;
    goto SeqInstr_1488;

  SeqInstr_1488:
    goto corral_source_split_11205;

  corral_source_split_11205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} $i32 := list_empty(g_pd_list);
    call {:si_unique_call 1892} {:cexpr "tmp"} boogie_si_record_i32($i32);
    goto corral_source_split_11206;

  corral_source_split_11206:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_11207;

  corral_source_split_11207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} ldv_spin_unlock_bh_122(g_polling_lock);
    goto SeqInstr_1498, SeqInstr_1499;

  SeqInstr_1499:
    assume assertsPassed;
    goto SeqInstr_1500;

  SeqInstr_1500:
    goto corral_source_split_11223;

  corral_source_split_11223:
    assume {:verifier.code 0} true;
    $p38 := $M.8;
    goto corral_source_split_11224;

  corral_source_split_11224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1901} kmem_cache_destroy($p38);
    goto corral_source_split_11225;

  corral_source_split_11225:
    assume {:verifier.code 0} true;
    $p39 := $M.7;
    goto corral_source_split_11226;

  corral_source_split_11226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1902} kmem_cache_destroy($p39);
    goto corral_source_split_11227;

  corral_source_split_11227:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1498:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i33 == 1;
    goto corral_source_split_11209;

  corral_source_split_11209:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    call $p34, $p35, $i36, $i37 := oz_protocol_term_loop_$bb15($p34, $p35, $i36, $i37);
    goto $bb15_last;

  $bb16:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, g_pd_list);
    goto corral_source_split_11211;

  corral_source_split_11211:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_11212;

  corral_source_split_11212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} oz_pd_get($p35);
    goto corral_source_split_11213;

  corral_source_split_11213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1894} ldv_spin_unlock_bh_122(g_polling_lock);
    goto SeqInstr_1489, SeqInstr_1490;

  SeqInstr_1490:
    assume assertsPassed;
    goto SeqInstr_1491;

  SeqInstr_1491:
    goto corral_source_split_11214;

  corral_source_split_11214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} oz_pd_stop($p35);
    goto SeqInstr_1492, SeqInstr_1493;

  SeqInstr_1493:
    assume assertsPassed;
    goto SeqInstr_1494;

  SeqInstr_1494:
    goto corral_source_split_11215;

  corral_source_split_11215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1896} oz_pd_put($p35);
    goto corral_source_split_11216;

  corral_source_split_11216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} ldv_spin_lock_bh_121(g_polling_lock);
    goto SeqInstr_1495, SeqInstr_1496;

  SeqInstr_1496:
    assume assertsPassed;
    goto SeqInstr_1497;

  SeqInstr_1497:
    goto corral_source_split_11217;

  corral_source_split_11217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1898} $i36 := list_empty(g_pd_list);
    call {:si_unique_call 1899} {:cexpr "tmp"} boogie_si_record_i32($i36);
    goto corral_source_split_11218;

  corral_source_split_11218:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 0);
    goto corral_source_split_11219;

  corral_source_split_11219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i37 == 1);
    goto corral_source_split_11221;

  corral_source_split_11221:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb17_dummy;

  SeqInstr_1495:
    assume !assertsPassed;
    return;

  SeqInstr_1492:
    assume !assertsPassed;
    return;

  SeqInstr_1489:
    assume !assertsPassed;
    return;

  SeqInstr_1486:
    assume !assertsPassed;
    return;

  SeqInstr_1483:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_11172;

  corral_source_split_11172:
    assume {:verifier.code 0} true;
    $p11, $p12 := $p2, $p7;
    goto $bb4;

  $bb4:
    call $p13, $p14, $p16, $p17, $i18, $i19, $p21, $p22, $p23, $p25, $p26, $p27, $p28, $p29, $i30, $i31, $p11, $p12 := oz_protocol_term_loop_$bb4($p13, $p14, $p16, $p17, $i18, $i19, $p21, $p22, $p23, $p25, $p26, $p27, $p28, $p29, $i30, $i31, $p11, $p12);
    goto $bb4_last;

  corral_source_split_11174:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p11, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_11176;

  corral_source_split_11176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} list_del($p13);
    goto corral_source_split_11177;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} ldv_spin_unlock_bh_133___0(g_binding_lock);
    goto SeqInstr_1474, SeqInstr_1475;

  SeqInstr_1475:
    assume assertsPassed;
    goto SeqInstr_1476;

  SeqInstr_1476:
    goto corral_source_split_11178;

  corral_source_split_11178:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_11179;

  corral_source_split_11179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} dev_remove_pack($p14);
    goto corral_source_split_11180;

  corral_source_split_11180:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_11181;

  corral_source_split_11181:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_11182;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_11183;

  corral_source_split_11183:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_11184;

  corral_source_split_11184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p11);
    goto corral_source_split_11191;

  corral_source_split_11191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} kfree($p23);
    goto corral_source_split_11192;

  corral_source_split_11192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1888} ldv_spin_lock_bh_132___0(g_binding_lock);
    goto SeqInstr_1480, SeqInstr_1481;

  SeqInstr_1481:
    assume assertsPassed;
    goto SeqInstr_1482;

  SeqInstr_1482:
    goto corral_source_split_11193;

  corral_source_split_11193:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 104)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_11194;

  corral_source_split_11194:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.1, $p25);
    goto corral_source_split_11195;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_11196;

  corral_source_split_11196:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref($sub.ref(0, 88), 104));
    goto corral_source_split_11197;

  corral_source_split_11197:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p12, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_11198;

  corral_source_split_11198:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_11199;

  corral_source_split_11199:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, $p2i.ref.i64(g_binding));
    goto corral_source_split_11200;

  corral_source_split_11200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i31 == 1);
    goto corral_source_split_11202;

  corral_source_split_11202:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $p11, $p12 := $p12, $p28;
    goto $bb9_dummy;

  SeqInstr_1480:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_11186;

  corral_source_split_11186:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_11187;

  corral_source_split_11187:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_11188;

  corral_source_split_11188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} dev_put___0($p22);
    goto SeqInstr_1477, SeqInstr_1478;

  SeqInstr_1478:
    assume assertsPassed;
    goto SeqInstr_1479;

  SeqInstr_1479:
    goto corral_source_split_11189;

  corral_source_split_11189:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_1477:
    assume !assertsPassed;
    return;

  SeqInstr_1474:
    assume !assertsPassed;
    return;

  SeqInstr_1471:
    assume !assertsPassed;
    return;

  $bb17_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11174;
}



const oz_apps_term: ref;

axiom oz_apps_term == $sub.ref(0, 679879);

procedure oz_apps_term();
  free requires assertsPassed;
  modifies $M.12, $M.13, assertsPassed;



implementation oz_apps_term()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11229;

  corral_source_split_11229:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb3, $bb4;

  $bb4:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb8, $bb9;

  $bb9:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb12, $bb13;

  $bb13:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb16, $bb17;

  $bb17:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb20, $bb21;

  $bb21:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume 1 == 1;
    goto corral_source_split_11240;

  corral_source_split_11240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} oz_cdev_term();
    goto SeqInstr_1510, SeqInstr_1511;

  SeqInstr_1511:
    assume assertsPassed;
    goto SeqInstr_1512;

  SeqInstr_1512:
    goto corral_source_split_11241;

  corral_source_split_11241:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_1510:
    assume !assertsPassed;
    return;

  $bb16:
    assume 0 == 1;
    call {:si_unique_call 1906} devirtbounce.3($0.ref);
    goto SeqInstr_1507, SeqInstr_1508;

  SeqInstr_1508:
    assume assertsPassed;
    goto SeqInstr_1509;

  SeqInstr_1509:
    goto corral_source_split_11238;

  corral_source_split_11238:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_1507:
    assume !assertsPassed;
    return;

  $bb12:
    assume 0 == 1;
    call {:si_unique_call 1905} devirtbounce.3($0.ref);
    goto SeqInstr_1504, SeqInstr_1505;

  SeqInstr_1505:
    assume assertsPassed;
    goto SeqInstr_1506;

  SeqInstr_1506:
    goto corral_source_split_11236;

  corral_source_split_11236:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_1504:
    assume !assertsPassed;
    return;

  $bb8:
    assume 1 == 1;
    goto corral_source_split_11233;

  corral_source_split_11233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} oz_usb_term();
    goto corral_source_split_11234;

  corral_source_split_11234:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume 0 == 1;
    call {:si_unique_call 1903} devirtbounce.3($0.ref);
    goto SeqInstr_1501, SeqInstr_1502;

  SeqInstr_1502:
    assume assertsPassed;
    goto SeqInstr_1503;

  SeqInstr_1503:
    goto corral_source_split_11231;

  corral_source_split_11231:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_1501:
    assume !assertsPassed;
    return;
}



const oz_cdev_deregister: ref;

axiom oz_cdev_deregister == $sub.ref(0, 680911);

procedure oz_cdev_deregister() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.112, $M.109, assertsPassed;



implementation oz_cdev_deregister() returns ($r: i32)
{
  var $i0: i32;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11243;

  corral_source_split_11243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} ldv_cdev_del_145($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)));
    goto corral_source_split_11244;

  corral_source_split_11244:
    assume {:verifier.code 0} true;
    $i0 := $load.i32($M.1, g_cdev);
    goto corral_source_split_11245;

  corral_source_split_11245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1909} ldv_unregister_chrdev_region_146($i0, 1);
    goto SeqInstr_1513, SeqInstr_1514;

  SeqInstr_1514:
    assume assertsPassed;
    goto SeqInstr_1515;

  SeqInstr_1515:
    goto corral_source_split_11246;

  corral_source_split_11246:
    assume {:verifier.code 0} true;
    $p1 := $M.111;
    goto corral_source_split_11247;

  corral_source_split_11247:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_11248;

  corral_source_split_11248:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_11249;

  corral_source_split_11249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_11251;

  corral_source_split_11251:
    assume {:verifier.code 0} true;
    $p4 := $M.111;
    goto corral_source_split_11252;

  corral_source_split_11252:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, g_cdev);
    goto corral_source_split_11253;

  corral_source_split_11253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} device_destroy($p4, $i5);
    goto corral_source_split_11254;

  corral_source_split_11254:
    assume {:verifier.code 0} true;
    $p6 := $M.111;
    goto corral_source_split_11255;

  corral_source_split_11255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1911} ldv_class_destroy_147($p6);
    goto SeqInstr_1516, SeqInstr_1517;

  SeqInstr_1517:
    assume assertsPassed;
    goto SeqInstr_1518;

  SeqInstr_1518:
    goto corral_source_split_11256;

  corral_source_split_11256:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1516:
    assume !assertsPassed;
    return;

  SeqInstr_1513:
    assume !assertsPassed;
    return;
}



const ldv_cdev_del_145: ref;

axiom ldv_cdev_del_145 == $sub.ref(0, 681943);

procedure ldv_cdev_del_145($p0: ref);
  free requires assertsPassed;



implementation ldv_cdev_del_145($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11258;

  corral_source_split_11258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1912} cdev_del($p0);
    goto corral_source_split_11259;

  corral_source_split_11259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1913} ldv_cdev_del($0.ref, $p0);
    goto corral_source_split_11260;

  corral_source_split_11260:
    assume {:verifier.code 0} true;
    return;
}



const ldv_unregister_chrdev_region_146: ref;

axiom ldv_unregister_chrdev_region_146 == $sub.ref(0, 682975);

procedure ldv_unregister_chrdev_region_146($i0: i32, $i1: i32);
  free requires assertsPassed;
  modifies $M.112, assertsPassed;



implementation ldv_unregister_chrdev_region_146($i0: i32, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} {:cexpr "ldv_unregister_chrdev_region_146:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 1915} {:cexpr "ldv_unregister_chrdev_region_146:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_11262;

  corral_source_split_11262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} unregister_chrdev_region($i0, $i1);
    goto corral_source_split_11263;

  corral_source_split_11263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1917} ldv_linux_fs_char_dev_unregister_chrdev_region();
    goto SeqInstr_1519, SeqInstr_1520;

  SeqInstr_1520:
    assume assertsPassed;
    goto SeqInstr_1521;

  SeqInstr_1521:
    goto corral_source_split_11264;

  corral_source_split_11264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} ldv_linux_usb_gadget_unregister_chrdev_region();
    goto SeqInstr_1522, SeqInstr_1523;

  SeqInstr_1523:
    assume assertsPassed;
    goto SeqInstr_1524;

  SeqInstr_1524:
    goto corral_source_split_11265;

  corral_source_split_11265:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1522:
    assume !assertsPassed;
    return;

  SeqInstr_1519:
    assume !assertsPassed;
    return;
}



const device_destroy: ref;

axiom device_destroy == $sub.ref(0, 684007);

procedure device_destroy($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation device_destroy($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1919} {:cexpr "device_destroy:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_11267;

  corral_source_split_11267:
    assume {:verifier.code 0} true;
    return;
}



const ldv_class_destroy_147: ref;

axiom ldv_class_destroy_147 == $sub.ref(0, 685039);

procedure ldv_class_destroy_147($p0: ref);
  free requires assertsPassed;
  modifies $M.109, assertsPassed;



implementation ldv_class_destroy_147($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11269;

  corral_source_split_11269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1920} ldv_linux_drivers_base_class_destroy_class($p0);
    goto SeqInstr_1525, SeqInstr_1526;

  SeqInstr_1526:
    assume assertsPassed;
    goto SeqInstr_1527;

  SeqInstr_1527:
    goto corral_source_split_11270;

  corral_source_split_11270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1921} ldv_linux_usb_gadget_destroy_class($p0);
    goto SeqInstr_1528, SeqInstr_1529;

  SeqInstr_1529:
    assume assertsPassed;
    goto SeqInstr_1530;

  SeqInstr_1530:
    goto corral_source_split_11271;

  corral_source_split_11271:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1528:
    assume !assertsPassed;
    return;

  SeqInstr_1525:
    assume !assertsPassed;
    return;
}



const ldv_linux_drivers_base_class_destroy_class: ref;

axiom ldv_linux_drivers_base_class_destroy_class == $sub.ref(0, 686071);

procedure ldv_linux_drivers_base_class_destroy_class($p0: ref);
  free requires assertsPassed;
  modifies $M.109, assertsPassed;



implementation ldv_linux_drivers_base_class_destroy_class($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11273;

  corral_source_split_11273:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_11274;

  corral_source_split_11274:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_11275;

  corral_source_split_11275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_11279;

  corral_source_split_11279:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_11280;

  corral_source_split_11280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} $i4 := ldv_is_err($p3);
    call {:si_unique_call 1923} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_11281;

  corral_source_split_11281:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_11282;

  corral_source_split_11282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} ldv_linux_drivers_base_class_unregister_class();
    goto SeqInstr_1531, SeqInstr_1532;

  SeqInstr_1532:
    assume assertsPassed;
    goto SeqInstr_1533;

  SeqInstr_1533:
    goto corral_source_split_11286;

  corral_source_split_11286:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1531:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_11284;

  corral_source_split_11284:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11277;

  corral_source_split_11277:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_usb_gadget_destroy_class: ref;

axiom ldv_linux_usb_gadget_destroy_class == $sub.ref(0, 687103);

procedure ldv_linux_usb_gadget_destroy_class($p0: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_destroy_class($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11288;

  corral_source_split_11288:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_11289;

  corral_source_split_11289:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_11290;

  corral_source_split_11290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_11294;

  corral_source_split_11294:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_11295;

  corral_source_split_11295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1925} $i4 := ldv_is_err($p3);
    call {:si_unique_call 1926} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_11296;

  corral_source_split_11296:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_11297;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1927} ldv_linux_usb_gadget_unregister_class();
    goto SeqInstr_1534, SeqInstr_1535;

  SeqInstr_1535:
    assume assertsPassed;
    goto SeqInstr_1536;

  SeqInstr_1536:
    goto corral_source_split_11301;

  corral_source_split_11301:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1534:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_11299;

  corral_source_split_11299:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11292;

  corral_source_split_11292:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_usb_gadget_unregister_class: ref;

axiom ldv_linux_usb_gadget_unregister_class == $sub.ref(0, 688135);

procedure ldv_linux_usb_gadget_unregister_class();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_unregister_class()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11303;

  corral_source_split_11303:
    assume {:verifier.code 0} true;
    $i0 := $M.110;
    goto corral_source_split_11304;

  corral_source_split_11304:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11305;

  corral_source_split_11305:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11306;

  corral_source_split_11306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1928} ldv_assert_linux_usb_gadget__class_deregistration_with_usb_gadget($i2);
    goto SeqInstr_1537, SeqInstr_1538;

  SeqInstr_1538:
    assume assertsPassed;
    goto SeqInstr_1539;

  SeqInstr_1539:
    goto corral_source_split_11307;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1537:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_usb_gadget__class_deregistration_with_usb_gadget: ref;

axiom ldv_assert_linux_usb_gadget__class_deregistration_with_usb_gadget == $sub.ref(0, 689167);

procedure ldv_assert_linux_usb_gadget__class_deregistration_with_usb_gadget($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_gadget__class_deregistration_with_usb_gadget($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1929} {:cexpr "ldv_assert_linux_usb_gadget__class_deregistration_with_usb_gadget:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11309;

  corral_source_split_11309:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11310;

  corral_source_split_11310:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11312;

  corral_source_split_11312:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1930} __VERIFIER_error();
    goto SeqInstr_1540, SeqInstr_1541;

  SeqInstr_1541:
    assume assertsPassed;
    goto SeqInstr_1542;

  SeqInstr_1542:
    goto corral_source_split_11313;

  corral_source_split_11313:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1540:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_drivers_base_class_unregister_class: ref;

axiom ldv_linux_drivers_base_class_unregister_class == $sub.ref(0, 690199);

procedure ldv_linux_drivers_base_class_unregister_class();
  free requires assertsPassed;
  modifies $M.109, assertsPassed;



implementation ldv_linux_drivers_base_class_unregister_class()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11315;

  corral_source_split_11315:
    assume {:verifier.code 0} true;
    $i0 := $M.109;
    goto corral_source_split_11316;

  corral_source_split_11316:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_11317;

  corral_source_split_11317:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11318;

  corral_source_split_11318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1931} ldv_assert_linux_drivers_base_class__double_deregistration($i2);
    goto SeqInstr_1543, SeqInstr_1544;

  SeqInstr_1544:
    assume assertsPassed;
    goto SeqInstr_1545;

  SeqInstr_1545:
    goto corral_source_split_11319;

  corral_source_split_11319:
    assume {:verifier.code 0} true;
    $M.109 := 0;
    call {:si_unique_call 1932} {:cexpr "ldv_linux_drivers_base_class_usb_gadget_class"} boogie_si_record_i32(0);
    goto corral_source_split_11320;

  corral_source_split_11320:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1543:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_drivers_base_class__double_deregistration: ref;

axiom ldv_assert_linux_drivers_base_class__double_deregistration == $sub.ref(0, 691231);

procedure ldv_assert_linux_drivers_base_class__double_deregistration($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_drivers_base_class__double_deregistration($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} {:cexpr "ldv_assert_linux_drivers_base_class__double_deregistration:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11322;

  corral_source_split_11322:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11323;

  corral_source_split_11323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11325;

  corral_source_split_11325:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1934} __VERIFIER_error();
    goto SeqInstr_1546, SeqInstr_1547;

  SeqInstr_1547:
    assume assertsPassed;
    goto SeqInstr_1548;

  SeqInstr_1548:
    goto corral_source_split_11326;

  corral_source_split_11326:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1546:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const unregister_chrdev_region: ref;

axiom unregister_chrdev_region == $sub.ref(0, 692263);

procedure unregister_chrdev_region($i0: i32, $i1: i32);
  free requires assertsPassed;



implementation unregister_chrdev_region($i0: i32, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} {:cexpr "unregister_chrdev_region:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1936} {:cexpr "unregister_chrdev_region:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_11328;

  corral_source_split_11328:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_fs_char_dev_unregister_chrdev_region: ref;

axiom ldv_linux_fs_char_dev_unregister_chrdev_region == $sub.ref(0, 693295);

procedure ldv_linux_fs_char_dev_unregister_chrdev_region();
  free requires assertsPassed;
  modifies $M.112, assertsPassed;



implementation ldv_linux_fs_char_dev_unregister_chrdev_region()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11330;

  corral_source_split_11330:
    assume {:verifier.code 0} true;
    $i0 := $M.112;
    goto corral_source_split_11331;

  corral_source_split_11331:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_11332;

  corral_source_split_11332:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11333;

  corral_source_split_11333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1937} ldv_assert_linux_fs_char_dev__double_deregistration($i2);
    goto SeqInstr_1549, SeqInstr_1550;

  SeqInstr_1550:
    assume assertsPassed;
    goto SeqInstr_1551;

  SeqInstr_1551:
    goto corral_source_split_11334;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    $M.112 := 0;
    call {:si_unique_call 1938} {:cexpr "ldv_linux_fs_char_dev_usb_gadget_chrdev"} boogie_si_record_i32(0);
    goto corral_source_split_11335;

  corral_source_split_11335:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1549:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_gadget_unregister_chrdev_region: ref;

axiom ldv_linux_usb_gadget_unregister_chrdev_region == $sub.ref(0, 694327);

procedure ldv_linux_usb_gadget_unregister_chrdev_region();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_unregister_chrdev_region()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11337;

  corral_source_split_11337:
    assume {:verifier.code 0} true;
    $i0 := $M.110;
    goto corral_source_split_11338;

  corral_source_split_11338:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11339;

  corral_source_split_11339:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_11340;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1939} ldv_assert_linux_usb_gadget__chrdev_deregistration_with_usb_gadget($i2);
    goto SeqInstr_1552, SeqInstr_1553;

  SeqInstr_1553:
    assume assertsPassed;
    goto SeqInstr_1554;

  SeqInstr_1554:
    goto corral_source_split_11341;

  corral_source_split_11341:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1552:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_usb_gadget__chrdev_deregistration_with_usb_gadget: ref;

axiom ldv_assert_linux_usb_gadget__chrdev_deregistration_with_usb_gadget == $sub.ref(0, 695359);

procedure ldv_assert_linux_usb_gadget__chrdev_deregistration_with_usb_gadget($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_gadget__chrdev_deregistration_with_usb_gadget($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1940} {:cexpr "ldv_assert_linux_usb_gadget__chrdev_deregistration_with_usb_gadget:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11343;

  corral_source_split_11343:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11344;

  corral_source_split_11344:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11346;

  corral_source_split_11346:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1941} __VERIFIER_error();
    goto SeqInstr_1555, SeqInstr_1556;

  SeqInstr_1556:
    assume assertsPassed;
    goto SeqInstr_1557;

  SeqInstr_1557:
    goto corral_source_split_11347;

  corral_source_split_11347:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1555:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_char_dev__double_deregistration: ref;

axiom ldv_assert_linux_fs_char_dev__double_deregistration == $sub.ref(0, 696391);

procedure ldv_assert_linux_fs_char_dev__double_deregistration($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_char_dev__double_deregistration($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1942} {:cexpr "ldv_assert_linux_fs_char_dev__double_deregistration:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11349;

  corral_source_split_11349:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11350;

  corral_source_split_11350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11352;

  corral_source_split_11352:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1943} __VERIFIER_error();
    goto SeqInstr_1558, SeqInstr_1559;

  SeqInstr_1559:
    assume assertsPassed;
    goto SeqInstr_1560;

  SeqInstr_1560:
    goto corral_source_split_11353;

  corral_source_split_11353:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1558:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const cdev_del: ref;

axiom cdev_del == $sub.ref(0, 697423);

procedure cdev_del($p0: ref);
  free requires assertsPassed;



implementation cdev_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11355;

  corral_source_split_11355:
    assume {:verifier.code 0} true;
    return;
}



const ldv_cdev_del: ref;

axiom ldv_cdev_del == $sub.ref(0, 698455);

procedure ldv_cdev_del($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_cdev_del($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11357;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(304, 1));
    goto corral_source_split_11358;

  corral_source_split_11358:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_11359;

  corral_source_split_11359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1944} ldv_dispatch_deregister_6_1($p3);
    goto corral_source_split_11360;

  corral_source_split_11360:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_6_1: ref;

axiom ldv_dispatch_deregister_6_1 == $sub.ref(0, 699487);

procedure ldv_dispatch_deregister_6_1($p0: ref);
  free requires assertsPassed;



implementation ldv_dispatch_deregister_6_1($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11362;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    return;
}



const ldv_EMGentry_init_ozwpan_init_9_11: ref;

axiom ldv_EMGentry_init_ozwpan_init_9_11 == $sub.ref(0, 700519);

procedure ldv_EMGentry_init_ozwpan_init_9_11($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.1, $M.111, $M.7, $M.8, $M.112, $M.109, $M.13, $M.14, $M.46, $CurrAddr, $M.99, assertsPassed, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.5, $M.10, $M.2, $M.9, $M.48, $M.96, $M.97, $M.44, $M.95, $M.45, $M.33, $M.103, $M.16, $M.17, $M.104, $M.105, $M.15, $M.18, $M.19, $M.20, $M.21, $M.22, $M.41, $M.106, $M.107, $M.43, $M.42, $M.30, $M.31, $M.32, $M.40, $M.34, $M.35, $M.36, $M.37, $M.39, $M.38;



implementation ldv_EMGentry_init_ozwpan_init_9_11($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11364;

  corral_source_split_11364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} $i1 := ozwpan_init();
    goto SeqInstr_1561, SeqInstr_1562;

  SeqInstr_1562:
    assume assertsPassed;
    goto SeqInstr_1563;

  SeqInstr_1563:
    call {:si_unique_call 1946} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11365;

  corral_source_split_11365:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_1561:
    assume !assertsPassed;
    return;
}



const ozwpan_init: ref;

axiom ozwpan_init == $sub.ref(0, 701551);

procedure ozwpan_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.1, $M.111, $M.7, $M.8, $M.112, $M.109, $M.13, $M.14, $M.46, $CurrAddr, $M.99, assertsPassed, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.5, $M.10, $M.2, $M.9, $M.48, $M.96, $M.97, $M.44, $M.95, $M.45, $M.33, $M.103, $M.16, $M.17, $M.104, $M.105, $M.15, $M.18, $M.19, $M.20, $M.21, $M.22, $M.41, $M.106, $M.107, $M.43, $M.42, $M.30, $M.31, $M.32, $M.40, $M.34, $M.35, $M.36, $M.37, $M.39, $M.38;



implementation ozwpan_init() returns ($r: i32)
{
  var $p1: ref;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11367;

  corral_source_split_11367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1947} vslice_dummy_var_186 := oz_cdev_register();
    goto SeqInstr_1564, SeqInstr_1565;

  SeqInstr_1565:
    assume assertsPassed;
    goto SeqInstr_1566;

  SeqInstr_1566:
    goto corral_source_split_11368;

  corral_source_split_11368:
    assume {:verifier.code 0} true;
    $p1 := $M.113;
    goto corral_source_split_11369;

  corral_source_split_11369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1948} vslice_dummy_var_187 := oz_protocol_init($p1);
    goto SeqInstr_1567, SeqInstr_1568;

  SeqInstr_1568:
    assume assertsPassed;
    goto SeqInstr_1569;

  SeqInstr_1569:
    goto corral_source_split_11370;

  corral_source_split_11370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1949} oz_app_enable(1, 1);
    goto SeqInstr_1570, SeqInstr_1571;

  SeqInstr_1571:
    assume assertsPassed;
    goto SeqInstr_1572;

  SeqInstr_1572:
    goto corral_source_split_11371;

  corral_source_split_11371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1950} oz_apps_init();
    goto SeqInstr_1573, SeqInstr_1574;

  SeqInstr_1574:
    assume assertsPassed;
    goto SeqInstr_1575;

  SeqInstr_1575:
    goto corral_source_split_11372;

  corral_source_split_11372:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_1573:
    assume !assertsPassed;
    return;

  SeqInstr_1570:
    assume !assertsPassed;
    return;

  SeqInstr_1567:
    assume !assertsPassed;
    return;

  SeqInstr_1564:
    assume !assertsPassed;
    return;
}



const oz_cdev_register: ref;

axiom oz_cdev_register == $sub.ref(0, 702583);

procedure oz_cdev_register() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.111, $M.112, $M.109, $CurrAddr, assertsPassed, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.5, $M.10, $M.2, $M.9, $M.13, $M.99, $M.16, $M.15, $M.43, $M.30, $M.31, $M.32, $M.40, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation oz_cdev_register() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i1;
  var $i15: i8;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i32;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i1;
  var $i27: i8;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i32;
  var $i21: i32;
  var $i9: i32;
  var $i32: i32;
  var $i4: i32;
  var cmdloc_dummy_var_130: [ref]i8;
  var cmdloc_dummy_var_131: [ref]i8;
  var vslice_dummy_var_188: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1951} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1952} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_11374;

  corral_source_split_11374:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_130 := $M.1;
    call {:si_unique_call 1953} cmdloc_dummy_var_131 := $memset.i8(cmdloc_dummy_var_130, g_cdev, 0, 520, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_131;
    goto corral_source_split_11375;

  corral_source_split_11375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1954} $i2 := ldv_alloc_chrdev_region_141(g_cdev, 0, 1, .str.4);
    goto SeqInstr_1576, SeqInstr_1577;

  SeqInstr_1577:
    assume assertsPassed;
    goto SeqInstr_1578;

  SeqInstr_1578:
    call {:si_unique_call 1955} {:cexpr "err"} boogie_si_record_i32($i2);
    goto corral_source_split_11376;

  corral_source_split_11376:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 0);
    goto corral_source_split_11377;

  corral_source_split_11377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1956} ldv_cdev_init_142($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), oz_fops);
    goto SeqInstr_1579, SeqInstr_1580;

  SeqInstr_1580:
    assume assertsPassed;
    goto SeqInstr_1581;

  SeqInstr_1581:
    goto corral_source_split_11383;

  corral_source_split_11383:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(296, 1)), __this_module);
    goto corral_source_split_11384;

  corral_source_split_11384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} vslice_dummy_var_188 := spinlock_check($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(432, 1)));
    goto corral_source_split_11385;

  corral_source_split_11385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1958} __raw_spin_lock_init($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.23, $p0);
    goto corral_source_split_11386;

  corral_source_split_11386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} __init_waitqueue_head($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(344, 1)), .str.24, $p1);
    goto corral_source_split_11387;

  corral_source_split_11387:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, g_cdev);
    goto corral_source_split_11388;

  corral_source_split_11388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1960} $i7 := cdev_add($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $i6, 1);
    call {:si_unique_call 1961} {:cexpr "err"} boogie_si_record_i32($i7);
    goto corral_source_split_11389;

  corral_source_split_11389:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_11390;

  corral_source_split_11390:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1963} $p10 := ldv_create_class();
    goto SeqInstr_1585, SeqInstr_1586;

  SeqInstr_1586:
    assume assertsPassed;
    goto SeqInstr_1587;

  SeqInstr_1587:
    goto corral_source_split_11398;

  corral_source_split_11398:
    assume {:verifier.code 0} true;
    goto corral_source_split_11399;

  corral_source_split_11399:
    assume {:verifier.code 0} true;
    $M.111 := $p10;
    goto corral_source_split_11400;

  corral_source_split_11400:
    assume {:verifier.code 0} true;
    $p12 := $M.111;
    goto corral_source_split_11401;

  corral_source_split_11401:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_11402;

  corral_source_split_11402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1964} $i14 := IS_ERR($p13);
    goto corral_source_split_11403;

  corral_source_split_11403:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i8($i14);
    call {:si_unique_call 1965} {:cexpr "tmp___4"} boogie_si_record_i8($i15);
    goto corral_source_split_11404;

  corral_source_split_11404:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_11405;

  corral_source_split_11405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p22 := $M.111;
    goto corral_source_split_11416;

  corral_source_split_11416:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.1, g_cdev);
    goto corral_source_split_11417;

  corral_source_split_11417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1970} $p24 := device_create.ref.ref.i32.ref.ref($p22, $0.ref, $i23, $0.ref, .str.4);
    goto corral_source_split_11418;

  corral_source_split_11418:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_11419;

  corral_source_split_11419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1971} $i26 := IS_ERR($p25);
    goto corral_source_split_11420;

  corral_source_split_11420:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i8($i26);
    call {:si_unique_call 1972} {:cexpr "tmp___7"} boogie_si_record_i8($i27);
    goto corral_source_split_11421;

  corral_source_split_11421:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_11422;

  corral_source_split_11422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11381;

  corral_source_split_11381:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_11424;

  corral_source_split_11424:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p24);
    goto corral_source_split_11425;

  corral_source_split_11425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1973} $i30 := PTR_ERR($p29);
    call {:si_unique_call 1974} {:cexpr "tmp___6"} boogie_si_record_i64($i30);
    goto corral_source_split_11426;

  corral_source_split_11426:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i64.i32($i30);
    call {:si_unique_call 1975} {:cexpr "err"} boogie_si_record_i32($i31);
    goto corral_source_split_11427;

  corral_source_split_11427:
    assume {:verifier.code 0} true;
    $i21 := $i31;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_11413;

  corral_source_split_11413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} ldv_cdev_del_143($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)));
    goto corral_source_split_11414;

  corral_source_split_11414:
    assume {:verifier.code 0} true;
    $i9 := $i21;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_11394;

  corral_source_split_11394:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.1, g_cdev);
    goto corral_source_split_11395;

  corral_source_split_11395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1962} ldv_unregister_chrdev_region_144($i32, 1);
    goto SeqInstr_1582, SeqInstr_1583;

  SeqInstr_1583:
    assume assertsPassed;
    goto SeqInstr_1584;

  SeqInstr_1584:
    goto corral_source_split_11396;

  corral_source_split_11396:
    assume {:verifier.code 0} true;
    $i4 := $i9;
    goto $bb3;

  SeqInstr_1582:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i16 == 1;
    goto corral_source_split_11407;

  corral_source_split_11407:
    assume {:verifier.code 0} true;
    $p17 := $M.111;
    goto corral_source_split_11408;

  corral_source_split_11408:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_11409;

  corral_source_split_11409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1966} $i19 := PTR_ERR($p18);
    call {:si_unique_call 1967} {:cexpr "tmp___3"} boogie_si_record_i64($i19);
    goto corral_source_split_11410;

  corral_source_split_11410:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i19);
    call {:si_unique_call 1968} {:cexpr "err"} boogie_si_record_i32($i20);
    goto corral_source_split_11411;

  corral_source_split_11411:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb11;

  SeqInstr_1585:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_11392;

  corral_source_split_11392:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb7;

  SeqInstr_1579:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_11379;

  corral_source_split_11379:
    assume {:verifier.code 0} true;
    $i4 := $i2;
    goto $bb3;

  SeqInstr_1576:
    assume !assertsPassed;
    return;
}



const oz_protocol_init: ref;

axiom oz_protocol_init == $sub.ref(0, 703615);

procedure oz_protocol_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.8, $M.1, $CurrAddr, $M.99, assertsPassed;



implementation oz_protocol_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p18: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1976} $p1 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_11429;

  corral_source_split_11429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1977} $p2 := kmem_cache_create(.str.21, 328, 8, 0, $0.ref);
    goto corral_source_split_11430;

  corral_source_split_11430:
    assume {:verifier.code 0} true;
    $M.7 := $p2;
    goto corral_source_split_11431;

  corral_source_split_11431:
    assume {:verifier.code 0} true;
    $p3 := $M.7;
    goto corral_source_split_11432;

  corral_source_split_11432:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_11433;

  corral_source_split_11433:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_11434;

  corral_source_split_11434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1978} $p7 := kmem_cache_create(.str.22, 56, 8, 0, $0.ref);
    goto corral_source_split_11440;

  corral_source_split_11440:
    assume {:verifier.code 0} true;
    $M.8 := $p7;
    goto corral_source_split_11441;

  corral_source_split_11441:
    assume {:verifier.code 0} true;
    $p8 := $M.8;
    goto corral_source_split_11442;

  corral_source_split_11442:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_11443;

  corral_source_split_11443:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_11444;

  corral_source_split_11444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1980} skb_queue_head_init(g_rx_queue);
    goto corral_source_split_11450;

  corral_source_split_11450:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.114, $p0);
    goto corral_source_split_11451;

  corral_source_split_11451:
    assume {:verifier.code 0} true;
    $i13 := $sext.i8.i32($i12);
    goto corral_source_split_11452;

  corral_source_split_11452:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 42);
    goto corral_source_split_11453;

  corral_source_split_11453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    goto corral_source_split_11458;

  corral_source_split_11458:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.114, $p0);
    goto corral_source_split_11459;

  corral_source_split_11459:
    assume {:verifier.code 0} true;
    $i16 := $sext.i8.i32($i15);
    goto corral_source_split_11460;

  corral_source_split_11460:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_11461;

  corral_source_split_11461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11438;

  corral_source_split_11438:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_11463;

  corral_source_split_11463:
    assume {:verifier.code 0} true;
    $p18 := $p0;
    goto $bb14;

  $bb14:
    call $p19, $p20, $p21, $i22, $i23, $i24, $p25, $i26, $i27, $i28, $p18 := oz_protocol_init_loop_$bb14($p1, $p19, $p20, $p21, $i22, $i23, $i24, $p25, $i26, $i27, $i28, $p18);
    goto $bb14_last;

  corral_source_split_11465:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p1);
    goto corral_source_split_11467;

  corral_source_split_11467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1982} $p20 := oz_get_next_device_name($p18, $p19, 32);
    goto corral_source_split_11468;

  corral_source_split_11468:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_11469;

  corral_source_split_11469:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.1, $p21);
    goto corral_source_split_11470;

  corral_source_split_11470:
    assume {:verifier.code 0} true;
    $i23 := $sext.i8.i32($i22);
    goto corral_source_split_11471;

  corral_source_split_11471:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_11472;

  corral_source_split_11472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.114, $p20);
    goto corral_source_split_11478;

  corral_source_split_11478:
    assume {:verifier.code 0} true;
    $i27 := $sext.i8.i32($i26);
    goto corral_source_split_11479;

  corral_source_split_11479:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_11480;

  corral_source_split_11480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i28 == 1);
    goto corral_source_split_11482;

  corral_source_split_11482:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb19:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $p18 := $p20;
    goto $bb19_dummy;

  $bb16:
    assume $i24 == 1;
    goto corral_source_split_11474;

  corral_source_split_11474:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p1);
    goto corral_source_split_11475;

  corral_source_split_11475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1983} oz_binding_add($p25);
    goto SeqInstr_1591, SeqInstr_1592;

  SeqInstr_1592:
    assume assertsPassed;
    goto SeqInstr_1593;

  SeqInstr_1593:
    goto corral_source_split_11476;

  corral_source_split_11476:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_1591:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_11455;

  corral_source_split_11455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1981} oz_binding_add($0.ref);
    goto SeqInstr_1588, SeqInstr_1589;

  SeqInstr_1589:
    assume assertsPassed;
    goto SeqInstr_1590;

  SeqInstr_1590:
    goto corral_source_split_11456;

  corral_source_split_11456:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_1588:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_11446;

  corral_source_split_11446:
    assume {:verifier.code 0} true;
    $p11 := $M.7;
    goto corral_source_split_11447;

  corral_source_split_11447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1979} kmem_cache_destroy($p11);
    goto corral_source_split_11448;

  corral_source_split_11448:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_11436;

  corral_source_split_11436:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_11465;
}



const oz_apps_init: ref;

axiom oz_apps_init == $sub.ref(0, 704647);

procedure oz_apps_init();
  free requires assertsPassed;
  modifies $M.14, $M.46, $M.12, $M.13, $M.1, assertsPassed, $M.48, $CurrAddr, $M.96, $M.97, $M.44, $M.95, $M.45, $M.33, $M.103, $M.17, $M.16, $M.104, $M.105, $M.15, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.41, $M.106, $M.107, $M.42, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation oz_apps_init()
{
  var vslice_dummy_var_189: i32;
  var vslice_dummy_var_190: i32;
  var vslice_dummy_var_191: i32;
  var vslice_dummy_var_192: i32;
  var vslice_dummy_var_193: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11484;

  corral_source_split_11484:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb3, $bb4;

  $bb4:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb8, $bb9;

  $bb9:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb12, $bb13;

  $bb13:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb16, $bb17;

  $bb17:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb20, $bb21;

  $bb21:
    assume !(1 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume 1 == 1;
    goto corral_source_split_11495;

  corral_source_split_11495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} vslice_dummy_var_193 := oz_cdev_init();
    goto SeqInstr_1606, SeqInstr_1607;

  SeqInstr_1607:
    assume assertsPassed;
    goto SeqInstr_1608;

  SeqInstr_1608:
    goto corral_source_split_11496;

  corral_source_split_11496:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_1606:
    assume !assertsPassed;
    return;

  $bb16:
    assume 0 == 1;
    call {:si_unique_call 1987} vslice_dummy_var_192 := devirtbounce.14($0.ref);
    goto SeqInstr_1603, SeqInstr_1604;

  SeqInstr_1604:
    assume assertsPassed;
    goto SeqInstr_1605;

  SeqInstr_1605:
    goto corral_source_split_11493;

  corral_source_split_11493:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_1603:
    assume !assertsPassed;
    return;

  $bb12:
    assume 0 == 1;
    call {:si_unique_call 1986} vslice_dummy_var_191 := devirtbounce.14($0.ref);
    goto SeqInstr_1600, SeqInstr_1601;

  SeqInstr_1601:
    assume assertsPassed;
    goto SeqInstr_1602;

  SeqInstr_1602:
    goto corral_source_split_11491;

  corral_source_split_11491:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_1600:
    assume !assertsPassed;
    return;

  $bb8:
    assume 1 == 1;
    goto corral_source_split_11488;

  corral_source_split_11488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1985} vslice_dummy_var_190 := oz_usb_init();
    goto SeqInstr_1597, SeqInstr_1598;

  SeqInstr_1598:
    assume assertsPassed;
    goto SeqInstr_1599;

  SeqInstr_1599:
    goto corral_source_split_11489;

  corral_source_split_11489:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_1597:
    assume !assertsPassed;
    return;

  $bb3:
    assume 0 == 1;
    call {:si_unique_call 1984} vslice_dummy_var_189 := devirtbounce.14($0.ref);
    goto SeqInstr_1594, SeqInstr_1595;

  SeqInstr_1595:
    assume assertsPassed;
    goto SeqInstr_1596;

  SeqInstr_1596:
    goto corral_source_split_11486;

  corral_source_split_11486:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_1594:
    assume !assertsPassed;
    return;
}



const skb_queue_head_init: ref;

axiom skb_queue_head_init == $sub.ref(0, 705679);

procedure skb_queue_head_init($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation skb_queue_head_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $p6: ref;
  var vslice_dummy_var_194: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1989} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_11498;

  corral_source_split_11498:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(24, 1));
    goto corral_source_split_11499;

  corral_source_split_11499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1990} vslice_dummy_var_194 := spinlock_check($p2);
    goto corral_source_split_11500;

  corral_source_split_11500:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_11501;

  corral_source_split_11501:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_11502;

  corral_source_split_11502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1991} __raw_spin_lock_init($p6, .str.84, $p1);
    goto corral_source_split_11503;

  corral_source_split_11503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1992} __skb_queue_head_init($p0);
    goto corral_source_split_11504;

  corral_source_split_11504:
    assume {:verifier.code 0} true;
    return;
}



const oz_get_next_device_name: ref;

axiom oz_get_next_device_name == $sub.ref(0, 706711);

procedure oz_get_next_device_name($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation oz_get_next_device_name($p0: ref, $p1: ref, $i2: i32) returns ($r: ref)
{
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p7: ref;
  var $p12: ref;
  var $p6: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i8;
  var $i26: i32;
  var $i27: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p28: ref;
  var $p29: ref;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1993} {:cexpr "oz_get_next_device_name:arg:max_size"} boogie_si_record_i32($i2);
    goto corral_source_split_11506;

  corral_source_split_11506:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.114, $p0);
    goto corral_source_split_11507;

  corral_source_split_11507:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_11508;

  corral_source_split_11508:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 44);
    goto corral_source_split_11509;

  corral_source_split_11509:
    assume {:verifier.code 0} true;
    $p6 := $p0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.114, $p6);
    goto corral_source_split_11522;

  corral_source_split_11522:
    assume {:verifier.code 0} true;
    $i14 := $sext.i8.i32($i13);
    goto corral_source_split_11523;

  corral_source_split_11523:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_11524;

  corral_source_split_11524:
    assume {:verifier.code 0} true;
    $p16, $p17 := $p1, $p6;
    assume {:branchcond $i15} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p16, 0);
    goto corral_source_split_11550;

  corral_source_split_11550:
    assume {:verifier.code 0} true;
    $r := $p17;
    return;

  $bb9:
    assume $i15 == 1;
    goto corral_source_split_11526;

  corral_source_split_11526:
    assume {:verifier.code 0} true;
    $p18, $p19, $i20 := $p6, $p1, $i2;
    goto $bb12;

  $bb12:
    call $p21, $p22, $i23, $i24, $i25, $i26, $i27, $p18, $p19, $i20, $i30, $i31, $i32, $i33, $i34, $p35, $p36, $p28, $p29 := oz_get_next_device_name_loop_$bb12($p21, $p22, $i23, $i24, $i25, $i26, $i27, $p18, $p19, $i20, $i30, $i31, $i32, $i33, $i34, $p35, $p36, $p28, $p29);
    goto $bb12_last;

  corral_source_split_11528:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.114, $p18);
    goto corral_source_split_11529;

  corral_source_split_11529:
    assume {:verifier.code 0} true;
    $i31 := $sext.i8.i32($i30);
    goto corral_source_split_11530;

  corral_source_split_11530:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 44);
    goto corral_source_split_11531;

  corral_source_split_11531:
    assume {:verifier.code 0} true;
    $i33 := $sgt.i32($i20, 1);
    goto corral_source_split_11532;

  corral_source_split_11532:
    assume {:verifier.code 0} true;
    $i34 := $and.i1($i32, $i33);
    goto corral_source_split_11533;

  corral_source_split_11533:
    assume {:verifier.code 0} true;
    $p35, $p36 := $p19, $p18;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11548;

  corral_source_split_11548:
    assume {:verifier.code 0} true;
    $p16, $p17 := $p35, $p36;
    goto $bb11;

  $bb16:
    assume $i34 == 1;
    goto corral_source_split_11546;

  corral_source_split_11546:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p19, $mul.ref(1, 1));
    goto corral_source_split_11535;

  corral_source_split_11535:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p18, $mul.ref(1, 1));
    goto corral_source_split_11536;

  corral_source_split_11536:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.114, $p18);
    goto corral_source_split_11537;

  corral_source_split_11537:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p19, $i23);
    goto corral_source_split_11538;

  corral_source_split_11538:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i20, 1);
    call {:si_unique_call 1994} {:cexpr "max_size"} boogie_si_record_i32($i24);
    goto corral_source_split_11539;

  corral_source_split_11539:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.114, $p22);
    goto corral_source_split_11540;

  corral_source_split_11540:
    assume {:verifier.code 0} true;
    $i26 := $sext.i8.i32($i25);
    goto corral_source_split_11541;

  corral_source_split_11541:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_11542;

  corral_source_split_11542:
    assume {:verifier.code 0} true;
    $p28, $p29 := $p21, $p22;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11544;

  corral_source_split_11544:
    assume {:verifier.code 0} true;
    $p16, $p17 := $p28, $p29;
    goto $bb11;

  $bb14:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $p18, $p19, $i20 := $p22, $p21, $i24;
    goto $bb14_dummy;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_11511;

  corral_source_split_11511:
    assume {:verifier.code 0} true;
    $p7 := $p0;
    goto $bb4;

  $bb4:
    call $p8, $i9, $i10, $i11, $p7, $p12 := oz_get_next_device_name_loop_$bb4($p8, $i9, $i10, $i11, $p7, $p12);
    goto $bb4_last;

  corral_source_split_11513:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(1, 1));
    goto corral_source_split_11515;

  corral_source_split_11515:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.114, $p8);
    goto corral_source_split_11516;

  corral_source_split_11516:
    assume {:verifier.code 0} true;
    $i10 := $sext.i8.i32($i9);
    goto corral_source_split_11517;

  corral_source_split_11517:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 44);
    goto corral_source_split_11518;

  corral_source_split_11518:
    assume {:verifier.code 0} true;
    $p12 := $p8;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_11520;

  corral_source_split_11520:
    assume {:verifier.code 0} true;
    $p6 := $p12;
    goto $bb3;

  $bb6:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $p7 := $p8;
    goto $bb6_dummy;

  $bb14_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11528;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_11513;
}



const __skb_queue_head_init: ref;

axiom __skb_queue_head_init == $sub.ref(0, 707743);

procedure __skb_queue_head_init($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation __skb_queue_head_init($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11552;

  corral_source_split_11552:
    assume {:verifier.code 0} true;
    goto corral_source_split_11553;

  corral_source_split_11553:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_11554;

  corral_source_split_11554:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $p0);
    goto corral_source_split_11555;

  corral_source_split_11555:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_11556;

  corral_source_split_11556:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, $p0);
    goto corral_source_split_11557;

  corral_source_split_11557:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_11558;

  corral_source_split_11558:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p4, 0);
    goto corral_source_split_11559;

  corral_source_split_11559:
    assume {:verifier.code 0} true;
    return;
}



const ldv_alloc_chrdev_region_141: ref;

axiom ldv_alloc_chrdev_region_141 == $sub.ref(0, 708775);

procedure ldv_alloc_chrdev_region_141($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.112, assertsPassed;



implementation ldv_alloc_chrdev_region_141($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1995} {:cexpr "ldv_alloc_chrdev_region_141:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    call {:si_unique_call 1996} {:cexpr "ldv_alloc_chrdev_region_141:arg:ldv_func_arg3"} boogie_si_record_i32($i2);
    goto corral_source_split_11561;

  corral_source_split_11561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1997} $i4 := alloc_chrdev_region($p0, $i1, $i2, $p3);
    call {:si_unique_call 1998} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_11562;

  corral_source_split_11562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1999} $i5 := ldv_linux_fs_char_dev_register_chrdev_region();
    goto SeqInstr_1609, SeqInstr_1610;

  SeqInstr_1610:
    assume assertsPassed;
    goto SeqInstr_1611;

  SeqInstr_1611:
    call {:si_unique_call 2000} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_11563;

  corral_source_split_11563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2001} $i6 := ldv_linux_usb_gadget_register_chrdev_region();
    goto SeqInstr_1612, SeqInstr_1613;

  SeqInstr_1613:
    assume assertsPassed;
    goto SeqInstr_1614;

  SeqInstr_1614:
    call {:si_unique_call 2002} {:cexpr "tmp___1"} boogie_si_record_i32($i6);
    goto corral_source_split_11564;

  corral_source_split_11564:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i5, $i6);
    goto corral_source_split_11565;

  corral_source_split_11565:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_11566;

  corral_source_split_11566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2003} ldv_assume($i8);
    goto corral_source_split_11567;

  corral_source_split_11567:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_1612:
    assume !assertsPassed;
    return;

  SeqInstr_1609:
    assume !assertsPassed;
    return;
}



const ldv_cdev_init_142: ref;

axiom ldv_cdev_init_142 == $sub.ref(0, 709807);

procedure ldv_cdev_init_142($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, $M.5, $M.10, $M.2, $M.9, $M.13, assertsPassed, $M.99, $M.16, $M.15, $M.43, $M.30, $M.31, $M.32, $M.40, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_cdev_init_142($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11569;

  corral_source_split_11569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2004} cdev_init($p0, $p1);
    goto corral_source_split_11570;

  corral_source_split_11570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2005} ldv_cdev_init($0.ref, $p0, $p1);
    goto SeqInstr_1615, SeqInstr_1616;

  SeqInstr_1616:
    assume assertsPassed;
    goto SeqInstr_1617;

  SeqInstr_1617:
    goto corral_source_split_11571;

  corral_source_split_11571:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1615:
    assume !assertsPassed;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 710839);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11573;

  corral_source_split_11573:
    assume {:verifier.code 0} true;
    return;
}



const cdev_add: ref;

axiom cdev_add == $sub.ref(0, 711871);

procedure cdev_add($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation cdev_add($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2006} {:cexpr "cdev_add:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2007} {:cexpr "cdev_add:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_11575;

  corral_source_split_11575:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2008} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2009} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_11576;

  corral_source_split_11576:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 712903);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11578;

  corral_source_split_11578:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_11579;

  corral_source_split_11579:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547520);
    goto corral_source_split_11580;

  corral_source_split_11580:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_11581;

  corral_source_split_11581:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_11582;

  corral_source_split_11582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2010} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 2011} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_11583;

  corral_source_split_11583:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_11584;

  corral_source_split_11584:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 713935);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11586;

  corral_source_split_11586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2012} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 2013} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_11587;

  corral_source_split_11587:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const device_create: ref;

axiom device_create == $sub.ref(0, 714967);

procedure device_create.ref.ref.i32.ref.ref($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation device_create.ref.ref.i32.ref.ref($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2014} {:cexpr "device_create:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_11589;

  corral_source_split_11589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2015} $p5 := external_alloc();
    goto corral_source_split_11590;

  corral_source_split_11590:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_11591;

  corral_source_split_11591:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const ldv_cdev_del_143: ref;

axiom ldv_cdev_del_143 == $sub.ref(0, 715999);

procedure ldv_cdev_del_143($p0: ref);
  free requires assertsPassed;



implementation ldv_cdev_del_143($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11593;

  corral_source_split_11593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2016} cdev_del($p0);
    goto corral_source_split_11594;

  corral_source_split_11594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2017} ldv_cdev_del($0.ref, $p0);
    goto corral_source_split_11595;

  corral_source_split_11595:
    assume {:verifier.code 0} true;
    return;
}



const ldv_unregister_chrdev_region_144: ref;

axiom ldv_unregister_chrdev_region_144 == $sub.ref(0, 717031);

procedure ldv_unregister_chrdev_region_144($i0: i32, $i1: i32);
  free requires assertsPassed;
  modifies $M.112, assertsPassed;



implementation ldv_unregister_chrdev_region_144($i0: i32, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2018} {:cexpr "ldv_unregister_chrdev_region_144:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 2019} {:cexpr "ldv_unregister_chrdev_region_144:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_11597;

  corral_source_split_11597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2020} unregister_chrdev_region($i0, $i1);
    goto corral_source_split_11598;

  corral_source_split_11598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2021} ldv_linux_fs_char_dev_unregister_chrdev_region();
    goto SeqInstr_1618, SeqInstr_1619;

  SeqInstr_1619:
    assume assertsPassed;
    goto SeqInstr_1620;

  SeqInstr_1620:
    goto corral_source_split_11599;

  corral_source_split_11599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2022} ldv_linux_usb_gadget_unregister_chrdev_region();
    goto SeqInstr_1621, SeqInstr_1622;

  SeqInstr_1622:
    assume assertsPassed;
    goto SeqInstr_1623;

  SeqInstr_1623:
    goto corral_source_split_11600;

  corral_source_split_11600:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1621:
    assume !assertsPassed;
    return;

  SeqInstr_1618:
    assume !assertsPassed;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 718063);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11602;

  corral_source_split_11602:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_11603;

  corral_source_split_11603:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(4294967295, $i1);
    goto corral_source_split_11604;

  corral_source_split_11604:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const cdev_init: ref;

axiom cdev_init == $sub.ref(0, 719095);

procedure cdev_init($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation cdev_init($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11606;

  corral_source_split_11606:
    assume {:verifier.code 0} true;
    return;
}



const ldv_cdev_init: ref;

axiom ldv_cdev_init == $sub.ref(0, 720127);

procedure ldv_cdev_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.1, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, $M.5, $M.10, $M.2, $M.9, $M.13, assertsPassed, $M.99, $M.16, $M.15, $M.43, $M.30, $M.31, $M.32, $M.40, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_cdev_init($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11608;

  corral_source_split_11608:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 336)), $mul.ref(304, 1));
    goto corral_source_split_11609;

  corral_source_split_11609:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, $p2);
    goto corral_source_split_11610;

  corral_source_split_11610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2023} ldv_dispatch_register_7_1($p2);
    goto SeqInstr_1624, SeqInstr_1625;

  SeqInstr_1625:
    assume assertsPassed;
    goto SeqInstr_1626;

  SeqInstr_1626:
    goto corral_source_split_11611;

  corral_source_split_11611:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1624:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_7_1: ref;

axiom ldv_dispatch_register_7_1 == $sub.ref(0, 721159);

procedure ldv_dispatch_register_7_1($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, $M.5, $M.10, $M.2, $M.9, $M.13, assertsPassed, $M.99, $M.16, $M.15, $M.43, $M.30, $M.31, $M.32, $M.40, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_dispatch_register_7_1($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11613;

  corral_source_split_11613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2024} $p1 := ldv_xmalloc(16);
    goto corral_source_split_11614;

  corral_source_split_11614:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_11615;

  corral_source_split_11615:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11616;

  corral_source_split_11616:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, $p0);
    goto corral_source_split_11617;

  corral_source_split_11617:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_11618;

  corral_source_split_11618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2025} ldv_file_operations_file_operations_instance_0($p4);
    goto SeqInstr_1627, SeqInstr_1628;

  SeqInstr_1628:
    assume assertsPassed;
    goto SeqInstr_1629;

  SeqInstr_1629:
    goto corral_source_split_11619;

  corral_source_split_11619:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1627:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_file_operations_instance_0: ref;

axiom ldv_file_operations_file_operations_instance_0 == $sub.ref(0, 722191);

procedure ldv_file_operations_file_operations_instance_0($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.5, $M.10, $M.2, $M.9, $CurrAddr, $M.13, assertsPassed, $M.99, $M.16, $M.15, $M.43, $M.30, $M.31, $M.32, $M.40, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_file_operations_file_operations_instance_0($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11621;

  corral_source_split_11621:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_11622;

  corral_source_split_11622:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_11623;

  corral_source_split_11623:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_11624;

  corral_source_split_11624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p7 := $u13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11632;

  corral_source_split_11632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2027} $p8 := ldv_xmalloc(504);
    goto corral_source_split_11633;

  corral_source_split_11633:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_11634;

  corral_source_split_11634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2028} $p10 := ldv_xmalloc(976);
    goto corral_source_split_11635;

  corral_source_split_11635:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_11636;

  corral_source_split_11636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2029} $i12 := ldv_undef_int();
    call {:si_unique_call 2030} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    goto corral_source_split_11637;

  corral_source_split_11637:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_11638;

  corral_source_split_11638:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_11639;

  corral_source_split_11639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2031} $i15 := ldv_undef_int();
    call {:si_unique_call 2032} {:cexpr "tmp___3"} boogie_si_record_i32($i15);
    goto corral_source_split_11640;

  corral_source_split_11640:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_11641;

  corral_source_split_11641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p9);
    goto corral_source_split_11645;

  corral_source_split_11645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2033} ldv_free($p29);
    goto corral_source_split_11646;

  corral_source_split_11646:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p11);
    goto corral_source_split_11647;

  corral_source_split_11647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2034} ldv_free($p30);
    goto corral_source_split_11648;

  corral_source_split_11648:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_11643;

  corral_source_split_11643:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $p17, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $p38, $p39, $p40, $p41, $p42, $p43, $p44, $i45, $i46, $i47, $p48, $p49, $p50, $p51, $p52 := ldv_file_operations_file_operations_instance_0_loop_$bb7($p7, $p9, $p11, $p14, $p17, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $p38, $p39, $p40, $p41, $p42, $p43, $p44, $i45, $i46, $i47, $p48, $p49, $p50, $p51, $p52);
    goto $bb7_last;

  corral_source_split_11650:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_11651;

  corral_source_split_11651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2035} $i19 := ldv_file_operations_instance_probe_0_12($p18, $p11, $p9);
    call {:si_unique_call 2036} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32($i19);
    goto corral_source_split_11652;

  corral_source_split_11652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2037} $i20 := ldv_filter_err_code($i19);
    call {:si_unique_call 2038} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32($i20);
    goto corral_source_split_11653;

  corral_source_split_11653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2039} $i21 := ldv_undef_int();
    call {:si_unique_call 2040} {:cexpr "tmp___2"} boogie_si_record_i32($i21);
    goto corral_source_split_11654;

  corral_source_split_11654:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_11655;

  corral_source_split_11655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    goto corral_source_split_11662;

  corral_source_split_11662:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i20, 0);
    goto corral_source_split_11663;

  corral_source_split_11663:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    goto corral_source_split_11664;

  corral_source_split_11664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2042} ldv_assume($i26);
    goto corral_source_split_11665;

  corral_source_split_11665:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2045} $i27 := ldv_undef_int();
    call {:si_unique_call 2046} {:cexpr "tmp___3"} boogie_si_record_i32($i27);
    goto corral_source_split_11670;

  corral_source_split_11670:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_11671;

  corral_source_split_11671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i28 == 1);
    goto corral_source_split_11673;

  corral_source_split_11673:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb12_dummy;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_11657;

  corral_source_split_11657:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i20, 0);
    goto corral_source_split_11658;

  corral_source_split_11658:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_11659;

  corral_source_split_11659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2041} ldv_assume($i24);
    goto corral_source_split_11660;

  corral_source_split_11660:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $i31, $i32, $i33, $i34, $i35, $i36, $p38, $p39, $p40, $p41, $p42, $p43, $p44, $i45, $i46, $i47, $p48, $p49, $p50 := ldv_file_operations_file_operations_instance_0_loop_$bb10($p7, $p9, $p14, $i31, $i32, $i33, $i34, $i35, $i36, $p38, $p39, $p40, $p41, $p42, $p43, $p44, $i45, $i46, $i47, $p48, $p49, $p50);
    goto $bb10_last;

  corral_source_split_11667:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 1);
    goto corral_source_split_11668;

  corral_source_split_11668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i31, 2);
    goto corral_source_split_11679;

  corral_source_split_11679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i31, 3);
    goto corral_source_split_11691;

  corral_source_split_11691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i31, 4);
    goto corral_source_split_11709;

  corral_source_split_11709:
    assume {:verifier.code 0} true;
    $i36 := $i31;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 5);
    goto corral_source_split_11715;

  corral_source_split_11715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2061} ldv_stop();
    goto corral_source_split_11723;

  corral_source_split_11723:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb31:
    assume $i37 == 1;
    goto corral_source_split_11717;

  corral_source_split_11717:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p7, $mul.ref(0, 240)), $mul.ref(128, 1));
    goto corral_source_split_11719;

  corral_source_split_11719:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.1, $p51);
    goto corral_source_split_11720;

  corral_source_split_11720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2060} ldv_file_operations_instance_release_0_2($p52, $p11, $p9);
    goto corral_source_split_11721;

  corral_source_split_11721:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb27:
    assume $i35 == 1;
    goto corral_source_split_11711;

  corral_source_split_11711:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2059} ldv_file_operations_instance_callback_0_5($u16, $p9, $p14);
    goto SeqInstr_1639, SeqInstr_1640;

  SeqInstr_1640:
    assume assertsPassed;
    goto SeqInstr_1641;

  SeqInstr_1641:
    goto corral_source_split_11713;

  corral_source_split_11713:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb36_dummy;

  SeqInstr_1639:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i34 == 1;
    goto corral_source_split_11693;

  corral_source_split_11693:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2053} $p42 := ldv_xmalloc(1);
    goto corral_source_split_11695;

  corral_source_split_11695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2054} $p43 := ldv_xmalloc(8);
    goto corral_source_split_11696;

  corral_source_split_11696:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_11697;

  corral_source_split_11697:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p14);
    goto corral_source_split_11698;

  corral_source_split_11698:
    assume {:verifier.code 0} true;
    $i46 := $ule.i64($i45, 2147479552);
    goto corral_source_split_11699;

  corral_source_split_11699:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i32($i46);
    goto corral_source_split_11700;

  corral_source_split_11700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2055} ldv_assume($i47);
    goto corral_source_split_11701;

  corral_source_split_11701:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p7, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_11702;

  corral_source_split_11702:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.1, $p48);
    goto corral_source_split_11703;

  corral_source_split_11703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2056} ldv_file_operations_instance_write_0_4($p49, $p9, $p42, $u0, $p44);
    goto SeqInstr_1636, SeqInstr_1637;

  SeqInstr_1637:
    assume assertsPassed;
    goto SeqInstr_1638;

  SeqInstr_1638:
    goto corral_source_split_11704;

  corral_source_split_11704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2057} ldv_free($p42);
    goto corral_source_split_11705;

  corral_source_split_11705:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p44);
    goto corral_source_split_11706;

  corral_source_split_11706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2058} ldv_free($p50);
    goto corral_source_split_11707;

  corral_source_split_11707:
    assume {:verifier.code 0} true;
    goto $bb36;

  SeqInstr_1636:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i33 == 1;
    goto corral_source_split_11681;

  corral_source_split_11681:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2048} $p38 := ldv_xmalloc(1);
    goto corral_source_split_11683;

  corral_source_split_11683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2049} $p39 := ldv_xmalloc(8);
    goto corral_source_split_11684;

  corral_source_split_11684:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_11685;

  corral_source_split_11685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2050} ldv_file_operations_instance_callback_0_20($u15, $p9, $p38, $u0, $p40);
    goto SeqInstr_1633, SeqInstr_1634;

  SeqInstr_1634:
    assume assertsPassed;
    goto SeqInstr_1635;

  SeqInstr_1635:
    goto corral_source_split_11686;

  corral_source_split_11686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2051} ldv_free($p38);
    goto corral_source_split_11687;

  corral_source_split_11687:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_11688;

  corral_source_split_11688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2052} ldv_free($p41);
    goto corral_source_split_11689;

  corral_source_split_11689:
    assume {:verifier.code 0} true;
    goto $bb36;

  SeqInstr_1633:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i32 == 1;
    goto corral_source_split_11675;

  corral_source_split_11675:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2047} ldv_file_operations_instance_callback_0_23($u14, $p9, $u10, $u0);
    goto SeqInstr_1630, SeqInstr_1631;

  SeqInstr_1631:
    assume assertsPassed;
    goto SeqInstr_1632;

  SeqInstr_1632:
    goto corral_source_split_11677;

  corral_source_split_11677:
    assume {:verifier.code 0} true;
    goto $bb36;

  SeqInstr_1630:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_11626;

  corral_source_split_11626:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11627;

  corral_source_split_11627:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_11628;

  corral_source_split_11628:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_11629;

  corral_source_split_11629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2026} ldv_free($p6);
    goto corral_source_split_11630;

  corral_source_split_11630:
    assume {:verifier.code 0} true;
    $p7 := $p5;
    goto $bb3;

  $bb36_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2043} $i31 := ldv_undef_int();
    call {:si_unique_call 2044} {:cexpr "tmp___4"} boogie_si_record_i32($i31);
    goto corral_source_split_11667;

  $bb12_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_11650;
}



const ldv_file_operations_instance_probe_0_12: ref;

axiom ldv_file_operations_instance_probe_0_12 == $sub.ref(0, 723223);

procedure ldv_file_operations_instance_probe_0_12($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_file_operations_instance_probe_0_12($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11725;

  corral_source_split_11725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2062} $i3 := oz_cdev_open($p1, $p2);
    call {:si_unique_call 2063} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_11726;

  corral_source_split_11726:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_filter_err_code: ref;

axiom ldv_filter_err_code == $sub.ref(0, 724255);

procedure ldv_filter_err_code($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_filter_err_code($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2064} {:cexpr "ldv_filter_err_code:arg:ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_11728;

  corral_source_split_11728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2065} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 2066} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11729;

  corral_source_split_11729:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_file_operations_instance_callback_0_23: ref;

axiom ldv_file_operations_instance_callback_0_23 == $sub.ref(0, 725287);

procedure ldv_file_operations_instance_callback_0_23($p0: ref, $p1: ref, $i2: i32, $i3: i64);
  free requires assertsPassed;
  modifies $M.1, $M.5, $M.10, $CurrAddr, $M.13, assertsPassed, $M.99, $M.2, $M.16, $M.15, $M.9, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.43, $M.30, $M.31, $M.32, $M.40, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_file_operations_instance_callback_0_23($p0: ref, $p1: ref, $i2: i32, $i3: i64)
{
  var vslice_dummy_var_195: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2067} {:cexpr "ldv_file_operations_instance_callback_0_23:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 2068} {:cexpr "ldv_file_operations_instance_callback_0_23:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_11731;

  corral_source_split_11731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2069} vslice_dummy_var_195 := oz_cdev_ioctl($p1, $i2, $i3);
    goto SeqInstr_1642, SeqInstr_1643;

  SeqInstr_1643:
    assume assertsPassed;
    goto SeqInstr_1644;

  SeqInstr_1644:
    goto corral_source_split_11732;

  corral_source_split_11732:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1642:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_instance_callback_0_20: ref;

axiom ldv_file_operations_instance_callback_0_20 == $sub.ref(0, 726319);

procedure ldv_file_operations_instance_callback_0_20($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;
  modifies $M.1, $M.10, assertsPassed, $M.2, $CurrAddr;



implementation ldv_file_operations_instance_callback_0_20($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref)
{
  var vslice_dummy_var_196: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2070} {:cexpr "ldv_file_operations_instance_callback_0_20:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_11734;

  corral_source_split_11734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2071} vslice_dummy_var_196 := oz_cdev_read($p1, $p2, $i3, $p4);
    goto SeqInstr_1645, SeqInstr_1646;

  SeqInstr_1646:
    assume assertsPassed;
    goto SeqInstr_1647;

  SeqInstr_1647:
    goto corral_source_split_11735;

  corral_source_split_11735:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1645:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_instance_write_0_4: ref;

axiom ldv_file_operations_instance_write_0_4 == $sub.ref(0, 727351);

procedure ldv_file_operations_instance_write_0_4($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;
  modifies $M.1, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.10, $M.2, $M.9, assertsPassed, $CurrAddr;



implementation ldv_file_operations_instance_write_0_4($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref)
{
  var vslice_dummy_var_197: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2072} {:cexpr "ldv_file_operations_instance_write_0_4:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_11737;

  corral_source_split_11737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2073} vslice_dummy_var_197 := oz_cdev_write($p1, $p2, $i3, $p4);
    goto SeqInstr_1648, SeqInstr_1649;

  SeqInstr_1649:
    assume assertsPassed;
    goto SeqInstr_1650;

  SeqInstr_1650:
    goto corral_source_split_11738;

  corral_source_split_11738:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1648:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_instance_callback_0_5: ref;

axiom ldv_file_operations_instance_callback_0_5 == $sub.ref(0, 728383);

procedure ldv_file_operations_instance_callback_0_5($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.10, assertsPassed, $M.2, $M.1;



implementation ldv_file_operations_instance_callback_0_5($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_198: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11740;

  corral_source_split_11740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2074} vslice_dummy_var_198 := oz_cdev_poll($p1, $p2);
    goto SeqInstr_1651, SeqInstr_1652;

  SeqInstr_1652:
    assume assertsPassed;
    goto SeqInstr_1653;

  SeqInstr_1653:
    goto corral_source_split_11741;

  corral_source_split_11741:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1651:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_instance_release_0_2: ref;

axiom ldv_file_operations_instance_release_0_2 == $sub.ref(0, 729415);

procedure ldv_file_operations_instance_release_0_2($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_file_operations_instance_release_0_2($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_199: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11743;

  corral_source_split_11743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2075} vslice_dummy_var_199 := oz_cdev_release($p1, $p2);
    goto corral_source_split_11744;

  corral_source_split_11744:
    assume {:verifier.code 0} true;
    return;
}



const alloc_chrdev_region: ref;

axiom alloc_chrdev_region == $sub.ref(0, 730447);

procedure alloc_chrdev_region($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation alloc_chrdev_region($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2076} {:cexpr "alloc_chrdev_region:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2077} {:cexpr "alloc_chrdev_region:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_11746;

  corral_source_split_11746:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2078} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 2079} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_11747;

  corral_source_split_11747:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_linux_fs_char_dev_register_chrdev_region: ref;

axiom ldv_linux_fs_char_dev_register_chrdev_region == $sub.ref(0, 731479);

procedure ldv_linux_fs_char_dev_register_chrdev_region() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.112, assertsPassed;



implementation ldv_linux_fs_char_dev_register_chrdev_region() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11749;

  corral_source_split_11749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2080} $i0 := ldv_undef_int_nonpositive();
    call {:si_unique_call 2081} {:cexpr "is_reg"} boogie_si_record_i32($i0);
    goto corral_source_split_11750;

  corral_source_split_11750:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11751;

  corral_source_split_11751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_11753;

  corral_source_split_11753:
    assume {:verifier.code 0} true;
    $i2 := $M.112;
    goto corral_source_split_11754;

  corral_source_split_11754:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_11755;

  corral_source_split_11755:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_11756;

  corral_source_split_11756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2082} ldv_assert_linux_fs_char_dev__double_registration($i4);
    goto SeqInstr_1654, SeqInstr_1655;

  SeqInstr_1655:
    assume assertsPassed;
    goto SeqInstr_1656;

  SeqInstr_1656:
    goto corral_source_split_11757;

  corral_source_split_11757:
    assume {:verifier.code 0} true;
    $M.112 := 1;
    call {:si_unique_call 2083} {:cexpr "ldv_linux_fs_char_dev_usb_gadget_chrdev"} boogie_si_record_i32(1);
    goto corral_source_split_11758;

  corral_source_split_11758:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1654:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_gadget_register_chrdev_region: ref;

axiom ldv_linux_usb_gadget_register_chrdev_region == $sub.ref(0, 732511);

procedure ldv_linux_usb_gadget_register_chrdev_region() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_register_chrdev_region() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11760;

  corral_source_split_11760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2084} $i0 := ldv_undef_int_nonpositive();
    call {:si_unique_call 2085} {:cexpr "is_reg"} boogie_si_record_i32($i0);
    goto corral_source_split_11761;

  corral_source_split_11761:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_11762;

  corral_source_split_11762:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_11764;

  corral_source_split_11764:
    assume {:verifier.code 0} true;
    $i2 := $M.110;
    goto corral_source_split_11765;

  corral_source_split_11765:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_11766;

  corral_source_split_11766:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_11767;

  corral_source_split_11767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2086} ldv_assert_linux_usb_gadget__chrdev_registration_with_usb_gadget($i4);
    goto SeqInstr_1657, SeqInstr_1658;

  SeqInstr_1658:
    assume assertsPassed;
    goto SeqInstr_1659;

  SeqInstr_1659:
    goto corral_source_split_11768;

  corral_source_split_11768:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1657:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_usb_gadget__chrdev_registration_with_usb_gadget: ref;

axiom ldv_assert_linux_usb_gadget__chrdev_registration_with_usb_gadget == $sub.ref(0, 733543);

procedure ldv_assert_linux_usb_gadget__chrdev_registration_with_usb_gadget($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_gadget__chrdev_registration_with_usb_gadget($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2087} {:cexpr "ldv_assert_linux_usb_gadget__chrdev_registration_with_usb_gadget:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11770;

  corral_source_split_11770:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11771;

  corral_source_split_11771:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11773;

  corral_source_split_11773:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2088} __VERIFIER_error();
    goto SeqInstr_1660, SeqInstr_1661;

  SeqInstr_1661:
    assume assertsPassed;
    goto SeqInstr_1662;

  SeqInstr_1662:
    goto corral_source_split_11774;

  corral_source_split_11774:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1660:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_char_dev__double_registration: ref;

axiom ldv_assert_linux_fs_char_dev__double_registration == $sub.ref(0, 734575);

procedure ldv_assert_linux_fs_char_dev__double_registration($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_char_dev__double_registration($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2089} {:cexpr "ldv_assert_linux_fs_char_dev__double_registration:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11776;

  corral_source_split_11776:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11777;

  corral_source_split_11777:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11779;

  corral_source_split_11779:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2090} __VERIFIER_error();
    goto SeqInstr_1663, SeqInstr_1664;

  SeqInstr_1664:
    assume assertsPassed;
    goto SeqInstr_1665;

  SeqInstr_1665:
    goto corral_source_split_11780;

  corral_source_split_11780:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1663:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_dispatch_deregister_io_instance_8_9_4: ref;

axiom ldv_dispatch_deregister_io_instance_8_9_4 == $sub.ref(0, 735607);

procedure ldv_dispatch_deregister_io_instance_8_9_4();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_io_instance_8_9_4()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11782;

  corral_source_split_11782:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_io_instance_9_9_5: ref;

axiom ldv_dispatch_deregister_io_instance_9_9_5 == $sub.ref(0, 736639);

procedure ldv_dispatch_deregister_io_instance_9_9_5();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_io_instance_9_9_5()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11784;

  corral_source_split_11784:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_register_io_instance_8_9_6: ref;

axiom ldv_dispatch_register_io_instance_8_9_6 == $sub.ref(0, 737671);

procedure ldv_dispatch_register_io_instance_8_9_6();
  free requires assertsPassed;
  modifies $M.1, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, $M.15, $M.16, assertsPassed, $M.43, $M.41, $M.12, $M.13;



implementation ldv_dispatch_register_io_instance_8_9_6()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11786;

  corral_source_split_11786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2091} $p0 := ldv_xmalloc(16);
    goto corral_source_split_11787;

  corral_source_split_11787:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_11788;

  corral_source_split_11788:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_11789;

  corral_source_split_11789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2092} ldv_struct_hc_driver_io_instance_3($p2);
    goto SeqInstr_1666, SeqInstr_1667;

  SeqInstr_1667:
    assume assertsPassed;
    goto SeqInstr_1668;

  SeqInstr_1668:
    goto corral_source_split_11790;

  corral_source_split_11790:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1666:
    assume !assertsPassed;
    return;
}



const ldv_struct_hc_driver_io_instance_3: ref;

axiom ldv_struct_hc_driver_io_instance_3 == $sub.ref(0, 738703);

procedure ldv_struct_hc_driver_io_instance_3($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.15, $M.16, $CurrAddr, assertsPassed, $M.43, $M.41, $M.12, $M.13;



implementation ldv_struct_hc_driver_io_instance_3($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i16;
  var $i41: i32;
  var $i42: i16;
  var $i43: i32;
  var $i44: i16;
  var $i45: i32;
  var $i46: i16;
  var $p47: ref;
  var $p48: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11792;

  corral_source_split_11792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2093} $p1 := ldv_xmalloc(192);
    goto corral_source_split_11793;

  corral_source_split_11793:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_11794;

  corral_source_split_11794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2094} $p3 := ldv_xmalloc(968);
    goto corral_source_split_11795;

  corral_source_split_11795:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_11796;

  corral_source_split_11796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2095} $p5 := ldv_xmalloc(72);
    goto corral_source_split_11797;

  corral_source_split_11797:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_11798;

  corral_source_split_11798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2096} $i7 := ldv_undef_int();
    call {:si_unique_call 2097} {:cexpr "tmp___3"} boogie_si_record_i32($i7);
    goto corral_source_split_11799;

  corral_source_split_11799:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_11800;

  corral_source_split_11800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p2);
    goto corral_source_split_11804;

  corral_source_split_11804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2098} ldv_free($p21);
    goto corral_source_split_11805;

  corral_source_split_11805:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p4);
    goto corral_source_split_11806;

  corral_source_split_11806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2099} ldv_free($p22);
    goto corral_source_split_11807;

  corral_source_split_11807:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p6);
    goto corral_source_split_11808;

  corral_source_split_11808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2100} ldv_free($p23);
    goto corral_source_split_11809;

  corral_source_split_11809:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_11802;

  corral_source_split_11802:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p9, $p10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $p37, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $p47, $p48 := ldv_struct_hc_driver_io_instance_3_loop_$bb4($p2, $p4, $p6, $p9, $p10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $p37, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $p47, $p48);
    goto $bb4_last;

  corral_source_split_11811:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.115, $p9);
    goto corral_source_split_11812;

  corral_source_split_11812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2101} $i11 := ldv_io_instance_probe_3_11($p10, $p4);
    call {:si_unique_call 2102} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32($i11);
    goto corral_source_split_11813;

  corral_source_split_11813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2103} $i12 := ldv_filter_err_code($i11);
    call {:si_unique_call 2104} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32($i12);
    goto corral_source_split_11814;

  corral_source_split_11814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2105} $i13 := ldv_undef_int();
    call {:si_unique_call 2106} {:cexpr "tmp___2"} boogie_si_record_i32($i13);
    goto corral_source_split_11815;

  corral_source_split_11815:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_11816;

  corral_source_split_11816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    goto corral_source_split_11823;

  corral_source_split_11823:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i12, 0);
    goto corral_source_split_11824;

  corral_source_split_11824:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_11825;

  corral_source_split_11825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2108} ldv_assume($i18);
    goto corral_source_split_11826;

  corral_source_split_11826:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2111} $i19 := ldv_undef_int();
    call {:si_unique_call 2112} {:cexpr "tmp___3"} boogie_si_record_i32($i19);
    goto corral_source_split_11831;

  corral_source_split_11831:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_11832;

  corral_source_split_11832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i20 == 1);
    goto corral_source_split_11834;

  corral_source_split_11834:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb9_dummy;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_11818;

  corral_source_split_11818:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 0);
    goto corral_source_split_11819;

  corral_source_split_11819:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_11820;

  corral_source_split_11820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2107} ldv_assume($i16);
    goto corral_source_split_11821;

  corral_source_split_11821:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $p37, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46 := ldv_struct_hc_driver_io_instance_3_loop_$bb7($p2, $p4, $p6, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $p37, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46);
    goto $bb7_last;

  corral_source_split_11828:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 1);
    goto corral_source_split_11829;

  corral_source_split_11829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i24, 2);
    goto corral_source_split_11840;

  corral_source_split_11840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i24, 3);
    goto corral_source_split_11846;

  corral_source_split_11846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i24, 4);
    goto corral_source_split_11852;

  corral_source_split_11852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i24, 5);
    goto corral_source_split_11860;

  corral_source_split_11860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i24, 6);
    goto corral_source_split_11876;

  corral_source_split_11876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i24, 7);
    goto corral_source_split_11882;

  corral_source_split_11882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i24, 8);
    goto corral_source_split_11888;

  corral_source_split_11888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i24, 9);
    goto corral_source_split_11894;

  corral_source_split_11894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i24, 10);
    goto corral_source_split_11900;

  corral_source_split_11900:
    assume {:verifier.code 0} true;
    $i35 := $i24;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 11);
    goto corral_source_split_11906;

  corral_source_split_11906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2128} ldv_stop();
    goto corral_source_split_11914;

  corral_source_split_11914:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb52:
    assume $i36 == 1;
    goto corral_source_split_11908;

  corral_source_split_11908:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($u17, $mul.ref(0, 352)), $mul.ref(72, 1));
    goto corral_source_split_11910;

  corral_source_split_11910:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.116, $p47);
    goto corral_source_split_11911;

  corral_source_split_11911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2127} ldv_io_instance_release_3_2($p48, $p4);
    goto corral_source_split_11912;

  corral_source_split_11912:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb48:
    assume $i34 == 1;
    goto corral_source_split_11902;

  corral_source_split_11902:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2126} ldv_io_instance_callback_3_4($u23, $p4);
    goto SeqInstr_1684, SeqInstr_1685;

  SeqInstr_1685:
    assume assertsPassed;
    goto SeqInstr_1686;

  SeqInstr_1686:
    goto corral_source_split_11904;

  corral_source_split_11904:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb57_dummy;

  SeqInstr_1684:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i33 == 1;
    goto corral_source_split_11896;

  corral_source_split_11896:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2125} ldv_io_instance_callback_3_17($u23, $p4);
    goto SeqInstr_1681, SeqInstr_1682;

  SeqInstr_1682:
    assume assertsPassed;
    goto SeqInstr_1683;

  SeqInstr_1683:
    goto corral_source_split_11898;

  corral_source_split_11898:
    assume {:verifier.code 0} true;
    goto $bb57;

  SeqInstr_1681:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i32 == 1;
    goto corral_source_split_11890;

  corral_source_split_11890:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2124} ldv_io_instance_callback_3_18($u24, $p4, $p6);
    goto corral_source_split_11892;

  corral_source_split_11892:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb36:
    assume $i31 == 1;
    goto corral_source_split_11884;

  corral_source_split_11884:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2123} ldv_io_instance_callback_3_19($u24, $p4, $p6);
    goto corral_source_split_11886;

  corral_source_split_11886:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb32:
    assume $i30 == 1;
    goto corral_source_split_11878;

  corral_source_split_11878:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2122} ldv_io_instance_callback_3_20($u23, $p4);
    goto corral_source_split_11880;

  corral_source_split_11880:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb28:
    assume $i29 == 1;
    goto corral_source_split_11862;

  corral_source_split_11862:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2119} $p38 := ldv_xmalloc(1);
    goto corral_source_split_11864;

  corral_source_split_11864:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($u21);
    goto corral_source_split_11865;

  corral_source_split_11865:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i16($i39);
    goto corral_source_split_11866;

  corral_source_split_11866:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($u21);
    goto corral_source_split_11867;

  corral_source_split_11867:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    goto corral_source_split_11868;

  corral_source_split_11868:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($u21);
    goto corral_source_split_11869;

  corral_source_split_11869:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    goto corral_source_split_11870;

  corral_source_split_11870:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($u21);
    goto corral_source_split_11871;

  corral_source_split_11871:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i16($i45);
    goto corral_source_split_11872;

  corral_source_split_11872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2120} ldv_io_instance_callback_3_21($u22, $p4, $i40, $i42, $i44, $p38, $i46);
    goto SeqInstr_1678, SeqInstr_1679;

  SeqInstr_1679:
    assume assertsPassed;
    goto SeqInstr_1680;

  SeqInstr_1680:
    goto corral_source_split_11873;

  corral_source_split_11873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2121} ldv_free($p38);
    goto corral_source_split_11874;

  corral_source_split_11874:
    assume {:verifier.code 0} true;
    goto $bb57;

  SeqInstr_1678:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i28 == 1;
    goto corral_source_split_11854;

  corral_source_split_11854:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2116} $p37 := ldv_xmalloc(1);
    goto corral_source_split_11856;

  corral_source_split_11856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2117} ldv_io_instance_callback_3_24($u20, $p4, $p37);
    goto SeqInstr_1675, SeqInstr_1676;

  SeqInstr_1676:
    assume assertsPassed;
    goto SeqInstr_1677;

  SeqInstr_1677:
    goto corral_source_split_11857;

  corral_source_split_11857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2118} ldv_free($p37);
    goto corral_source_split_11858;

  corral_source_split_11858:
    assume {:verifier.code 0} true;
    goto $bb57;

  SeqInstr_1675:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i27 == 1;
    goto corral_source_split_11848;

  corral_source_split_11848:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2115} ldv_io_instance_callback_3_27($u19, $p4);
    goto corral_source_split_11850;

  corral_source_split_11850:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb16:
    assume $i26 == 1;
    goto corral_source_split_11842;

  corral_source_split_11842:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2114} ldv_io_instance_callback_3_28($u18, $p4, $p2, $u10);
    goto SeqInstr_1672, SeqInstr_1673;

  SeqInstr_1673:
    assume assertsPassed;
    goto SeqInstr_1674;

  SeqInstr_1674:
    goto corral_source_split_11844;

  corral_source_split_11844:
    assume {:verifier.code 0} true;
    goto $bb57;

  SeqInstr_1672:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i25 == 1;
    goto corral_source_split_11836;

  corral_source_split_11836:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2113} ldv_io_instance_callback_3_31($u18, $p4, $p2, $u10);
    goto SeqInstr_1669, SeqInstr_1670;

  SeqInstr_1670:
    assume assertsPassed;
    goto SeqInstr_1671;

  SeqInstr_1671:
    goto corral_source_split_11838;

  corral_source_split_11838:
    assume {:verifier.code 0} true;
    goto $bb57;

  SeqInstr_1669:
    assume !assertsPassed;
    return;

  $bb57_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2109} $i24 := ldv_undef_int();
    call {:si_unique_call 2110} {:cexpr "tmp___4"} boogie_si_record_i32($i24);
    goto corral_source_split_11828;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($u17, $mul.ref(0, 352)), $mul.ref(48, 1));
    goto corral_source_split_11811;
}



const ldv_io_instance_probe_3_11: ref;

axiom ldv_io_instance_probe_3_11 == $sub.ref(0, 739735);

procedure ldv_io_instance_probe_3_11($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_io_instance_probe_3_11($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11916;

  corral_source_split_11916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2129} $i2 := oz_hcd_start($p1);
    call {:si_unique_call 2130} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_11917;

  corral_source_split_11917:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_io_instance_callback_3_31: ref;

axiom ldv_io_instance_callback_3_31 == $sub.ref(0, 740767);

procedure ldv_io_instance_callback_3_31($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.1, $M.15, $CurrAddr, assertsPassed, $M.12, $M.13;



implementation ldv_io_instance_callback_3_31($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var vslice_dummy_var_200: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2131} {:cexpr "ldv_io_instance_callback_3_31:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_11919;

  corral_source_split_11919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2132} vslice_dummy_var_200 := oz_hcd_urb_enqueue($p1, $p2, $i3);
    goto SeqInstr_1687, SeqInstr_1688;

  SeqInstr_1688:
    assume assertsPassed;
    goto SeqInstr_1689;

  SeqInstr_1689:
    goto corral_source_split_11920;

  corral_source_split_11920:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1687:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_3_28: ref;

axiom ldv_io_instance_callback_3_28 == $sub.ref(0, 741799);

procedure ldv_io_instance_callback_3_28($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.1, $M.15, $CurrAddr, assertsPassed, $M.12, $M.13;



implementation ldv_io_instance_callback_3_28($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var vslice_dummy_var_201: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2133} {:cexpr "ldv_io_instance_callback_3_28:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_11922;

  corral_source_split_11922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2134} vslice_dummy_var_201 := oz_hcd_urb_dequeue($p1, $p2, $i3);
    goto SeqInstr_1690, SeqInstr_1691;

  SeqInstr_1691:
    assume assertsPassed;
    goto SeqInstr_1692;

  SeqInstr_1692:
    goto corral_source_split_11923;

  corral_source_split_11923:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1690:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_3_27: ref;

axiom ldv_io_instance_callback_3_27 == $sub.ref(0, 742831);

procedure ldv_io_instance_callback_3_27($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_io_instance_callback_3_27($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11925;

  corral_source_split_11925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2135} oz_hcd_shutdown($p1);
    goto corral_source_split_11926;

  corral_source_split_11926:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_3_24: ref;

axiom ldv_io_instance_callback_3_24 == $sub.ref(0, 743863);

procedure ldv_io_instance_callback_3_24($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.1, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.16, $CurrAddr, assertsPassed;



implementation ldv_io_instance_callback_3_24($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_202: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11928;

  corral_source_split_11928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2136} vslice_dummy_var_202 := oz_hcd_hub_status_data($p1, $p2);
    goto SeqInstr_1693, SeqInstr_1694;

  SeqInstr_1694:
    assume assertsPassed;
    goto SeqInstr_1695;

  SeqInstr_1695:
    goto corral_source_split_11929;

  corral_source_split_11929:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1693:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_3_21: ref;

axiom ldv_io_instance_callback_3_21 == $sub.ref(0, 744895);

procedure ldv_io_instance_callback_3_21($p0: ref, $p1: ref, $i2: i16, $i3: i16, $i4: i16, $p5: ref, $i6: i16);
  free requires assertsPassed;
  modifies $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.1, $CurrAddr, $M.43, assertsPassed;



implementation ldv_io_instance_callback_3_21($p0: ref, $p1: ref, $i2: i16, $i3: i16, $i4: i16, $p5: ref, $i6: i16)
{
  var $i7: i32;
  var $i8: i16;
  var $i9: i32;
  var $i10: i16;
  var $i11: i32;
  var $i12: i16;
  var $i13: i32;
  var $i14: i16;
  var vslice_dummy_var_203: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2137} {:cexpr "ldv_io_instance_callback_3_21:arg:arg2"} boogie_si_record_i16($i2);
    call {:si_unique_call 2138} {:cexpr "ldv_io_instance_callback_3_21:arg:arg3"} boogie_si_record_i16($i3);
    call {:si_unique_call 2139} {:cexpr "ldv_io_instance_callback_3_21:arg:arg4"} boogie_si_record_i16($i4);
    call {:si_unique_call 2140} {:cexpr "ldv_io_instance_callback_3_21:arg:arg6"} boogie_si_record_i16($i6);
    goto corral_source_split_11931;

  corral_source_split_11931:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i2);
    goto corral_source_split_11932;

  corral_source_split_11932:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_11933;

  corral_source_split_11933:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i3);
    goto corral_source_split_11934;

  corral_source_split_11934:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_11935;

  corral_source_split_11935:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i4);
    goto corral_source_split_11936;

  corral_source_split_11936:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_11937;

  corral_source_split_11937:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i6);
    goto corral_source_split_11938;

  corral_source_split_11938:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    goto corral_source_split_11939;

  corral_source_split_11939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2141} vslice_dummy_var_203 := oz_hcd_hub_control($p1, $i8, $i10, $i12, $p5, $i14);
    goto SeqInstr_1696, SeqInstr_1697;

  SeqInstr_1697:
    assume assertsPassed;
    goto SeqInstr_1698;

  SeqInstr_1698:
    goto corral_source_split_11940;

  corral_source_split_11940:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1696:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_3_20: ref;

axiom ldv_io_instance_callback_3_20 == $sub.ref(0, 745927);

procedure ldv_io_instance_callback_3_20($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.41;



implementation ldv_io_instance_callback_3_20($p0: ref, $p1: ref)
{
  var vslice_dummy_var_204: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11942;

  corral_source_split_11942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2142} vslice_dummy_var_204 := oz_hcd_get_frame_number($p1);
    goto corral_source_split_11943;

  corral_source_split_11943:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_3_19: ref;

axiom ldv_io_instance_callback_3_19 == $sub.ref(0, 746959);

procedure ldv_io_instance_callback_3_19($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_io_instance_callback_3_19($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11945;

  corral_source_split_11945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2143} oz_hcd_endpoint_reset($p1, $p2);
    goto corral_source_split_11946;

  corral_source_split_11946:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_3_18: ref;

axiom ldv_io_instance_callback_3_18 == $sub.ref(0, 747991);

procedure ldv_io_instance_callback_3_18($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_io_instance_callback_3_18($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11948;

  corral_source_split_11948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2144} oz_hcd_endpoint_disable($p1, $p2);
    goto corral_source_split_11949;

  corral_source_split_11949:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_3_17: ref;

axiom ldv_io_instance_callback_3_17 == $sub.ref(0, 749023);

procedure ldv_io_instance_callback_3_17($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.16, assertsPassed;



implementation ldv_io_instance_callback_3_17($p0: ref, $p1: ref)
{
  var vslice_dummy_var_205: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11951;

  corral_source_split_11951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2145} vslice_dummy_var_205 := oz_hcd_bus_suspend($p1);
    goto SeqInstr_1699, SeqInstr_1700;

  SeqInstr_1700:
    assume assertsPassed;
    goto SeqInstr_1701;

  SeqInstr_1701:
    goto corral_source_split_11952;

  corral_source_split_11952:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1699:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_3_4: ref;

axiom ldv_io_instance_callback_3_4 == $sub.ref(0, 750055);

procedure ldv_io_instance_callback_3_4($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.16, assertsPassed;



implementation ldv_io_instance_callback_3_4($p0: ref, $p1: ref)
{
  var vslice_dummy_var_206: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11954;

  corral_source_split_11954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2146} vslice_dummy_var_206 := oz_hcd_bus_resume($p1);
    goto SeqInstr_1702, SeqInstr_1703;

  SeqInstr_1703:
    assume assertsPassed;
    goto SeqInstr_1704;

  SeqInstr_1704:
    goto corral_source_split_11955;

  corral_source_split_11955:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1702:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_release_3_2: ref;

axiom ldv_io_instance_release_3_2 == $sub.ref(0, 751087);

procedure ldv_io_instance_release_3_2($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_io_instance_release_3_2($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11957;

  corral_source_split_11957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2147} oz_hcd_stop($p1);
    goto corral_source_split_11958;

  corral_source_split_11958:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_register_io_instance_9_9_7: ref;

axiom ldv_dispatch_register_io_instance_9_9_7 == $sub.ref(0, 752119);

procedure ldv_dispatch_register_io_instance_9_9_7();
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.14, $M.46, $M.17, $M.2, $M.43, $M.16, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $M.15, $M.9, $M.42, $M.45, $M.40, $M.12, $M.41, $M.30, $M.31, $M.32, $M.39, $M.13, $M.33, $M.34, $M.35, $M.36, $M.37, $M.48, $M.38, $M.96, $M.97, $M.44, $M.95, $M.103, $M.104, $M.105, $M.106, $M.107;



implementation ldv_dispatch_register_io_instance_9_9_7()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11960;

  corral_source_split_11960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2148} $p0 := ldv_xmalloc(16);
    goto corral_source_split_11961;

  corral_source_split_11961:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_11962;

  corral_source_split_11962:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_11963;

  corral_source_split_11963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2149} ldv_struct_oz_app_if_io_instance_4($p2);
    goto SeqInstr_1705, SeqInstr_1706;

  SeqInstr_1706:
    assume assertsPassed;
    goto SeqInstr_1707;

  SeqInstr_1707:
    goto corral_source_split_11964;

  corral_source_split_11964:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1705:
    assume !assertsPassed;
    return;
}



const ldv_struct_oz_app_if_io_instance_4: ref;

axiom ldv_struct_oz_app_if_io_instance_4 == $sub.ref(0, 753151);

procedure ldv_struct_oz_app_if_io_instance_4($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.46, $M.17, $CurrAddr, $M.2, $M.43, $M.16, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $M.15, $M.9, $M.42, $M.45, $M.40, $M.12, $M.41, $M.30, $M.31, $M.32, $M.39, $M.13, $M.33, $M.34, $M.35, $M.36, $M.37, $M.48, $M.38, $M.96, $M.97, $M.44, $M.95, $M.103, $M.104, $M.105, $M.106, $M.107;



implementation ldv_struct_oz_app_if_io_instance_4($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i8;
  var $i34: i32;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11966;

  corral_source_split_11966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2150} $p1 := ldv_xmalloc(2);
    goto corral_source_split_11967;

  corral_source_split_11967:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_11968;

  corral_source_split_11968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2151} $p3 := ldv_xmalloc(1232);
    goto corral_source_split_11969;

  corral_source_split_11969:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_11970;

  corral_source_split_11970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2152} $i5 := ldv_undef_int();
    call {:si_unique_call 2153} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    goto corral_source_split_11971;

  corral_source_split_11971:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_11972;

  corral_source_split_11972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p2);
    goto corral_source_split_11976;

  corral_source_split_11976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2154} ldv_free($p21);
    goto corral_source_split_11977;

  corral_source_split_11977:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p4);
    goto corral_source_split_11978;

  corral_source_split_11978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2155} ldv_free($p22);
    goto corral_source_split_11979;

  corral_source_split_11979:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_11974;

  corral_source_split_11974:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $p23, $p24, $p25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37 := ldv_struct_oz_app_if_io_instance_4_loop_$bb4($p2, $p4, $p7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $p23, $p24, $p25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37);
    goto $bb4_last;

  corral_source_split_11981:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.117, $p7);
    goto corral_source_split_11982;

  corral_source_split_11982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2156} $i9 := ldv_io_instance_probe_4_11($p8, $p4, $u10);
    goto SeqInstr_1708, SeqInstr_1709;

  SeqInstr_1709:
    assume assertsPassed;
    goto SeqInstr_1710;

  SeqInstr_1710:
    call {:si_unique_call 2157} {:cexpr "ldv_4_ret_default"} boogie_si_record_i32($i9);
    goto corral_source_split_11983;

  corral_source_split_11983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2158} $i10 := ldv_filter_err_code($i9);
    call {:si_unique_call 2159} {:cexpr "ldv_4_ret_default"} boogie_si_record_i32($i10);
    goto corral_source_split_11984;

  corral_source_split_11984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2160} $i11 := ldv_undef_int();
    call {:si_unique_call 2161} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_11985;

  corral_source_split_11985:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_11986;

  corral_source_split_11986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    goto corral_source_split_11995;

  corral_source_split_11995:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i10, 0);
    goto corral_source_split_11996;

  corral_source_split_11996:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_11997;

  corral_source_split_11997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2165} ldv_assume($i18);
    goto corral_source_split_11998;

  corral_source_split_11998:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2170} $i19 := ldv_undef_int();
    call {:si_unique_call 2171} {:cexpr "tmp___2"} boogie_si_record_i32($i19);
    goto corral_source_split_12010;

  corral_source_split_12010:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_12011;

  corral_source_split_12011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i20 == 1);
    goto corral_source_split_12013;

  corral_source_split_12013:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb12_dummy;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_11988;

  corral_source_split_11988:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i10, 0);
    goto corral_source_split_11989;

  corral_source_split_11989:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_11990;

  corral_source_split_11990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2162} ldv_assume($i14);
    goto corral_source_split_11991;

  corral_source_split_11991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2163} $i15 := ldv_undef_int();
    call {:si_unique_call 2164} {:cexpr "tmp___5"} boogie_si_record_i32($i15);
    goto corral_source_split_11992;

  corral_source_split_11992:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_11993;

  corral_source_split_11993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i16 == 1);
    goto corral_source_split_12004;

  corral_source_split_12004:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $p25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37 := ldv_struct_oz_app_if_io_instance_4_loop_$bb10($p2, $p4, $p25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37);
    goto $bb10_last;

  corral_source_split_12006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2168} $i26 := ldv_undef_int();
    call {:si_unique_call 2169} {:cexpr "tmp___4"} boogie_si_record_i32($i26);
    goto corral_source_split_12007;

  corral_source_split_12007:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 1);
    goto corral_source_split_12008;

  corral_source_split_12008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i26, 2);
    goto corral_source_split_12021;

  corral_source_split_12021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i26, 3);
    goto corral_source_split_12027;

  corral_source_split_12027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i26, 4);
    goto corral_source_split_12033;

  corral_source_split_12033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i26, 5);
    goto corral_source_split_12039;

  corral_source_split_12039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2177} ldv_stop();
    goto corral_source_split_12049;

  corral_source_split_12049:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2178} ldv_free($p25);
    goto corral_source_split_12051;

  corral_source_split_12051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2179} $i36 := ldv_undef_int();
    call {:si_unique_call 2180} {:cexpr "tmp___5"} boogie_si_record_i32($i36);
    goto corral_source_split_12052;

  corral_source_split_12052:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_12053;

  corral_source_split_12053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb39_dummy;

  $bb14:
    assume $i37 == 1;
    goto corral_source_split_12015;

  corral_source_split_12015:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($u25, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_12000;

  corral_source_split_12000:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.118, $p23);
    goto corral_source_split_12001;

  corral_source_split_12001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2166} ldv_io_instance_release_4_2($p24, $p4, $u10);
    goto SeqInstr_1711, SeqInstr_1712;

  SeqInstr_1712:
    assume assertsPassed;
    goto SeqInstr_1713;

  SeqInstr_1713:
    goto corral_source_split_12002;

  corral_source_split_12002:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_1711:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i31 == 1;
    goto corral_source_split_12041;

  corral_source_split_12041:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($u30);
    goto corral_source_split_12043;

  corral_source_split_12043:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i32);
    goto corral_source_split_12044;

  corral_source_split_12044:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($u30);
    goto corral_source_split_12045;

  corral_source_split_12045:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_12046;

  corral_source_split_12046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2176} ldv_io_instance_callback_4_4($u31, $p4, $i33, $p25, $i35);
    goto SeqInstr_1723, SeqInstr_1724;

  SeqInstr_1724:
    assume assertsPassed;
    goto SeqInstr_1725;

  SeqInstr_1725:
    goto corral_source_split_12047;

  corral_source_split_12047:
    assume {:verifier.code 0} true;
    goto $bb36;

  SeqInstr_1723:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i30 == 1;
    goto corral_source_split_12035;

  corral_source_split_12035:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2175} ldv_io_instance_callback_4_21($u29, $p4);
    goto SeqInstr_1720, SeqInstr_1721;

  SeqInstr_1721:
    assume assertsPassed;
    goto SeqInstr_1722;

  SeqInstr_1722:
    goto corral_source_split_12037;

  corral_source_split_12037:
    assume {:verifier.code 0} true;
    goto $bb36;

  SeqInstr_1720:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i29 == 1;
    goto corral_source_split_12029;

  corral_source_split_12029:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2174} ldv_io_instance_callback_4_22($u28);
    goto SeqInstr_1717, SeqInstr_1718;

  SeqInstr_1718:
    assume assertsPassed;
    goto SeqInstr_1719;

  SeqInstr_1719:
    goto corral_source_split_12031;

  corral_source_split_12031:
    assume {:verifier.code 0} true;
    goto $bb36;

  SeqInstr_1717:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i28 == 1;
    goto corral_source_split_12023;

  corral_source_split_12023:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2173} ldv_io_instance_callback_4_23($u27, $p4, $p2);
    goto SeqInstr_1714, SeqInstr_1715;

  SeqInstr_1715:
    assume assertsPassed;
    goto SeqInstr_1716;

  SeqInstr_1716:
    goto corral_source_split_12025;

  corral_source_split_12025:
    assume {:verifier.code 0} true;
    goto $bb36;

  SeqInstr_1714:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i27 == 1;
    goto corral_source_split_12017;

  corral_source_split_12017:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2172} ldv_io_instance_callback_4_24($u26);
    goto corral_source_split_12019;

  corral_source_split_12019:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb8;

  SeqInstr_1708:
    assume !assertsPassed;
    return;

  $bb39_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2167} $p25 := ldv_xmalloc(1);
    goto corral_source_split_12006;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($u25, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_11981;
}



const ldv_io_instance_probe_4_11: ref;

axiom ldv_io_instance_probe_4_11 == $sub.ref(0, 754183);

procedure ldv_io_instance_probe_4_11($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.43, $M.16, assertsPassed, $CurrAddr, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.45, $M.40, $M.9;



implementation ldv_io_instance_probe_4_11($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2181} {:cexpr "ldv_io_instance_probe_4_11:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_12055;

  corral_source_split_12055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2182} $i3 := oz_usb_start($p1, $i2);
    goto SeqInstr_1726, SeqInstr_1727;

  SeqInstr_1727:
    assume assertsPassed;
    goto SeqInstr_1728;

  SeqInstr_1728:
    call {:si_unique_call 2183} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_12056;

  corral_source_split_12056:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_1726:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_release_4_2: ref;

axiom ldv_io_instance_release_4_2 == $sub.ref(0, 755215);

procedure ldv_io_instance_release_4_2($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.2, $M.16, assertsPassed, $M.43, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.40, $M.9;



implementation ldv_io_instance_release_4_2($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2184} {:cexpr "ldv_io_instance_release_4_2:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_12058;

  corral_source_split_12058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2185} oz_usb_stop($p1, $i2);
    goto SeqInstr_1729, SeqInstr_1730;

  SeqInstr_1730:
    assume assertsPassed;
    goto SeqInstr_1731;

  SeqInstr_1731:
    goto corral_source_split_12059;

  corral_source_split_12059:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1729:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_4_24: ref;

axiom ldv_io_instance_callback_4_24 == $sub.ref(0, 756247);

procedure ldv_io_instance_callback_4_24($p0: ref);
  free requires assertsPassed;



implementation ldv_io_instance_callback_4_24($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12061;

  corral_source_split_12061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2186} oz_usb_term();
    goto corral_source_split_12062;

  corral_source_split_12062:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_4_23: ref;

axiom ldv_io_instance_callback_4_23 == $sub.ref(0, 757279);

procedure ldv_io_instance_callback_4_23($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.16, assertsPassed, $M.15, $M.9, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, $M.30, $M.31, $M.32, $M.40, $M.13, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_io_instance_callback_4_23($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12064;

  corral_source_split_12064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2187} oz_usb_rx($p1, $p2);
    goto SeqInstr_1732, SeqInstr_1733;

  SeqInstr_1733:
    assume assertsPassed;
    goto SeqInstr_1734;

  SeqInstr_1734:
    goto corral_source_split_12065;

  corral_source_split_12065:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1732:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_4_22: ref;

axiom ldv_io_instance_callback_4_22 == $sub.ref(0, 758311);

procedure ldv_io_instance_callback_4_22($p0: ref);
  free requires assertsPassed;
  modifies $M.14, $M.46, $M.1, $M.12, $M.48, $M.13, $CurrAddr, $M.96, $M.97, $M.44, $M.95, assertsPassed, $M.45, $M.33, $M.103, $M.17, $M.16, $M.104, $M.105, $M.15, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.41, $M.106, $M.107, $M.42, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_io_instance_callback_4_22($p0: ref)
{
  var vslice_dummy_var_207: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12067;

  corral_source_split_12067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2188} vslice_dummy_var_207 := oz_usb_init();
    goto SeqInstr_1735, SeqInstr_1736;

  SeqInstr_1736:
    assume assertsPassed;
    goto SeqInstr_1737;

  SeqInstr_1737:
    goto corral_source_split_12068;

  corral_source_split_12068:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1735:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_4_21: ref;

axiom ldv_io_instance_callback_4_21 == $sub.ref(0, 759343);

procedure ldv_io_instance_callback_4_21($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.17, $M.2, $M.16, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, assertsPassed, $M.42, $M.15, $M.41, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_io_instance_callback_4_21($p0: ref, $p1: ref)
{
  var vslice_dummy_var_208: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12070;

  corral_source_split_12070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2189} vslice_dummy_var_208 := oz_usb_heartbeat($p1);
    goto SeqInstr_1738, SeqInstr_1739;

  SeqInstr_1739:
    assume assertsPassed;
    goto SeqInstr_1740;

  SeqInstr_1740:
    goto corral_source_split_12071;

  corral_source_split_12071:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1738:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_4_4: ref;

axiom ldv_io_instance_callback_4_4 == $sub.ref(0, 760375);

procedure ldv_io_instance_callback_4_4($p0: ref, $p1: ref, $i2: i8, $p3: ref, $i4: i8);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.16, assertsPassed, $M.15, $CurrAddr;



implementation ldv_io_instance_callback_4_4($p0: ref, $p1: ref, $i2: i8, $p3: ref, $i4: i8)
{
  var $i5: i32;
  var $i6: i8;
  var $i7: i32;
  var $i8: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2190} {:cexpr "ldv_io_instance_callback_4_4:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 2191} {:cexpr "ldv_io_instance_callback_4_4:arg:arg4"} boogie_si_record_i8($i4);
    goto corral_source_split_12073;

  corral_source_split_12073:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i2);
    goto corral_source_split_12074;

  corral_source_split_12074:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_12075;

  corral_source_split_12075:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i4);
    goto corral_source_split_12076;

  corral_source_split_12076:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_12077;

  corral_source_split_12077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2192} oz_usb_farewell($p1, $i6, $p3, $i8);
    goto SeqInstr_1741, SeqInstr_1742;

  SeqInstr_1742:
    assume assertsPassed;
    goto SeqInstr_1743;

  SeqInstr_1743:
    goto corral_source_split_12078;

  corral_source_split_12078:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1741:
    assume !assertsPassed;
    return;
}



const ldv_entry_EMGentry_9: ref;

axiom ldv_entry_EMGentry_9 == $sub.ref(0, 761407);

procedure ldv_entry_EMGentry_9($p0: ref);
  free requires assertsPassed;
  modifies $M.12, $M.96, $M.97, $M.1, $M.111, $M.7, $M.8, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.112, $M.109, $M.13, $M.14, $M.46, $CurrAddr, $M.17, $M.15, $M.16, $M.99, assertsPassed, $M.2, $M.43, $M.18, $M.19, $M.20, $M.21, $M.22, $M.41, $M.9, $M.42, $M.10, $M.45, $M.40, $M.30, $M.31, $M.32, $M.39, $M.5, $M.48, $M.33, $M.34, $M.35, $M.36, $M.37, $M.44, $M.95, $M.38, $M.103, $M.104, $M.105, $M.106, $M.107;



implementation ldv_entry_EMGentry_9($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12080;

  corral_source_split_12080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2193} $i1 := ldv_EMGentry_init_ozwpan_init_9_11($u28);
    goto SeqInstr_1744, SeqInstr_1745;

  SeqInstr_1745:
    assume assertsPassed;
    goto SeqInstr_1746;

  SeqInstr_1746:
    call {:si_unique_call 2194} {:cexpr "ldv_9_ret_default"} boogie_si_record_i32($i1);
    goto corral_source_split_12081;

  corral_source_split_12081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2195} $i2 := ldv_ldv_post_init_121($i1);
    call {:si_unique_call 2196} {:cexpr "ldv_9_ret_default"} boogie_si_record_i32($i2);
    goto corral_source_split_12082;

  corral_source_split_12082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2197} $i3 := ldv_undef_int();
    call {:si_unique_call 2198} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_12083;

  corral_source_split_12083:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_12084;

  corral_source_split_12084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_12093;

  corral_source_split_12093:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, 0);
    goto corral_source_split_12094;

  corral_source_split_12094:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_12095;

  corral_source_split_12095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2202} ldv_assume($i8);
    goto corral_source_split_12096;

  corral_source_split_12096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2203} $i9 := ldv_undef_int();
    call {:si_unique_call 2204} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_12097;

  corral_source_split_12097:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_12098;

  corral_source_split_12098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2209} ldv_EMGentry_exit_ozwpan_exit_9_2($u26);
    goto SeqInstr_1756, SeqInstr_1757;

  SeqInstr_1757:
    assume assertsPassed;
    goto SeqInstr_1758;

  SeqInstr_1758:
    goto corral_source_split_12106;

  corral_source_split_12106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2210} ldv_ldv_check_final_state_123();
    goto SeqInstr_1759, SeqInstr_1760;

  SeqInstr_1760:
    assume assertsPassed;
    goto SeqInstr_1761;

  SeqInstr_1761:
    goto corral_source_split_12107;

  corral_source_split_12107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2211} ldv_stop();
    goto corral_source_split_12108;

  corral_source_split_12108:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1759:
    assume !assertsPassed;
    return;

  SeqInstr_1756:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_12100;

  corral_source_split_12100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2205} ldv_dispatch_register_io_instance_9_9_7();
    goto SeqInstr_1750, SeqInstr_1751;

  SeqInstr_1751:
    assume assertsPassed;
    goto SeqInstr_1752;

  SeqInstr_1752:
    goto corral_source_split_12101;

  corral_source_split_12101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2206} ldv_dispatch_register_io_instance_8_9_6();
    goto SeqInstr_1753, SeqInstr_1754;

  SeqInstr_1754:
    assume assertsPassed;
    goto SeqInstr_1755;

  SeqInstr_1755:
    goto corral_source_split_12102;

  corral_source_split_12102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2207} ldv_dispatch_deregister_io_instance_9_9_5();
    goto corral_source_split_12103;

  corral_source_split_12103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2208} ldv_dispatch_deregister_io_instance_8_9_4();
    goto corral_source_split_12104;

  corral_source_split_12104:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_1753:
    assume !assertsPassed;
    return;

  SeqInstr_1750:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_12086;

  corral_source_split_12086:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i2, 0);
    goto corral_source_split_12087;

  corral_source_split_12087:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_12088;

  corral_source_split_12088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2199} ldv_assume($i6);
    goto corral_source_split_12089;

  corral_source_split_12089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2200} ldv_ldv_check_final_state_122();
    goto SeqInstr_1747, SeqInstr_1748;

  SeqInstr_1748:
    assume assertsPassed;
    goto SeqInstr_1749;

  SeqInstr_1749:
    goto corral_source_split_12090;

  corral_source_split_12090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2201} ldv_stop();
    goto corral_source_split_12091;

  corral_source_split_12091:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1747:
    assume !assertsPassed;
    return;

  SeqInstr_1744:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_init_121: ref;

axiom ldv_ldv_post_init_121 == $sub.ref(0, 762439);

procedure ldv_ldv_post_init_121($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.96, $M.97;



implementation ldv_ldv_post_init_121($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2212} {:cexpr "ldv_ldv_post_init_121:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_12110;

  corral_source_split_12110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2213} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_12111;

  corral_source_split_12111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2214} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_12112;

  corral_source_split_12112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2215} $i1 := ldv_post_init($i0);
    call {:si_unique_call 2216} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_12113;

  corral_source_split_12113:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_ldv_check_final_state_122: ref;

axiom ldv_ldv_check_final_state_122 == $sub.ref(0, 763471);

procedure ldv_ldv_check_final_state_122();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_ldv_check_final_state_122()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12115;

  corral_source_split_12115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2217} ldv_linux_arch_io_check_final_state();
    goto SeqInstr_1762, SeqInstr_1763;

  SeqInstr_1763:
    assume assertsPassed;
    goto SeqInstr_1764;

  SeqInstr_1764:
    goto corral_source_split_12116;

  corral_source_split_12116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2218} ldv_linux_block_genhd_check_final_state();
    goto SeqInstr_1765, SeqInstr_1766;

  SeqInstr_1766:
    assume assertsPassed;
    goto SeqInstr_1767;

  SeqInstr_1767:
    goto corral_source_split_12117;

  corral_source_split_12117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2219} ldv_linux_block_queue_check_final_state();
    goto SeqInstr_1768, SeqInstr_1769;

  SeqInstr_1769:
    assume assertsPassed;
    goto SeqInstr_1770;

  SeqInstr_1770:
    goto corral_source_split_12118;

  corral_source_split_12118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2220} ldv_linux_block_request_check_final_state();
    goto SeqInstr_1771, SeqInstr_1772;

  SeqInstr_1772:
    assume assertsPassed;
    goto SeqInstr_1773;

  SeqInstr_1773:
    goto corral_source_split_12119;

  corral_source_split_12119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2221} ldv_linux_drivers_base_class_check_final_state();
    goto SeqInstr_1774, SeqInstr_1775;

  SeqInstr_1775:
    assume assertsPassed;
    goto SeqInstr_1776;

  SeqInstr_1776:
    goto corral_source_split_12120;

  corral_source_split_12120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2222} ldv_linux_fs_char_dev_check_final_state();
    goto SeqInstr_1777, SeqInstr_1778;

  SeqInstr_1778:
    assume assertsPassed;
    goto SeqInstr_1779;

  SeqInstr_1779:
    goto corral_source_split_12121;

  corral_source_split_12121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2223} ldv_linux_fs_sysfs_check_final_state();
    goto SeqInstr_1780, SeqInstr_1781;

  SeqInstr_1781:
    assume assertsPassed;
    goto SeqInstr_1782;

  SeqInstr_1782:
    goto corral_source_split_12122;

  corral_source_split_12122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2224} ldv_linux_kernel_locking_rwlock_check_final_state();
    goto SeqInstr_1783, SeqInstr_1784;

  SeqInstr_1784:
    assume assertsPassed;
    goto SeqInstr_1785;

  SeqInstr_1785:
    goto corral_source_split_12123;

  corral_source_split_12123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2225} ldv_linux_kernel_module_check_final_state();
    goto SeqInstr_1786, SeqInstr_1787;

  SeqInstr_1787:
    assume assertsPassed;
    goto SeqInstr_1788;

  SeqInstr_1788:
    goto corral_source_split_12124;

  corral_source_split_12124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2226} ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
    goto SeqInstr_1789, SeqInstr_1790;

  SeqInstr_1790:
    assume assertsPassed;
    goto SeqInstr_1791;

  SeqInstr_1791:
    goto corral_source_split_12125;

  corral_source_split_12125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2227} ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
    goto SeqInstr_1792, SeqInstr_1793;

  SeqInstr_1793:
    assume assertsPassed;
    goto SeqInstr_1794;

  SeqInstr_1794:
    goto corral_source_split_12126;

  corral_source_split_12126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2228} ldv_linux_kernel_rcu_update_lock_check_final_state();
    goto SeqInstr_1795, SeqInstr_1796;

  SeqInstr_1796:
    assume assertsPassed;
    goto SeqInstr_1797;

  SeqInstr_1797:
    goto corral_source_split_12127;

  corral_source_split_12127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2229} ldv_linux_kernel_rcu_srcu_check_final_state();
    goto SeqInstr_1798, SeqInstr_1799;

  SeqInstr_1799:
    assume assertsPassed;
    goto SeqInstr_1800;

  SeqInstr_1800:
    goto corral_source_split_12128;

  corral_source_split_12128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2230} ldv_linux_lib_idr_check_final_state();
    goto SeqInstr_1801, SeqInstr_1802;

  SeqInstr_1802:
    assume assertsPassed;
    goto SeqInstr_1803;

  SeqInstr_1803:
    goto corral_source_split_12129;

  corral_source_split_12129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2231} ldv_linux_mmc_sdio_func_check_final_state();
    goto SeqInstr_1804, SeqInstr_1805;

  SeqInstr_1805:
    assume assertsPassed;
    goto SeqInstr_1806;

  SeqInstr_1806:
    goto corral_source_split_12130;

  corral_source_split_12130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2232} ldv_linux_net_rtnetlink_check_final_state();
    goto SeqInstr_1807, SeqInstr_1808;

  SeqInstr_1808:
    assume assertsPassed;
    goto SeqInstr_1809;

  SeqInstr_1809:
    goto corral_source_split_12131;

  corral_source_split_12131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2233} ldv_linux_net_sock_check_final_state();
    goto SeqInstr_1810, SeqInstr_1811;

  SeqInstr_1811:
    assume assertsPassed;
    goto SeqInstr_1812;

  SeqInstr_1812:
    goto corral_source_split_12132;

  corral_source_split_12132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2234} ldv_linux_usb_coherent_check_final_state();
    goto SeqInstr_1813, SeqInstr_1814;

  SeqInstr_1814:
    assume assertsPassed;
    goto SeqInstr_1815;

  SeqInstr_1815:
    goto corral_source_split_12133;

  corral_source_split_12133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2235} ldv_linux_usb_gadget_check_final_state();
    goto SeqInstr_1816, SeqInstr_1817;

  SeqInstr_1817:
    assume assertsPassed;
    goto SeqInstr_1818;

  SeqInstr_1818:
    goto corral_source_split_12134;

  corral_source_split_12134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2236} ldv_linux_usb_urb_check_final_state();
    goto SeqInstr_1819, SeqInstr_1820;

  SeqInstr_1820:
    assume assertsPassed;
    goto SeqInstr_1821;

  SeqInstr_1821:
    goto corral_source_split_12135;

  corral_source_split_12135:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1819:
    assume !assertsPassed;
    return;

  SeqInstr_1816:
    assume !assertsPassed;
    return;

  SeqInstr_1813:
    assume !assertsPassed;
    return;

  SeqInstr_1810:
    assume !assertsPassed;
    return;

  SeqInstr_1807:
    assume !assertsPassed;
    return;

  SeqInstr_1804:
    assume !assertsPassed;
    return;

  SeqInstr_1801:
    assume !assertsPassed;
    return;

  SeqInstr_1798:
    assume !assertsPassed;
    return;

  SeqInstr_1795:
    assume !assertsPassed;
    return;

  SeqInstr_1792:
    assume !assertsPassed;
    return;

  SeqInstr_1789:
    assume !assertsPassed;
    return;

  SeqInstr_1786:
    assume !assertsPassed;
    return;

  SeqInstr_1783:
    assume !assertsPassed;
    return;

  SeqInstr_1780:
    assume !assertsPassed;
    return;

  SeqInstr_1777:
    assume !assertsPassed;
    return;

  SeqInstr_1774:
    assume !assertsPassed;
    return;

  SeqInstr_1771:
    assume !assertsPassed;
    return;

  SeqInstr_1768:
    assume !assertsPassed;
    return;

  SeqInstr_1765:
    assume !assertsPassed;
    return;

  SeqInstr_1762:
    assume !assertsPassed;
    return;
}



const ldv_ldv_check_final_state_123: ref;

axiom ldv_ldv_check_final_state_123 == $sub.ref(0, 764503);

procedure ldv_ldv_check_final_state_123();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_ldv_check_final_state_123()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12137;

  corral_source_split_12137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2237} ldv_linux_arch_io_check_final_state();
    goto SeqInstr_1822, SeqInstr_1823;

  SeqInstr_1823:
    assume assertsPassed;
    goto SeqInstr_1824;

  SeqInstr_1824:
    goto corral_source_split_12138;

  corral_source_split_12138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2238} ldv_linux_block_genhd_check_final_state();
    goto SeqInstr_1825, SeqInstr_1826;

  SeqInstr_1826:
    assume assertsPassed;
    goto SeqInstr_1827;

  SeqInstr_1827:
    goto corral_source_split_12139;

  corral_source_split_12139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2239} ldv_linux_block_queue_check_final_state();
    goto SeqInstr_1828, SeqInstr_1829;

  SeqInstr_1829:
    assume assertsPassed;
    goto SeqInstr_1830;

  SeqInstr_1830:
    goto corral_source_split_12140;

  corral_source_split_12140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2240} ldv_linux_block_request_check_final_state();
    goto SeqInstr_1831, SeqInstr_1832;

  SeqInstr_1832:
    assume assertsPassed;
    goto SeqInstr_1833;

  SeqInstr_1833:
    goto corral_source_split_12141;

  corral_source_split_12141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2241} ldv_linux_drivers_base_class_check_final_state();
    goto SeqInstr_1834, SeqInstr_1835;

  SeqInstr_1835:
    assume assertsPassed;
    goto SeqInstr_1836;

  SeqInstr_1836:
    goto corral_source_split_12142;

  corral_source_split_12142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2242} ldv_linux_fs_char_dev_check_final_state();
    goto SeqInstr_1837, SeqInstr_1838;

  SeqInstr_1838:
    assume assertsPassed;
    goto SeqInstr_1839;

  SeqInstr_1839:
    goto corral_source_split_12143;

  corral_source_split_12143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2243} ldv_linux_fs_sysfs_check_final_state();
    goto SeqInstr_1840, SeqInstr_1841;

  SeqInstr_1841:
    assume assertsPassed;
    goto SeqInstr_1842;

  SeqInstr_1842:
    goto corral_source_split_12144;

  corral_source_split_12144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2244} ldv_linux_kernel_locking_rwlock_check_final_state();
    goto SeqInstr_1843, SeqInstr_1844;

  SeqInstr_1844:
    assume assertsPassed;
    goto SeqInstr_1845;

  SeqInstr_1845:
    goto corral_source_split_12145;

  corral_source_split_12145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2245} ldv_linux_kernel_module_check_final_state();
    goto SeqInstr_1846, SeqInstr_1847;

  SeqInstr_1847:
    assume assertsPassed;
    goto SeqInstr_1848;

  SeqInstr_1848:
    goto corral_source_split_12146;

  corral_source_split_12146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2246} ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
    goto SeqInstr_1849, SeqInstr_1850;

  SeqInstr_1850:
    assume assertsPassed;
    goto SeqInstr_1851;

  SeqInstr_1851:
    goto corral_source_split_12147;

  corral_source_split_12147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2247} ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
    goto SeqInstr_1852, SeqInstr_1853;

  SeqInstr_1853:
    assume assertsPassed;
    goto SeqInstr_1854;

  SeqInstr_1854:
    goto corral_source_split_12148;

  corral_source_split_12148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2248} ldv_linux_kernel_rcu_update_lock_check_final_state();
    goto SeqInstr_1855, SeqInstr_1856;

  SeqInstr_1856:
    assume assertsPassed;
    goto SeqInstr_1857;

  SeqInstr_1857:
    goto corral_source_split_12149;

  corral_source_split_12149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2249} ldv_linux_kernel_rcu_srcu_check_final_state();
    goto SeqInstr_1858, SeqInstr_1859;

  SeqInstr_1859:
    assume assertsPassed;
    goto SeqInstr_1860;

  SeqInstr_1860:
    goto corral_source_split_12150;

  corral_source_split_12150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2250} ldv_linux_lib_idr_check_final_state();
    goto SeqInstr_1861, SeqInstr_1862;

  SeqInstr_1862:
    assume assertsPassed;
    goto SeqInstr_1863;

  SeqInstr_1863:
    goto corral_source_split_12151;

  corral_source_split_12151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2251} ldv_linux_mmc_sdio_func_check_final_state();
    goto SeqInstr_1864, SeqInstr_1865;

  SeqInstr_1865:
    assume assertsPassed;
    goto SeqInstr_1866;

  SeqInstr_1866:
    goto corral_source_split_12152;

  corral_source_split_12152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2252} ldv_linux_net_rtnetlink_check_final_state();
    goto SeqInstr_1867, SeqInstr_1868;

  SeqInstr_1868:
    assume assertsPassed;
    goto SeqInstr_1869;

  SeqInstr_1869:
    goto corral_source_split_12153;

  corral_source_split_12153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2253} ldv_linux_net_sock_check_final_state();
    goto SeqInstr_1870, SeqInstr_1871;

  SeqInstr_1871:
    assume assertsPassed;
    goto SeqInstr_1872;

  SeqInstr_1872:
    goto corral_source_split_12154;

  corral_source_split_12154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2254} ldv_linux_usb_coherent_check_final_state();
    goto SeqInstr_1873, SeqInstr_1874;

  SeqInstr_1874:
    assume assertsPassed;
    goto SeqInstr_1875;

  SeqInstr_1875:
    goto corral_source_split_12155;

  corral_source_split_12155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2255} ldv_linux_usb_gadget_check_final_state();
    goto SeqInstr_1876, SeqInstr_1877;

  SeqInstr_1877:
    assume assertsPassed;
    goto SeqInstr_1878;

  SeqInstr_1878:
    goto corral_source_split_12156;

  corral_source_split_12156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2256} ldv_linux_usb_urb_check_final_state();
    goto SeqInstr_1879, SeqInstr_1880;

  SeqInstr_1880:
    assume assertsPassed;
    goto SeqInstr_1881;

  SeqInstr_1881:
    goto corral_source_split_12157;

  corral_source_split_12157:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1879:
    assume !assertsPassed;
    return;

  SeqInstr_1876:
    assume !assertsPassed;
    return;

  SeqInstr_1873:
    assume !assertsPassed;
    return;

  SeqInstr_1870:
    assume !assertsPassed;
    return;

  SeqInstr_1867:
    assume !assertsPassed;
    return;

  SeqInstr_1864:
    assume !assertsPassed;
    return;

  SeqInstr_1861:
    assume !assertsPassed;
    return;

  SeqInstr_1858:
    assume !assertsPassed;
    return;

  SeqInstr_1855:
    assume !assertsPassed;
    return;

  SeqInstr_1852:
    assume !assertsPassed;
    return;

  SeqInstr_1849:
    assume !assertsPassed;
    return;

  SeqInstr_1846:
    assume !assertsPassed;
    return;

  SeqInstr_1843:
    assume !assertsPassed;
    return;

  SeqInstr_1840:
    assume !assertsPassed;
    return;

  SeqInstr_1837:
    assume !assertsPassed;
    return;

  SeqInstr_1834:
    assume !assertsPassed;
    return;

  SeqInstr_1831:
    assume !assertsPassed;
    return;

  SeqInstr_1828:
    assume !assertsPassed;
    return;

  SeqInstr_1825:
    assume !assertsPassed;
    return;

  SeqInstr_1822:
    assume !assertsPassed;
    return;
}



const ldv_linux_arch_io_check_final_state: ref;

axiom ldv_linux_arch_io_check_final_state == $sub.ref(0, 765535);

procedure ldv_linux_arch_io_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_arch_io_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12159;

  corral_source_split_12159:
    assume {:verifier.code 0} true;
    $i0 := $M.119;
    goto corral_source_split_12160;

  corral_source_split_12160:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12161;

  corral_source_split_12161:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12162;

  corral_source_split_12162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2257} ldv_assert_linux_arch_io__more_initial_at_exit($i2);
    goto SeqInstr_1882, SeqInstr_1883;

  SeqInstr_1883:
    assume assertsPassed;
    goto SeqInstr_1884;

  SeqInstr_1884:
    goto corral_source_split_12163;

  corral_source_split_12163:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1882:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_genhd_check_final_state: ref;

axiom ldv_linux_block_genhd_check_final_state == $sub.ref(0, 766567);

procedure ldv_linux_block_genhd_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_genhd_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12165;

  corral_source_split_12165:
    assume {:verifier.code 0} true;
    $i0 := $M.120;
    goto corral_source_split_12166;

  corral_source_split_12166:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12167;

  corral_source_split_12167:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12168;

  corral_source_split_12168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2258} ldv_assert_linux_block_genhd__more_initial_at_exit($i2);
    goto SeqInstr_1885, SeqInstr_1886;

  SeqInstr_1886:
    assume assertsPassed;
    goto SeqInstr_1887;

  SeqInstr_1887:
    goto corral_source_split_12169;

  corral_source_split_12169:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1885:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_queue_check_final_state: ref;

axiom ldv_linux_block_queue_check_final_state == $sub.ref(0, 767599);

procedure ldv_linux_block_queue_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_queue_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12171;

  corral_source_split_12171:
    assume {:verifier.code 0} true;
    $i0 := $M.121;
    goto corral_source_split_12172;

  corral_source_split_12172:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12173;

  corral_source_split_12173:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12174;

  corral_source_split_12174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2259} ldv_assert_linux_block_queue__more_initial_at_exit($i2);
    goto SeqInstr_1888, SeqInstr_1889;

  SeqInstr_1889:
    assume assertsPassed;
    goto SeqInstr_1890;

  SeqInstr_1890:
    goto corral_source_split_12175;

  corral_source_split_12175:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1888:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_request_check_final_state: ref;

axiom ldv_linux_block_request_check_final_state == $sub.ref(0, 768631);

procedure ldv_linux_block_request_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_request_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12177;

  corral_source_split_12177:
    assume {:verifier.code 0} true;
    $i0 := $M.122;
    goto corral_source_split_12178;

  corral_source_split_12178:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12179;

  corral_source_split_12179:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12180;

  corral_source_split_12180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2260} ldv_assert_linux_block_request__get_at_exit($i2);
    goto SeqInstr_1891, SeqInstr_1892;

  SeqInstr_1892:
    assume assertsPassed;
    goto SeqInstr_1893;

  SeqInstr_1893:
    goto corral_source_split_12181;

  corral_source_split_12181:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1891:
    assume !assertsPassed;
    return;
}



const ldv_linux_drivers_base_class_check_final_state: ref;

axiom ldv_linux_drivers_base_class_check_final_state == $sub.ref(0, 769663);

procedure ldv_linux_drivers_base_class_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_drivers_base_class_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12183;

  corral_source_split_12183:
    assume {:verifier.code 0} true;
    $i0 := $M.109;
    goto corral_source_split_12184;

  corral_source_split_12184:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12185;

  corral_source_split_12185:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12186;

  corral_source_split_12186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2261} ldv_assert_linux_drivers_base_class__registered_at_exit($i2);
    goto SeqInstr_1894, SeqInstr_1895;

  SeqInstr_1895:
    assume assertsPassed;
    goto SeqInstr_1896;

  SeqInstr_1896:
    goto corral_source_split_12187;

  corral_source_split_12187:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1894:
    assume !assertsPassed;
    return;
}



const ldv_linux_fs_char_dev_check_final_state: ref;

axiom ldv_linux_fs_char_dev_check_final_state == $sub.ref(0, 770695);

procedure ldv_linux_fs_char_dev_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_fs_char_dev_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12189;

  corral_source_split_12189:
    assume {:verifier.code 0} true;
    $i0 := $M.112;
    goto corral_source_split_12190;

  corral_source_split_12190:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12191;

  corral_source_split_12191:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12192;

  corral_source_split_12192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2262} ldv_assert_linux_fs_char_dev__registered_at_exit($i2);
    goto SeqInstr_1897, SeqInstr_1898;

  SeqInstr_1898:
    assume assertsPassed;
    goto SeqInstr_1899;

  SeqInstr_1899:
    goto corral_source_split_12193;

  corral_source_split_12193:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1897:
    assume !assertsPassed;
    return;
}



const ldv_linux_fs_sysfs_check_final_state: ref;

axiom ldv_linux_fs_sysfs_check_final_state == $sub.ref(0, 771727);

procedure ldv_linux_fs_sysfs_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_fs_sysfs_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12195;

  corral_source_split_12195:
    assume {:verifier.code 0} true;
    $i0 := $M.123;
    goto corral_source_split_12196;

  corral_source_split_12196:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12197;

  corral_source_split_12197:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12198;

  corral_source_split_12198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2263} ldv_assert_linux_fs_sysfs__more_initial_at_exit($i2);
    goto SeqInstr_1900, SeqInstr_1901;

  SeqInstr_1901:
    assume assertsPassed;
    goto SeqInstr_1902;

  SeqInstr_1902:
    goto corral_source_split_12199;

  corral_source_split_12199:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1900:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_rwlock_check_final_state: ref;

axiom ldv_linux_kernel_locking_rwlock_check_final_state == $sub.ref(0, 772759);

procedure ldv_linux_kernel_locking_rwlock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_locking_rwlock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12201;

  corral_source_split_12201:
    assume {:verifier.code 0} true;
    $i0 := $M.124;
    goto corral_source_split_12202;

  corral_source_split_12202:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_12203;

  corral_source_split_12203:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12204;

  corral_source_split_12204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2264} ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i2);
    goto SeqInstr_1903, SeqInstr_1904;

  SeqInstr_1904:
    assume assertsPassed;
    goto SeqInstr_1905;

  SeqInstr_1905:
    goto corral_source_split_12205;

  corral_source_split_12205:
    assume {:verifier.code 0} true;
    $i3 := $M.125;
    goto corral_source_split_12206;

  corral_source_split_12206:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_12207;

  corral_source_split_12207:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_12208;

  corral_source_split_12208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2265} ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i5);
    goto SeqInstr_1906, SeqInstr_1907;

  SeqInstr_1907:
    assume assertsPassed;
    goto SeqInstr_1908;

  SeqInstr_1908:
    goto corral_source_split_12209;

  corral_source_split_12209:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1906:
    assume !assertsPassed;
    return;

  SeqInstr_1903:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_module_check_final_state: ref;

axiom ldv_linux_kernel_module_check_final_state == $sub.ref(0, 773791);

procedure ldv_linux_kernel_module_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_module_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12211;

  corral_source_split_12211:
    assume {:verifier.code 0} true;
    $i0 := $M.126;
    goto corral_source_split_12212;

  corral_source_split_12212:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_12213;

  corral_source_split_12213:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12214;

  corral_source_split_12214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2266} ldv_assert_linux_kernel_module__more_initial_at_exit($i2);
    goto SeqInstr_1909, SeqInstr_1910;

  SeqInstr_1910:
    assume assertsPassed;
    goto SeqInstr_1911;

  SeqInstr_1911:
    goto corral_source_split_12215;

  corral_source_split_12215:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1909:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_bh_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_check_final_state == $sub.ref(0, 774823);

procedure ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_bh_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12217;

  corral_source_split_12217:
    assume {:verifier.code 0} true;
    $i0 := $M.127;
    goto corral_source_split_12218;

  corral_source_split_12218:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12219;

  corral_source_split_12219:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12220;

  corral_source_split_12220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2267} ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i2);
    goto SeqInstr_1912, SeqInstr_1913;

  SeqInstr_1913:
    assume assertsPassed;
    goto SeqInstr_1914;

  SeqInstr_1914:
    goto corral_source_split_12221;

  corral_source_split_12221:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1912:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_sched_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_check_final_state == $sub.ref(0, 775855);

procedure ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_sched_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12223;

  corral_source_split_12223:
    assume {:verifier.code 0} true;
    $i0 := $M.128;
    goto corral_source_split_12224;

  corral_source_split_12224:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12225;

  corral_source_split_12225:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12226;

  corral_source_split_12226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2268} ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i2);
    goto SeqInstr_1915, SeqInstr_1916;

  SeqInstr_1916:
    assume assertsPassed;
    goto SeqInstr_1917;

  SeqInstr_1917:
    goto corral_source_split_12227;

  corral_source_split_12227:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1915:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_check_final_state == $sub.ref(0, 776887);

procedure ldv_linux_kernel_rcu_update_lock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12229;

  corral_source_split_12229:
    assume {:verifier.code 0} true;
    $i0 := $M.129;
    goto corral_source_split_12230;

  corral_source_split_12230:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12231;

  corral_source_split_12231:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12232;

  corral_source_split_12232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2269} ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i2);
    goto SeqInstr_1918, SeqInstr_1919;

  SeqInstr_1919:
    assume assertsPassed;
    goto SeqInstr_1920;

  SeqInstr_1920:
    goto corral_source_split_12233;

  corral_source_split_12233:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1918:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_srcu_check_final_state: ref;

axiom ldv_linux_kernel_rcu_srcu_check_final_state == $sub.ref(0, 777919);

procedure ldv_linux_kernel_rcu_srcu_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_srcu_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12235;

  corral_source_split_12235:
    assume {:verifier.code 0} true;
    $i0 := $M.130;
    goto corral_source_split_12236;

  corral_source_split_12236:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12237;

  corral_source_split_12237:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12238;

  corral_source_split_12238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2270} ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i2);
    goto SeqInstr_1921, SeqInstr_1922;

  SeqInstr_1922:
    assume assertsPassed;
    goto SeqInstr_1923;

  SeqInstr_1923:
    goto corral_source_split_12239;

  corral_source_split_12239:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1921:
    assume !assertsPassed;
    return;
}



const ldv_linux_lib_idr_check_final_state: ref;

axiom ldv_linux_lib_idr_check_final_state == $sub.ref(0, 778951);

procedure ldv_linux_lib_idr_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_lib_idr_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12241;

  corral_source_split_12241:
    assume {:verifier.code 0} true;
    $i0 := $M.131;
    goto corral_source_split_12242;

  corral_source_split_12242:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12243;

  corral_source_split_12243:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_12249;

  corral_source_split_12249:
    assume {:verifier.code 0} true;
    $i3 := $M.131;
    goto corral_source_split_12250;

  corral_source_split_12250:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 3);
    goto corral_source_split_12251;

  corral_source_split_12251:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_12245;

  corral_source_split_12245:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_12246;

  corral_source_split_12246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2271} ldv_assert_linux_lib_idr__more_at_exit($i5);
    goto SeqInstr_1924, SeqInstr_1925;

  SeqInstr_1925:
    assume assertsPassed;
    goto SeqInstr_1926;

  SeqInstr_1926:
    goto corral_source_split_12247;

  corral_source_split_12247:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1924:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const ldv_linux_mmc_sdio_func_check_final_state: ref;

axiom ldv_linux_mmc_sdio_func_check_final_state == $sub.ref(0, 779983);

procedure ldv_linux_mmc_sdio_func_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_mmc_sdio_func_check_final_state()
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12253;

  corral_source_split_12253:
    assume {:verifier.code 0} true;
    $i0 := $M.132;
    goto corral_source_split_12254;

  corral_source_split_12254:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_12255;

  corral_source_split_12255:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_12256;

  corral_source_split_12256:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_12257;

  corral_source_split_12257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2272} ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i3);
    goto SeqInstr_1927, SeqInstr_1928;

  SeqInstr_1928:
    assume assertsPassed;
    goto SeqInstr_1929;

  SeqInstr_1929:
    goto corral_source_split_12258;

  corral_source_split_12258:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1927:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_rtnetlink_check_final_state: ref;

axiom ldv_linux_net_rtnetlink_check_final_state == $sub.ref(0, 781015);

procedure ldv_linux_net_rtnetlink_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_net_rtnetlink_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12260;

  corral_source_split_12260:
    assume {:verifier.code 0} true;
    $i0 := $M.133;
    goto corral_source_split_12261;

  corral_source_split_12261:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12262;

  corral_source_split_12262:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12263;

  corral_source_split_12263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2273} ldv_assert_linux_net_rtnetlink__lock_on_exit($i2);
    goto SeqInstr_1930, SeqInstr_1931;

  SeqInstr_1931:
    assume assertsPassed;
    goto SeqInstr_1932;

  SeqInstr_1932:
    goto corral_source_split_12264;

  corral_source_split_12264:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1930:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_sock_check_final_state: ref;

axiom ldv_linux_net_sock_check_final_state == $sub.ref(0, 782047);

procedure ldv_linux_net_sock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_net_sock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12266;

  corral_source_split_12266:
    assume {:verifier.code 0} true;
    $i0 := $M.134;
    goto corral_source_split_12267;

  corral_source_split_12267:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12268;

  corral_source_split_12268:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12269;

  corral_source_split_12269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2274} ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i2);
    goto SeqInstr_1933, SeqInstr_1934;

  SeqInstr_1934:
    assume assertsPassed;
    goto SeqInstr_1935;

  SeqInstr_1935:
    goto corral_source_split_12270;

  corral_source_split_12270:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1933:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_coherent_check_final_state: ref;

axiom ldv_linux_usb_coherent_check_final_state == $sub.ref(0, 783079);

procedure ldv_linux_usb_coherent_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_coherent_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12272;

  corral_source_split_12272:
    assume {:verifier.code 0} true;
    $i0 := $M.135;
    goto corral_source_split_12273;

  corral_source_split_12273:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12274;

  corral_source_split_12274:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12275;

  corral_source_split_12275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2275} ldv_assert_linux_usb_coherent__more_initial_at_exit($i2);
    goto SeqInstr_1936, SeqInstr_1937;

  SeqInstr_1937:
    assume assertsPassed;
    goto SeqInstr_1938;

  SeqInstr_1938:
    goto corral_source_split_12276;

  corral_source_split_12276:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1936:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_gadget_check_final_state: ref;

axiom ldv_linux_usb_gadget_check_final_state == $sub.ref(0, 784111);

procedure ldv_linux_usb_gadget_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12278;

  corral_source_split_12278:
    assume {:verifier.code 0} true;
    $i0 := $M.110;
    goto corral_source_split_12279;

  corral_source_split_12279:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12280;

  corral_source_split_12280:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12281;

  corral_source_split_12281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2276} ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i2);
    goto SeqInstr_1939, SeqInstr_1940;

  SeqInstr_1940:
    assume assertsPassed;
    goto SeqInstr_1941;

  SeqInstr_1941:
    goto corral_source_split_12282;

  corral_source_split_12282:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1939:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_urb_check_final_state: ref;

axiom ldv_linux_usb_urb_check_final_state == $sub.ref(0, 785143);

procedure ldv_linux_usb_urb_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_urb_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12284;

  corral_source_split_12284:
    assume {:verifier.code 0} true;
    $i0 := $M.136;
    goto corral_source_split_12285;

  corral_source_split_12285:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12286;

  corral_source_split_12286:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12287;

  corral_source_split_12287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2277} ldv_assert_linux_usb_urb__more_initial_at_exit($i2);
    goto SeqInstr_1942, SeqInstr_1943;

  SeqInstr_1943:
    assume assertsPassed;
    goto SeqInstr_1944;

  SeqInstr_1944:
    goto corral_source_split_12288;

  corral_source_split_12288:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1942:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_usb_urb__more_initial_at_exit: ref;

axiom ldv_assert_linux_usb_urb__more_initial_at_exit == $sub.ref(0, 786175);

procedure ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2278} {:cexpr "ldv_assert_linux_usb_urb__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12290;

  corral_source_split_12290:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12291;

  corral_source_split_12291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12293;

  corral_source_split_12293:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2279} __VERIFIER_error();
    goto SeqInstr_1945, SeqInstr_1946;

  SeqInstr_1946:
    assume assertsPassed;
    goto SeqInstr_1947;

  SeqInstr_1947:
    goto corral_source_split_12294;

  corral_source_split_12294:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1945:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit: ref;

axiom ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit == $sub.ref(0, 787207);

procedure ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2280} {:cexpr "ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12296;

  corral_source_split_12296:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12297;

  corral_source_split_12297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12299;

  corral_source_split_12299:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2281} __VERIFIER_error();
    goto SeqInstr_1948, SeqInstr_1949;

  SeqInstr_1949:
    assume assertsPassed;
    goto SeqInstr_1950;

  SeqInstr_1950:
    goto corral_source_split_12300;

  corral_source_split_12300:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1948:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_usb_coherent__more_initial_at_exit: ref;

axiom ldv_assert_linux_usb_coherent__more_initial_at_exit == $sub.ref(0, 788239);

procedure ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2282} {:cexpr "ldv_assert_linux_usb_coherent__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12302;

  corral_source_split_12302:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12303;

  corral_source_split_12303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12305;

  corral_source_split_12305:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2283} __VERIFIER_error();
    goto SeqInstr_1951, SeqInstr_1952;

  SeqInstr_1952:
    assume assertsPassed;
    goto SeqInstr_1953;

  SeqInstr_1953:
    goto corral_source_split_12306;

  corral_source_split_12306:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1951:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_net_sock__all_locked_sockets_must_be_released: ref;

axiom ldv_assert_linux_net_sock__all_locked_sockets_must_be_released == $sub.ref(0, 789271);

procedure ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2284} {:cexpr "ldv_assert_linux_net_sock__all_locked_sockets_must_be_released:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12308;

  corral_source_split_12308:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12309;

  corral_source_split_12309:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12311;

  corral_source_split_12311:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2285} __VERIFIER_error();
    goto SeqInstr_1954, SeqInstr_1955;

  SeqInstr_1955:
    assume assertsPassed;
    goto SeqInstr_1956;

  SeqInstr_1956:
    goto corral_source_split_12312;

  corral_source_split_12312:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1954:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_net_rtnetlink__lock_on_exit: ref;

axiom ldv_assert_linux_net_rtnetlink__lock_on_exit == $sub.ref(0, 790303);

procedure ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2286} {:cexpr "ldv_assert_linux_net_rtnetlink__lock_on_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12314;

  corral_source_split_12314:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12315;

  corral_source_split_12315:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12317;

  corral_source_split_12317:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2287} __VERIFIER_error();
    goto SeqInstr_1957, SeqInstr_1958;

  SeqInstr_1958:
    assume assertsPassed;
    goto SeqInstr_1959;

  SeqInstr_1959:
    goto corral_source_split_12318;

  corral_source_split_12318:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1957:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_mmc_sdio_func__unreleased_at_exit: ref;

axiom ldv_assert_linux_mmc_sdio_func__unreleased_at_exit == $sub.ref(0, 791335);

procedure ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2288} {:cexpr "ldv_assert_linux_mmc_sdio_func__unreleased_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12320;

  corral_source_split_12320:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12321;

  corral_source_split_12321:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12323;

  corral_source_split_12323:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2289} __VERIFIER_error();
    goto SeqInstr_1960, SeqInstr_1961;

  SeqInstr_1961:
    assume assertsPassed;
    goto SeqInstr_1962;

  SeqInstr_1962:
    goto corral_source_split_12324;

  corral_source_split_12324:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1960:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_lib_idr__more_at_exit: ref;

axiom ldv_assert_linux_lib_idr__more_at_exit == $sub.ref(0, 792367);

procedure ldv_assert_linux_lib_idr__more_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_lib_idr__more_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2290} {:cexpr "ldv_assert_linux_lib_idr__more_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12326;

  corral_source_split_12326:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12327;

  corral_source_split_12327:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12329;

  corral_source_split_12329:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2291} __VERIFIER_error();
    goto SeqInstr_1963, SeqInstr_1964;

  SeqInstr_1964:
    assume assertsPassed;
    goto SeqInstr_1965;

  SeqInstr_1965:
    goto corral_source_split_12330;

  corral_source_split_12330:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1963:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_srcu__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_srcu__locked_at_exit == $sub.ref(0, 793399);

procedure ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2292} {:cexpr "ldv_assert_linux_kernel_rcu_srcu__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12332;

  corral_source_split_12332:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12333;

  corral_source_split_12333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12335;

  corral_source_split_12335:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2293} __VERIFIER_error();
    goto SeqInstr_1966, SeqInstr_1967;

  SeqInstr_1967:
    assume assertsPassed;
    goto SeqInstr_1968;

  SeqInstr_1968:
    goto corral_source_split_12336;

  corral_source_split_12336:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1966:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit == $sub.ref(0, 794431);

procedure ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2294} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12338;

  corral_source_split_12338:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12339;

  corral_source_split_12339:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12341;

  corral_source_split_12341:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2295} __VERIFIER_error();
    goto SeqInstr_1969, SeqInstr_1970;

  SeqInstr_1970:
    assume assertsPassed;
    goto SeqInstr_1971;

  SeqInstr_1971:
    goto corral_source_split_12342;

  corral_source_split_12342:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1969:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit == $sub.ref(0, 795463);

procedure ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2296} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12344;

  corral_source_split_12344:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12345;

  corral_source_split_12345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12347;

  corral_source_split_12347:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2297} __VERIFIER_error();
    goto SeqInstr_1972, SeqInstr_1973;

  SeqInstr_1973:
    assume assertsPassed;
    goto SeqInstr_1974;

  SeqInstr_1974:
    goto corral_source_split_12348;

  corral_source_split_12348:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1972:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit == $sub.ref(0, 796495);

procedure ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2298} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12350;

  corral_source_split_12350:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12351;

  corral_source_split_12351:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12353;

  corral_source_split_12353:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2299} __VERIFIER_error();
    goto SeqInstr_1975, SeqInstr_1976;

  SeqInstr_1976:
    assume assertsPassed;
    goto SeqInstr_1977;

  SeqInstr_1977:
    goto corral_source_split_12354;

  corral_source_split_12354:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1975:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_module__more_initial_at_exit: ref;

axiom ldv_assert_linux_kernel_module__more_initial_at_exit == $sub.ref(0, 797527);

procedure ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2300} {:cexpr "ldv_assert_linux_kernel_module__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12356;

  corral_source_split_12356:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12357;

  corral_source_split_12357:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12359;

  corral_source_split_12359:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2301} __VERIFIER_error();
    goto SeqInstr_1978, SeqInstr_1979;

  SeqInstr_1979:
    assume assertsPassed;
    goto SeqInstr_1980;

  SeqInstr_1980:
    goto corral_source_split_12360;

  corral_source_split_12360:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1978:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit == $sub.ref(0, 798559);

procedure ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2302} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12362;

  corral_source_split_12362:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12363;

  corral_source_split_12363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12365;

  corral_source_split_12365:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2303} __VERIFIER_error();
    goto SeqInstr_1981, SeqInstr_1982;

  SeqInstr_1982:
    assume assertsPassed;
    goto SeqInstr_1983;

  SeqInstr_1983:
    goto corral_source_split_12366;

  corral_source_split_12366:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1981:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit == $sub.ref(0, 799591);

procedure ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2304} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12368;

  corral_source_split_12368:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12369;

  corral_source_split_12369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12371;

  corral_source_split_12371:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2305} __VERIFIER_error();
    goto SeqInstr_1984, SeqInstr_1985;

  SeqInstr_1985:
    assume assertsPassed;
    goto SeqInstr_1986;

  SeqInstr_1986:
    goto corral_source_split_12372;

  corral_source_split_12372:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1984:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_sysfs__more_initial_at_exit: ref;

axiom ldv_assert_linux_fs_sysfs__more_initial_at_exit == $sub.ref(0, 800623);

procedure ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2306} {:cexpr "ldv_assert_linux_fs_sysfs__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12374;

  corral_source_split_12374:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12375;

  corral_source_split_12375:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12377;

  corral_source_split_12377:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2307} __VERIFIER_error();
    goto SeqInstr_1987, SeqInstr_1988;

  SeqInstr_1988:
    assume assertsPassed;
    goto SeqInstr_1989;

  SeqInstr_1989:
    goto corral_source_split_12378;

  corral_source_split_12378:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1987:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_char_dev__registered_at_exit: ref;

axiom ldv_assert_linux_fs_char_dev__registered_at_exit == $sub.ref(0, 801655);

procedure ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2308} {:cexpr "ldv_assert_linux_fs_char_dev__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12380;

  corral_source_split_12380:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12381;

  corral_source_split_12381:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12383;

  corral_source_split_12383:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2309} __VERIFIER_error();
    goto SeqInstr_1990, SeqInstr_1991;

  SeqInstr_1991:
    assume assertsPassed;
    goto SeqInstr_1992;

  SeqInstr_1992:
    goto corral_source_split_12384;

  corral_source_split_12384:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1990:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_drivers_base_class__registered_at_exit: ref;

axiom ldv_assert_linux_drivers_base_class__registered_at_exit == $sub.ref(0, 802687);

procedure ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2310} {:cexpr "ldv_assert_linux_drivers_base_class__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12386;

  corral_source_split_12386:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12387;

  corral_source_split_12387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12389;

  corral_source_split_12389:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2311} __VERIFIER_error();
    goto SeqInstr_1993, SeqInstr_1994;

  SeqInstr_1994:
    assume assertsPassed;
    goto SeqInstr_1995;

  SeqInstr_1995:
    goto corral_source_split_12390;

  corral_source_split_12390:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1993:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_request__get_at_exit: ref;

axiom ldv_assert_linux_block_request__get_at_exit == $sub.ref(0, 803719);

procedure ldv_assert_linux_block_request__get_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_request__get_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2312} {:cexpr "ldv_assert_linux_block_request__get_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12392;

  corral_source_split_12392:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12393;

  corral_source_split_12393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12395;

  corral_source_split_12395:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2313} __VERIFIER_error();
    goto SeqInstr_1996, SeqInstr_1997;

  SeqInstr_1997:
    assume assertsPassed;
    goto SeqInstr_1998;

  SeqInstr_1998:
    goto corral_source_split_12396;

  corral_source_split_12396:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1996:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_queue__more_initial_at_exit: ref;

axiom ldv_assert_linux_block_queue__more_initial_at_exit == $sub.ref(0, 804751);

procedure ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2314} {:cexpr "ldv_assert_linux_block_queue__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12398;

  corral_source_split_12398:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12399;

  corral_source_split_12399:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12401;

  corral_source_split_12401:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2315} __VERIFIER_error();
    goto SeqInstr_1999, SeqInstr_2000;

  SeqInstr_2000:
    assume assertsPassed;
    goto SeqInstr_2001;

  SeqInstr_2001:
    goto corral_source_split_12402;

  corral_source_split_12402:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1999:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_genhd__more_initial_at_exit: ref;

axiom ldv_assert_linux_block_genhd__more_initial_at_exit == $sub.ref(0, 805783);

procedure ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2316} {:cexpr "ldv_assert_linux_block_genhd__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12404;

  corral_source_split_12404:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12405;

  corral_source_split_12405:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12407;

  corral_source_split_12407:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2317} __VERIFIER_error();
    goto SeqInstr_2002, SeqInstr_2003;

  SeqInstr_2003:
    assume assertsPassed;
    goto SeqInstr_2004;

  SeqInstr_2004:
    goto corral_source_split_12408;

  corral_source_split_12408:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2002:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_arch_io__more_initial_at_exit: ref;

axiom ldv_assert_linux_arch_io__more_initial_at_exit == $sub.ref(0, 806815);

procedure ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2318} {:cexpr "ldv_assert_linux_arch_io__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12410;

  corral_source_split_12410:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12411;

  corral_source_split_12411:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12413;

  corral_source_split_12413:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2319} __VERIFIER_error();
    goto SeqInstr_2005, SeqInstr_2006;

  SeqInstr_2006:
    assume assertsPassed;
    goto SeqInstr_2007;

  SeqInstr_2007:
    goto corral_source_split_12414;

  corral_source_split_12414:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2005:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_post_init: ref;

axiom ldv_post_init == $sub.ref(0, 807847);

procedure ldv_post_init($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_post_init($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2320} {:cexpr "ldv_post_init:arg:init_ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_12416;

  corral_source_split_12416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2321} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 2322} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_12417;

  corral_source_split_12417:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 808879);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $M.1, $M.7, $M.8, $M.11, $M.119, $M.122, $M.109, $M.112, $M.123, $M.124, $M.125, $M.126, $M.130, $M.127, $M.128, $M.129, $M.132, $M.96, $M.133, $M.134, $M.135, $M.110, $M.97, $M.136, $M.131, $M.39, $M.40, $M.43, $M.9, $M.10, $M.16, $M.15, $M.13, $M.45, $M.99, $M.2, $M.0, $M.121, $M.120, $M.12, $M.164, $M.41, $M.44, $M.209, $M.210, $M.211, $M.212, $M.101, $M.213, $M.98, $M.113, $M.111, $M.46, $M.14, $M.114, $CurrAddr, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.17, assertsPassed, $M.18, $M.19, $M.20, $M.21, $M.22, $M.42, $M.30, $M.31, $M.32, $M.5, $M.48, $M.33, $M.34, $M.35, $M.36, $M.37, $M.95, $M.38, $M.103, $M.104, $M.105, $M.106, $M.107;



implementation main() returns ($r: i32)
{

  $bb0:
    call {:si_unique_call 2323} $initialize();
    goto corral_source_split_12419;

  corral_source_split_12419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2324} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_12420;

  corral_source_split_12420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2325} ldv_ldv_initialize_124();
    goto corral_source_split_12421;

  corral_source_split_12421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2326} ldv_entry_EMGentry_9($0.ref);
    goto SeqInstr_2008, SeqInstr_2009;

  SeqInstr_2009:
    assume assertsPassed;
    goto SeqInstr_2010;

  SeqInstr_2010:
    goto corral_source_split_12422;

  corral_source_split_12422:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_2008:
    assume !assertsPassed;
    return;
}



const ldv_ldv_initialize_124: ref;

axiom ldv_ldv_initialize_124 == $sub.ref(0, 809911);

procedure ldv_ldv_initialize_124();
  free requires assertsPassed;



implementation ldv_ldv_initialize_124()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12424;

  corral_source_split_12424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2327} ldv_linux_lib_find_bit_initialize();
    goto corral_source_split_12425;

  corral_source_split_12425:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_lib_find_bit_initialize: ref;

axiom ldv_linux_lib_find_bit_initialize == $sub.ref(0, 810943);

procedure ldv_linux_lib_find_bit_initialize();
  free requires assertsPassed;



implementation ldv_linux_lib_find_bit_initialize()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12427;

  corral_source_split_12427:
    assume {:verifier.code 0} true;
    $i0 := $load.i32($M.5, nr_cpu_ids);
    goto corral_source_split_12428;

  corral_source_split_12428:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_12429;

  corral_source_split_12429:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12430;

  corral_source_split_12430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2328} ldv_assume($i2);
    goto corral_source_split_12431;

  corral_source_split_12431:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 811975);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2329} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_12433;

  corral_source_split_12433:
    assume {:verifier.code 1} true;
    goto corral_source_split_12434;

  corral_source_split_12434:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_12435;

  corral_source_split_12435:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 813007);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 814039);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 815071);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12437;

  corral_source_split_12437:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_2011, SeqInstr_2012;

  SeqInstr_2012:
    assume assertsPassed;
    goto SeqInstr_2013;

  SeqInstr_2013:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_12438;

  corral_source_split_12438:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2011:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 816103);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 817135);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 818167);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 819199);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 820231);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 821263);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 822295);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 823327);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 824359);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 825391);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12440;

  corral_source_split_12440:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2330} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 2331} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2332} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_12441;

  corral_source_split_12441:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_12442;

  corral_source_split_12442:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_12446;

  corral_source_split_12446:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_12447;

  corral_source_split_12447:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2333} __VERIFIER_assume($i4);
    goto corral_source_split_12448;

  corral_source_split_12448:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_12444;

  corral_source_split_12444:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 826423);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 827455);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 828487);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 829519);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 830551);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 831583);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 832615);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 833647);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 834679);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12450;

  corral_source_split_12450:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2334} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2335} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2336} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_12451;

  corral_source_split_12451:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2337} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2338} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 2339} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_12452;

  corral_source_split_12452:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2340} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2341} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 2342} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_12453;

  corral_source_split_12453:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_12454;

  corral_source_split_12454:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_12459;

  corral_source_split_12459:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_12460;

  corral_source_split_12460:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2343} __VERIFIER_assume($i7);
    goto corral_source_split_12461;

  corral_source_split_12461:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_12462;

  corral_source_split_12462:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_12468;

  corral_source_split_12468:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_12469;

  corral_source_split_12469:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2344} __VERIFIER_assume($i11);
    goto corral_source_split_12470;

  corral_source_split_12470:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_12466;

  corral_source_split_12466:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_12456;

  corral_source_split_12456:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_12457;

  corral_source_split_12457:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_12464;

  corral_source_split_12464:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 835711);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 836743);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 837775);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 838807);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 839839);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 840871);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 841903);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 842935);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 843967);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12472;

  corral_source_split_12472:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2345} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2346} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12473;

  corral_source_split_12473:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12474;

  corral_source_split_12474:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 2347} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_12475;

  corral_source_split_12475:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_12476;

  corral_source_split_12476:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_12477;

  corral_source_split_12477:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_12478;

  corral_source_split_12478:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_12485;

  corral_source_split_12485:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_12486;

  corral_source_split_12486:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_12487;

  corral_source_split_12487:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_12488;

  corral_source_split_12488:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_12480;

  corral_source_split_12480:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_12481;

  corral_source_split_12481:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2348} __VERIFIER_assume($i10);
    goto corral_source_split_12482;

  corral_source_split_12482:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_12483;

  corral_source_split_12483:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 844999);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12490;

  corral_source_split_12490:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2349} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 2350} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2351} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_12491;

  corral_source_split_12491:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 846031);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12493;

  corral_source_split_12493:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2352} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 2353} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_12494;

  corral_source_split_12494:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 847063);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 848095);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2354} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2355} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 849127);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 850159);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12496;

  corral_source_split_12496:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_12497;

  corral_source_split_12497:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 851191);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_132: [ref]i8;
  var cmdloc_dummy_var_133: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2356} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 2357} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_12499;

  corral_source_split_12499:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2358} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2359} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_12500;

  corral_source_split_12500:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_12501;

  corral_source_split_12501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_12505;

  corral_source_split_12505:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_12506;

  corral_source_split_12506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2360} $p6 := malloc($i5);
    goto corral_source_split_12507;

  corral_source_split_12507:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_12508;

  corral_source_split_12508:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_132 := $M.1;
    call {:si_unique_call 2361} cmdloc_dummy_var_133 := $memset.i8(cmdloc_dummy_var_132, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_133;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12510;

  corral_source_split_12510:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_12503;

  corral_source_split_12503:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 852223);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 853255);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.23, $M.1, $M.7, $M.8, $M.11, $M.119, $M.122, $M.109, $M.112, $M.123, $M.124, $M.125, $M.126, $M.130, $M.127, $M.128, $M.129, $M.132, $M.96, $M.133, $M.134, $M.135, $M.110, $M.97, $M.136, $M.131, $M.39, $M.40, $M.43, $M.9, $M.10, $M.16, $M.15, $M.13, $M.45, $M.99, $M.2, $M.0, $M.121, $M.120, $M.12, $M.164, $M.41, $M.44, $M.209, $M.210, $M.211, $M.212, $M.101, $M.213, $M.98, $M.113, $M.111, $M.46, $M.14, $M.114;



implementation __SMACK_static_init()
{

  $bb0:
    $M.23 := 8;
    call {:si_unique_call 2362} {:cexpr "oz_dbg_mask"} boogie_si_record_i32(8);
    $M.1 := $store.i32($M.1, g_polling_lock, 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref(g_polling_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref(g_polling_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(g_polling_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(g_polling_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_polling_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_polling_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(g_polling_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.20);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(g_polling_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(g_polling_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.i8($M.1, .str.20, 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(1, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(2, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(3, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(4, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(5, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(6, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(7, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(8, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(9, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(10, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(11, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(12, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(13, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.20, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.7 := $0.ref;
    $M.8 := $0.ref;
    $M.11 := 1;
    call {:si_unique_call 2363} {:cexpr "ldv_linux_alloc_usb_lock_lock"} boogie_si_record_i32(1);
    $M.119 := 0;
    call {:si_unique_call 2364} {:cexpr "ldv_linux_arch_io_iomem"} boogie_si_record_i32(0);
    $M.122 := 0;
    call {:si_unique_call 2365} {:cexpr "ldv_linux_block_request_blk_rq"} boogie_si_record_i32(0);
    $M.109 := 0;
    call {:si_unique_call 2366} {:cexpr "ldv_linux_drivers_base_class_usb_gadget_class"} boogie_si_record_i32(0);
    $M.112 := 0;
    call {:si_unique_call 2367} {:cexpr "ldv_linux_fs_char_dev_usb_gadget_chrdev"} boogie_si_record_i32(0);
    $M.123 := 0;
    call {:si_unique_call 2368} {:cexpr "ldv_linux_fs_sysfs_sysfs"} boogie_si_record_i32(0);
    $M.124 := 1;
    call {:si_unique_call 2369} {:cexpr "ldv_linux_kernel_locking_rwlock_rlock"} boogie_si_record_i32(1);
    $M.125 := 1;
    call {:si_unique_call 2370} {:cexpr "ldv_linux_kernel_locking_rwlock_wlock"} boogie_si_record_i32(1);
    $M.126 := 1;
    call {:si_unique_call 2371} {:cexpr "ldv_linux_kernel_module_module_refcounter"} boogie_si_record_i32(1);
    $M.130 := 0;
    call {:si_unique_call 2372} {:cexpr "ldv_linux_kernel_rcu_srcu_srcu_nested"} boogie_si_record_i32(0);
    $M.127 := 0;
    call {:si_unique_call 2373} {:cexpr "ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh"} boogie_si_record_i32(0);
    $M.128 := 0;
    call {:si_unique_call 2374} {:cexpr "ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched"} boogie_si_record_i32(0);
    $M.129 := 0;
    call {:si_unique_call 2375} {:cexpr "ldv_linux_kernel_rcu_update_lock_rcu_nested"} boogie_si_record_i32(0);
    $M.132 := 0;
    call {:si_unique_call 2376} {:cexpr "ldv_linux_mmc_sdio_func_sdio_element"} boogie_si_record_i16(0);
    $M.96 := 0;
    call {:si_unique_call 2377} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
    $M.133 := 0;
    call {:si_unique_call 2378} {:cexpr "rtnllocknumber"} boogie_si_record_i32(0);
    $M.134 := 0;
    call {:si_unique_call 2379} {:cexpr "locksocknumber"} boogie_si_record_i32(0);
    $M.135 := 0;
    call {:si_unique_call 2380} {:cexpr "ldv_linux_usb_coherent_coherent_state"} boogie_si_record_i32(0);
    call {:si_unique_call 2381} {:cexpr "LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS"} boogie_si_record_i32(0);
    $M.110 := 0;
    call {:si_unique_call 2382} {:cexpr "ldv_linux_usb_gadget_usb_gadget"} boogie_si_record_i32(0);
    $M.97 := 0;
    call {:si_unique_call 2383} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
    $M.136 := 0;
    call {:si_unique_call 2384} {:cexpr "ldv_linux_usb_urb_urb_state"} boogie_si_record_i32(0);
    call {:si_unique_call 2385} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode"} boogie_si_record_i8(0);
    call {:si_unique_call 2386} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock"} boogie_si_record_i8(0);
    call {:si_unique_call 2387} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device"} boogie_si_record_i8(0);
    $M.131 := 0;
    call {:si_unique_call 2388} {:cexpr "ldv_linux_lib_idr_idr"} boogie_si_record_i32(0);
    call {:si_unique_call 2389} {:cexpr "ldv_linux_kernel_sched_completion_completion"} boogie_si_record_i32(0);
    call {:si_unique_call 2390} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_tx_global_lock_of_net_device"} boogie_si_record_i32(1);
    $M.39 := 1;
    call {:si_unique_call 2391} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_tx_frame_lock_of_oz_pd"} boogie_si_record_i32(1);
    $M.40 := 1;
    call {:si_unique_call 2392} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_stream_lock_of_oz_pd"} boogie_si_record_i32(1);
    call {:si_unique_call 2393} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct"} boogie_si_record_i32(1);
    call {:si_unique_call 2394} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_ptl"} boogie_si_record_i32(1);
    $M.43 := 1;
    call {:si_unique_call 2395} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_port_lock_of_oz_port"} boogie_si_record_i32(1);
    call {:si_unique_call 2396} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data"} boogie_si_record_i32(1);
    call {:si_unique_call 2397} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_sk_buff_head"} boogie_si_record_i32(1);
    $M.9 := 1;
    call {:si_unique_call 2398} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_oz_elt_buf"} boogie_si_record_i32(1);
    $M.10 := 1;
    call {:si_unique_call 2399} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_oz_cdev"} boogie_si_record_i32(1);
    call {:si_unique_call 2400} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN"} boogie_si_record_i32(1);
    call {:si_unique_call 2401} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock"} boogie_si_record_i32(1);
    call {:si_unique_call 2402} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode"} boogie_si_record_i32(1);
    $M.16 := 1;
    call {:si_unique_call 2403} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_hcd_lock_of_oz_hcd"} boogie_si_record_i32(1);
    $M.15 := 1;
    call {:si_unique_call 2404} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_g_tasklet_lock"} boogie_si_record_i32(1);
    $M.13 := 1;
    call {:si_unique_call 2405} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_g_polling_lock"} boogie_si_record_i32(1);
    $M.45 := 1;
    call {:si_unique_call 2406} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_g_hcdlock"} boogie_si_record_i32(1);
    $M.99 := 1;
    call {:si_unique_call 2407} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_g_binding_lock"} boogie_si_record_i32(1);
    call {:si_unique_call 2408} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct"} boogie_si_record_i32(1);
    call {:si_unique_call 2409} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_addr_list_lock_of_net_device"} boogie_si_record_i32(1);
    call {:si_unique_call 2410} {:cexpr "ldv_linux_kernel_locking_spinlock_spin__xmit_lock_of_netdev_queue"} boogie_si_record_i32(1);
    $M.2 := 1;
    call {:si_unique_call 2411} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_NOT_ARG_SIGN"} boogie_si_record_i32(1);
    $M.0 := 0;
    call {:si_unique_call 2412} {:cexpr "__ldv_in_interrupt_context"} boogie_si_record_i8(0);
    $M.121 := 0;
    call {:si_unique_call 2413} {:cexpr "ldv_linux_block_queue_queue_state"} boogie_si_record_i32(0);
    $M.120 := 0;
    call {:si_unique_call 2414} {:cexpr "ldv_linux_block_genhd_disk_state"} boogie_si_record_i32(0);
    $M.1 := $store.ref($M.1, oz_fops, __this_module);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(oz_fops, $mul.ref(0, 240)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(oz_fops, $mul.ref(0, 240)), $mul.ref(16, 1)), oz_cdev_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(oz_fops, $mul.ref(0, 240)), $mul.ref(24, 1)), oz_cdev_write);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(oz_fops, $mul.ref(0, 240)), $mul.ref(32, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(oz_fops, $mul.ref(0, 240)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(oz_fops, $mul.ref(0, 240)), $mul.ref(48, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(oz_fops, $mul.ref(0, 240)), $mul.ref(56, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(oz_fops, $mul.ref(0, 240)), $mul.ref(64, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(oz_fops, $mul.ref(0, 240)), $mul.ref(72, 1)), oz_cdev_poll);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(oz_fops, $mul.ref(0, 240)), $mul.ref(80, 1)), oz_cdev_ioctl);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(oz_fops, $mul.ref(0, 240)), $mul.ref(88, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(oz_fops, $mul.ref(0, 240)), $mul.ref(96, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(oz_fops, $mul.ref(0, 240)), $mul.ref(104, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(oz_fops, $mul.ref(0, 240)), $mul.ref(112, 1)), oz_cdev_open);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(oz_fops, $mul.ref(0, 240)), $mul.ref(120, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(oz_fops, $mul.ref(0, 240)), $mul.ref(128, 1)), oz_cdev_release);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(oz_fops, $mul.ref(0, 240)), $mul.ref(136, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(oz_fops, $mul.ref(0, 240)), $mul.ref(144, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(oz_fops, $mul.ref(0, 240)), $mul.ref(152, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(oz_fops, $mul.ref(0, 240)), $mul.ref(160, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(oz_fops, $mul.ref(0, 240)), $mul.ref(168, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(oz_fops, $mul.ref(0, 240)), $mul.ref(176, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(oz_fops, $mul.ref(0, 240)), $mul.ref(184, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(oz_fops, $mul.ref(0, 240)), $mul.ref(192, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(oz_fops, $mul.ref(0, 240)), $mul.ref(200, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(oz_fops, $mul.ref(0, 240)), $mul.ref(208, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(oz_fops, $mul.ref(0, 240)), $mul.ref(216, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(oz_fops, $mul.ref(0, 240)), $mul.ref(224, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(oz_fops, $mul.ref(0, 240)), $mul.ref(232, 1)), $0.ref);
    call {:si_unique_call 2415} {:cexpr "g_session_id"} boogie_si_record_i8(0);
    call {:si_unique_call 2416} {:cexpr "g_processing_rx"} boogie_si_record_i32(0);
    $M.12 := 1;
    call {:si_unique_call 2417} {:cexpr "g_apps"} boogie_si_record_i16(1);
    $M.1 := $store.ref($M.1, g_pd_list, g_pd_list);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(g_pd_list, $mul.ref(0, 16)), $mul.ref(8, 1)), g_pd_list);
    $M.1 := $store.ref($M.1, g_binding, g_binding);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(g_binding, $mul.ref(0, 16)), $mul.ref(8, 1)), g_binding);
    $M.1 := $store.i32($M.1, g_binding_lock, 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref(g_binding_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref(g_binding_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(g_binding_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(g_binding_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_binding_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_binding_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(g_binding_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.79);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(g_binding_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(g_binding_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.164 := $store.i8($M.164, g_hcd_name, 79);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(g_hcd_name, $mul.ref(0, 10)), $mul.ref(1, 1)), 122);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(g_hcd_name, $mul.ref(0, 10)), $mul.ref(2, 1)), 109);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(g_hcd_name, $mul.ref(0, 10)), $mul.ref(3, 1)), 111);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(g_hcd_name, $mul.ref(0, 10)), $mul.ref(4, 1)), 32);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(g_hcd_name, $mul.ref(0, 10)), $mul.ref(5, 1)), 87);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(g_hcd_name, $mul.ref(0, 10)), $mul.ref(6, 1)), 80);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(g_hcd_name, $mul.ref(0, 10)), $mul.ref(7, 1)), 65);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(g_hcd_name, $mul.ref(0, 10)), $mul.ref(8, 1)), 78);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(g_hcd_name, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.1 := $store.ref($M.1, g_oz_plat_drv, oz_plat_probe);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(g_oz_plat_drv, $mul.ref(0, 176)), $mul.ref(8, 1)), oz_plat_remove);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(g_oz_plat_drv, $mul.ref(0, 176)), $mul.ref(16, 1)), oz_plat_shutdown);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(g_oz_plat_drv, $mul.ref(0, 176)), $mul.ref(24, 1)), oz_plat_suspend);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(g_oz_plat_drv, $mul.ref(0, 176)), $mul.ref(32, 1)), oz_plat_resume);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(g_oz_plat_drv, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(0, 1)), .str.4);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(g_oz_plat_drv, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(g_oz_plat_drv, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(g_oz_plat_drv, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(g_oz_plat_drv, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(g_oz_plat_drv, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(g_oz_plat_drv, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(48, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(g_oz_plat_drv, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(56, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(g_oz_plat_drv, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(64, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(g_oz_plat_drv, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(72, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(g_oz_plat_drv, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(80, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(g_oz_plat_drv, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(88, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(g_oz_plat_drv, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(96, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(g_oz_plat_drv, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(104, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(g_oz_plat_drv, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(112, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(g_oz_plat_drv, $mul.ref(0, 176)), $mul.ref(160, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(g_oz_plat_drv, $mul.ref(0, 176)), $mul.ref(168, 1)), 0);
    $M.41 := 0;
    $M.1 := $store.i32($M.1, g_pending_urbs, 0);
    $M.1 := $store.i32($M.1, g_tasklet_lock, 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref(g_tasklet_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref(g_tasklet_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(g_tasklet_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(g_tasklet_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_tasklet_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_tasklet_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(g_tasklet_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.34);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(g_tasklet_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(g_tasklet_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.44 := $0.ref;
    $M.1 := $store.i32($M.1, g_hcdlock, 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref(g_hcdlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref(g_hcdlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(g_hcdlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(g_hcdlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_hcdlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_hcdlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(g_hcdlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.33);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(g_hcdlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(g_hcdlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.i32($M.1, g_submitted_isoc, 0);
    $M.209 := $store.ref($M.209, g_app_if, $0.ref);
    $M.210 := $store.ref($M.210, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(0, 56)), $mul.ref(8, 1)), $0.ref);
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(0, 56)), $mul.ref(16, 1)), $0.ref);
    $M.212 := $store.ref($M.212, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(0, 56)), $mul.ref(24, 1)), $0.ref);
    $M.101 := $store.ref($M.101, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(0, 56)), $mul.ref(32, 1)), $0.ref);
    $M.213 := $store.ref($M.213, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(0, 56)), $mul.ref(40, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(0, 56)), $mul.ref(48, 1)), $0.ref);
    $M.209 := $store.ref($M.209, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(1, 56)), $mul.ref(0, 1)), oz_usb_init);
    $M.210 := $store.ref($M.210, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(1, 56)), $mul.ref(8, 1)), oz_usb_term);
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(1, 56)), $mul.ref(16, 1)), oz_usb_start);
    $M.212 := $store.ref($M.212, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(1, 56)), $mul.ref(24, 1)), oz_usb_stop);
    $M.101 := $store.ref($M.101, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(1, 56)), $mul.ref(32, 1)), oz_usb_rx);
    $M.213 := $store.ref($M.213, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(1, 56)), $mul.ref(40, 1)), oz_usb_heartbeat);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(1, 56)), $mul.ref(48, 1)), oz_usb_farewell);
    $M.209 := $store.ref($M.209, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(2, 56)), $mul.ref(0, 1)), $0.ref);
    $M.210 := $store.ref($M.210, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(2, 56)), $mul.ref(8, 1)), $0.ref);
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(2, 56)), $mul.ref(16, 1)), $0.ref);
    $M.212 := $store.ref($M.212, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(2, 56)), $mul.ref(24, 1)), $0.ref);
    $M.101 := $store.ref($M.101, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(2, 56)), $mul.ref(32, 1)), $0.ref);
    $M.213 := $store.ref($M.213, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(2, 56)), $mul.ref(40, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(2, 56)), $mul.ref(48, 1)), $0.ref);
    $M.209 := $store.ref($M.209, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(3, 56)), $mul.ref(0, 1)), $0.ref);
    $M.210 := $store.ref($M.210, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(3, 56)), $mul.ref(8, 1)), $0.ref);
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(3, 56)), $mul.ref(16, 1)), $0.ref);
    $M.212 := $store.ref($M.212, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(3, 56)), $mul.ref(24, 1)), $0.ref);
    $M.101 := $store.ref($M.101, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(3, 56)), $mul.ref(32, 1)), $0.ref);
    $M.213 := $store.ref($M.213, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(3, 56)), $mul.ref(40, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(3, 56)), $mul.ref(48, 1)), $0.ref);
    $M.209 := $store.ref($M.209, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(4, 56)), $mul.ref(0, 1)), oz_cdev_init);
    $M.210 := $store.ref($M.210, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(4, 56)), $mul.ref(8, 1)), oz_cdev_term);
    $M.211 := $store.ref($M.211, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(4, 56)), $mul.ref(16, 1)), oz_cdev_start);
    $M.212 := $store.ref($M.212, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(4, 56)), $mul.ref(24, 1)), oz_cdev_stop);
    $M.101 := $store.ref($M.101, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(4, 56)), $mul.ref(32, 1)), oz_cdev_rx);
    $M.213 := $store.ref($M.213, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(4, 56)), $mul.ref(40, 1)), $0.ref);
    $M.98 := $store.ref($M.98, $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(4, 56)), $mul.ref(48, 1)), $0.ref);
    $M.113 := .str.25;
    $M.111 := $0.ref;
    $M.1 := $store.i32($M.1, g_cdev, 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(16, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), $0.ref);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(48, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(52, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(56, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(208, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(216, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(288, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(296, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(304, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(312, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(312, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(328, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(8, 1)), $mul.ref(332, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(344, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(344, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(344, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(344, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(344, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(344, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(344, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(344, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(344, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(344, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(344, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(344, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(504, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(504, 1)), $mul.ref(1, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(504, 1)), $mul.ref(2, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(504, 1)), $mul.ref(3, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(504, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(504, 1)), $mul.ref(5, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(g_cdev, $mul.ref(0, 520)), $mul.ref(512, 1)), $0.ref);
    $M.1 := $store.ref($M.1, g_rx_queue, $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(g_rx_queue, $mul.ref(0, 96)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(g_rx_queue, $mul.ref(0, 96)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_rx_queue, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(g_rx_queue, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(g_rx_queue, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(g_rx_queue, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_rx_queue, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_rx_queue, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_rx_queue, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_rx_queue, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_rx_queue, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_rx_queue, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.ref($M.1, g_urb_cancel_tasklet, $0.ref);
    $M.1 := $store.i64($M.1, $add.ref($add.ref(g_urb_cancel_tasklet, $mul.ref(0, 40)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(g_urb_cancel_tasklet, $mul.ref(0, 40)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(g_urb_cancel_tasklet, $mul.ref(0, 40)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i64($M.1, $add.ref($add.ref(g_urb_cancel_tasklet, $mul.ref(0, 40)), $mul.ref(32, 1)), 0);
    $M.1 := $store.ref($M.1, g_urb_process_tasklet, $0.ref);
    $M.1 := $store.i64($M.1, $add.ref($add.ref(g_urb_process_tasklet, $mul.ref(0, 40)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(g_urb_process_tasklet, $mul.ref(0, 40)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(g_urb_process_tasklet, $mul.ref(0, 40)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i64($M.1, $add.ref($add.ref(g_urb_process_tasklet, $mul.ref(0, 40)), $mul.ref(32, 1)), 0);
    $M.46 := $0.ref;
    $M.14 := $0.ref;
    $M.114 := $store.i8($M.114, .str.25, 0);
    $M.1 := $store.i8($M.1, .str.4, 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.4, $mul.ref(0, 7)), $mul.ref(1, 1)), 122);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.4, $mul.ref(0, 7)), $mul.ref(2, 1)), 119);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.4, $mul.ref(0, 7)), $mul.ref(3, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.4, $mul.ref(0, 7)), $mul.ref(4, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.4, $mul.ref(0, 7)), $mul.ref(5, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.4, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, .str.35, 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.35, $mul.ref(0, 19)), $mul.ref(1, 1)), 122);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.35, $mul.ref(0, 19)), $mul.ref(2, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.35, $mul.ref(0, 19)), $mul.ref(3, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.35, $mul.ref(0, 19)), $mul.ref(4, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.35, $mul.ref(0, 19)), $mul.ref(5, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.35, $mul.ref(0, 19)), $mul.ref(6, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.35, $mul.ref(0, 19)), $mul.ref(7, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.35, $mul.ref(0, 19)), $mul.ref(8, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.35, $mul.ref(0, 19)), $mul.ref(9, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.35, $mul.ref(0, 19)), $mul.ref(10, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.35, $mul.ref(0, 19)), $mul.ref(11, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.35, $mul.ref(0, 19)), $mul.ref(12, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.35, $mul.ref(0, 19)), $mul.ref(13, 1)), 48);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.35, $mul.ref(0, 19)), $mul.ref(14, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.35, $mul.ref(0, 19)), $mul.ref(15, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.35, $mul.ref(0, 19)), $mul.ref(16, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.35, $mul.ref(0, 19)), $mul.ref(17, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.35, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, .str.16, 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 18)), $mul.ref(1, 1)), 122);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 18)), $mul.ref(2, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 18)), $mul.ref(3, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 18)), $mul.ref(4, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 18)), $mul.ref(5, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 18)), $mul.ref(6, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 18)), $mul.ref(7, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 18)), $mul.ref(8, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 18)), $mul.ref(9, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 18)), $mul.ref(10, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 18)), $mul.ref(11, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 18)), $mul.ref(12, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 18)), $mul.ref(13, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 18)), $mul.ref(14, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 18)), $mul.ref(15, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 18)), $mul.ref(16, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.1 := $store.i8($M.1, .str.8, 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 18)), $mul.ref(1, 1)), 122);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 18)), $mul.ref(2, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 18)), $mul.ref(3, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 18)), $mul.ref(4, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 18)), $mul.ref(5, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 18)), $mul.ref(6, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 18)), $mul.ref(7, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 18)), $mul.ref(8, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 18)), $mul.ref(9, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 18)), $mul.ref(10, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 18)), $mul.ref(11, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 18)), $mul.ref(12, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 18)), $mul.ref(13, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 18)), $mul.ref(14, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 18)), $mul.ref(15, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 18)), $mul.ref(16, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.1 := $store.i8($M.1, .str.31, 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 16)), $mul.ref(1, 1)), 122);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 16)), $mul.ref(2, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 16)), $mul.ref(3, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 16)), $mul.ref(4, 1)), 120);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 16)), $mul.ref(5, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 16)), $mul.ref(6, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 16)), $mul.ref(7, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 16)), $mul.ref(8, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 16)), $mul.ref(9, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 16)), $mul.ref(10, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 16)), $mul.ref(11, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 16)), $mul.ref(12, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 16)), $mul.ref(13, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 16)), $mul.ref(14, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.1 := $store.i8($M.1, .str.13, 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.13, $mul.ref(0, 21)), $mul.ref(1, 1)), 122);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.13, $mul.ref(0, 21)), $mul.ref(2, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.13, $mul.ref(0, 21)), $mul.ref(3, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.13, $mul.ref(0, 21)), $mul.ref(4, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.13, $mul.ref(0, 21)), $mul.ref(5, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.13, $mul.ref(0, 21)), $mul.ref(6, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.13, $mul.ref(0, 21)), $mul.ref(7, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.13, $mul.ref(0, 21)), $mul.ref(8, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.13, $mul.ref(0, 21)), $mul.ref(9, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.13, $mul.ref(0, 21)), $mul.ref(10, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.13, $mul.ref(0, 21)), $mul.ref(11, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.13, $mul.ref(0, 21)), $mul.ref(12, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.13, $mul.ref(0, 21)), $mul.ref(13, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.13, $mul.ref(0, 21)), $mul.ref(14, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.13, $mul.ref(0, 21)), $mul.ref(15, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.13, $mul.ref(0, 21)), $mul.ref(16, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.13, $mul.ref(0, 21)), $mul.ref(17, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.13, $mul.ref(0, 21)), $mul.ref(18, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.13, $mul.ref(0, 21)), $mul.ref(19, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.13, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i8($M.1, .str.33, 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.33, $mul.ref(0, 10)), $mul.ref(1, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.33, $mul.ref(0, 10)), $mul.ref(2, 1)), 104);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.33, $mul.ref(0, 10)), $mul.ref(3, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.33, $mul.ref(0, 10)), $mul.ref(4, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.33, $mul.ref(0, 10)), $mul.ref(5, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.33, $mul.ref(0, 10)), $mul.ref(6, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.33, $mul.ref(0, 10)), $mul.ref(7, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.33, $mul.ref(0, 10)), $mul.ref(8, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.33, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, .str.34, 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.34, $mul.ref(0, 15)), $mul.ref(1, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.34, $mul.ref(0, 15)), $mul.ref(2, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.34, $mul.ref(0, 15)), $mul.ref(3, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.34, $mul.ref(0, 15)), $mul.ref(4, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.34, $mul.ref(0, 15)), $mul.ref(5, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.34, $mul.ref(0, 15)), $mul.ref(6, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.34, $mul.ref(0, 15)), $mul.ref(7, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.34, $mul.ref(0, 15)), $mul.ref(8, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.34, $mul.ref(0, 15)), $mul.ref(9, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.34, $mul.ref(0, 15)), $mul.ref(10, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.34, $mul.ref(0, 15)), $mul.ref(11, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.34, $mul.ref(0, 15)), $mul.ref(12, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.34, $mul.ref(0, 15)), $mul.ref(13, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.34, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i8($M.1, .str.43, 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(1, 1)), 122);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(2, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(3, 1)), 104);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(4, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(5, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(6, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(7, 1)), 104);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(8, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(9, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(10, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(11, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(12, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(13, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(14, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(15, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(16, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(17, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, .str.68, 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(1, 1)), 122);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(2, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(3, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(4, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(5, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(6, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(7, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(8, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(9, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(10, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(11, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(12, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(13, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(14, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(15, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(16, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(17, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(18, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.1 := $store.i8($M.1, .str.65, 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(1, 1)), 122);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(2, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(3, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(4, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(5, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(6, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(7, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(8, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(9, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(10, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(11, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(12, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(13, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(14, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(15, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(16, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(17, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.65, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, .str.48, 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(1, 1)), 122);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(2, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(3, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(4, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(5, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(6, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(7, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(8, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(9, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(10, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(11, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(12, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(13, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(14, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(15, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(16, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(17, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(18, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(19, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(20, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.1 := $store.i8($M.1, .str.69, 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.69, $mul.ref(0, 23)), $mul.ref(1, 1)), 122);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.69, $mul.ref(0, 23)), $mul.ref(2, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.69, $mul.ref(0, 23)), $mul.ref(3, 1)), 104);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.69, $mul.ref(0, 23)), $mul.ref(4, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.69, $mul.ref(0, 23)), $mul.ref(5, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.69, $mul.ref(0, 23)), $mul.ref(6, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.69, $mul.ref(0, 23)), $mul.ref(7, 1)), 104);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.69, $mul.ref(0, 23)), $mul.ref(8, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.69, $mul.ref(0, 23)), $mul.ref(9, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.69, $mul.ref(0, 23)), $mul.ref(10, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.69, $mul.ref(0, 23)), $mul.ref(11, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.69, $mul.ref(0, 23)), $mul.ref(12, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.69, $mul.ref(0, 23)), $mul.ref(13, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.69, $mul.ref(0, 23)), $mul.ref(14, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.69, $mul.ref(0, 23)), $mul.ref(15, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.69, $mul.ref(0, 23)), $mul.ref(16, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.69, $mul.ref(0, 23)), $mul.ref(17, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.69, $mul.ref(0, 23)), $mul.ref(18, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.69, $mul.ref(0, 23)), $mul.ref(19, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.69, $mul.ref(0, 23)), $mul.ref(20, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.69, $mul.ref(0, 23)), $mul.ref(21, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.69, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.1 := $store.i8($M.1, .str.71, 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 19)), $mul.ref(1, 1)), 122);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 19)), $mul.ref(2, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 19)), $mul.ref(3, 1)), 104);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 19)), $mul.ref(4, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 19)), $mul.ref(5, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 19)), $mul.ref(6, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 19)), $mul.ref(7, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 19)), $mul.ref(8, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 19)), $mul.ref(9, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 19)), $mul.ref(10, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 19)), $mul.ref(11, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 19)), $mul.ref(12, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 19)), $mul.ref(13, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 19)), $mul.ref(14, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 19)), $mul.ref(15, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 19)), $mul.ref(16, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 19)), $mul.ref(17, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.71, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, .str.73, 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.73, $mul.ref(0, 19)), $mul.ref(1, 1)), 122);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.73, $mul.ref(0, 19)), $mul.ref(2, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.73, $mul.ref(0, 19)), $mul.ref(3, 1)), 104);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.73, $mul.ref(0, 19)), $mul.ref(4, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.73, $mul.ref(0, 19)), $mul.ref(5, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.73, $mul.ref(0, 19)), $mul.ref(6, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.73, $mul.ref(0, 19)), $mul.ref(7, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.73, $mul.ref(0, 19)), $mul.ref(8, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.73, $mul.ref(0, 19)), $mul.ref(9, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.73, $mul.ref(0, 19)), $mul.ref(10, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.73, $mul.ref(0, 19)), $mul.ref(11, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.73, $mul.ref(0, 19)), $mul.ref(12, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.73, $mul.ref(0, 19)), $mul.ref(13, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.73, $mul.ref(0, 19)), $mul.ref(14, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.73, $mul.ref(0, 19)), $mul.ref(15, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.73, $mul.ref(0, 19)), $mul.ref(16, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.73, $mul.ref(0, 19)), $mul.ref(17, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.73, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, .str.79, 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 15)), $mul.ref(1, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 15)), $mul.ref(2, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 15)), $mul.ref(3, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 15)), $mul.ref(4, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 15)), $mul.ref(5, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 15)), $mul.ref(6, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 15)), $mul.ref(7, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 15)), $mul.ref(8, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 15)), $mul.ref(9, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 15)), $mul.ref(10, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 15)), $mul.ref(11, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 15)), $mul.ref(12, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 15)), $mul.ref(13, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.79, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i8($M.1, .str.80, 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.80, $mul.ref(0, 12)), $mul.ref(1, 1)), 122);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.80, $mul.ref(0, 12)), $mul.ref(2, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.80, $mul.ref(0, 12)), $mul.ref(3, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.80, $mul.ref(0, 12)), $mul.ref(4, 1)), 120);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.80, $mul.ref(0, 12)), $mul.ref(5, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.80, $mul.ref(0, 12)), $mul.ref(6, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.80, $mul.ref(0, 12)), $mul.ref(7, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.80, $mul.ref(0, 12)), $mul.ref(8, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.80, $mul.ref(0, 12)), $mul.ref(9, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.80, $mul.ref(0, 12)), $mul.ref(10, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.80, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.1 := $store.i8($M.1, .str.18, 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(1, 1)), 122);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(2, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(3, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(4, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(5, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(6, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(7, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(8, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(9, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(10, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(11, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(12, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(13, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(14, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(15, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(16, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(17, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(18, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(19, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(20, 1)), 120);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.18, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.1 := $store.i8($M.1, .str.26, 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 26)), $mul.ref(1, 1)), 122);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 26)), $mul.ref(2, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 26)), $mul.ref(3, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 26)), $mul.ref(4, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 26)), $mul.ref(5, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 26)), $mul.ref(6, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 26)), $mul.ref(7, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 26)), $mul.ref(8, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 26)), $mul.ref(9, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 26)), $mul.ref(10, 1)), 120);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 26)), $mul.ref(11, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 26)), $mul.ref(12, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 26)), $mul.ref(13, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 26)), $mul.ref(14, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 26)), $mul.ref(15, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 26)), $mul.ref(16, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 26)), $mul.ref(17, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 26)), $mul.ref(18, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 26)), $mul.ref(19, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 26)), $mul.ref(20, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 26)), $mul.ref(21, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 26)), $mul.ref(22, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 26)), $mul.ref(23, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 26)), $mul.ref(24, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.1 := $store.i8($M.1, .str.5, 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.5, $mul.ref(0, 20)), $mul.ref(1, 1)), 122);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.5, $mul.ref(0, 20)), $mul.ref(2, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.5, $mul.ref(0, 20)), $mul.ref(3, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.5, $mul.ref(0, 20)), $mul.ref(4, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.5, $mul.ref(0, 20)), $mul.ref(5, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.5, $mul.ref(0, 20)), $mul.ref(6, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.5, $mul.ref(0, 20)), $mul.ref(7, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.5, $mul.ref(0, 20)), $mul.ref(8, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.5, $mul.ref(0, 20)), $mul.ref(9, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.5, $mul.ref(0, 20)), $mul.ref(10, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.5, $mul.ref(0, 20)), $mul.ref(11, 1)), 120);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.5, $mul.ref(0, 20)), $mul.ref(12, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.5, $mul.ref(0, 20)), $mul.ref(13, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.5, $mul.ref(0, 20)), $mul.ref(14, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.5, $mul.ref(0, 20)), $mul.ref(15, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.5, $mul.ref(0, 20)), $mul.ref(16, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.5, $mul.ref(0, 20)), $mul.ref(17, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.5, $mul.ref(0, 20)), $mul.ref(18, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.5, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    call {:si_unique_call 2418} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 854287);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i64);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 855319);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.16, assertsPassed, $M.15, $M.9, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, $M.30, $M.31, $M.32, $M.40, $M.13, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i12 := $eq.ref(oz_hcd_endpoint_reset, $p0);
    assume true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i12 == 1);
    $i11 := $eq.ref(oz_hcd_endpoint_disable, $p0);
    assume true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i11 == 1);
    $i10 := $eq.ref(oz_cdev_rx, $p0);
    assume true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i10 == 1);
    $i9 := $eq.ref(oz_usb_rx, $p0);
    assume {:branchcond $i9} true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2419} oz_usb_rx($p1, $p2);
    goto SeqInstr_2014, SeqInstr_2015;

  SeqInstr_2015:
    assume assertsPassed;
    goto SeqInstr_2016;

  SeqInstr_2016:
    return;

  SeqInstr_2014:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i10 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2420} oz_cdev_rx($p3, $p4);
    goto SeqInstr_2017, SeqInstr_2018;

  SeqInstr_2018:
    assume assertsPassed;
    goto SeqInstr_2019;

  SeqInstr_2019:
    return;

  SeqInstr_2017:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i11 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2421} oz_hcd_endpoint_disable($p5, $p6);
    return;

  $bb5:
    assume $i12 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2422} oz_hcd_endpoint_reset($p7, $p8);
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 856351);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: i16, arg3: ref, arg4: ref, arg5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: i16, arg3: ref, arg4: ref, arg5: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 857383);

procedure devirtbounce.3(funcPtr: ref);
  free requires assertsPassed;
  modifies $M.12, $M.13, assertsPassed;



implementation devirtbounce.3(funcPtr: ref)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(oz_cdev_term, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i2 == 1);
    $i1 := $eq.ref(oz_usb_term, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 2423} oz_usb_term();
    return;

  $bb3:
    assume $i2 == 1;
    call {:si_unique_call 2424} oz_cdev_term();
    goto SeqInstr_2020, SeqInstr_2021;

  SeqInstr_2021:
    assume assertsPassed;
    goto SeqInstr_2022;

  SeqInstr_2022:
    return;

  SeqInstr_2020:
    assume !assertsPassed;
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 858415);

procedure devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.44, $M.1, $M.33, $M.103, $M.17, $M.45, $M.16, $M.104, $M.105, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.41, $M.106, $M.107, $M.42, $M.15, $M.12, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i30 := $eq.ref(oz_pd_timeout_event, $p0);
    assume true;
    goto $bb11, $bb21;

  $bb21:
    assume !($i30 == 1);
    $i29 := $eq.ref(oz_pd_heartbeat_event, $p0);
    assume true;
    goto $bb10, $bb20;

  $bb20:
    assume !($i29 == 1);
    $i28 := $eq.ref(oz_hcd_bus_resume, $p0);
    assume true;
    goto $bb9, $bb19;

  $bb19:
    assume !($i28 == 1);
    $i27 := $eq.ref(oz_hcd_bus_suspend, $p0);
    assume true;
    goto $bb8, $bb18;

  $bb18:
    assume !($i27 == 1);
    $i26 := $eq.ref(oz_hcd_get_frame_number, $p0);
    assume true;
    goto $bb7, $bb17;

  $bb17:
    assume !($i26 == 1);
    $i25 := $eq.ref(oz_hcd_start, $p0);
    assume true;
    goto $bb6, $bb16;

  $bb16:
    assume !($i25 == 1);
    $i24 := $eq.ref(oz_plat_probe, $p0);
    assume true;
    goto $bb5, $bb15;

  $bb15:
    assume !($i24 == 1);
    $i23 := $eq.ref(oz_plat_resume, $p0);
    assume true;
    goto $bb4, $bb14;

  $bb14:
    assume !($i23 == 1);
    $i22 := $eq.ref(oz_plat_remove, $p0);
    assume true;
    goto $bb3, $bb13;

  $bb13:
    assume !($i22 == 1);
    $i21 := $eq.ref(oz_usb_heartbeat, $p0);
    assume true;
    goto $bb2, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume false;
    return;

  $bb2:
    assume $i21 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2425} $i2 := oz_usb_heartbeat($p1);
    goto SeqInstr_2023, SeqInstr_2024;

  SeqInstr_2024:
    assume assertsPassed;
    goto SeqInstr_2025;

  SeqInstr_2025:
    $r := $i2;
    return;

  SeqInstr_2023:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i22 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2426} $i4 := oz_plat_remove($p3);
    goto SeqInstr_2026, SeqInstr_2027;

  SeqInstr_2027:
    assume assertsPassed;
    goto SeqInstr_2028;

  SeqInstr_2028:
    $r := $i4;
    return;

  SeqInstr_2026:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i23 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2427} $i6 := oz_plat_resume($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i24 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2428} $i8 := oz_plat_probe($p7);
    goto SeqInstr_2029, SeqInstr_2030;

  SeqInstr_2030:
    assume assertsPassed;
    goto SeqInstr_2031;

  SeqInstr_2031:
    $r := $i8;
    return;

  SeqInstr_2029:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i25 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2429} $i10 := oz_hcd_start($p9);
    $r := $i10;
    return;

  $bb7:
    assume $i26 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2430} $i12 := oz_hcd_get_frame_number($p11);
    $r := $i12;
    return;

  $bb8:
    assume $i27 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2431} $i14 := oz_hcd_bus_suspend($p13);
    goto SeqInstr_2032, SeqInstr_2033;

  SeqInstr_2033:
    assume assertsPassed;
    goto SeqInstr_2034;

  SeqInstr_2034:
    $r := $i14;
    return;

  SeqInstr_2032:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i28 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2432} $i16 := oz_hcd_bus_resume($p15);
    goto SeqInstr_2035, SeqInstr_2036;

  SeqInstr_2036:
    assume assertsPassed;
    goto SeqInstr_2037;

  SeqInstr_2037:
    $r := $i16;
    return;

  SeqInstr_2035:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i29 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2433} $i18 := oz_pd_heartbeat_event($p17);
    goto SeqInstr_2038, SeqInstr_2039;

  SeqInstr_2039:
    assume assertsPassed;
    goto SeqInstr_2040;

  SeqInstr_2040:
    $r := $i18;
    return;

  SeqInstr_2038:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i30 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2434} $i20 := oz_pd_timeout_event($p19);
    goto SeqInstr_2041, SeqInstr_2042;

  SeqInstr_2042:
    assume assertsPassed;
    goto SeqInstr_2043;

  SeqInstr_2043:
    $r := $i20;
    return;

  SeqInstr_2041:
    assume !assertsPassed;
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 859447);

procedure devirtbounce.5(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.1, $M.9, assertsPassed, $M.2, $M.16, $M.15, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, $M.30, $M.31, $M.32, $M.40, $M.13, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation devirtbounce.5(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i10 := $eq.ref(oz_hcd_shutdown, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i10 == 1);
    $i9 := $eq.ref(oz_hcd_stop, $p0);
    assume {:branchcond $i9} true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i9 == 1);
    $i8 := $eq.ref(oz_plat_shutdown, $p0);
    assume {:branchcond $i8} true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i8 == 1);
    $i7 := $eq.ref(oz_isoc_destructor, $p0);
    assume {:branchcond $i7} true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i7 == 1);
    $i6 := $eq.ref(oz_pd_free, $p0);
    assume {:branchcond $i6} true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume false;
    return;

  $bb2:
    assume $i6 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2435} oz_pd_free($p1);
    goto SeqInstr_2044, SeqInstr_2045;

  SeqInstr_2045:
    assume assertsPassed;
    goto SeqInstr_2046;

  SeqInstr_2046:
    return;

  SeqInstr_2044:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i7 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2436} oz_isoc_destructor($p2);
    return;

  $bb4:
    assume $i8 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2437} oz_plat_shutdown($p3);
    return;

  $bb5:
    assume $i9 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2438} oz_hcd_stop($p4);
    return;

  $bb6:
    assume $i10 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2439} oz_hcd_shutdown($p5);
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 860479);

procedure devirtbounce.6(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 861511);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: i8, arg2: ref, arg3: i8);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.16, assertsPassed, $M.15, $CurrAddr;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: i8, arg2: ref, arg3: i8)
{
  var $p0: ref;
  var $i1: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i1 := $eq.ref(oz_usb_farewell, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 2440} oz_usb_farewell(arg, arg1, arg2, arg3);
    goto SeqInstr_2047, SeqInstr_2048;

  SeqInstr_2048:
    assume assertsPassed;
    goto SeqInstr_2049;

  SeqInstr_2049:
    return;

  SeqInstr_2047:
    assume !assertsPassed;
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 862543);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.2, $M.16, $M.10, assertsPassed, $M.43, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.40, $M.9;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: i32)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(oz_cdev_stop, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i2 == 1);
    $i1 := $eq.ref(oz_usb_stop, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 2441} oz_usb_stop(arg, arg1);
    goto SeqInstr_2050, SeqInstr_2051;

  SeqInstr_2051:
    assume assertsPassed;
    goto SeqInstr_2052;

  SeqInstr_2052:
    return;

  SeqInstr_2050:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i2 == 1;
    call {:si_unique_call 2442} oz_cdev_stop(arg, arg1);
    goto SeqInstr_2053, SeqInstr_2054;

  SeqInstr_2054:
    assume assertsPassed;
    goto SeqInstr_2055;

  SeqInstr_2055:
    return;

  SeqInstr_2053:
    assume !assertsPassed;
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 863575);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: ref);



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 864607);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 865639);

procedure devirtbounce.11(funcPtr: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 866671);

procedure devirtbounce.12(funcPtr: ref, arg: ref) returns ($r: i32);



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 867703);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 868735);

procedure devirtbounce.14(funcPtr: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14, $M.46, $M.12, $M.13, $M.1, assertsPassed, $M.48, $CurrAddr, $M.96, $M.97, $M.44, $M.95, $M.45, $M.33, $M.103, $M.17, $M.16, $M.104, $M.105, $M.15, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.41, $M.106, $M.107, $M.42, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation devirtbounce.14(funcPtr: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(oz_cdev_init, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    $i3 := $eq.ref(oz_usb_init, $p0);
    assume true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    call {:si_unique_call 2443} $i1 := oz_usb_init();
    goto SeqInstr_2056, SeqInstr_2057;

  SeqInstr_2057:
    assume assertsPassed;
    goto SeqInstr_2058;

  SeqInstr_2058:
    $r := $i1;
    return;

  SeqInstr_2056:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i4 == 1;
    call {:si_unique_call 2444} $i2 := oz_cdev_init();
    goto SeqInstr_2059, SeqInstr_2060;

  SeqInstr_2060:
    assume assertsPassed;
    goto SeqInstr_2061;

  SeqInstr_2061:
    $r := $i2;
    return;

  SeqInstr_2059:
    assume !assertsPassed;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

const $u1: ref;

const $u10: i32;

const $u11: ref;

const $u12: i1;

const $u13: ref;

const $u14: ref;

const $u15: ref;

const $u16: ref;

const $u17: ref;

const $u18: ref;

const $u19: ref;

const $u2: ref;

const $u20: ref;

const $u21: i16;

const $u22: ref;

const $u23: ref;

const $u24: ref;

const $u25: ref;

const $u26: ref;

const $u27: ref;

const $u28: ref;

const $u29: ref;

const $u3: ref;

const $u30: i8;

const $u31: ref;

const $u4: ref;

const $u5: ref;

const $u6: ref;

const $u7: ref;

const $u8: ref;

const $u9: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.23, $M.1, $M.7, $M.8, $M.11, $M.119, $M.122, $M.109, $M.112, $M.123, $M.124, $M.125, $M.126, $M.130, $M.127, $M.128, $M.129, $M.132, $M.96, $M.133, $M.134, $M.135, $M.110, $M.97, $M.136, $M.131, $M.39, $M.40, $M.43, $M.9, $M.10, $M.16, $M.15, $M.13, $M.45, $M.99, $M.2, $M.0, $M.121, $M.120, $M.12, $M.164, $M.41, $M.44, $M.209, $M.210, $M.211, $M.212, $M.101, $M.213, $M.98, $M.113, $M.111, $M.46, $M.14, $M.114, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 2445} __SMACK_static_init();
    call {:si_unique_call 2446} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.23, $M.1, $M.7, $M.8, $M.11, $M.119, $M.122, $M.109, $M.112, $M.123, $M.124, $M.125, $M.126, $M.130, $M.127, $M.128, $M.129, $M.132, $M.96, $M.133, $M.134, $M.135, $M.110, $M.97, $M.136, $M.131, $M.39, $M.40, $M.43, $M.9, $M.10, $M.16, $M.15, $M.13, $M.45, $M.99, $M.2, $M.0, $M.121, $M.120, $M.12, $M.164, $M.41, $M.44, $M.209, $M.210, $M.211, $M.212, $M.101, $M.213, $M.98, $M.113, $M.111, $M.46, $M.14, $M.114, $CurrAddr, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.42, $M.30, $M.31, $M.32, $M.5, $M.48, $M.33, $M.34, $M.35, $M.36, $M.37, $M.95, $M.38, $M.103, $M.104, $M.105, $M.106, $M.107;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation oz_usb_stop_loop_$bb10(in_$p2: ref, in_$p3: ref, in_$p20: ref, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$i28: i32, in_$i29: i1) returns (out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$i28: i32, out_$i29: i1)
{

  entry:
    out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29 := in_$p23, in_$i24, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb16:
    assume {:verifier.code 0} true;
    assume out_$i29 == 1;
    goto $bb16_dummy;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    out_$i29 := $sgt.i32(out_$i28, 2);
    goto corral_source_split_156;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} out_$i28 := atomic_read(in_$p20);
    call {:si_unique_call 29} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_155;

  $bb13:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i64(out_$i24, out_$i26);
    goto corral_source_split_144;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i64($M.1, out_$p25);
    goto corral_source_split_143;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_142;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i64($M.1, out_$p23);
    goto corral_source_split_141;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_140;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} getnstimeofday(in_$p3);
    goto corral_source_split_139;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29 := oz_usb_stop_loop_$bb10(in_$p2, in_$p3, in_$p20, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29);
    return;

  exit:
    return;
}



procedure oz_usb_stop_loop_$bb10(in_$p2: ref, in_$p3: ref, in_$p20: ref, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$i28: i32, in_$i29: i1) returns (out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$i28: i32, out_$i29: i1);



implementation ldv_assume_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} ldv_assume_loop_$bb3();
    return;

  exit:
    return;
}



procedure ldv_assume_loop_$bb3();



implementation oz_pd_free_loop_$bb23(in_$i51: i64, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$p53: ref, in_$p54: ref) returns (out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$p53: ref, out_$p54: ref)
{

  entry:
    out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p53, out_$p54 := in_$p55, in_$p56, in_$p57, in_$p58, in_$i59, in_$i60, in_$p53, in_$p54;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_832;

  $bb25:
    assume out_$i60 == 1;
    assume {:verifier.code 0} true;
    out_$p53, out_$p54 := out_$p58, out_$p53;
    goto $bb25_dummy;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i64(out_$i59, in_$i51);
    goto corral_source_split_840;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    out_$i59 := $p2i.ref.i64(out_$p53);
    goto corral_source_split_839;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.1, out_$p57);
    goto corral_source_split_838;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p53, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_837;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} kfree(out_$p56);
    goto corral_source_split_836;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    out_$p56 := $bitcast.ref.ref(out_$p55);
    goto corral_source_split_835;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p55 := $bitcast.ref.ref(out_$p54);
    goto corral_source_split_834;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p53, out_$p54 := oz_pd_free_loop_$bb23(in_$i51, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p53, out_$p54);
    return;

  exit:
    return;
}



procedure oz_pd_free_loop_$bb23(in_$i51: i64, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$p53: ref, in_$p54: ref) returns (out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$p53: ref, out_$p54: ref);



implementation oz_pd_free_loop_$bb12(in_$p2: ref, in_$i28: i64, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p30: ref, in_$p31: ref) returns (out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p30: ref, out_$p31: ref)
{

  entry:
    out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p30, out_$p31 := in_$p32, in_$p33, in_$p34, in_$i35, in_$i36, in_$p37, in_$p38, in_$p39, in_$p40, in_$i41, in_$i42, in_$p30, in_$p31;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_798;

  $bb17:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$p30, out_$p31 := out_$p40, out_$p30;
    goto $bb17_dummy;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i64(out_$i41, in_$i28);
    goto corral_source_split_815;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_814;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.3, out_$p39);
    goto corral_source_split_813;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p30, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_812;

  SeqInstr_126:
    goto corral_source_split_811;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} oz_retire_frame(in_$p2, out_$p32);
    goto SeqInstr_125;

  $bb15:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} kfree_skb(out_$p38);
    goto corral_source_split_809;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.4, out_$p37);
    goto corral_source_split_808;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p32, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_807;

  $bb14:
    assume out_$i36 == 1;
    goto corral_source_split_806;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i64(out_$i35, 0);
    goto corral_source_split_804;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    out_$i35 := $p2i.ref.i64(out_$p34);
    goto corral_source_split_803;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.4, out_$p33);
    goto corral_source_split_802;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p32, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_801;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p32 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_800;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p30, out_$p31 := oz_pd_free_loop_$bb12(in_$p2, in_$i28, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p30, out_$p31);
    return;

  exit:
    return;
}



procedure oz_pd_free_loop_$bb12(in_$p2: ref, in_$i28: i64, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p30: ref, in_$p31: ref) returns (out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p30: ref, out_$p31: ref);
  modifies $M.1, $M.9, assertsPassed;



implementation oz_pd_free_loop_$bb4(in_$i12: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p14: ref, in_$p15: ref) returns (out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p14: ref, out_$p15: ref)
{

  entry:
    out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p14, out_$p15 := in_$p16, in_$p17, in_$p18, in_$i19, in_$i20, in_$p14, in_$p15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_776;

  $bb6:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$p14, out_$p15 := out_$p18, out_$p14;
    goto $bb6_dummy;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i64(out_$i19, in_$i12);
    goto corral_source_split_783;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_782;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.1, out_$p17);
    goto corral_source_split_781;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p14, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_780;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} oz_isoc_stream_free(out_$p16);
    goto corral_source_split_779;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_778;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p14, out_$p15 := oz_pd_free_loop_$bb4(in_$i12, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p14, out_$p15);
    return;

  exit:
    return;
}



procedure oz_pd_free_loop_$bb4(in_$i12: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p14: ref, in_$p15: ref) returns (out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p14: ref, out_$p15: ref);



implementation oz_retire_frame_loop_$bb4(in_$p0: ref, in_$i13: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p27: ref, in_$p28: ref, in_$p30: ref, in_$p32: ref, in_$p33: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$p15: ref, in_$p16: ref) returns (out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p27: ref, out_$p28: ref, out_$p30: ref, out_$p32: ref, out_$p33: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$p15: ref, out_$p16: ref)
{

  entry:
    out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$p27, out_$p28, out_$p30, out_$p32, out_$p33, out_$p35, out_$i36, out_$i37, out_$p15, out_$p16 := in_$p17, in_$p18, in_$p19, in_$i20, in_$i21, in_$p22, in_$p23, in_$p24, in_$i25, in_$p27, in_$p28, in_$p30, in_$p32, in_$p33, in_$p35, in_$i36, in_$i37, in_$p15, in_$p16;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_897;

  $bb9:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$p15, out_$p16 := out_$p33, out_$p15;
    goto $bb9_dummy;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i64(out_$i36, in_$i13);
    goto corral_source_split_923;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    out_$i36 := $p2i.ref.i64(out_$p35);
    goto corral_source_split_922;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p15, $mul.ref(0, 328)), $mul.ref(0, 1));
    goto corral_source_split_921;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    goto corral_source_split_920;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.1, out_$p32);
    goto corral_source_split_919;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_918;

  SeqInstr_135:
    goto corral_source_split_917;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} ldv_spin_unlock_bh_136(out_$p30);
    goto SeqInstr_134;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1232)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_916;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} oz_elt_info_free(out_$p28, out_$p16);
    goto corral_source_split_915;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1232)), $mul.ref(112, 1));
    goto corral_source_split_914;

  SeqInstr_132:
    goto corral_source_split_913;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} ldv_spin_lock_bh_135(out_$p27);
    goto SeqInstr_131;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1232)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_912;

  $bb7:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i64($M.1, out_$p24);
    call {:si_unique_call 152} devirtbounce(out_$p23, in_$p0, out_$i25);
    goto corral_source_split_910;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p16, $mul.ref(0, 328)), $mul.ref(48, 1));
    goto corral_source_split_909;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.1, out_$p22);
    goto corral_source_split_908;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p16, $mul.ref(0, 328)), $mul.ref(40, 1));
    goto corral_source_split_907;

  $bb6:
    assume out_$i21 == 1;
    goto corral_source_split_906;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i64(out_$i20, 0);
    goto corral_source_split_904;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p19);
    goto corral_source_split_903;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.1, out_$p18);
    goto corral_source_split_902;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p16, $mul.ref(0, 328)), $mul.ref(40, 1));
    goto corral_source_split_901;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} list_del_init(out_$p17);
    goto corral_source_split_900;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p16, $mul.ref(0, 328)), $mul.ref(0, 1));
    goto corral_source_split_899;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$p27, out_$p28, out_$p30, out_$p32, out_$p33, out_$p35, out_$i36, out_$i37, out_$p15, out_$p16 := oz_retire_frame_loop_$bb4(in_$p0, in_$i13, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$p27, out_$p28, out_$p30, out_$p32, out_$p33, out_$p35, out_$i36, out_$i37, out_$p15, out_$p16);
    return;

  exit:
    return;
}



procedure oz_retire_frame_loop_$bb4(in_$p0: ref, in_$i13: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p27: ref, in_$p28: ref, in_$p30: ref, in_$p32: ref, in_$p33: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$p15: ref, in_$p16: ref) returns (out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p27: ref, out_$p28: ref, out_$p30: ref, out_$p32: ref, out_$p33: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$p15: ref, out_$p16: ref);
  modifies $M.9, assertsPassed, $M.1;



implementation oz_elt_buf_term_loop_$bb12(in_$i40: i64, in_$p44: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p42: ref, in_$p43: ref) returns (out_$p44: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p42: ref, out_$p43: ref)
{

  entry:
    out_$p44, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p42, out_$p43 := in_$p44, in_$p46, in_$p47, in_$p48, in_$p49, in_$p50, in_$i51, in_$i52, in_$p42, in_$p43;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_976;

  $bb14:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$p42, out_$p43 := out_$p49, out_$p42;
    goto $bb14_dummy;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i64(out_$i51, in_$i40);
    goto corral_source_split_986;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(out_$p50);
    goto corral_source_split_985;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p42, $mul.ref(0, 328)), $mul.ref(16, 1));
    goto corral_source_split_984;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref(out_$p48, $mul.ref($sub.ref(0, 16), 328));
    goto corral_source_split_983;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p47);
    goto corral_source_split_982;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.1, out_$p46);
    goto corral_source_split_981;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref($add.ref(out_$p42, $mul.ref(0, 328)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_980;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} kfree(out_$p44);
    goto corral_source_split_979;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p44 := $bitcast.ref.ref(out_$p43);
    goto corral_source_split_978;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p44, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p42, out_$p43 := oz_elt_buf_term_loop_$bb12(in_$i40, out_$p44, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p42, out_$p43);
    return;

  exit:
    return;
}



procedure oz_elt_buf_term_loop_$bb12(in_$i40: i64, in_$p44: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p42: ref, in_$p43: ref) returns (out_$p44: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p42: ref, out_$p43: ref);



implementation oz_elt_buf_term_loop_$bb4(in_$i14: i64, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p16: ref, in_$p17: ref) returns (out_$p18: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p16: ref, out_$p17: ref)
{

  entry:
    out_$p18, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p16, out_$p17 := in_$p18, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p16, in_$p17;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_946;

  $bb6:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$p16, out_$p17 := out_$p23, out_$p16;
    goto $bb6_dummy;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i25, in_$i14);
    goto corral_source_split_956;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_955;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p16, $mul.ref(0, 328)), $mul.ref(16, 1));
    goto corral_source_split_954;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(out_$p22, $mul.ref($sub.ref(0, 16), 328));
    goto corral_source_split_953;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_952;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.1, out_$p20);
    goto corral_source_split_951;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 328)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_950;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} kfree(out_$p18);
    goto corral_source_split_949;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_948;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p18, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p16, out_$p17 := oz_elt_buf_term_loop_$bb4(in_$i14, out_$p18, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p16, out_$p17);
    return;

  exit:
    return;
}



procedure oz_elt_buf_term_loop_$bb4(in_$i14: i64, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p16: ref, in_$p17: ref) returns (out_$p18: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p16: ref, out_$p17: ref);



implementation oz_uncancel_urb_loop_$bb4(in_$p1: ref, in_$i9: i64, in_$i12: i64, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p11: ref) returns (out_$i12: i64, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p11: ref)
{

  entry:
    out_$i12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p11 := in_$i12, in_$p13, in_$p14, in_$i15, in_$i16, in_$p17, in_$p21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1587;

  $bb10:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$p11 := out_$p22;
    goto $bb10_dummy;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i25, in_$i9);
    goto corral_source_split_1606;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_1605;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1604;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_1603;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.1, out_$p21);
    goto corral_source_split_1602;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1601;

  $bb7:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    out_$p17 := out_$p11;
    assume true;
    goto $bb7;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i64(out_$i12, out_$i15);
    goto corral_source_split_1593;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_1592;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.1, out_$p13);
    goto corral_source_split_1591;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1590;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_1589;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p11 := oz_uncancel_urb_loop_$bb4(in_$p1, in_$i9, out_$i12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p11);
    return;

  exit:
    return;
}



procedure oz_uncancel_urb_loop_$bb4(in_$p1: ref, in_$i9: i64, in_$i12: i64, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p11: ref) returns (out_$i12: i64, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p11: ref);



implementation oz_hcd_heartbeat_loop_$bb124(in_$p8: ref, in_$i430: i64, in_$p434: ref, in_$p435: ref, in_$p437: ref, in_$p438: ref, in_$p440: ref, in_$i441: i64, in_$i442: i1, in_$p432: ref, in_$p433: ref) returns (out_$p434: ref, out_$p435: ref, out_$p437: ref, out_$p438: ref, out_$p440: ref, out_$i441: i64, out_$i442: i1, out_$p432: ref, out_$p433: ref)
{

  entry:
    out_$p434, out_$p435, out_$p437, out_$p438, out_$p440, out_$i441, out_$i442, out_$p432, out_$p433 := in_$p434, in_$p435, in_$p437, in_$p438, in_$p440, in_$i441, in_$i442, in_$p432, in_$p433;
    goto $bb124, exit;

  $bb124:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2259;

  $bb126:
    assume out_$i442 == 1;
    assume {:verifier.code 0} true;
    out_$p432, out_$p433 := out_$p433, out_$p438;
    goto $bb126_dummy;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    out_$i442 := $ne.i64(out_$i441, in_$i430);
    goto corral_source_split_2270;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    out_$i441 := $p2i.ref.i64(out_$p440);
    goto corral_source_split_2269;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    out_$p440 := $add.ref($add.ref(out_$p433, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2268;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    goto corral_source_split_2267;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    out_$p438 := $load.ref($M.1, out_$p437);
    goto corral_source_split_2266;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    out_$p437 := $add.ref($add.ref($add.ref(out_$p433, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2265;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} oz_free_urb_link(out_$p432);
    goto corral_source_split_2264;

  SeqInstr_327:
    goto corral_source_split_2263;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} oz_process_ep0_urb(in_$p8, out_$p435, 32);
    goto SeqInstr_326;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    out_$p435 := $load.ref($M.1, out_$p434);
    goto corral_source_split_2262;

  $bb125:
    assume {:verifier.code 0} true;
    out_$p434 := $add.ref($add.ref(out_$p432, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2261;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb126_dummy:
    call {:si_unique_call 1} out_$p434, out_$p435, out_$p437, out_$p438, out_$p440, out_$i441, out_$i442, out_$p432, out_$p433 := oz_hcd_heartbeat_loop_$bb124(in_$p8, in_$i430, out_$p434, out_$p435, out_$p437, out_$p438, out_$p440, out_$i441, out_$i442, out_$p432, out_$p433);
    return;

  exit:
    return;
}



procedure oz_hcd_heartbeat_loop_$bb124(in_$p8: ref, in_$i430: i64, in_$p434: ref, in_$p435: ref, in_$p437: ref, in_$p438: ref, in_$p440: ref, in_$i441: i64, in_$i442: i1, in_$p432: ref, in_$p433: ref) returns (out_$p434: ref, out_$p435: ref, out_$p437: ref, out_$p438: ref, out_$p440: ref, out_$i441: i64, out_$i442: i1, out_$p432: ref, out_$p433: ref);
  modifies $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.1, $M.16, $CurrAddr, assertsPassed, $M.15, $M.30, $M.31, $M.32, $M.9, $M.13, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation oz_hcd_heartbeat_loop_$bb110(in_$p1: ref, in_$i397: i64, in_$p401: ref, in_$i402: i32, in_$i403: i1, in_$p404: ref, in_$p405: ref, in_$p406: ref, in_$i407: i32, in_$i408: i32, in_$p409: ref, in_$p411: ref, in_$p412: ref, in_$i414: i64, in_$i415: i1, in_$p399: ref, in_$p400: ref) returns (out_$p401: ref, out_$i402: i32, out_$i403: i1, out_$p404: ref, out_$p405: ref, out_$p406: ref, out_$i407: i32, out_$i408: i32, out_$p409: ref, out_$p411: ref, out_$p412: ref, out_$i414: i64, out_$i415: i1, out_$p399: ref, out_$p400: ref)
{

  entry:
    out_$p401, out_$i402, out_$i403, out_$p404, out_$p405, out_$p406, out_$i407, out_$i408, out_$p409, out_$p411, out_$p412, out_$i414, out_$i415, out_$p399, out_$p400 := in_$p401, in_$i402, in_$i403, in_$p404, in_$p405, in_$p406, in_$i407, in_$i408, in_$p409, in_$p411, in_$p412, in_$i414, in_$i415, in_$p399, in_$p400;
    goto $bb110, exit;

  $bb110:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2211;

  $bb115:
    assume out_$i415 == 1;
    assume {:verifier.code 0} true;
    out_$p399, out_$p400 := out_$p400, out_$p412;
    goto $bb115_dummy;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    out_$i415 := $ne.i64(out_$i414, in_$i397);
    goto corral_source_split_2233;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    out_$i414 := $p2i.ref.i64(out_$p400);
    goto corral_source_split_2232;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    goto corral_source_split_2231;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    out_$p412 := $load.ref($M.1, out_$p411);
    goto corral_source_split_2230;

  $bb114:
    assume {:verifier.code 0} true;
    out_$p411 := $add.ref($add.ref($add.ref(out_$p400, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2229;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p409, out_$i408);
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p405, 0);
    goto corral_source_split_2221;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    out_$p405 := $add.ref($add.ref(out_$p399, $mul.ref(0, 40)), $mul.ref(36, 1));
    goto corral_source_split_2220;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} list_move_tail(out_$p404, in_$p1);
    goto corral_source_split_2219;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    out_$p404 := $add.ref($add.ref(out_$p399, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2218;

  $bb112:
    assume out_$i403 == 1;
    goto corral_source_split_2217;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    out_$i403 := $ugt.i32(out_$i402, 13);
    goto corral_source_split_2215;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    out_$i402 := $load.i32($M.1, out_$p401);
    goto corral_source_split_2214;

  $bb111:
    assume {:verifier.code 0} true;
    out_$p401 := $add.ref($add.ref(out_$p399, $mul.ref(0, 40)), $mul.ref(36, 1));
    goto corral_source_split_2213;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    out_$p409 := $add.ref($add.ref(out_$p399, $mul.ref(0, 40)), $mul.ref(36, 1));
    goto corral_source_split_2227;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    out_$i408 := $add.i32(out_$i407, 1);
    goto corral_source_split_2226;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    out_$i407 := $load.i32($M.1, out_$p406);
    goto corral_source_split_2225;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    out_$p406 := $add.ref($add.ref(out_$p399, $mul.ref(0, 40)), $mul.ref(36, 1));
    goto corral_source_split_2224;

  $bb113:
    assume !(out_$i403 == 1);
    goto corral_source_split_2223;

  $bb115_dummy:
    call {:si_unique_call 1} out_$p401, out_$i402, out_$i403, out_$p404, out_$p405, out_$p406, out_$i407, out_$i408, out_$p409, out_$p411, out_$p412, out_$i414, out_$i415, out_$p399, out_$p400 := oz_hcd_heartbeat_loop_$bb110(in_$p1, in_$i397, out_$p401, out_$i402, out_$i403, out_$p404, out_$p405, out_$p406, out_$i407, out_$i408, out_$p409, out_$p411, out_$p412, out_$i414, out_$i415, out_$p399, out_$p400);
    return;

  exit:
    return;
}



procedure oz_hcd_heartbeat_loop_$bb110(in_$p1: ref, in_$i397: i64, in_$p401: ref, in_$i402: i32, in_$i403: i1, in_$p404: ref, in_$p405: ref, in_$p406: ref, in_$i407: i32, in_$i408: i32, in_$p409: ref, in_$p411: ref, in_$p412: ref, in_$i414: i64, in_$i415: i1, in_$p399: ref, in_$p400: ref) returns (out_$p401: ref, out_$i402: i32, out_$i403: i1, out_$p404: ref, out_$p405: ref, out_$p406: ref, out_$i407: i32, out_$i408: i32, out_$p409: ref, out_$p411: ref, out_$p412: ref, out_$i414: i64, out_$i415: i1, out_$p399: ref, out_$p400: ref);
  modifies $M.1;



implementation oz_hcd_heartbeat_loop_$bb100(in_$p6: ref, in_$i364: i64, in_$p368: ref, in_$p369: ref, in_$p370: ref, in_$p371: ref, in_$p372: ref, in_$p373: ref, in_$p374: ref, in_$p376: ref, in_$p377: ref, in_$p379: ref, in_$i380: i64, in_$i381: i1, in_$p366: ref, in_$p367: ref) returns (out_$p368: ref, out_$p369: ref, out_$p370: ref, out_$p371: ref, out_$p372: ref, out_$p373: ref, out_$p374: ref, out_$p376: ref, out_$p377: ref, out_$p379: ref, out_$i380: i64, out_$i381: i1, out_$p366: ref, out_$p367: ref)
{

  entry:
    out_$p368, out_$p369, out_$p370, out_$p371, out_$p372, out_$p373, out_$p374, out_$p376, out_$p377, out_$p379, out_$i380, out_$i381, out_$p366, out_$p367 := in_$p368, in_$p369, in_$p370, in_$p371, in_$p372, in_$p373, in_$p374, in_$p376, in_$p377, in_$p379, in_$i380, in_$i381, in_$p366, in_$p367;
    goto $bb100, exit;

  $bb100:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2170;

  $bb102:
    assume out_$i381 == 1;
    assume {:verifier.code 0} true;
    out_$p366, out_$p367 := out_$p367, out_$p377;
    goto $bb102_dummy;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    out_$i381 := $ne.i64(out_$i380, in_$i364);
    goto corral_source_split_2187;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    out_$i380 := $p2i.ref.i64(out_$p379);
    goto corral_source_split_2186;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    out_$p379 := $add.ref($add.ref(out_$p367, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2185;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    goto corral_source_split_2184;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    out_$p377 := $load.ref($M.1, out_$p376);
    goto corral_source_split_2183;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    out_$p376 := $add.ref($add.ref($add.ref(out_$p367, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2182;

  SeqInstr_318:
    goto corral_source_split_2181;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} oz_complete_urb(out_$p374, out_$p369, 0);
    goto SeqInstr_317;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    out_$p374 := $load.ref($M.1, out_$p373);
    goto corral_source_split_2180;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    out_$p373 := $add.ref($add.ref(out_$p372, $mul.ref(0, 3344)), $mul.ref(3336, 1));
    goto corral_source_split_2179;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    out_$p372 := $load.ref($M.1, out_$p371);
    goto corral_source_split_2178;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    out_$p371 := $add.ref($add.ref(in_$p6, $mul.ref(0, 400)), $mul.ref(16, 1));
    goto corral_source_split_2177;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} oz_free_urb_link(out_$p366);
    goto corral_source_split_2176;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} list_del_init(out_$p370);
    goto corral_source_split_2175;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    out_$p370 := $add.ref($add.ref(out_$p366, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2174;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    out_$p369 := $load.ref($M.1, out_$p368);
    goto corral_source_split_2173;

  $bb101:
    assume {:verifier.code 0} true;
    out_$p368 := $add.ref($add.ref(out_$p366, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2172;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb102_dummy:
    call {:si_unique_call 1} out_$p368, out_$p369, out_$p370, out_$p371, out_$p372, out_$p373, out_$p374, out_$p376, out_$p377, out_$p379, out_$i380, out_$i381, out_$p366, out_$p367 := oz_hcd_heartbeat_loop_$bb100(in_$p6, in_$i364, out_$p368, out_$p369, out_$p370, out_$p371, out_$p372, out_$p373, out_$p374, out_$p376, out_$p377, out_$p379, out_$i380, out_$i381, out_$p366, out_$p367);
    return;

  exit:
    return;
}



procedure oz_hcd_heartbeat_loop_$bb100(in_$p6: ref, in_$i364: i64, in_$p368: ref, in_$p369: ref, in_$p370: ref, in_$p371: ref, in_$p372: ref, in_$p373: ref, in_$p374: ref, in_$p376: ref, in_$p377: ref, in_$p379: ref, in_$i380: i64, in_$i381: i1, in_$p366: ref, in_$p367: ref) returns (out_$p368: ref, out_$p369: ref, out_$p370: ref, out_$p371: ref, out_$p372: ref, out_$p373: ref, out_$p374: ref, out_$p376: ref, out_$p377: ref, out_$p379: ref, out_$i380: i64, out_$i381: i1, out_$p366: ref, out_$p367: ref);
  modifies $M.1, $M.15, assertsPassed;



implementation oz_hcd_heartbeat_loop_$bb68(in_$p216: ref, in_$p229: ref, in_$p233: ref, in_$p234: ref, in_$p235: ref, in_$i236: i32, in_$i237: i64, in_$p238: ref, in_$i239: i8, in_$i240: i32, in_$p241: ref, in_$i242: i32, in_$i243: i32, in_$p244: ref, in_$p245: ref, in_$i246: i32, in_$p247: ref, in_$i248: i32, in_$i249: i1, in_$p250: ref, in_$p251: ref, in_$i252: i32, in_$p253: ref, in_$i254: i32, in_$i255: i32, in_$i256: i1, in_$i257: i32, in_$p258: ref, in_$p259: ref, in_$p260: ref, in_$p261: ref, in_$p262: ref, in_$i263: i32, in_$i264: i64, in_$p265: ref, in_$i266: i64, in_$i267: i1, in_$p268: ref, in_$p269: ref, in_$i270: i64, in_$p271: ref, in_$p272: ref, in_$p273: ref, in_$i274: i32, in_$i275: i64, in_$i276: i32, in_$p277: ref, in_$p278: ref, in_$i279: i32, in_$i280: i32, in_$p281: ref, in_$p282: ref, in_$i283: i32, in_$p284: ref, in_$i285: i32, in_$i286: i1, in_$p287: ref, in_$p288: ref, in_$i289: i32, in_$i290: i64, in_$p293: ref, in_$p294: ref, in_$i295: i32, in_$i296: i32, in_$p297: ref, in_$i298: i64, in_$p301: ref, in_$i302: i64, in_$p305: ref, in_$i306: i32, in_$i307: i32, in_$i308: i1, in_$i232: i32, in_$p154: ref, in_cmdloc_dummy_var_33: [ref]i8, in_cmdloc_dummy_var_34: [ref]i8, in_cmdloc_dummy_var_35: [ref]i8, in_cmdloc_dummy_var_36: [ref]i8, in_cmdloc_dummy_var_37: [ref]i8, in_cmdloc_dummy_var_38: [ref]i8) returns (out_$p233: ref, out_$p234: ref, out_$p235: ref, out_$i236: i32, out_$i237: i64, out_$p238: ref, out_$i239: i8, out_$i240: i32, out_$p241: ref, out_$i242: i32, out_$i243: i32, out_$p244: ref, out_$p245: ref, out_$i246: i32, out_$p247: ref, out_$i248: i32, out_$i249: i1, out_$p250: ref, out_$p251: ref, out_$i252: i32, out_$p253: ref, out_$i254: i32, out_$i255: i32, out_$i256: i1, out_$i257: i32, out_$p258: ref, out_$p259: ref, out_$p260: ref, out_$p261: ref, out_$p262: ref, out_$i263: i32, out_$i264: i64, out_$p265: ref, out_$i266: i64, out_$i267: i1, out_$p268: ref, out_$p269: ref, out_$i270: i64, out_$p271: ref, out_$p272: ref, out_$p273: ref, out_$i274: i32, out_$i275: i64, out_$i276: i32, out_$p277: ref, out_$p278: ref, out_$i279: i32, out_$i280: i32, out_$p281: ref, out_$p282: ref, out_$i283: i32, out_$p284: ref, out_$i285: i32, out_$i286: i1, out_$p287: ref, out_$p288: ref, out_$i289: i32, out_$i290: i64, out_$p293: ref, out_$p294: ref, out_$i295: i32, out_$i296: i32, out_$p297: ref, out_$i298: i64, out_$p301: ref, out_$i302: i64, out_$p305: ref, out_$i306: i32, out_$i307: i32, out_$i308: i1, out_$i232: i32, out_cmdloc_dummy_var_33: [ref]i8, out_cmdloc_dummy_var_34: [ref]i8, out_cmdloc_dummy_var_35: [ref]i8, out_cmdloc_dummy_var_36: [ref]i8, out_cmdloc_dummy_var_37: [ref]i8, out_cmdloc_dummy_var_38: [ref]i8)
{

  entry:
    out_$p233, out_$p234, out_$p235, out_$i236, out_$i237, out_$p238, out_$i239, out_$i240, out_$p241, out_$i242, out_$i243, out_$p244, out_$p245, out_$i246, out_$p247, out_$i248, out_$i249, out_$p250, out_$p251, out_$i252, out_$p253, out_$i254, out_$i255, out_$i256, out_$i257, out_$p258, out_$p259, out_$p260, out_$p261, out_$p262, out_$i263, out_$i264, out_$p265, out_$i266, out_$i267, out_$p268, out_$p269, out_$i270, out_$p271, out_$p272, out_$p273, out_$i274, out_$i275, out_$i276, out_$p277, out_$p278, out_$i279, out_$i280, out_$p281, out_$p282, out_$i283, out_$p284, out_$i285, out_$i286, out_$p287, out_$p288, out_$i289, out_$i290, out_$p293, out_$p294, out_$i295, out_$i296, out_$p297, out_$i298, out_$p301, out_$i302, out_$p305, out_$i306, out_$i307, out_$i308, out_$i232, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_cmdloc_dummy_var_38 := in_$p233, in_$p234, in_$p235, in_$i236, in_$i237, in_$p238, in_$i239, in_$i240, in_$p241, in_$i242, in_$i243, in_$p244, in_$p245, in_$i246, in_$p247, in_$i248, in_$i249, in_$p250, in_$p251, in_$i252, in_$p253, in_$i254, in_$i255, in_$i256, in_$i257, in_$p258, in_$p259, in_$p260, in_$p261, in_$p262, in_$i263, in_$i264, in_$p265, in_$i266, in_$i267, in_$p268, in_$p269, in_$i270, in_$p271, in_$p272, in_$p273, in_$i274, in_$i275, in_$i276, in_$p277, in_$p278, in_$i279, in_$i280, in_$p281, in_$p282, in_$i283, in_$p284, in_$i285, in_$i286, in_$p287, in_$p288, in_$i289, in_$i290, in_$p293, in_$p294, in_$i295, in_$i296, in_$p297, in_$i298, in_$p301, in_$i302, in_$p305, in_$i306, in_$i307, in_$i308, in_$i232, in_cmdloc_dummy_var_33, in_cmdloc_dummy_var_34, in_cmdloc_dummy_var_35, in_cmdloc_dummy_var_36, in_cmdloc_dummy_var_37, in_cmdloc_dummy_var_38;
    goto $bb68, exit;

  $bb68:
    assume {:verifier.code 0} true;
    goto corral_source_split_2003;

  $bb82:
    assume out_$i308 == 1;
    assume {:verifier.code 0} true;
    out_$i232 := out_$i306;
    goto $bb82_dummy;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    out_$i308 := $slt.i32(out_$i306, out_$i307);
    goto corral_source_split_2098;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    out_$i307 := $load.i32($M.1, in_$p229);
    goto corral_source_split_2097;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    out_$i306 := $add.i32(out_$i232, 1);
    call {:si_unique_call 364} {:cexpr "i"} boogie_si_record_i32(out_$i306);
    goto corral_source_split_2096;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p305, 0);
    goto corral_source_split_2095;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    out_$p305 := $add.ref($add.ref($add.ref($add.ref(in_$p216, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i302, 16)), $mul.ref(12, 1));
    goto corral_source_split_2094;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    out_$i302 := $sext.i32.i64(out_$i232);
    goto corral_source_split_2093;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p301, out_$i240);
    goto corral_source_split_2092;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    out_$p301 := $add.ref($add.ref($add.ref($add.ref(in_$p216, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i298, 16)), $mul.ref(8, 1));
    goto corral_source_split_2091;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    out_$i298 := $sext.i32.i64(out_$i232);
    goto corral_source_split_2090;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p297, out_$i296);
    goto corral_source_split_2089;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    out_$p297 := $add.ref($add.ref(in_$p216, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_2088;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    out_$i296 := $add.i32(out_$i295, out_$i240);
    goto corral_source_split_2087;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    out_$i295 := $load.i32($M.1, out_$p294);
    goto corral_source_split_2086;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    out_$p294 := $add.ref($add.ref(in_$p216, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_2085;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p293, out_$i289);
    goto corral_source_split_2084;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    out_$p293 := $add.ref($add.ref($add.ref($add.ref(in_$p216, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i290, 16)), $mul.ref(0, 1));
    goto corral_source_split_2083;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    out_$i290 := $sext.i32.i64(out_$i232);
    goto corral_source_split_2082;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    out_$i289 := $load.i32($M.1, out_$p288);
    goto corral_source_split_2081;

  $bb81:
    assume {:verifier.code 0} true;
    out_$p288 := $add.ref($add.ref(in_$p216, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_2080;

  $bb80:
    assume !(out_$i286 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p287, 0);
    goto corral_source_split_2078;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    out_$p287 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2077;

  $bb79:
    assume out_$i286 == 1;
    goto corral_source_split_2076;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    out_$i286 := $eq.i32(out_$i283, out_$i285);
    goto corral_source_split_2074;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    out_$i285 := $load.i32($M.1, out_$p284);
    goto corral_source_split_2073;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    out_$p284 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_2072;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    out_$i283 := $load.i32($M.1, out_$p282);
    goto corral_source_split_2071;

  $bb78:
    assume {:verifier.code 0} true;
    out_$p282 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2070;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p281, out_$i280);
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p277, out_$i276);
    goto corral_source_split_2062;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    out_$p277 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2061;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    out_$i276 := $sub.i32(out_$i240, out_$i257);
    goto corral_source_split_2060;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_36 := $M.1;
    out_cmdloc_dummy_var_37 := $M.1;
    call {:si_unique_call 363} out_cmdloc_dummy_var_38 := $memcpy.i8(out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_$p271, out_$p273, out_$i275, $zext.i32.i64(1), 0 == 1);
    $M.1 := out_cmdloc_dummy_var_38;
    goto corral_source_split_2059;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    out_$i275 := $sext.i32.i64(out_$i274);
    goto corral_source_split_2058;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    out_$i274 := $sub.i32(out_$i240, out_$i257);
    goto corral_source_split_2057;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    out_$p273 := $load.ref($M.1, out_$p272);
    goto corral_source_split_2056;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    out_$p272 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_2055;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    out_$p271 := $add.ref(out_$p269, $mul.ref(out_$i270, 1));
    goto corral_source_split_2054;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    out_$i270 := $sext.i32.i64(out_$i257);
    goto corral_source_split_2053;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    out_$p269 := $load.ref($M.1, out_$p268);
    goto corral_source_split_2052;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    out_$p268 := $add.ref($add.ref(in_$p216, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2051;

  $bb76:
    assume out_$i267 == 1;
    goto corral_source_split_2050;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    out_$i267 := $slt.i32(out_$i257, out_$i240);
    goto corral_source_split_2048;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_33 := $M.1;
    out_cmdloc_dummy_var_34 := $M.1;
    call {:si_unique_call 362} out_cmdloc_dummy_var_35 := $memcpy.i8(out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_$p259, out_$p265, out_$i266, $zext.i32.i64(1), 0 == 1);
    $M.1 := out_cmdloc_dummy_var_35;
    goto corral_source_split_2047;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    out_$i266 := $sext.i32.i64(out_$i257);
    goto corral_source_split_2046;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    out_$p265 := $add.ref(out_$p261, $mul.ref(out_$i264, 1));
    goto corral_source_split_2045;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    out_$i264 := $sext.i32.i64(out_$i263);
    goto corral_source_split_2044;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    out_$i263 := $load.i32($M.1, out_$p262);
    goto corral_source_split_2043;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    out_$p262 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2042;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    out_$p261 := $load.ref($M.1, out_$p260);
    goto corral_source_split_2041;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    out_$p260 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_2040;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    out_$p259 := $load.ref($M.1, out_$p258);
    goto corral_source_split_2039;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    out_$p258 := $add.ref($add.ref(in_$p216, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2038;

  $bb75:
    assume {:verifier.code 0} true;
    goto corral_source_split_2037;

  $bb74:
    assume !(out_$i256 == 1);
    assume {:verifier.code 0} true;
    out_$i257 := out_$i255;
    goto $bb75;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    out_$i257 := out_$i240;
    goto $bb75;

  $bb73:
    assume out_$i256 == 1;
    goto corral_source_split_2035;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    out_$i256 := $sgt.i32(out_$i255, out_$i240);
    goto corral_source_split_2033;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    out_$i255 := $sub.i32(out_$i252, out_$i254);
    call {:si_unique_call 361} {:cexpr "copy_len"} boogie_si_record_i32(out_$i255);
    goto corral_source_split_2032;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    out_$i254 := $load.i32($M.1, out_$p253);
    goto corral_source_split_2031;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    out_$p253 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2030;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    out_$i252 := $load.i32($M.1, out_$p251);
    goto corral_source_split_2029;

  $bb72:
    assume {:verifier.code 0} true;
    out_$p251 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_2028;

  $bb71:
    assume !(out_$i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p250, 0);
    goto corral_source_split_2026;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    out_$p250 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2025;

  $bb70:
    assume out_$i249 == 1;
    goto corral_source_split_2024;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    out_$i249 := $eq.i32(out_$i246, out_$i248);
    goto corral_source_split_2022;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    out_$i248 := $load.i32($M.1, out_$p247);
    goto corral_source_split_2021;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    out_$p247 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_2020;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    out_$i246 := $load.i32($M.1, out_$p245);
    goto corral_source_split_2019;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    out_$p245 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2018;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p244, out_$i243);
    goto corral_source_split_2017;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    out_$p244 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2016;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    out_$i243 := $add.i32(out_$i242, 1);
    goto corral_source_split_2015;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    out_$i242 := $load.i32($M.1, out_$p241);
    goto corral_source_split_2014;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    out_$p241 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2013;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    out_$i240 := $zext.i8.i32(out_$i239);
    call {:si_unique_call 360} {:cexpr "len"} boogie_si_record_i32(out_$i240);
    goto corral_source_split_2012;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    out_$i239 := $load.i8($M.1, out_$p238);
    goto corral_source_split_2011;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    out_$p238 := $add.ref(out_$p234, $mul.ref(out_$i237, 1));
    goto corral_source_split_2010;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    out_$i237 := $sext.i32.i64(out_$i236);
    goto corral_source_split_2009;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    out_$i236 := $load.i32($M.1, out_$p235);
    goto corral_source_split_2008;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    out_$p235 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2007;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    out_$p234 := $load.ref($M.1, out_$p233);
    goto corral_source_split_2006;

  $bb69:
    assume {:verifier.code 0} true;
    out_$p233 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_2005;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    out_$p281 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2068;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    out_$i280 := $add.i32(out_$i279, out_$i257);
    goto corral_source_split_2067;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    out_$i279 := $load.i32($M.1, out_$p278);
    goto corral_source_split_2066;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    out_$p278 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2065;

  $bb77:
    assume !(out_$i267 == 1);
    goto corral_source_split_2064;

  $bb82_dummy:
    call {:si_unique_call 1} out_$p233, out_$p234, out_$p235, out_$i236, out_$i237, out_$p238, out_$i239, out_$i240, out_$p241, out_$i242, out_$i243, out_$p244, out_$p245, out_$i246, out_$p247, out_$i248, out_$i249, out_$p250, out_$p251, out_$i252, out_$p253, out_$i254, out_$i255, out_$i256, out_$i257, out_$p258, out_$p259, out_$p260, out_$p261, out_$p262, out_$i263, out_$i264, out_$p265, out_$i266, out_$i267, out_$p268, out_$p269, out_$i270, out_$p271, out_$p272, out_$p273, out_$i274, out_$i275, out_$i276, out_$p277, out_$p278, out_$i279, out_$i280, out_$p281, out_$p282, out_$i283, out_$p284, out_$i285, out_$i286, out_$p287, out_$p288, out_$i289, out_$i290, out_$p293, out_$p294, out_$i295, out_$i296, out_$p297, out_$i298, out_$p301, out_$i302, out_$p305, out_$i306, out_$i307, out_$i308, out_$i232, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_cmdloc_dummy_var_38 := oz_hcd_heartbeat_loop_$bb68(in_$p216, in_$p229, out_$p233, out_$p234, out_$p235, out_$i236, out_$i237, out_$p238, out_$i239, out_$i240, out_$p241, out_$i242, out_$i243, out_$p244, out_$p245, out_$i246, out_$p247, out_$i248, out_$i249, out_$p250, out_$p251, out_$i252, out_$p253, out_$i254, out_$i255, out_$i256, out_$i257, out_$p258, out_$p259, out_$p260, out_$p261, out_$p262, out_$i263, out_$i264, out_$p265, out_$i266, out_$i267, out_$p268, out_$p269, out_$i270, out_$p271, out_$p272, out_$p273, out_$i274, out_$i275, out_$i276, out_$p277, out_$p278, out_$i279, out_$i280, out_$p281, out_$p282, out_$i283, out_$p284, out_$i285, out_$i286, out_$p287, out_$p288, out_$i289, out_$i290, out_$p293, out_$p294, out_$i295, out_$i296, out_$p297, out_$i298, out_$p301, out_$i302, out_$p305, out_$i306, out_$i307, out_$i308, out_$i232, in_$p154, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_cmdloc_dummy_var_38);
    return;

  exit:
    return;
}



procedure oz_hcd_heartbeat_loop_$bb68(in_$p216: ref, in_$p229: ref, in_$p233: ref, in_$p234: ref, in_$p235: ref, in_$i236: i32, in_$i237: i64, in_$p238: ref, in_$i239: i8, in_$i240: i32, in_$p241: ref, in_$i242: i32, in_$i243: i32, in_$p244: ref, in_$p245: ref, in_$i246: i32, in_$p247: ref, in_$i248: i32, in_$i249: i1, in_$p250: ref, in_$p251: ref, in_$i252: i32, in_$p253: ref, in_$i254: i32, in_$i255: i32, in_$i256: i1, in_$i257: i32, in_$p258: ref, in_$p259: ref, in_$p260: ref, in_$p261: ref, in_$p262: ref, in_$i263: i32, in_$i264: i64, in_$p265: ref, in_$i266: i64, in_$i267: i1, in_$p268: ref, in_$p269: ref, in_$i270: i64, in_$p271: ref, in_$p272: ref, in_$p273: ref, in_$i274: i32, in_$i275: i64, in_$i276: i32, in_$p277: ref, in_$p278: ref, in_$i279: i32, in_$i280: i32, in_$p281: ref, in_$p282: ref, in_$i283: i32, in_$p284: ref, in_$i285: i32, in_$i286: i1, in_$p287: ref, in_$p288: ref, in_$i289: i32, in_$i290: i64, in_$p293: ref, in_$p294: ref, in_$i295: i32, in_$i296: i32, in_$p297: ref, in_$i298: i64, in_$p301: ref, in_$i302: i64, in_$p305: ref, in_$i306: i32, in_$i307: i32, in_$i308: i1, in_$i232: i32, in_$p154: ref, in_cmdloc_dummy_var_33: [ref]i8, in_cmdloc_dummy_var_34: [ref]i8, in_cmdloc_dummy_var_35: [ref]i8, in_cmdloc_dummy_var_36: [ref]i8, in_cmdloc_dummy_var_37: [ref]i8, in_cmdloc_dummy_var_38: [ref]i8) returns (out_$p233: ref, out_$p234: ref, out_$p235: ref, out_$i236: i32, out_$i237: i64, out_$p238: ref, out_$i239: i8, out_$i240: i32, out_$p241: ref, out_$i242: i32, out_$i243: i32, out_$p244: ref, out_$p245: ref, out_$i246: i32, out_$p247: ref, out_$i248: i32, out_$i249: i1, out_$p250: ref, out_$p251: ref, out_$i252: i32, out_$p253: ref, out_$i254: i32, out_$i255: i32, out_$i256: i1, out_$i257: i32, out_$p258: ref, out_$p259: ref, out_$p260: ref, out_$p261: ref, out_$p262: ref, out_$i263: i32, out_$i264: i64, out_$p265: ref, out_$i266: i64, out_$i267: i1, out_$p268: ref, out_$p269: ref, out_$i270: i64, out_$p271: ref, out_$p272: ref, out_$p273: ref, out_$i274: i32, out_$i275: i64, out_$i276: i32, out_$p277: ref, out_$p278: ref, out_$i279: i32, out_$i280: i32, out_$p281: ref, out_$p282: ref, out_$i283: i32, out_$p284: ref, out_$i285: i32, out_$i286: i1, out_$p287: ref, out_$p288: ref, out_$i289: i32, out_$i290: i64, out_$p293: ref, out_$p294: ref, out_$i295: i32, out_$i296: i32, out_$p297: ref, out_$i298: i64, out_$p301: ref, out_$i302: i64, out_$p305: ref, out_$i306: i32, out_$i307: i32, out_$i308: i1, out_$i232: i32, out_cmdloc_dummy_var_33: [ref]i8, out_cmdloc_dummy_var_34: [ref]i8, out_cmdloc_dummy_var_35: [ref]i8, out_cmdloc_dummy_var_36: [ref]i8, out_cmdloc_dummy_var_37: [ref]i8, out_cmdloc_dummy_var_38: [ref]i8);
  modifies $M.1;



implementation oz_hcd_heartbeat_loop_$bb56(in_$p1: ref, in_$i210: i64, in_$p215: ref, in_$p216: ref, in_$p217: ref, in_$i218: i32, in_$p219: ref, in_$i220: i32, in_$i221: i1, in_$p223: ref, in_$i224: i32, in_$p225: ref, in_$i226: i32, in_$i227: i1, in_$p228: ref, in_$p229: ref, in_$i230: i32, in_$i231: i1, in_$p233: ref, in_$p234: ref, in_$p235: ref, in_$i236: i32, in_$i237: i64, in_$p238: ref, in_$i239: i8, in_$i240: i32, in_$p241: ref, in_$i242: i32, in_$i243: i32, in_$p244: ref, in_$p245: ref, in_$i246: i32, in_$p247: ref, in_$i248: i32, in_$i249: i1, in_$p250: ref, in_$p251: ref, in_$i252: i32, in_$p253: ref, in_$i254: i32, in_$i255: i32, in_$i256: i1, in_$i257: i32, in_$p258: ref, in_$p259: ref, in_$p260: ref, in_$p261: ref, in_$p262: ref, in_$i263: i32, in_$i264: i64, in_$p265: ref, in_$i266: i64, in_$i267: i1, in_$p268: ref, in_$p269: ref, in_$i270: i64, in_$p271: ref, in_$p272: ref, in_$p273: ref, in_$i274: i32, in_$i275: i64, in_$i276: i32, in_$p277: ref, in_$p278: ref, in_$i279: i32, in_$i280: i32, in_$p281: ref, in_$p282: ref, in_$i283: i32, in_$p284: ref, in_$i285: i32, in_$i286: i1, in_$p287: ref, in_$p288: ref, in_$i289: i32, in_$i290: i64, in_$p293: ref, in_$p294: ref, in_$i295: i32, in_$i296: i32, in_$p297: ref, in_$i298: i64, in_$p301: ref, in_$i302: i64, in_$p305: ref, in_$i306: i32, in_$i307: i32, in_$i308: i1, in_$i232: i32, in_$p309: ref, in_$i310: i32, in_$p311: ref, in_$i312: i32, in_$i313: i32, in_$p314: ref, in_$p315: ref, in_$p316: ref, in_$i317: i32, in_$p318: ref, in_$p319: ref, in_$i320: i32, in_$p321: ref, in_$i322: i32, in_$i323: i32, in_$p324: ref, in_$p325: ref, in_$p326: ref, in_$i327: i32, in_$p328: ref, in_$i329: i32, in_$i330: i32, in_$p331: ref, in_$p333: ref, in_$p334: ref, in_$i336: i64, in_$i337: i1, in_$p213: ref, in_$p214: ref, in_$p154: ref, in_cmdloc_dummy_var_33: [ref]i8, in_cmdloc_dummy_var_34: [ref]i8, in_cmdloc_dummy_var_35: [ref]i8, in_cmdloc_dummy_var_36: [ref]i8, in_cmdloc_dummy_var_37: [ref]i8, in_cmdloc_dummy_var_38: [ref]i8) returns (out_$p215: ref, out_$p216: ref, out_$p217: ref, out_$i218: i32, out_$p219: ref, out_$i220: i32, out_$i221: i1, out_$p223: ref, out_$i224: i32, out_$p225: ref, out_$i226: i32, out_$i227: i1, out_$p228: ref, out_$p229: ref, out_$i230: i32, out_$i231: i1, out_$p233: ref, out_$p234: ref, out_$p235: ref, out_$i236: i32, out_$i237: i64, out_$p238: ref, out_$i239: i8, out_$i240: i32, out_$p241: ref, out_$i242: i32, out_$i243: i32, out_$p244: ref, out_$p245: ref, out_$i246: i32, out_$p247: ref, out_$i248: i32, out_$i249: i1, out_$p250: ref, out_$p251: ref, out_$i252: i32, out_$p253: ref, out_$i254: i32, out_$i255: i32, out_$i256: i1, out_$i257: i32, out_$p258: ref, out_$p259: ref, out_$p260: ref, out_$p261: ref, out_$p262: ref, out_$i263: i32, out_$i264: i64, out_$p265: ref, out_$i266: i64, out_$i267: i1, out_$p268: ref, out_$p269: ref, out_$i270: i64, out_$p271: ref, out_$p272: ref, out_$p273: ref, out_$i274: i32, out_$i275: i64, out_$i276: i32, out_$p277: ref, out_$p278: ref, out_$i279: i32, out_$i280: i32, out_$p281: ref, out_$p282: ref, out_$i283: i32, out_$p284: ref, out_$i285: i32, out_$i286: i1, out_$p287: ref, out_$p288: ref, out_$i289: i32, out_$i290: i64, out_$p293: ref, out_$p294: ref, out_$i295: i32, out_$i296: i32, out_$p297: ref, out_$i298: i64, out_$p301: ref, out_$i302: i64, out_$p305: ref, out_$i306: i32, out_$i307: i32, out_$i308: i1, out_$i232: i32, out_$p309: ref, out_$i310: i32, out_$p311: ref, out_$i312: i32, out_$i313: i32, out_$p314: ref, out_$p315: ref, out_$p316: ref, out_$i317: i32, out_$p318: ref, out_$p319: ref, out_$i320: i32, out_$p321: ref, out_$i322: i32, out_$i323: i32, out_$p324: ref, out_$p325: ref, out_$p326: ref, out_$i327: i32, out_$p328: ref, out_$i329: i32, out_$i330: i32, out_$p331: ref, out_$p333: ref, out_$p334: ref, out_$i336: i64, out_$i337: i1, out_$p213: ref, out_$p214: ref, out_cmdloc_dummy_var_33: [ref]i8, out_cmdloc_dummy_var_34: [ref]i8, out_cmdloc_dummy_var_35: [ref]i8, out_cmdloc_dummy_var_36: [ref]i8, out_cmdloc_dummy_var_37: [ref]i8, out_cmdloc_dummy_var_38: [ref]i8)
{

  entry:
    out_$p215, out_$p216, out_$p217, out_$i218, out_$p219, out_$i220, out_$i221, out_$p223, out_$i224, out_$p225, out_$i226, out_$i227, out_$p228, out_$p229, out_$i230, out_$i231, out_$p233, out_$p234, out_$p235, out_$i236, out_$i237, out_$p238, out_$i239, out_$i240, out_$p241, out_$i242, out_$i243, out_$p244, out_$p245, out_$i246, out_$p247, out_$i248, out_$i249, out_$p250, out_$p251, out_$i252, out_$p253, out_$i254, out_$i255, out_$i256, out_$i257, out_$p258, out_$p259, out_$p260, out_$p261, out_$p262, out_$i263, out_$i264, out_$p265, out_$i266, out_$i267, out_$p268, out_$p269, out_$i270, out_$p271, out_$p272, out_$p273, out_$i274, out_$i275, out_$i276, out_$p277, out_$p278, out_$i279, out_$i280, out_$p281, out_$p282, out_$i283, out_$p284, out_$i285, out_$i286, out_$p287, out_$p288, out_$i289, out_$i290, out_$p293, out_$p294, out_$i295, out_$i296, out_$p297, out_$i298, out_$p301, out_$i302, out_$p305, out_$i306, out_$i307, out_$i308, out_$i232, out_$p309, out_$i310, out_$p311, out_$i312, out_$i313, out_$p314, out_$p315, out_$p316, out_$i317, out_$p318, out_$p319, out_$i320, out_$p321, out_$i322, out_$i323, out_$p324, out_$p325, out_$p326, out_$i327, out_$p328, out_$i329, out_$i330, out_$p331, out_$p333, out_$p334, out_$i336, out_$i337, out_$p213, out_$p214, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_cmdloc_dummy_var_38 := in_$p215, in_$p216, in_$p217, in_$i218, in_$p219, in_$i220, in_$i221, in_$p223, in_$i224, in_$p225, in_$i226, in_$i227, in_$p228, in_$p229, in_$i230, in_$i231, in_$p233, in_$p234, in_$p235, in_$i236, in_$i237, in_$p238, in_$i239, in_$i240, in_$p241, in_$i242, in_$i243, in_$p244, in_$p245, in_$i246, in_$p247, in_$i248, in_$i249, in_$p250, in_$p251, in_$i252, in_$p253, in_$i254, in_$i255, in_$i256, in_$i257, in_$p258, in_$p259, in_$p260, in_$p261, in_$p262, in_$i263, in_$i264, in_$p265, in_$i266, in_$i267, in_$p268, in_$p269, in_$i270, in_$p271, in_$p272, in_$p273, in_$i274, in_$i275, in_$i276, in_$p277, in_$p278, in_$i279, in_$i280, in_$p281, in_$p282, in_$i283, in_$p284, in_$i285, in_$i286, in_$p287, in_$p288, in_$i289, in_$i290, in_$p293, in_$p294, in_$i295, in_$i296, in_$p297, in_$i298, in_$p301, in_$i302, in_$p305, in_$i306, in_$i307, in_$i308, in_$i232, in_$p309, in_$i310, in_$p311, in_$i312, in_$i313, in_$p314, in_$p315, in_$p316, in_$i317, in_$p318, in_$p319, in_$i320, in_$p321, in_$i322, in_$i323, in_$p324, in_$p325, in_$p326, in_$i327, in_$p328, in_$i329, in_$i330, in_$p331, in_$p333, in_$p334, in_$i336, in_$i337, in_$p213, in_$p214, in_cmdloc_dummy_var_33, in_cmdloc_dummy_var_34, in_cmdloc_dummy_var_35, in_cmdloc_dummy_var_36, in_cmdloc_dummy_var_37, in_cmdloc_dummy_var_38;
    goto $bb56, exit;

  $bb56:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1973;

  $bb85:
    assume out_$i337 == 1;
    assume {:verifier.code 0} true;
    out_$p213, out_$p214 := out_$p214, out_$p334;
    goto $bb85_dummy;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    out_$i337 := $ne.i64(out_$i336, in_$i210);
    goto corral_source_split_2135;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    out_$i336 := $p2i.ref.i64(out_$p214);
    goto corral_source_split_2134;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    goto corral_source_split_2133;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    out_$p334 := $load.ref($M.1, out_$p333);
    goto corral_source_split_2132;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    out_$p333 := $add.ref($add.ref($add.ref(out_$p214, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2131;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p331, out_$i330);
    goto corral_source_split_2130;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    out_$p331 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_2129;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    out_$i330 := $sub.i32(out_$i327, out_$i329);
    goto corral_source_split_2128;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    out_$i329 := $load.i32($M.1, out_$p328);
    goto corral_source_split_2127;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    out_$p328 := $add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2126;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    out_$i327 := $load.i32($M.1, out_$p326);
    goto corral_source_split_2125;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    out_$p326 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_2124;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} list_move_tail(out_$p325, in_$p1);
    goto corral_source_split_2123;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    out_$p325 := $add.ref($add.ref(out_$p213, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2122;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p324, out_$i323);
    goto corral_source_split_2121;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    out_$p324 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(92, 1));
    goto corral_source_split_2120;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    out_$i323 := $add.i32(out_$i320, out_$i322);
    goto corral_source_split_2119;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    out_$i322 := $load.i32($M.1, out_$p321);
    goto corral_source_split_2118;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    out_$p321 := $add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2117;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    out_$i320 := $load.i32($M.1, out_$p319);
    goto corral_source_split_2116;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    out_$p319 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(92, 1));
    goto corral_source_split_2115;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p318, out_$i317);
    goto corral_source_split_2114;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    out_$p318 := $add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(160, 1));
    goto corral_source_split_2113;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    out_$i317 := $load.i32($M.1, out_$p316);
    goto corral_source_split_2112;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    out_$p316 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(92, 1));
    goto corral_source_split_2111;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p315, 0);
    goto corral_source_split_2110;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    out_$p315 := $add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(172, 1));
    goto corral_source_split_2109;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p314, out_$i313);
    goto corral_source_split_2108;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    out_$p314 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(84, 1));
    goto corral_source_split_2107;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    out_$i313 := $sub.i32(out_$i310, out_$i312);
    goto corral_source_split_2106;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    out_$i312 := $load.i32($M.1, out_$p311);
    goto corral_source_split_2105;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    out_$p311 := $add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2104;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    out_$i310 := $load.i32($M.1, out_$p309);
    goto corral_source_split_2103;

  $bb84:
    assume {:verifier.code 0} true;
    out_$p309 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(84, 1));
    goto corral_source_split_2102;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb66:
    assume {:verifier.code 0} true;
    assume !(out_$i231 == 1);
    goto $bb67;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb83:
    assume !(out_$i308 == 1);
    goto corral_source_split_2100;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    out_$i308 := $slt.i32(out_$i306, out_$i307);
    goto corral_source_split_2098;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    out_$i307 := $load.i32($M.1, out_$p229);
    goto corral_source_split_2097;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    out_$i306 := $add.i32(out_$i232, 1);
    call {:si_unique_call 364} {:cexpr "i"} boogie_si_record_i32(out_$i306);
    goto corral_source_split_2096;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p305, 0);
    goto corral_source_split_2095;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    out_$p305 := $add.ref($add.ref($add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i302, 16)), $mul.ref(12, 1));
    goto corral_source_split_2094;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    out_$i302 := $sext.i32.i64(out_$i232);
    goto corral_source_split_2093;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p301, out_$i240);
    goto corral_source_split_2092;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    out_$p301 := $add.ref($add.ref($add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i298, 16)), $mul.ref(8, 1));
    goto corral_source_split_2091;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    out_$i298 := $sext.i32.i64(out_$i232);
    goto corral_source_split_2090;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p297, out_$i296);
    goto corral_source_split_2089;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    out_$p297 := $add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_2088;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    out_$i296 := $add.i32(out_$i295, out_$i240);
    goto corral_source_split_2087;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    out_$i295 := $load.i32($M.1, out_$p294);
    goto corral_source_split_2086;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    out_$p294 := $add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_2085;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p293, out_$i289);
    goto corral_source_split_2084;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    out_$p293 := $add.ref($add.ref($add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i290, 16)), $mul.ref(0, 1));
    goto corral_source_split_2083;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    out_$i290 := $sext.i32.i64(out_$i232);
    goto corral_source_split_2082;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    out_$i289 := $load.i32($M.1, out_$p288);
    goto corral_source_split_2081;

  $bb81:
    assume {:verifier.code 0} true;
    out_$p288 := $add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_2080;

  $bb80:
    assume !(out_$i286 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p287, 0);
    goto corral_source_split_2078;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    out_$p287 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2077;

  $bb79:
    assume out_$i286 == 1;
    goto corral_source_split_2076;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    out_$i286 := $eq.i32(out_$i283, out_$i285);
    goto corral_source_split_2074;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    out_$i285 := $load.i32($M.1, out_$p284);
    goto corral_source_split_2073;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    out_$p284 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_2072;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    out_$i283 := $load.i32($M.1, out_$p282);
    goto corral_source_split_2071;

  $bb78:
    assume {:verifier.code 0} true;
    out_$p282 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2070;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p281, out_$i280);
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p277, out_$i276);
    goto corral_source_split_2062;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    out_$p277 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2061;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    out_$i276 := $sub.i32(out_$i240, out_$i257);
    goto corral_source_split_2060;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_36 := $M.1;
    out_cmdloc_dummy_var_37 := $M.1;
    call {:si_unique_call 363} out_cmdloc_dummy_var_38 := $memcpy.i8(out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_$p271, out_$p273, out_$i275, $zext.i32.i64(1), 0 == 1);
    $M.1 := out_cmdloc_dummy_var_38;
    goto corral_source_split_2059;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    out_$i275 := $sext.i32.i64(out_$i274);
    goto corral_source_split_2058;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    out_$i274 := $sub.i32(out_$i240, out_$i257);
    goto corral_source_split_2057;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    out_$p273 := $load.ref($M.1, out_$p272);
    goto corral_source_split_2056;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    out_$p272 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_2055;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    out_$p271 := $add.ref(out_$p269, $mul.ref(out_$i270, 1));
    goto corral_source_split_2054;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    out_$i270 := $sext.i32.i64(out_$i257);
    goto corral_source_split_2053;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    out_$p269 := $load.ref($M.1, out_$p268);
    goto corral_source_split_2052;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    out_$p268 := $add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2051;

  $bb76:
    assume out_$i267 == 1;
    goto corral_source_split_2050;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    out_$i267 := $slt.i32(out_$i257, out_$i240);
    goto corral_source_split_2048;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_33 := $M.1;
    out_cmdloc_dummy_var_34 := $M.1;
    call {:si_unique_call 362} out_cmdloc_dummy_var_35 := $memcpy.i8(out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_$p259, out_$p265, out_$i266, $zext.i32.i64(1), 0 == 1);
    $M.1 := out_cmdloc_dummy_var_35;
    goto corral_source_split_2047;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    out_$i266 := $sext.i32.i64(out_$i257);
    goto corral_source_split_2046;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    out_$p265 := $add.ref(out_$p261, $mul.ref(out_$i264, 1));
    goto corral_source_split_2045;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    out_$i264 := $sext.i32.i64(out_$i263);
    goto corral_source_split_2044;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    out_$i263 := $load.i32($M.1, out_$p262);
    goto corral_source_split_2043;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    out_$p262 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2042;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    out_$p261 := $load.ref($M.1, out_$p260);
    goto corral_source_split_2041;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    out_$p260 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_2040;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    out_$p259 := $load.ref($M.1, out_$p258);
    goto corral_source_split_2039;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    out_$p258 := $add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2038;

  $bb75:
    assume {:verifier.code 0} true;
    goto corral_source_split_2037;

  $bb74:
    assume !(out_$i256 == 1);
    assume {:verifier.code 0} true;
    out_$i257 := out_$i255;
    goto $bb75;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    out_$i257 := out_$i240;
    goto $bb75;

  $bb73:
    assume out_$i256 == 1;
    goto corral_source_split_2035;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    out_$i256 := $sgt.i32(out_$i255, out_$i240);
    goto corral_source_split_2033;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    out_$i255 := $sub.i32(out_$i252, out_$i254);
    call {:si_unique_call 361} {:cexpr "copy_len"} boogie_si_record_i32(out_$i255);
    goto corral_source_split_2032;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    out_$i254 := $load.i32($M.1, out_$p253);
    goto corral_source_split_2031;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    out_$p253 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2030;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    out_$i252 := $load.i32($M.1, out_$p251);
    goto corral_source_split_2029;

  $bb72:
    assume {:verifier.code 0} true;
    out_$p251 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_2028;

  $bb71:
    assume !(out_$i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p250, 0);
    goto corral_source_split_2026;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    out_$p250 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2025;

  $bb70:
    assume out_$i249 == 1;
    goto corral_source_split_2024;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    out_$i249 := $eq.i32(out_$i246, out_$i248);
    goto corral_source_split_2022;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    out_$i248 := $load.i32($M.1, out_$p247);
    goto corral_source_split_2021;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    out_$p247 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_2020;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    out_$i246 := $load.i32($M.1, out_$p245);
    goto corral_source_split_2019;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    out_$p245 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2018;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p244, out_$i243);
    goto corral_source_split_2017;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    out_$p244 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2016;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    out_$i243 := $add.i32(out_$i242, 1);
    goto corral_source_split_2015;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    out_$i242 := $load.i32($M.1, out_$p241);
    goto corral_source_split_2014;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    out_$p241 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2013;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    out_$i240 := $zext.i8.i32(out_$i239);
    call {:si_unique_call 360} {:cexpr "len"} boogie_si_record_i32(out_$i240);
    goto corral_source_split_2012;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    out_$i239 := $load.i8($M.1, out_$p238);
    goto corral_source_split_2011;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    out_$p238 := $add.ref(out_$p234, $mul.ref(out_$i237, 1));
    goto corral_source_split_2010;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    out_$i237 := $sext.i32.i64(out_$i236);
    goto corral_source_split_2009;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    out_$i236 := $load.i32($M.1, out_$p235);
    goto corral_source_split_2008;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    out_$p235 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2007;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    out_$p234 := $load.ref($M.1, out_$p233);
    goto corral_source_split_2006;

  $bb69:
    assume {:verifier.code 0} true;
    out_$p233 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_2005;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb68:
    call out_$p233, out_$p234, out_$p235, out_$i236, out_$i237, out_$p238, out_$i239, out_$i240, out_$p241, out_$i242, out_$i243, out_$p244, out_$p245, out_$i246, out_$p247, out_$i248, out_$i249, out_$p250, out_$p251, out_$i252, out_$p253, out_$i254, out_$i255, out_$i256, out_$i257, out_$p258, out_$p259, out_$p260, out_$p261, out_$p262, out_$i263, out_$i264, out_$p265, out_$i266, out_$i267, out_$p268, out_$p269, out_$i270, out_$p271, out_$p272, out_$p273, out_$i274, out_$i275, out_$i276, out_$p277, out_$p278, out_$i279, out_$i280, out_$p281, out_$p282, out_$i283, out_$p284, out_$i285, out_$i286, out_$p287, out_$p288, out_$i289, out_$i290, out_$p293, out_$p294, out_$i295, out_$i296, out_$p297, out_$i298, out_$p301, out_$i302, out_$p305, out_$i306, out_$i307, out_$i308, out_$i232, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_cmdloc_dummy_var_38 := oz_hcd_heartbeat_loop_$bb68(out_$p216, out_$p229, out_$p233, out_$p234, out_$p235, out_$i236, out_$i237, out_$p238, out_$i239, out_$i240, out_$p241, out_$i242, out_$i243, out_$p244, out_$p245, out_$i246, out_$p247, out_$i248, out_$i249, out_$p250, out_$p251, out_$i252, out_$p253, out_$i254, out_$i255, out_$i256, out_$i257, out_$p258, out_$p259, out_$p260, out_$p261, out_$p262, out_$i263, out_$i264, out_$p265, out_$i266, out_$i267, out_$p268, out_$p269, out_$i270, out_$p271, out_$p272, out_$p273, out_$i274, out_$i275, out_$i276, out_$p277, out_$p278, out_$i279, out_$i280, out_$p281, out_$p282, out_$i283, out_$p284, out_$i285, out_$i286, out_$p287, out_$p288, out_$i289, out_$i290, out_$p293, out_$p294, out_$i295, out_$i296, out_$p297, out_$i298, out_$p301, out_$i302, out_$p305, out_$i306, out_$i307, out_$i308, out_$i232, in_$p154, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_cmdloc_dummy_var_38);
    goto $bb68_last;

  $bb68_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2003;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    out_$i232 := 0;
    goto $bb68;

  $bb82:
    assume out_$i308 == 1;
    assume {:verifier.code 0} true;
    out_$i232 := out_$i306;
    assume false;
    return;

  $bb65:
    assume out_$i231 == 1;
    goto corral_source_split_2001;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    out_$i231 := $slt.i32(0, out_$i230);
    goto corral_source_split_1999;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    out_$i230 := $load.i32($M.1, out_$p229);
    goto corral_source_split_1998;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    out_$p229 := $add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_1997;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p228, 0);
    goto corral_source_split_1996;

  $bb64:
    assume {:verifier.code 0} true;
    out_$p228 := $add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_1995;

  $bb63:
    assume !(out_$i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    out_$i227 := $slt.i32(out_$i224, out_$i226);
    goto corral_source_split_1991;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    out_$i226 := $load.i32($M.1, out_$p225);
    goto corral_source_split_1990;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    out_$p225 := $add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_1989;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    out_$i224 := $load.i32($M.1, out_$p223);
    goto corral_source_split_1988;

  $bb61:
    assume {:verifier.code 0} true;
    out_$p223 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(84, 1));
    goto corral_source_split_1987;

  $bb59:
    assume !(out_$i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    out_$i221 := $slt.i32(out_$i218, out_$i220);
    goto corral_source_split_1981;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    out_$i220 := $load.i32($M.1, out_$p219);
    goto corral_source_split_1980;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    out_$p219 := $add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_1979;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    out_$i218 := $load.i32($M.1, out_$p217);
    goto corral_source_split_1978;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    out_$p217 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1977;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    out_$p216 := $load.ref($M.1, out_$p215);
    goto corral_source_split_1976;

  $bb57:
    assume {:verifier.code 0} true;
    out_$p215 := $add.ref($add.ref(out_$p213, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1975;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    out_$p281 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2068;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    out_$i280 := $add.i32(out_$i279, out_$i257);
    goto corral_source_split_2067;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    out_$i279 := $load.i32($M.1, out_$p278);
    goto corral_source_split_2066;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    out_$p278 := $add.ref($add.ref(in_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2065;

  $bb77:
    assume !(out_$i267 == 1);
    goto corral_source_split_2064;

  $bb85_dummy:
    call {:si_unique_call 1} out_$p215, out_$p216, out_$p217, out_$i218, out_$p219, out_$i220, out_$i221, out_$p223, out_$i224, out_$p225, out_$i226, out_$i227, out_$p228, out_$p229, out_$i230, out_$i231, out_$p233, out_$p234, out_$p235, out_$i236, out_$i237, out_$p238, out_$i239, out_$i240, out_$p241, out_$i242, out_$i243, out_$p244, out_$p245, out_$i246, out_$p247, out_$i248, out_$i249, out_$p250, out_$p251, out_$i252, out_$p253, out_$i254, out_$i255, out_$i256, out_$i257, out_$p258, out_$p259, out_$p260, out_$p261, out_$p262, out_$i263, out_$i264, out_$p265, out_$i266, out_$i267, out_$p268, out_$p269, out_$i270, out_$p271, out_$p272, out_$p273, out_$i274, out_$i275, out_$i276, out_$p277, out_$p278, out_$i279, out_$i280, out_$p281, out_$p282, out_$i283, out_$p284, out_$i285, out_$i286, out_$p287, out_$p288, out_$i289, out_$i290, out_$p293, out_$p294, out_$i295, out_$i296, out_$p297, out_$i298, out_$p301, out_$i302, out_$p305, out_$i306, out_$i307, out_$i308, out_$i232, out_$p309, out_$i310, out_$p311, out_$i312, out_$i313, out_$p314, out_$p315, out_$p316, out_$i317, out_$p318, out_$p319, out_$i320, out_$p321, out_$i322, out_$i323, out_$p324, out_$p325, out_$p326, out_$i327, out_$p328, out_$i329, out_$i330, out_$p331, out_$p333, out_$p334, out_$i336, out_$i337, out_$p213, out_$p214, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_cmdloc_dummy_var_38 := oz_hcd_heartbeat_loop_$bb56(in_$p1, in_$i210, out_$p215, out_$p216, out_$p217, out_$i218, out_$p219, out_$i220, out_$i221, out_$p223, out_$i224, out_$p225, out_$i226, out_$i227, out_$p228, out_$p229, out_$i230, out_$i231, out_$p233, out_$p234, out_$p235, out_$i236, out_$i237, out_$p238, out_$i239, out_$i240, out_$p241, out_$i242, out_$i243, out_$p244, out_$p245, out_$i246, out_$p247, out_$i248, out_$i249, out_$p250, out_$p251, out_$i252, out_$p253, out_$i254, out_$i255, out_$i256, out_$i257, out_$p258, out_$p259, out_$p260, out_$p261, out_$p262, out_$i263, out_$i264, out_$p265, out_$i266, out_$i267, out_$p268, out_$p269, out_$i270, out_$p271, out_$p272, out_$p273, out_$i274, out_$i275, out_$i276, out_$p277, out_$p278, out_$i279, out_$i280, out_$p281, out_$p282, out_$i283, out_$p284, out_$i285, out_$i286, out_$p287, out_$p288, out_$i289, out_$i290, out_$p293, out_$p294, out_$i295, out_$i296, out_$p297, out_$i298, out_$p301, out_$i302, out_$p305, out_$i306, out_$i307, out_$i308, out_$i232, out_$p309, out_$i310, out_$p311, out_$i312, out_$i313, out_$p314, out_$p315, out_$p316, out_$i317, out_$p318, out_$p319, out_$i320, out_$p321, out_$i322, out_$i323, out_$p324, out_$p325, out_$p326, out_$i327, out_$p328, out_$i329, out_$i330, out_$p331, out_$p333, out_$p334, out_$i336, out_$i337, out_$p213, out_$p214, in_$p154, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_cmdloc_dummy_var_38);
    return;

  exit:
    return;
}



procedure oz_hcd_heartbeat_loop_$bb56(in_$p1: ref, in_$i210: i64, in_$p215: ref, in_$p216: ref, in_$p217: ref, in_$i218: i32, in_$p219: ref, in_$i220: i32, in_$i221: i1, in_$p223: ref, in_$i224: i32, in_$p225: ref, in_$i226: i32, in_$i227: i1, in_$p228: ref, in_$p229: ref, in_$i230: i32, in_$i231: i1, in_$p233: ref, in_$p234: ref, in_$p235: ref, in_$i236: i32, in_$i237: i64, in_$p238: ref, in_$i239: i8, in_$i240: i32, in_$p241: ref, in_$i242: i32, in_$i243: i32, in_$p244: ref, in_$p245: ref, in_$i246: i32, in_$p247: ref, in_$i248: i32, in_$i249: i1, in_$p250: ref, in_$p251: ref, in_$i252: i32, in_$p253: ref, in_$i254: i32, in_$i255: i32, in_$i256: i1, in_$i257: i32, in_$p258: ref, in_$p259: ref, in_$p260: ref, in_$p261: ref, in_$p262: ref, in_$i263: i32, in_$i264: i64, in_$p265: ref, in_$i266: i64, in_$i267: i1, in_$p268: ref, in_$p269: ref, in_$i270: i64, in_$p271: ref, in_$p272: ref, in_$p273: ref, in_$i274: i32, in_$i275: i64, in_$i276: i32, in_$p277: ref, in_$p278: ref, in_$i279: i32, in_$i280: i32, in_$p281: ref, in_$p282: ref, in_$i283: i32, in_$p284: ref, in_$i285: i32, in_$i286: i1, in_$p287: ref, in_$p288: ref, in_$i289: i32, in_$i290: i64, in_$p293: ref, in_$p294: ref, in_$i295: i32, in_$i296: i32, in_$p297: ref, in_$i298: i64, in_$p301: ref, in_$i302: i64, in_$p305: ref, in_$i306: i32, in_$i307: i32, in_$i308: i1, in_$i232: i32, in_$p309: ref, in_$i310: i32, in_$p311: ref, in_$i312: i32, in_$i313: i32, in_$p314: ref, in_$p315: ref, in_$p316: ref, in_$i317: i32, in_$p318: ref, in_$p319: ref, in_$i320: i32, in_$p321: ref, in_$i322: i32, in_$i323: i32, in_$p324: ref, in_$p325: ref, in_$p326: ref, in_$i327: i32, in_$p328: ref, in_$i329: i32, in_$i330: i32, in_$p331: ref, in_$p333: ref, in_$p334: ref, in_$i336: i64, in_$i337: i1, in_$p213: ref, in_$p214: ref, in_$p154: ref, in_cmdloc_dummy_var_33: [ref]i8, in_cmdloc_dummy_var_34: [ref]i8, in_cmdloc_dummy_var_35: [ref]i8, in_cmdloc_dummy_var_36: [ref]i8, in_cmdloc_dummy_var_37: [ref]i8, in_cmdloc_dummy_var_38: [ref]i8) returns (out_$p215: ref, out_$p216: ref, out_$p217: ref, out_$i218: i32, out_$p219: ref, out_$i220: i32, out_$i221: i1, out_$p223: ref, out_$i224: i32, out_$p225: ref, out_$i226: i32, out_$i227: i1, out_$p228: ref, out_$p229: ref, out_$i230: i32, out_$i231: i1, out_$p233: ref, out_$p234: ref, out_$p235: ref, out_$i236: i32, out_$i237: i64, out_$p238: ref, out_$i239: i8, out_$i240: i32, out_$p241: ref, out_$i242: i32, out_$i243: i32, out_$p244: ref, out_$p245: ref, out_$i246: i32, out_$p247: ref, out_$i248: i32, out_$i249: i1, out_$p250: ref, out_$p251: ref, out_$i252: i32, out_$p253: ref, out_$i254: i32, out_$i255: i32, out_$i256: i1, out_$i257: i32, out_$p258: ref, out_$p259: ref, out_$p260: ref, out_$p261: ref, out_$p262: ref, out_$i263: i32, out_$i264: i64, out_$p265: ref, out_$i266: i64, out_$i267: i1, out_$p268: ref, out_$p269: ref, out_$i270: i64, out_$p271: ref, out_$p272: ref, out_$p273: ref, out_$i274: i32, out_$i275: i64, out_$i276: i32, out_$p277: ref, out_$p278: ref, out_$i279: i32, out_$i280: i32, out_$p281: ref, out_$p282: ref, out_$i283: i32, out_$p284: ref, out_$i285: i32, out_$i286: i1, out_$p287: ref, out_$p288: ref, out_$i289: i32, out_$i290: i64, out_$p293: ref, out_$p294: ref, out_$i295: i32, out_$i296: i32, out_$p297: ref, out_$i298: i64, out_$p301: ref, out_$i302: i64, out_$p305: ref, out_$i306: i32, out_$i307: i32, out_$i308: i1, out_$i232: i32, out_$p309: ref, out_$i310: i32, out_$p311: ref, out_$i312: i32, out_$i313: i32, out_$p314: ref, out_$p315: ref, out_$p316: ref, out_$i317: i32, out_$p318: ref, out_$p319: ref, out_$i320: i32, out_$p321: ref, out_$i322: i32, out_$i323: i32, out_$p324: ref, out_$p325: ref, out_$p326: ref, out_$i327: i32, out_$p328: ref, out_$i329: i32, out_$i330: i32, out_$p331: ref, out_$p333: ref, out_$p334: ref, out_$i336: i64, out_$i337: i1, out_$p213: ref, out_$p214: ref, out_cmdloc_dummy_var_33: [ref]i8, out_cmdloc_dummy_var_34: [ref]i8, out_cmdloc_dummy_var_35: [ref]i8, out_cmdloc_dummy_var_36: [ref]i8, out_cmdloc_dummy_var_37: [ref]i8, out_cmdloc_dummy_var_38: [ref]i8);
  modifies $M.1;



implementation oz_hcd_heartbeat_loop_$bb44(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$i152: i64, in_$p155: ref, in_$i156: i32, in_$i157: i32, in_$i158: i1, in_$p159: ref, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i163: i32, in_$i164: i32, in_$p165: ref, in_$p166: ref, in_$p167: ref, in_$p168: ref, in_$p169: ref, in_$p170: ref, in_$p172: ref, in_$p173: ref, in_$p174: ref, in_$i175: i64, in_$p176: ref, in_$i177: i64, in_$p178: ref, in_$p179: ref, in_$i180: i64, in_$p181: ref, in_$i182: i64, in_$p183: ref, in_$p184: ref, in_$p185: ref, in_$i186: i64, in_$p187: ref, in_$i188: i64, in_$p189: ref, in_$p190: ref, in_$i191: i64, in_$i192: i64, in_$p193: ref, in_$i194: i32, in_$i195: i32, in_$i196: i32, in_$p197: ref, in_$p198: ref, in_$p199: ref, in_$p200: ref, in_$p202: ref, in_$p203: ref, in_$p204: ref, in_$p206: ref, in_$p207: ref, in_$i209: i64, in_$i210: i64, in_$i211: i1, in_$p215: ref, in_$p216: ref, in_$p217: ref, in_$i218: i32, in_$p219: ref, in_$i220: i32, in_$i221: i1, in_$p223: ref, in_$i224: i32, in_$p225: ref, in_$i226: i32, in_$i227: i1, in_$p228: ref, in_$p229: ref, in_$i230: i32, in_$i231: i1, in_$p233: ref, in_$p234: ref, in_$p235: ref, in_$i236: i32, in_$i237: i64, in_$p238: ref, in_$i239: i8, in_$i240: i32, in_$p241: ref, in_$i242: i32, in_$i243: i32, in_$p244: ref, in_$p245: ref, in_$i246: i32, in_$p247: ref, in_$i248: i32, in_$i249: i1, in_$p250: ref, in_$p251: ref, in_$i252: i32, in_$p253: ref, in_$i254: i32, in_$i255: i32, in_$i256: i1, in_$i257: i32, in_$p258: ref, in_$p259: ref, in_$p260: ref, in_$p261: ref, in_$p262: ref, in_$i263: i32, in_$i264: i64, in_$p265: ref, in_$i266: i64, in_$i267: i1, in_$p268: ref, in_$p269: ref, in_$i270: i64, in_$p271: ref, in_$p272: ref, in_$p273: ref, in_$i274: i32, in_$i275: i64, in_$i276: i32, in_$p277: ref, in_$p278: ref, in_$i279: i32, in_$i280: i32, in_$p281: ref, in_$p282: ref, in_$i283: i32, in_$p284: ref, in_$i285: i32, in_$i286: i1, in_$p287: ref, in_$p288: ref, in_$i289: i32, in_$i290: i64, in_$p293: ref, in_$p294: ref, in_$i295: i32, in_$i296: i32, in_$p297: ref, in_$i298: i64, in_$p301: ref, in_$i302: i64, in_$p305: ref, in_$i306: i32, in_$i307: i32, in_$i308: i1, in_$i232: i32, in_$p309: ref, in_$i310: i32, in_$p311: ref, in_$i312: i32, in_$i313: i32, in_$p314: ref, in_$p315: ref, in_$p316: ref, in_$i317: i32, in_$p318: ref, in_$p319: ref, in_$i320: i32, in_$p321: ref, in_$i322: i32, in_$i323: i32, in_$p324: ref, in_$p325: ref, in_$p326: ref, in_$i327: i32, in_$p328: ref, in_$i329: i32, in_$i330: i32, in_$p331: ref, in_$p333: ref, in_$p334: ref, in_$i336: i64, in_$i337: i1, in_$p213: ref, in_$p214: ref, in_$p212: ref, in_$p222: ref, in_$p171: ref, in_$p339: ref, in_$p340: ref, in_$p341: ref, in_$p342: ref, in_$p343: ref, in_$i344: i64, in_$i345: i1, in_$p154: ref, in_cmdloc_dummy_var_24: [ref]i8, in_cmdloc_dummy_var_25: [ref]i8, in_cmdloc_dummy_var_26: [ref]i8, in_cmdloc_dummy_var_27: [ref]i8, in_cmdloc_dummy_var_28: [ref]i8, in_cmdloc_dummy_var_29: [ref]i8, in_cmdloc_dummy_var_30: [ref]i8, in_cmdloc_dummy_var_31: [ref]i8, in_cmdloc_dummy_var_32: [ref]i8, in_cmdloc_dummy_var_33: [ref]i8, in_cmdloc_dummy_var_34: [ref]i8, in_cmdloc_dummy_var_35: [ref]i8, in_cmdloc_dummy_var_36: [ref]i8, in_cmdloc_dummy_var_37: [ref]i8, in_cmdloc_dummy_var_38: [ref]i8) returns (out_$p155: ref, out_$i156: i32, out_$i157: i32, out_$i158: i1, out_$p159: ref, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i163: i32, out_$i164: i32, out_$p165: ref, out_$p166: ref, out_$p167: ref, out_$p168: ref, out_$p169: ref, out_$p170: ref, out_$p172: ref, out_$p173: ref, out_$p174: ref, out_$i175: i64, out_$p176: ref, out_$i177: i64, out_$p178: ref, out_$p179: ref, out_$i180: i64, out_$p181: ref, out_$i182: i64, out_$p183: ref, out_$p184: ref, out_$p185: ref, out_$i186: i64, out_$p187: ref, out_$i188: i64, out_$p189: ref, out_$p190: ref, out_$i191: i64, out_$i192: i64, out_$p193: ref, out_$i194: i32, out_$i195: i32, out_$i196: i32, out_$p197: ref, out_$p198: ref, out_$p199: ref, out_$p200: ref, out_$p202: ref, out_$p203: ref, out_$p204: ref, out_$p206: ref, out_$p207: ref, out_$i209: i64, out_$i210: i64, out_$i211: i1, out_$p215: ref, out_$p216: ref, out_$p217: ref, out_$i218: i32, out_$p219: ref, out_$i220: i32, out_$i221: i1, out_$p223: ref, out_$i224: i32, out_$p225: ref, out_$i226: i32, out_$i227: i1, out_$p228: ref, out_$p229: ref, out_$i230: i32, out_$i231: i1, out_$p233: ref, out_$p234: ref, out_$p235: ref, out_$i236: i32, out_$i237: i64, out_$p238: ref, out_$i239: i8, out_$i240: i32, out_$p241: ref, out_$i242: i32, out_$i243: i32, out_$p244: ref, out_$p245: ref, out_$i246: i32, out_$p247: ref, out_$i248: i32, out_$i249: i1, out_$p250: ref, out_$p251: ref, out_$i252: i32, out_$p253: ref, out_$i254: i32, out_$i255: i32, out_$i256: i1, out_$i257: i32, out_$p258: ref, out_$p259: ref, out_$p260: ref, out_$p261: ref, out_$p262: ref, out_$i263: i32, out_$i264: i64, out_$p265: ref, out_$i266: i64, out_$i267: i1, out_$p268: ref, out_$p269: ref, out_$i270: i64, out_$p271: ref, out_$p272: ref, out_$p273: ref, out_$i274: i32, out_$i275: i64, out_$i276: i32, out_$p277: ref, out_$p278: ref, out_$i279: i32, out_$i280: i32, out_$p281: ref, out_$p282: ref, out_$i283: i32, out_$p284: ref, out_$i285: i32, out_$i286: i1, out_$p287: ref, out_$p288: ref, out_$i289: i32, out_$i290: i64, out_$p293: ref, out_$p294: ref, out_$i295: i32, out_$i296: i32, out_$p297: ref, out_$i298: i64, out_$p301: ref, out_$i302: i64, out_$p305: ref, out_$i306: i32, out_$i307: i32, out_$i308: i1, out_$i232: i32, out_$p309: ref, out_$i310: i32, out_$p311: ref, out_$i312: i32, out_$i313: i32, out_$p314: ref, out_$p315: ref, out_$p316: ref, out_$i317: i32, out_$p318: ref, out_$p319: ref, out_$i320: i32, out_$p321: ref, out_$i322: i32, out_$i323: i32, out_$p324: ref, out_$p325: ref, out_$p326: ref, out_$i327: i32, out_$p328: ref, out_$i329: i32, out_$i330: i32, out_$p331: ref, out_$p333: ref, out_$p334: ref, out_$i336: i64, out_$i337: i1, out_$p213: ref, out_$p214: ref, out_$p212: ref, out_$p222: ref, out_$p171: ref, out_$p339: ref, out_$p340: ref, out_$p341: ref, out_$p342: ref, out_$p343: ref, out_$i344: i64, out_$i345: i1, out_$p154: ref, out_cmdloc_dummy_var_24: [ref]i8, out_cmdloc_dummy_var_25: [ref]i8, out_cmdloc_dummy_var_26: [ref]i8, out_cmdloc_dummy_var_27: [ref]i8, out_cmdloc_dummy_var_28: [ref]i8, out_cmdloc_dummy_var_29: [ref]i8, out_cmdloc_dummy_var_30: [ref]i8, out_cmdloc_dummy_var_31: [ref]i8, out_cmdloc_dummy_var_32: [ref]i8, out_cmdloc_dummy_var_33: [ref]i8, out_cmdloc_dummy_var_34: [ref]i8, out_cmdloc_dummy_var_35: [ref]i8, out_cmdloc_dummy_var_36: [ref]i8, out_cmdloc_dummy_var_37: [ref]i8, out_cmdloc_dummy_var_38: [ref]i8)
{

  entry:
    out_$p155, out_$i156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$p165, out_$p166, out_$p167, out_$p168, out_$p169, out_$p170, out_$p172, out_$p173, out_$p174, out_$i175, out_$p176, out_$i177, out_$p178, out_$p179, out_$i180, out_$p181, out_$i182, out_$p183, out_$p184, out_$p185, out_$i186, out_$p187, out_$i188, out_$p189, out_$p190, out_$i191, out_$i192, out_$p193, out_$i194, out_$i195, out_$i196, out_$p197, out_$p198, out_$p199, out_$p200, out_$p202, out_$p203, out_$p204, out_$p206, out_$p207, out_$i209, out_$i210, out_$i211, out_$p215, out_$p216, out_$p217, out_$i218, out_$p219, out_$i220, out_$i221, out_$p223, out_$i224, out_$p225, out_$i226, out_$i227, out_$p228, out_$p229, out_$i230, out_$i231, out_$p233, out_$p234, out_$p235, out_$i236, out_$i237, out_$p238, out_$i239, out_$i240, out_$p241, out_$i242, out_$i243, out_$p244, out_$p245, out_$i246, out_$p247, out_$i248, out_$i249, out_$p250, out_$p251, out_$i252, out_$p253, out_$i254, out_$i255, out_$i256, out_$i257, out_$p258, out_$p259, out_$p260, out_$p261, out_$p262, out_$i263, out_$i264, out_$p265, out_$i266, out_$i267, out_$p268, out_$p269, out_$i270, out_$p271, out_$p272, out_$p273, out_$i274, out_$i275, out_$i276, out_$p277, out_$p278, out_$i279, out_$i280, out_$p281, out_$p282, out_$i283, out_$p284, out_$i285, out_$i286, out_$p287, out_$p288, out_$i289, out_$i290, out_$p293, out_$p294, out_$i295, out_$i296, out_$p297, out_$i298, out_$p301, out_$i302, out_$p305, out_$i306, out_$i307, out_$i308, out_$i232, out_$p309, out_$i310, out_$p311, out_$i312, out_$i313, out_$p314, out_$p315, out_$p316, out_$i317, out_$p318, out_$p319, out_$i320, out_$p321, out_$i322, out_$i323, out_$p324, out_$p325, out_$p326, out_$i327, out_$p328, out_$i329, out_$i330, out_$p331, out_$p333, out_$p334, out_$i336, out_$i337, out_$p213, out_$p214, out_$p212, out_$p222, out_$p171, out_$p339, out_$p340, out_$p341, out_$p342, out_$p343, out_$i344, out_$i345, out_$p154, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27, out_cmdloc_dummy_var_28, out_cmdloc_dummy_var_29, out_cmdloc_dummy_var_30, out_cmdloc_dummy_var_31, out_cmdloc_dummy_var_32, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_cmdloc_dummy_var_38 := in_$p155, in_$i156, in_$i157, in_$i158, in_$p159, in_$i160, in_$i161, in_$p162, in_$i163, in_$i164, in_$p165, in_$p166, in_$p167, in_$p168, in_$p169, in_$p170, in_$p172, in_$p173, in_$p174, in_$i175, in_$p176, in_$i177, in_$p178, in_$p179, in_$i180, in_$p181, in_$i182, in_$p183, in_$p184, in_$p185, in_$i186, in_$p187, in_$i188, in_$p189, in_$p190, in_$i191, in_$i192, in_$p193, in_$i194, in_$i195, in_$i196, in_$p197, in_$p198, in_$p199, in_$p200, in_$p202, in_$p203, in_$p204, in_$p206, in_$p207, in_$i209, in_$i210, in_$i211, in_$p215, in_$p216, in_$p217, in_$i218, in_$p219, in_$i220, in_$i221, in_$p223, in_$i224, in_$p225, in_$i226, in_$i227, in_$p228, in_$p229, in_$i230, in_$i231, in_$p233, in_$p234, in_$p235, in_$i236, in_$i237, in_$p238, in_$i239, in_$i240, in_$p241, in_$i242, in_$i243, in_$p244, in_$p245, in_$i246, in_$p247, in_$i248, in_$i249, in_$p250, in_$p251, in_$i252, in_$p253, in_$i254, in_$i255, in_$i256, in_$i257, in_$p258, in_$p259, in_$p260, in_$p261, in_$p262, in_$i263, in_$i264, in_$p265, in_$i266, in_$i267, in_$p268, in_$p269, in_$i270, in_$p271, in_$p272, in_$p273, in_$i274, in_$i275, in_$i276, in_$p277, in_$p278, in_$i279, in_$i280, in_$p281, in_$p282, in_$i283, in_$p284, in_$i285, in_$i286, in_$p287, in_$p288, in_$i289, in_$i290, in_$p293, in_$p294, in_$i295, in_$i296, in_$p297, in_$i298, in_$p301, in_$i302, in_$p305, in_$i306, in_$i307, in_$i308, in_$i232, in_$p309, in_$i310, in_$p311, in_$i312, in_$i313, in_$p314, in_$p315, in_$p316, in_$i317, in_$p318, in_$p319, in_$i320, in_$p321, in_$i322, in_$i323, in_$p324, in_$p325, in_$p326, in_$i327, in_$p328, in_$i329, in_$i330, in_$p331, in_$p333, in_$p334, in_$i336, in_$i337, in_$p213, in_$p214, in_$p212, in_$p222, in_$p171, in_$p339, in_$p340, in_$p341, in_$p342, in_$p343, in_$i344, in_$i345, in_$p154, in_cmdloc_dummy_var_24, in_cmdloc_dummy_var_25, in_cmdloc_dummy_var_26, in_cmdloc_dummy_var_27, in_cmdloc_dummy_var_28, in_cmdloc_dummy_var_29, in_cmdloc_dummy_var_30, in_cmdloc_dummy_var_31, in_cmdloc_dummy_var_32, in_cmdloc_dummy_var_33, in_cmdloc_dummy_var_34, in_cmdloc_dummy_var_35, in_cmdloc_dummy_var_36, in_cmdloc_dummy_var_37, in_cmdloc_dummy_var_38;
    goto $bb44, exit;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_1891;

  $bb88:
    assume out_$i345 == 1;
    assume {:verifier.code 0} true;
    out_$p154 := out_$p342;
    goto $bb88_dummy;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    out_$i345 := $ne.i64(out_$i344, in_$i152);
    goto corral_source_split_1925;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    out_$i344 := $p2i.ref.i64(out_$p343);
    goto corral_source_split_1924;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    out_$p343 := $add.ref($add.ref(out_$p341, $mul.ref($sub.ref(0, 16), 96)), $mul.ref(16, 1));
    goto corral_source_split_1923;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    out_$p342 := $add.ref(out_$p341, $mul.ref($sub.ref(0, 16), 96));
    goto corral_source_split_1922;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    out_$p341 := $bitcast.ref.ref(out_$p340);
    goto corral_source_split_1921;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    out_$p340 := $load.ref($M.1, out_$p339);
    goto corral_source_split_1920;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    out_$p339 := $add.ref($add.ref($add.ref(out_$p171, $mul.ref(0, 96)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1919;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_1918;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    out_$p171 := out_$p222;
    goto $bb51;

  $bb50:
    assume {:verifier.code 0} true;
    out_$p171 := out_$p154;
    goto $bb51;

  $bb49:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p170, 0);
    goto corral_source_split_1916;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    out_$p170 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(92, 1));
    goto corral_source_split_1915;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_24 := $M.1;
    out_cmdloc_dummy_var_25 := $M.1;
    call {:si_unique_call 352} out_cmdloc_dummy_var_26 := $memcpy.i8(out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_$p168, out_$p169, 16, $zext.i32.i64(8), 0 == 1);
    $M.1 := out_cmdloc_dummy_var_26;
    goto corral_source_split_1914;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    out_$p169 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_1913;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    out_$p168 := $bitcast.ref.ref(out_$p167);
    goto corral_source_split_1912;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    out_$p167 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(32, 1));
    goto corral_source_split_1911;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p166, 0);
    goto corral_source_split_1910;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    out_$p166 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1909;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p165, out_$i164);
    goto corral_source_split_1908;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_1907;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    out_$i164 := $and.i32(out_$i163, $sub.i32(0, 2));
    goto corral_source_split_1906;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    out_$i163 := $load.i32($M.1, out_$p162);
    goto corral_source_split_1905;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_1904;

  $bb48:
    assume out_$i161 == 1;
    goto corral_source_split_1903;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    out_$i161 := $sgt.i32(out_$i160, 99);
    goto corral_source_split_1901;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    out_$i160 := $load.i32($M.1, out_$p159);
    goto corral_source_split_1900;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(84, 1));
    goto corral_source_split_1899;

  $bb46:
    assume out_$i158 == 1;
    goto corral_source_split_1898;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    out_$i158 := $ne.i32(out_$i157, 0);
    goto corral_source_split_1896;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    out_$i157 := $and.i32(out_$i156, 1);
    goto corral_source_split_1895;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    out_$i156 := $load.i32($M.1, out_$p155);
    goto corral_source_split_1894;

  $bb45:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_1893;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb60:
    assume {:verifier.code 0} true;
    goto corral_source_split_1985;

  $bb87:
    assume {:verifier.code 0} true;
    out_$p222 := out_$p212;
    goto $bb60;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    out_$p222 := out_$p154;
    goto $bb60;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    out_$p222 := out_$p154;
    goto $bb60;

  $bb58:
    assume out_$i221 == 1;
    goto corral_source_split_1983;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    out_$i221 := $slt.i32(out_$i218, out_$i220);
    goto corral_source_split_1981;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    out_$i220 := $load.i32($M.1, out_$p219);
    goto corral_source_split_1980;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    out_$p219 := $add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_1979;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    out_$i218 := $load.i32($M.1, out_$p217);
    goto corral_source_split_1978;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    out_$p217 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1977;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    out_$p216 := $load.ref($M.1, out_$p215);
    goto corral_source_split_1976;

  $bb57:
    assume {:verifier.code 0} true;
    out_$p215 := $add.ref($add.ref(out_$p213, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1975;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb56:
    call out_$p215, out_$p216, out_$p217, out_$i218, out_$p219, out_$i220, out_$i221, out_$p223, out_$i224, out_$p225, out_$i226, out_$i227, out_$p228, out_$p229, out_$i230, out_$i231, out_$p233, out_$p234, out_$p235, out_$i236, out_$i237, out_$p238, out_$i239, out_$i240, out_$p241, out_$i242, out_$i243, out_$p244, out_$p245, out_$i246, out_$p247, out_$i248, out_$i249, out_$p250, out_$p251, out_$i252, out_$p253, out_$i254, out_$i255, out_$i256, out_$i257, out_$p258, out_$p259, out_$p260, out_$p261, out_$p262, out_$i263, out_$i264, out_$p265, out_$i266, out_$i267, out_$p268, out_$p269, out_$i270, out_$p271, out_$p272, out_$p273, out_$i274, out_$i275, out_$i276, out_$p277, out_$p278, out_$i279, out_$i280, out_$p281, out_$p282, out_$i283, out_$p284, out_$i285, out_$i286, out_$p287, out_$p288, out_$i289, out_$i290, out_$p293, out_$p294, out_$i295, out_$i296, out_$p297, out_$i298, out_$p301, out_$i302, out_$p305, out_$i306, out_$i307, out_$i308, out_$i232, out_$p309, out_$i310, out_$p311, out_$i312, out_$i313, out_$p314, out_$p315, out_$p316, out_$i317, out_$p318, out_$p319, out_$i320, out_$p321, out_$i322, out_$i323, out_$p324, out_$p325, out_$p326, out_$i327, out_$p328, out_$i329, out_$i330, out_$p331, out_$p333, out_$p334, out_$i336, out_$i337, out_$p213, out_$p214, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_cmdloc_dummy_var_38 := oz_hcd_heartbeat_loop_$bb56(in_$p1, out_$i210, out_$p215, out_$p216, out_$p217, out_$i218, out_$p219, out_$i220, out_$i221, out_$p223, out_$i224, out_$p225, out_$i226, out_$i227, out_$p228, out_$p229, out_$i230, out_$i231, out_$p233, out_$p234, out_$p235, out_$i236, out_$i237, out_$p238, out_$i239, out_$i240, out_$p241, out_$i242, out_$i243, out_$p244, out_$p245, out_$i246, out_$p247, out_$i248, out_$i249, out_$p250, out_$p251, out_$i252, out_$p253, out_$i254, out_$i255, out_$i256, out_$i257, out_$p258, out_$p259, out_$p260, out_$p261, out_$p262, out_$i263, out_$i264, out_$p265, out_$i266, out_$i267, out_$p268, out_$p269, out_$i270, out_$p271, out_$p272, out_$p273, out_$i274, out_$i275, out_$i276, out_$p277, out_$p278, out_$i279, out_$i280, out_$p281, out_$p282, out_$i283, out_$p284, out_$i285, out_$i286, out_$p287, out_$p288, out_$i289, out_$i290, out_$p293, out_$p294, out_$i295, out_$i296, out_$p297, out_$i298, out_$p301, out_$i302, out_$p305, out_$i306, out_$i307, out_$i308, out_$i232, out_$p309, out_$i310, out_$p311, out_$i312, out_$i313, out_$p314, out_$p315, out_$p316, out_$i317, out_$p318, out_$p319, out_$i320, out_$p321, out_$i322, out_$i323, out_$p324, out_$p325, out_$p326, out_$i327, out_$p328, out_$i329, out_$i330, out_$p331, out_$p333, out_$p334, out_$i336, out_$i337, out_$p213, out_$p214, out_$p154, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_cmdloc_dummy_var_38);
    goto $bb56_last;

  $bb56_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1973;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    out_$p213, out_$p214 := out_$p203, out_$p207;
    goto $bb56;

  $bb85:
    assume out_$i337 == 1;
    assume {:verifier.code 0} true;
    out_$p213, out_$p214 := out_$p214, out_$p334;
    assume false;
    return;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    out_$i337 := $ne.i64(out_$i336, out_$i210);
    goto corral_source_split_2135;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    out_$i336 := $p2i.ref.i64(out_$p214);
    goto corral_source_split_2134;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    goto corral_source_split_2133;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    out_$p334 := $load.ref($M.1, out_$p333);
    goto corral_source_split_2132;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    out_$p333 := $add.ref($add.ref($add.ref(out_$p214, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2131;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p331, out_$i330);
    goto corral_source_split_2130;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    out_$p331 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_2129;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    out_$i330 := $sub.i32(out_$i327, out_$i329);
    goto corral_source_split_2128;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    out_$i329 := $load.i32($M.1, out_$p328);
    goto corral_source_split_2127;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    out_$p328 := $add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2126;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    out_$i327 := $load.i32($M.1, out_$p326);
    goto corral_source_split_2125;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    out_$p326 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_2124;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} list_move_tail(out_$p325, in_$p1);
    goto corral_source_split_2123;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    out_$p325 := $add.ref($add.ref(out_$p213, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2122;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p324, out_$i323);
    goto corral_source_split_2121;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    out_$p324 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(92, 1));
    goto corral_source_split_2120;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    out_$i323 := $add.i32(out_$i320, out_$i322);
    goto corral_source_split_2119;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    out_$i322 := $load.i32($M.1, out_$p321);
    goto corral_source_split_2118;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    out_$p321 := $add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2117;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    out_$i320 := $load.i32($M.1, out_$p319);
    goto corral_source_split_2116;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    out_$p319 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(92, 1));
    goto corral_source_split_2115;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p318, out_$i317);
    goto corral_source_split_2114;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    out_$p318 := $add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(160, 1));
    goto corral_source_split_2113;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    out_$i317 := $load.i32($M.1, out_$p316);
    goto corral_source_split_2112;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    out_$p316 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(92, 1));
    goto corral_source_split_2111;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p315, 0);
    goto corral_source_split_2110;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    out_$p315 := $add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(172, 1));
    goto corral_source_split_2109;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p314, out_$i313);
    goto corral_source_split_2108;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    out_$p314 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(84, 1));
    goto corral_source_split_2107;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    out_$i313 := $sub.i32(out_$i310, out_$i312);
    goto corral_source_split_2106;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    out_$i312 := $load.i32($M.1, out_$p311);
    goto corral_source_split_2105;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    out_$p311 := $add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2104;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    out_$i310 := $load.i32($M.1, out_$p309);
    goto corral_source_split_2103;

  $bb84:
    assume {:verifier.code 0} true;
    out_$p309 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(84, 1));
    goto corral_source_split_2102;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb66:
    assume {:verifier.code 0} true;
    assume !(out_$i231 == 1);
    goto $bb67;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb83:
    assume !(out_$i308 == 1);
    goto corral_source_split_2100;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    out_$i308 := $slt.i32(out_$i306, out_$i307);
    goto corral_source_split_2098;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    out_$i307 := $load.i32($M.1, out_$p229);
    goto corral_source_split_2097;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    out_$i306 := $add.i32(out_$i232, 1);
    call {:si_unique_call 364} {:cexpr "i"} boogie_si_record_i32(out_$i306);
    goto corral_source_split_2096;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p305, 0);
    goto corral_source_split_2095;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    out_$p305 := $add.ref($add.ref($add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i302, 16)), $mul.ref(12, 1));
    goto corral_source_split_2094;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    out_$i302 := $sext.i32.i64(out_$i232);
    goto corral_source_split_2093;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p301, out_$i240);
    goto corral_source_split_2092;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    out_$p301 := $add.ref($add.ref($add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i298, 16)), $mul.ref(8, 1));
    goto corral_source_split_2091;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    out_$i298 := $sext.i32.i64(out_$i232);
    goto corral_source_split_2090;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p297, out_$i296);
    goto corral_source_split_2089;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    out_$p297 := $add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_2088;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    out_$i296 := $add.i32(out_$i295, out_$i240);
    goto corral_source_split_2087;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    out_$i295 := $load.i32($M.1, out_$p294);
    goto corral_source_split_2086;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    out_$p294 := $add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_2085;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p293, out_$i289);
    goto corral_source_split_2084;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    out_$p293 := $add.ref($add.ref($add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i290, 16)), $mul.ref(0, 1));
    goto corral_source_split_2083;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    out_$i290 := $sext.i32.i64(out_$i232);
    goto corral_source_split_2082;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    out_$i289 := $load.i32($M.1, out_$p288);
    goto corral_source_split_2081;

  $bb81:
    assume {:verifier.code 0} true;
    out_$p288 := $add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_2080;

  $bb80:
    assume !(out_$i286 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p287, 0);
    goto corral_source_split_2078;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    out_$p287 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2077;

  $bb79:
    assume out_$i286 == 1;
    goto corral_source_split_2076;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    out_$i286 := $eq.i32(out_$i283, out_$i285);
    goto corral_source_split_2074;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    out_$i285 := $load.i32($M.1, out_$p284);
    goto corral_source_split_2073;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    out_$p284 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_2072;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    out_$i283 := $load.i32($M.1, out_$p282);
    goto corral_source_split_2071;

  $bb78:
    assume {:verifier.code 0} true;
    out_$p282 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2070;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p281, out_$i280);
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p277, out_$i276);
    goto corral_source_split_2062;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    out_$p277 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2061;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    out_$i276 := $sub.i32(out_$i240, out_$i257);
    goto corral_source_split_2060;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_36 := $M.1;
    out_cmdloc_dummy_var_37 := $M.1;
    call {:si_unique_call 363} out_cmdloc_dummy_var_38 := $memcpy.i8(out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_$p271, out_$p273, out_$i275, $zext.i32.i64(1), 0 == 1);
    $M.1 := out_cmdloc_dummy_var_38;
    goto corral_source_split_2059;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    out_$i275 := $sext.i32.i64(out_$i274);
    goto corral_source_split_2058;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    out_$i274 := $sub.i32(out_$i240, out_$i257);
    goto corral_source_split_2057;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    out_$p273 := $load.ref($M.1, out_$p272);
    goto corral_source_split_2056;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    out_$p272 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_2055;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    out_$p271 := $add.ref(out_$p269, $mul.ref(out_$i270, 1));
    goto corral_source_split_2054;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    out_$i270 := $sext.i32.i64(out_$i257);
    goto corral_source_split_2053;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    out_$p269 := $load.ref($M.1, out_$p268);
    goto corral_source_split_2052;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    out_$p268 := $add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2051;

  $bb76:
    assume out_$i267 == 1;
    goto corral_source_split_2050;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    out_$i267 := $slt.i32(out_$i257, out_$i240);
    goto corral_source_split_2048;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_33 := $M.1;
    out_cmdloc_dummy_var_34 := $M.1;
    call {:si_unique_call 362} out_cmdloc_dummy_var_35 := $memcpy.i8(out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_$p259, out_$p265, out_$i266, $zext.i32.i64(1), 0 == 1);
    $M.1 := out_cmdloc_dummy_var_35;
    goto corral_source_split_2047;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    out_$i266 := $sext.i32.i64(out_$i257);
    goto corral_source_split_2046;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    out_$p265 := $add.ref(out_$p261, $mul.ref(out_$i264, 1));
    goto corral_source_split_2045;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    out_$i264 := $sext.i32.i64(out_$i263);
    goto corral_source_split_2044;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    out_$i263 := $load.i32($M.1, out_$p262);
    goto corral_source_split_2043;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    out_$p262 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2042;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    out_$p261 := $load.ref($M.1, out_$p260);
    goto corral_source_split_2041;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    out_$p260 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_2040;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    out_$p259 := $load.ref($M.1, out_$p258);
    goto corral_source_split_2039;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    out_$p258 := $add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2038;

  $bb75:
    assume {:verifier.code 0} true;
    goto corral_source_split_2037;

  $bb74:
    assume !(out_$i256 == 1);
    assume {:verifier.code 0} true;
    out_$i257 := out_$i255;
    goto $bb75;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    out_$i257 := out_$i240;
    goto $bb75;

  $bb73:
    assume out_$i256 == 1;
    goto corral_source_split_2035;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    out_$i256 := $sgt.i32(out_$i255, out_$i240);
    goto corral_source_split_2033;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    out_$i255 := $sub.i32(out_$i252, out_$i254);
    call {:si_unique_call 361} {:cexpr "copy_len"} boogie_si_record_i32(out_$i255);
    goto corral_source_split_2032;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    out_$i254 := $load.i32($M.1, out_$p253);
    goto corral_source_split_2031;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    out_$p253 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2030;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    out_$i252 := $load.i32($M.1, out_$p251);
    goto corral_source_split_2029;

  $bb72:
    assume {:verifier.code 0} true;
    out_$p251 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_2028;

  $bb71:
    assume !(out_$i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p250, 0);
    goto corral_source_split_2026;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    out_$p250 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2025;

  $bb70:
    assume out_$i249 == 1;
    goto corral_source_split_2024;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    out_$i249 := $eq.i32(out_$i246, out_$i248);
    goto corral_source_split_2022;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    out_$i248 := $load.i32($M.1, out_$p247);
    goto corral_source_split_2021;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    out_$p247 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_2020;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    out_$i246 := $load.i32($M.1, out_$p245);
    goto corral_source_split_2019;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    out_$p245 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2018;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p244, out_$i243);
    goto corral_source_split_2017;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    out_$p244 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2016;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    out_$i243 := $add.i32(out_$i242, 1);
    goto corral_source_split_2015;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    out_$i242 := $load.i32($M.1, out_$p241);
    goto corral_source_split_2014;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    out_$p241 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2013;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    out_$i240 := $zext.i8.i32(out_$i239);
    call {:si_unique_call 360} {:cexpr "len"} boogie_si_record_i32(out_$i240);
    goto corral_source_split_2012;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    out_$i239 := $load.i8($M.1, out_$p238);
    goto corral_source_split_2011;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    out_$p238 := $add.ref(out_$p234, $mul.ref(out_$i237, 1));
    goto corral_source_split_2010;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    out_$i237 := $sext.i32.i64(out_$i236);
    goto corral_source_split_2009;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    out_$i236 := $load.i32($M.1, out_$p235);
    goto corral_source_split_2008;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    out_$p235 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2007;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    out_$p234 := $load.ref($M.1, out_$p233);
    goto corral_source_split_2006;

  $bb69:
    assume {:verifier.code 0} true;
    out_$p233 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_2005;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb68:
    call out_$p233, out_$p234, out_$p235, out_$i236, out_$i237, out_$p238, out_$i239, out_$i240, out_$p241, out_$i242, out_$i243, out_$p244, out_$p245, out_$i246, out_$p247, out_$i248, out_$i249, out_$p250, out_$p251, out_$i252, out_$p253, out_$i254, out_$i255, out_$i256, out_$i257, out_$p258, out_$p259, out_$p260, out_$p261, out_$p262, out_$i263, out_$i264, out_$p265, out_$i266, out_$i267, out_$p268, out_$p269, out_$i270, out_$p271, out_$p272, out_$p273, out_$i274, out_$i275, out_$i276, out_$p277, out_$p278, out_$i279, out_$i280, out_$p281, out_$p282, out_$i283, out_$p284, out_$i285, out_$i286, out_$p287, out_$p288, out_$i289, out_$i290, out_$p293, out_$p294, out_$i295, out_$i296, out_$p297, out_$i298, out_$p301, out_$i302, out_$p305, out_$i306, out_$i307, out_$i308, out_$i232, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_cmdloc_dummy_var_38 := oz_hcd_heartbeat_loop_$bb68(out_$p216, out_$p229, out_$p233, out_$p234, out_$p235, out_$i236, out_$i237, out_$p238, out_$i239, out_$i240, out_$p241, out_$i242, out_$i243, out_$p244, out_$p245, out_$i246, out_$p247, out_$i248, out_$i249, out_$p250, out_$p251, out_$i252, out_$p253, out_$i254, out_$i255, out_$i256, out_$i257, out_$p258, out_$p259, out_$p260, out_$p261, out_$p262, out_$i263, out_$i264, out_$p265, out_$i266, out_$i267, out_$p268, out_$p269, out_$i270, out_$p271, out_$p272, out_$p273, out_$i274, out_$i275, out_$i276, out_$p277, out_$p278, out_$i279, out_$i280, out_$p281, out_$p282, out_$i283, out_$p284, out_$i285, out_$i286, out_$p287, out_$p288, out_$i289, out_$i290, out_$p293, out_$p294, out_$i295, out_$i296, out_$p297, out_$i298, out_$p301, out_$i302, out_$p305, out_$i306, out_$i307, out_$i308, out_$i232, out_$p154, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_cmdloc_dummy_var_38);
    goto $bb68_last;

  $bb68_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2003;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    out_$i232 := 0;
    goto $bb68;

  $bb82:
    assume out_$i308 == 1;
    assume {:verifier.code 0} true;
    out_$i232 := out_$i306;
    assume false;
    return;

  $bb65:
    assume out_$i231 == 1;
    goto corral_source_split_2001;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    out_$i231 := $slt.i32(0, out_$i230);
    goto corral_source_split_1999;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    out_$i230 := $load.i32($M.1, out_$p229);
    goto corral_source_split_1998;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    out_$p229 := $add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_1997;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p228, 0);
    goto corral_source_split_1996;

  $bb64:
    assume {:verifier.code 0} true;
    out_$p228 := $add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_1995;

  $bb63:
    assume !(out_$i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    out_$i227 := $slt.i32(out_$i224, out_$i226);
    goto corral_source_split_1991;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    out_$i226 := $load.i32($M.1, out_$p225);
    goto corral_source_split_1990;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    out_$p225 := $add.ref($add.ref(out_$p216, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_1989;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    out_$i224 := $load.i32($M.1, out_$p223);
    goto corral_source_split_1988;

  $bb61:
    assume {:verifier.code 0} true;
    out_$p223 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(84, 1));
    goto corral_source_split_1987;

  $bb59:
    assume !(out_$i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    out_$p281 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2068;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    out_$i280 := $add.i32(out_$i279, out_$i257);
    goto corral_source_split_2067;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    out_$i279 := $load.i32($M.1, out_$p278);
    goto corral_source_split_2066;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    out_$p278 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2065;

  $bb77:
    assume !(out_$i267 == 1);
    goto corral_source_split_2064;

  $bb53:
    assume out_$i211 == 1;
    goto corral_source_split_1971;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    out_$p212 := out_$p154;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    out_$i211 := $ne.i64(out_$i209, out_$i210);
    goto corral_source_split_1969;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    out_$i210 := $p2i.ref.i64(out_$p154);
    goto corral_source_split_1968;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    out_$i209 := $p2i.ref.i64(out_$p204);
    goto corral_source_split_1967;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    goto corral_source_split_1966;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    out_$p207 := $load.ref($M.1, out_$p206);
    goto corral_source_split_1965;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    out_$p206 := $add.ref($add.ref($add.ref(out_$p204, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1964;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    out_$p204 := $bitcast.ref.ref(out_$p203);
    goto corral_source_split_1963;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    out_$p203 := $load.ref($M.1, out_$p202);
    goto corral_source_split_1962;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    out_$p202 := $add.ref($add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1961;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_30 := $M.1;
    out_cmdloc_dummy_var_31 := $M.1;
    call {:si_unique_call 359} out_cmdloc_dummy_var_32 := $memcpy.i8(out_cmdloc_dummy_var_30, out_cmdloc_dummy_var_31, out_$p199, out_$p200, 16, $zext.i32.i64(8), 0 == 1);
    $M.1 := out_cmdloc_dummy_var_32;
    goto corral_source_split_1960;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    out_$p200 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_1959;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    out_$p199 := $bitcast.ref.ref(out_$p198);
    goto corral_source_split_1958;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    out_$p198 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(32, 1));
    goto corral_source_split_1957;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p197, out_$i196);
    goto corral_source_split_1956;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    out_$p197 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1955;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    out_$i196 := $add.i32(out_$i194, out_$i195);
    goto corral_source_split_1954;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    out_$i195 := $trunc.i64.i32(out_$i192);
    goto corral_source_split_1953;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    out_$i194 := $load.i32($M.1, out_$p193);
    goto corral_source_split_1952;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    out_$p193 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1951;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} out_$i192 := div_u64(out_$i191, 1000000);
    call {:si_unique_call 358} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i192);
    goto corral_source_split_1950;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} out_$i191 := timespec_to_ns(in_$p3);
    call {:si_unique_call 356} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i191);
    goto corral_source_split_1949;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_27 := $M.17;
    out_cmdloc_dummy_var_28 := $M.17;
    call {:si_unique_call 354} out_cmdloc_dummy_var_29 := $memcpy.i8(out_cmdloc_dummy_var_27, out_cmdloc_dummy_var_28, out_$p189, out_$p190, 16, $zext.i32.i64(8), 0 == 1);
    $M.17 := out_cmdloc_dummy_var_29;
    goto corral_source_split_1948;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    out_$p190 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_1947;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    out_$p189 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_1946;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, out_$p187, out_$i188);
    goto corral_source_split_1945;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    out_$i188 := $extractvalue(out_$p183, 1);
    goto corral_source_split_1944;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    out_$p187 := $add.ref($add.ref(out_$p184, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1943;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, out_$p185, out_$i186);
    goto corral_source_split_1942;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    out_$i186 := $extractvalue(out_$p183, 0);
    goto corral_source_split_1941;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    out_$p185 := $add.ref($add.ref(out_$p184, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1940;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    out_$p184 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_1939;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} out_$p183 := timespec_sub(out_$i175, out_$i177, out_$i180, out_$i182);
    goto corral_source_split_1938;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    out_$i182 := $load.i64($M.1, out_$p181);
    goto corral_source_split_1937;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    out_$p181 := $add.ref($add.ref(out_$p178, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1936;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    out_$i180 := $load.i64($M.1, out_$p179);
    goto corral_source_split_1935;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    out_$p179 := $add.ref($add.ref(out_$p178, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1934;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    out_$p178 := $bitcast.ref.ref(out_$p172);
    goto corral_source_split_1933;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    out_$i177 := $load.i64($M.1, out_$p176);
    goto corral_source_split_1932;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    out_$p176 := $add.ref($add.ref(out_$p173, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1931;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    out_$i175 := $load.i64($M.1, out_$p174);
    goto corral_source_split_1930;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref($add.ref(out_$p173, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1929;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    out_$p173 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_1928;

  $bb52:
    assume {:verifier.code 0} true;
    out_$p172 := $add.ref($add.ref(out_$p154, $mul.ref(0, 96)), $mul.ref(32, 1));
    goto corral_source_split_1927;

  $bb47:
    assume !(out_$i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb62:
    assume out_$i227 == 1;
    goto corral_source_split_1993;

  $bb55:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb54:
    assume {:verifier.code 0} true;
    assume !(out_$i211 == 1);
    goto $bb55;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    out_$p212 := out_$p154;
    goto $bb55;

  $bb86:
    assume !(out_$i337 == 1);
    goto corral_source_split_2137;

  $bb88_dummy:
    call {:si_unique_call 1} out_$p155, out_$i156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$p165, out_$p166, out_$p167, out_$p168, out_$p169, out_$p170, out_$p172, out_$p173, out_$p174, out_$i175, out_$p176, out_$i177, out_$p178, out_$p179, out_$i180, out_$p181, out_$i182, out_$p183, out_$p184, out_$p185, out_$i186, out_$p187, out_$i188, out_$p189, out_$p190, out_$i191, out_$i192, out_$p193, out_$i194, out_$i195, out_$i196, out_$p197, out_$p198, out_$p199, out_$p200, out_$p202, out_$p203, out_$p204, out_$p206, out_$p207, out_$i209, out_$i210, out_$i211, out_$p215, out_$p216, out_$p217, out_$i218, out_$p219, out_$i220, out_$i221, out_$p223, out_$i224, out_$p225, out_$i226, out_$i227, out_$p228, out_$p229, out_$i230, out_$i231, out_$p233, out_$p234, out_$p235, out_$i236, out_$i237, out_$p238, out_$i239, out_$i240, out_$p241, out_$i242, out_$i243, out_$p244, out_$p245, out_$i246, out_$p247, out_$i248, out_$i249, out_$p250, out_$p251, out_$i252, out_$p253, out_$i254, out_$i255, out_$i256, out_$i257, out_$p258, out_$p259, out_$p260, out_$p261, out_$p262, out_$i263, out_$i264, out_$p265, out_$i266, out_$i267, out_$p268, out_$p269, out_$i270, out_$p271, out_$p272, out_$p273, out_$i274, out_$i275, out_$i276, out_$p277, out_$p278, out_$i279, out_$i280, out_$p281, out_$p282, out_$i283, out_$p284, out_$i285, out_$i286, out_$p287, out_$p288, out_$i289, out_$i290, out_$p293, out_$p294, out_$i295, out_$i296, out_$p297, out_$i298, out_$p301, out_$i302, out_$p305, out_$i306, out_$i307, out_$i308, out_$i232, out_$p309, out_$i310, out_$p311, out_$i312, out_$i313, out_$p314, out_$p315, out_$p316, out_$i317, out_$p318, out_$p319, out_$i320, out_$p321, out_$i322, out_$i323, out_$p324, out_$p325, out_$p326, out_$i327, out_$p328, out_$i329, out_$i330, out_$p331, out_$p333, out_$p334, out_$i336, out_$i337, out_$p213, out_$p214, out_$p212, out_$p222, out_$p171, out_$p339, out_$p340, out_$p341, out_$p342, out_$p343, out_$i344, out_$i345, out_$p154, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27, out_cmdloc_dummy_var_28, out_cmdloc_dummy_var_29, out_cmdloc_dummy_var_30, out_cmdloc_dummy_var_31, out_cmdloc_dummy_var_32, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_cmdloc_dummy_var_38 := oz_hcd_heartbeat_loop_$bb44(in_$p1, in_$p2, in_$p3, in_$p5, in_$i152, out_$p155, out_$i156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$p165, out_$p166, out_$p167, out_$p168, out_$p169, out_$p170, out_$p172, out_$p173, out_$p174, out_$i175, out_$p176, out_$i177, out_$p178, out_$p179, out_$i180, out_$p181, out_$i182, out_$p183, out_$p184, out_$p185, out_$i186, out_$p187, out_$i188, out_$p189, out_$p190, out_$i191, out_$i192, out_$p193, out_$i194, out_$i195, out_$i196, out_$p197, out_$p198, out_$p199, out_$p200, out_$p202, out_$p203, out_$p204, out_$p206, out_$p207, out_$i209, out_$i210, out_$i211, out_$p215, out_$p216, out_$p217, out_$i218, out_$p219, out_$i220, out_$i221, out_$p223, out_$i224, out_$p225, out_$i226, out_$i227, out_$p228, out_$p229, out_$i230, out_$i231, out_$p233, out_$p234, out_$p235, out_$i236, out_$i237, out_$p238, out_$i239, out_$i240, out_$p241, out_$i242, out_$i243, out_$p244, out_$p245, out_$i246, out_$p247, out_$i248, out_$i249, out_$p250, out_$p251, out_$i252, out_$p253, out_$i254, out_$i255, out_$i256, out_$i257, out_$p258, out_$p259, out_$p260, out_$p261, out_$p262, out_$i263, out_$i264, out_$p265, out_$i266, out_$i267, out_$p268, out_$p269, out_$i270, out_$p271, out_$p272, out_$p273, out_$i274, out_$i275, out_$i276, out_$p277, out_$p278, out_$i279, out_$i280, out_$p281, out_$p282, out_$i283, out_$p284, out_$i285, out_$i286, out_$p287, out_$p288, out_$i289, out_$i290, out_$p293, out_$p294, out_$i295, out_$i296, out_$p297, out_$i298, out_$p301, out_$i302, out_$p305, out_$i306, out_$i307, out_$i308, out_$i232, out_$p309, out_$i310, out_$p311, out_$i312, out_$i313, out_$p314, out_$p315, out_$p316, out_$i317, out_$p318, out_$p319, out_$i320, out_$p321, out_$i322, out_$i323, out_$p324, out_$p325, out_$p326, out_$i327, out_$p328, out_$i329, out_$i330, out_$p331, out_$p333, out_$p334, out_$i336, out_$i337, out_$p213, out_$p214, out_$p212, out_$p222, out_$p171, out_$p339, out_$p340, out_$p341, out_$p342, out_$p343, out_$i344, out_$i345, out_$p154, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27, out_cmdloc_dummy_var_28, out_cmdloc_dummy_var_29, out_cmdloc_dummy_var_30, out_cmdloc_dummy_var_31, out_cmdloc_dummy_var_32, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_cmdloc_dummy_var_38);
    return;

  exit:
    return;
}



procedure oz_hcd_heartbeat_loop_$bb44(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$i152: i64, in_$p155: ref, in_$i156: i32, in_$i157: i32, in_$i158: i1, in_$p159: ref, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i163: i32, in_$i164: i32, in_$p165: ref, in_$p166: ref, in_$p167: ref, in_$p168: ref, in_$p169: ref, in_$p170: ref, in_$p172: ref, in_$p173: ref, in_$p174: ref, in_$i175: i64, in_$p176: ref, in_$i177: i64, in_$p178: ref, in_$p179: ref, in_$i180: i64, in_$p181: ref, in_$i182: i64, in_$p183: ref, in_$p184: ref, in_$p185: ref, in_$i186: i64, in_$p187: ref, in_$i188: i64, in_$p189: ref, in_$p190: ref, in_$i191: i64, in_$i192: i64, in_$p193: ref, in_$i194: i32, in_$i195: i32, in_$i196: i32, in_$p197: ref, in_$p198: ref, in_$p199: ref, in_$p200: ref, in_$p202: ref, in_$p203: ref, in_$p204: ref, in_$p206: ref, in_$p207: ref, in_$i209: i64, in_$i210: i64, in_$i211: i1, in_$p215: ref, in_$p216: ref, in_$p217: ref, in_$i218: i32, in_$p219: ref, in_$i220: i32, in_$i221: i1, in_$p223: ref, in_$i224: i32, in_$p225: ref, in_$i226: i32, in_$i227: i1, in_$p228: ref, in_$p229: ref, in_$i230: i32, in_$i231: i1, in_$p233: ref, in_$p234: ref, in_$p235: ref, in_$i236: i32, in_$i237: i64, in_$p238: ref, in_$i239: i8, in_$i240: i32, in_$p241: ref, in_$i242: i32, in_$i243: i32, in_$p244: ref, in_$p245: ref, in_$i246: i32, in_$p247: ref, in_$i248: i32, in_$i249: i1, in_$p250: ref, in_$p251: ref, in_$i252: i32, in_$p253: ref, in_$i254: i32, in_$i255: i32, in_$i256: i1, in_$i257: i32, in_$p258: ref, in_$p259: ref, in_$p260: ref, in_$p261: ref, in_$p262: ref, in_$i263: i32, in_$i264: i64, in_$p265: ref, in_$i266: i64, in_$i267: i1, in_$p268: ref, in_$p269: ref, in_$i270: i64, in_$p271: ref, in_$p272: ref, in_$p273: ref, in_$i274: i32, in_$i275: i64, in_$i276: i32, in_$p277: ref, in_$p278: ref, in_$i279: i32, in_$i280: i32, in_$p281: ref, in_$p282: ref, in_$i283: i32, in_$p284: ref, in_$i285: i32, in_$i286: i1, in_$p287: ref, in_$p288: ref, in_$i289: i32, in_$i290: i64, in_$p293: ref, in_$p294: ref, in_$i295: i32, in_$i296: i32, in_$p297: ref, in_$i298: i64, in_$p301: ref, in_$i302: i64, in_$p305: ref, in_$i306: i32, in_$i307: i32, in_$i308: i1, in_$i232: i32, in_$p309: ref, in_$i310: i32, in_$p311: ref, in_$i312: i32, in_$i313: i32, in_$p314: ref, in_$p315: ref, in_$p316: ref, in_$i317: i32, in_$p318: ref, in_$p319: ref, in_$i320: i32, in_$p321: ref, in_$i322: i32, in_$i323: i32, in_$p324: ref, in_$p325: ref, in_$p326: ref, in_$i327: i32, in_$p328: ref, in_$i329: i32, in_$i330: i32, in_$p331: ref, in_$p333: ref, in_$p334: ref, in_$i336: i64, in_$i337: i1, in_$p213: ref, in_$p214: ref, in_$p212: ref, in_$p222: ref, in_$p171: ref, in_$p339: ref, in_$p340: ref, in_$p341: ref, in_$p342: ref, in_$p343: ref, in_$i344: i64, in_$i345: i1, in_$p154: ref, in_cmdloc_dummy_var_24: [ref]i8, in_cmdloc_dummy_var_25: [ref]i8, in_cmdloc_dummy_var_26: [ref]i8, in_cmdloc_dummy_var_27: [ref]i8, in_cmdloc_dummy_var_28: [ref]i8, in_cmdloc_dummy_var_29: [ref]i8, in_cmdloc_dummy_var_30: [ref]i8, in_cmdloc_dummy_var_31: [ref]i8, in_cmdloc_dummy_var_32: [ref]i8, in_cmdloc_dummy_var_33: [ref]i8, in_cmdloc_dummy_var_34: [ref]i8, in_cmdloc_dummy_var_35: [ref]i8, in_cmdloc_dummy_var_36: [ref]i8, in_cmdloc_dummy_var_37: [ref]i8, in_cmdloc_dummy_var_38: [ref]i8) returns (out_$p155: ref, out_$i156: i32, out_$i157: i32, out_$i158: i1, out_$p159: ref, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i163: i32, out_$i164: i32, out_$p165: ref, out_$p166: ref, out_$p167: ref, out_$p168: ref, out_$p169: ref, out_$p170: ref, out_$p172: ref, out_$p173: ref, out_$p174: ref, out_$i175: i64, out_$p176: ref, out_$i177: i64, out_$p178: ref, out_$p179: ref, out_$i180: i64, out_$p181: ref, out_$i182: i64, out_$p183: ref, out_$p184: ref, out_$p185: ref, out_$i186: i64, out_$p187: ref, out_$i188: i64, out_$p189: ref, out_$p190: ref, out_$i191: i64, out_$i192: i64, out_$p193: ref, out_$i194: i32, out_$i195: i32, out_$i196: i32, out_$p197: ref, out_$p198: ref, out_$p199: ref, out_$p200: ref, out_$p202: ref, out_$p203: ref, out_$p204: ref, out_$p206: ref, out_$p207: ref, out_$i209: i64, out_$i210: i64, out_$i211: i1, out_$p215: ref, out_$p216: ref, out_$p217: ref, out_$i218: i32, out_$p219: ref, out_$i220: i32, out_$i221: i1, out_$p223: ref, out_$i224: i32, out_$p225: ref, out_$i226: i32, out_$i227: i1, out_$p228: ref, out_$p229: ref, out_$i230: i32, out_$i231: i1, out_$p233: ref, out_$p234: ref, out_$p235: ref, out_$i236: i32, out_$i237: i64, out_$p238: ref, out_$i239: i8, out_$i240: i32, out_$p241: ref, out_$i242: i32, out_$i243: i32, out_$p244: ref, out_$p245: ref, out_$i246: i32, out_$p247: ref, out_$i248: i32, out_$i249: i1, out_$p250: ref, out_$p251: ref, out_$i252: i32, out_$p253: ref, out_$i254: i32, out_$i255: i32, out_$i256: i1, out_$i257: i32, out_$p258: ref, out_$p259: ref, out_$p260: ref, out_$p261: ref, out_$p262: ref, out_$i263: i32, out_$i264: i64, out_$p265: ref, out_$i266: i64, out_$i267: i1, out_$p268: ref, out_$p269: ref, out_$i270: i64, out_$p271: ref, out_$p272: ref, out_$p273: ref, out_$i274: i32, out_$i275: i64, out_$i276: i32, out_$p277: ref, out_$p278: ref, out_$i279: i32, out_$i280: i32, out_$p281: ref, out_$p282: ref, out_$i283: i32, out_$p284: ref, out_$i285: i32, out_$i286: i1, out_$p287: ref, out_$p288: ref, out_$i289: i32, out_$i290: i64, out_$p293: ref, out_$p294: ref, out_$i295: i32, out_$i296: i32, out_$p297: ref, out_$i298: i64, out_$p301: ref, out_$i302: i64, out_$p305: ref, out_$i306: i32, out_$i307: i32, out_$i308: i1, out_$i232: i32, out_$p309: ref, out_$i310: i32, out_$p311: ref, out_$i312: i32, out_$i313: i32, out_$p314: ref, out_$p315: ref, out_$p316: ref, out_$i317: i32, out_$p318: ref, out_$p319: ref, out_$i320: i32, out_$p321: ref, out_$i322: i32, out_$i323: i32, out_$p324: ref, out_$p325: ref, out_$p326: ref, out_$i327: i32, out_$p328: ref, out_$i329: i32, out_$i330: i32, out_$p331: ref, out_$p333: ref, out_$p334: ref, out_$i336: i64, out_$i337: i1, out_$p213: ref, out_$p214: ref, out_$p212: ref, out_$p222: ref, out_$p171: ref, out_$p339: ref, out_$p340: ref, out_$p341: ref, out_$p342: ref, out_$p343: ref, out_$i344: i64, out_$i345: i1, out_$p154: ref, out_cmdloc_dummy_var_24: [ref]i8, out_cmdloc_dummy_var_25: [ref]i8, out_cmdloc_dummy_var_26: [ref]i8, out_cmdloc_dummy_var_27: [ref]i8, out_cmdloc_dummy_var_28: [ref]i8, out_cmdloc_dummy_var_29: [ref]i8, out_cmdloc_dummy_var_30: [ref]i8, out_cmdloc_dummy_var_31: [ref]i8, out_cmdloc_dummy_var_32: [ref]i8, out_cmdloc_dummy_var_33: [ref]i8, out_cmdloc_dummy_var_34: [ref]i8, out_cmdloc_dummy_var_35: [ref]i8, out_cmdloc_dummy_var_36: [ref]i8, out_cmdloc_dummy_var_37: [ref]i8, out_cmdloc_dummy_var_38: [ref]i8);
  modifies $M.1, $M.42, $CurrAddr, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22;



implementation oz_hcd_heartbeat_loop_$bb36(in_$p6: ref, in_$i115: i64, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$i123: i32, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$p127: ref, in_$i128: i8, in_$i129: i32, in_$i130: i8, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$p135: ref, in_$p137: ref, in_$p138: ref, in_$p140: ref, in_$i141: i64, in_$i142: i1, in_$p117: ref, in_$p118: ref, in_vslice_dummy_var_138: i32) returns (out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$i123: i32, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$p127: ref, out_$i128: i8, out_$i129: i32, out_$i130: i8, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$p135: ref, out_$p137: ref, out_$p138: ref, out_$p140: ref, out_$i141: i64, out_$i142: i1, out_$p117: ref, out_$p118: ref, out_vslice_dummy_var_138: i32)
{

  entry:
    out_$p119, out_$p120, out_$p121, out_$p122, out_$i123, out_$p124, out_$p125, out_$p126, out_$p127, out_$i128, out_$i129, out_$i130, out_$p132, out_$p133, out_$p134, out_$p135, out_$p137, out_$p138, out_$p140, out_$i141, out_$i142, out_$p117, out_$p118, out_vslice_dummy_var_138 := in_$p119, in_$p120, in_$p121, in_$p122, in_$i123, in_$p124, in_$p125, in_$p126, in_$p127, in_$i128, in_$i129, in_$i130, in_$p132, in_$p133, in_$p134, in_$p135, in_$p137, in_$p138, in_$p140, in_$i141, in_$i142, in_$p117, in_$p118, in_vslice_dummy_var_138;
    goto $bb36, exit;

  $bb36:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1844;

  $bb38:
    assume out_$i142 == 1;
    assume {:verifier.code 0} true;
    out_$p117, out_$p118 := out_$p118, out_$p138;
    goto $bb38_dummy;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    out_$i142 := $ne.i64(out_$i141, in_$i115);
    goto corral_source_split_1873;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    out_$i141 := $p2i.ref.i64(out_$p140);
    goto corral_source_split_1872;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(out_$p118, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1871;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    goto corral_source_split_1870;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    out_$p138 := $load.ref($M.1, out_$p137);
    goto corral_source_split_1869;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref($add.ref(out_$p118, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1868;

  SeqInstr_309:
    goto corral_source_split_1867;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} oz_complete_urb(out_$p135, out_$p120, 0);
    goto SeqInstr_308;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    out_$p135 := $load.ref($M.1, out_$p134);
    goto corral_source_split_1866;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(out_$p133, $mul.ref(0, 3344)), $mul.ref(3336, 1));
    goto corral_source_split_1865;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    out_$p133 := $load.ref($M.1, out_$p132);
    goto corral_source_split_1864;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(in_$p6, $mul.ref(0, 400)), $mul.ref(16, 1));
    goto corral_source_split_1863;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} oz_free_urb_link(out_$p117);
    goto corral_source_split_1862;

  SeqInstr_306:
    goto corral_source_split_1861;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} out_vslice_dummy_var_138 := oz_usb_send_isoc(out_$p126, out_$i130, out_$p120);
    goto SeqInstr_305;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    out_$i130 := $trunc.i32.i8(out_$i129);
    goto corral_source_split_1860;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    out_$i129 := $zext.i8.i32(out_$i128);
    goto corral_source_split_1859;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    out_$i128 := $load.i8($M.1, out_$p127);
    goto corral_source_split_1858;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref($add.ref(out_$p117, $mul.ref(0, 40)), $mul.ref(33, 1));
    goto corral_source_split_1857;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    out_$p126 := $load.ref($M.1, out_$p125);
    goto corral_source_split_1856;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref(in_$p6, $mul.ref(0, 400)), $mul.ref(8, 1));
    goto corral_source_split_1855;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p124, out_$i123);
    goto corral_source_split_1854;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(out_$p120, $mul.ref(0, 192)), $mul.ref(160, 1));
    goto corral_source_split_1853;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} out_$i123 := oz_usb_get_frame_number();
    goto corral_source_split_1852;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p122, 0);
    goto corral_source_split_1851;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(out_$p120, $mul.ref(0, 192)), $mul.ref(172, 1));
    goto corral_source_split_1850;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} list_del_init(out_$p121);
    goto corral_source_split_1849;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref(out_$p117, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1848;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    out_$p120 := $load.ref($M.1, out_$p119);
    goto corral_source_split_1847;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(out_$p117, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1846;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb38_dummy:
    call {:si_unique_call 1} out_$p119, out_$p120, out_$p121, out_$p122, out_$i123, out_$p124, out_$p125, out_$p126, out_$p127, out_$i128, out_$i129, out_$i130, out_$p132, out_$p133, out_$p134, out_$p135, out_$p137, out_$p138, out_$p140, out_$i141, out_$i142, out_$p117, out_$p118, out_vslice_dummy_var_138 := oz_hcd_heartbeat_loop_$bb36(in_$p6, in_$i115, out_$p119, out_$p120, out_$p121, out_$p122, out_$i123, out_$p124, out_$p125, out_$p126, out_$p127, out_$i128, out_$i129, out_$i130, out_$p132, out_$p133, out_$p134, out_$p135, out_$p137, out_$p138, out_$p140, out_$i141, out_$i142, out_$p117, out_$p118, out_vslice_dummy_var_138);
    return;

  exit:
    return;
}



procedure oz_hcd_heartbeat_loop_$bb36(in_$p6: ref, in_$i115: i64, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$i123: i32, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$p127: ref, in_$i128: i8, in_$i129: i32, in_$i130: i8, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$p135: ref, in_$p137: ref, in_$p138: ref, in_$p140: ref, in_$i141: i64, in_$i142: i1, in_$p117: ref, in_$p118: ref, in_vslice_dummy_var_138: i32) returns (out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$i123: i32, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$p127: ref, out_$i128: i8, out_$i129: i32, out_$i130: i8, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$p135: ref, out_$p137: ref, out_$p138: ref, out_$p140: ref, out_$i141: i64, out_$i142: i1, out_$p117: ref, out_$p118: ref, out_vslice_dummy_var_138: i32);
  modifies $M.1, $M.15, assertsPassed, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.9, $CurrAddr, $M.40, $M.39, $M.41;



implementation oz_hcd_heartbeat_loop_$bb16(in_$p1: ref, in_$p64: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i32, in_$i76: i32, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_$p81: ref, in_$i82: i32, in_$p83: ref, in_$i84: i32, in_$i85: i32, in_$p86: ref, in_$p87: ref, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$p91: ref, in_$i92: i32, in_$i93: i1, in_$p94: ref, in_$i95: i32, in_$i96: i1, in_$p22: ref) returns (out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i32, out_$i76: i32, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_$p81: ref, out_$i82: i32, out_$p83: ref, out_$i84: i32, out_$i85: i32, out_$p86: ref, out_$p87: ref, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$p91: ref, out_$i92: i32, out_$i93: i1, out_$p94: ref, out_$i95: i32, out_$i96: i1)
{

  entry:
    out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$p81, out_$i82, out_$p83, out_$i84, out_$i85, out_$p86, out_$p87, out_$i88, out_$i89, out_$p90, out_$p91, out_$i92, out_$i93, out_$p94, out_$i95, out_$i96 := in_$p69, in_$p70, in_$p71, in_$p72, in_$p73, in_$p74, in_$i75, in_$i76, in_$p77, in_$i78, in_$i79, in_$p81, in_$i82, in_$p83, in_$i84, in_$i85, in_$p86, in_$p87, in_$i88, in_$i89, in_$p90, in_$p91, in_$i92, in_$i93, in_$p94, in_$i95, in_$i96;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(in_$p22, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_1781;

  $bb25:
    assume {:verifier.code 0} true;
    assume out_$i93 == 1;
    goto $bb25_dummy;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    out_$i93 := $ne.i32(out_$i92, 0);
    goto corral_source_split_1819;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i32($M.1, in_$p64);
    goto corral_source_split_1818;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} list_move_tail(out_$p91, in_$p1);
    goto corral_source_split_1817;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(out_$p71, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1816;

  $bb23:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p90, 0);
    goto corral_source_split_1814;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(in_$p22, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1813;

  $bb22:
    assume out_$i89 == 1;
    goto corral_source_split_1812;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    out_$i89 := $slt.i32(out_$i88, 0);
    goto corral_source_split_1810;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i32($M.1, out_$p87);
    goto corral_source_split_1809;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(in_$p22, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1808;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p86, out_$i85);
    goto corral_source_split_1807;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p22, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1806;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    out_$i85 := $sub.i32(out_$i82, out_$i84);
    goto corral_source_split_1805;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    out_$i84 := $load.i32($M.1, out_$p83);
    goto corral_source_split_1804;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p73, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_1803;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i32($M.1, out_$p81);
    goto corral_source_split_1802;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(in_$p22, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1801;

  $bb19:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    out_$i79 := $slt.i32(out_$i76, out_$i78);
    goto corral_source_split_1795;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.1, out_$p77);
    goto corral_source_split_1794;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p73, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_1793;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    out_$i76 := $add.i32(out_$i75, 1);
    goto corral_source_split_1792;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i32($M.1, out_$p74);
    goto corral_source_split_1791;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p22, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1790;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    out_$p73 := $load.ref($M.1, out_$p72);
    goto corral_source_split_1789;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p71, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1788;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    out_$p71 := $bitcast.ref.ref(out_$p70);
    goto corral_source_split_1787;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.1, out_$p69);
    goto corral_source_split_1786;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref($add.ref(in_$p22, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1785;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb27:
    assume out_$i96 == 1;
    goto corral_source_split_1823;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    out_$i96 := $eq.i32(out_$i95, 0);
    goto corral_source_split_1783;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} out_$i95 := list_empty(out_$p94);
    call {:si_unique_call 343} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i95);
    goto corral_source_split_1782;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$p81, out_$i82, out_$p83, out_$i84, out_$i85, out_$p86, out_$p87, out_$i88, out_$i89, out_$p90, out_$p91, out_$i92, out_$i93, out_$p94, out_$i95, out_$i96 := oz_hcd_heartbeat_loop_$bb16(in_$p1, in_$p64, out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$p81, out_$i82, out_$p83, out_$i84, out_$i85, out_$p86, out_$p87, out_$i88, out_$i89, out_$p90, out_$p91, out_$i92, out_$i93, out_$p94, out_$i95, out_$i96, in_$p22);
    return;

  exit:
    return;
}



procedure oz_hcd_heartbeat_loop_$bb16(in_$p1: ref, in_$p64: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i32, in_$i76: i32, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_$p81: ref, in_$i82: i32, in_$p83: ref, in_$i84: i32, in_$i85: i32, in_$p86: ref, in_$p87: ref, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$p91: ref, in_$i92: i32, in_$i93: i1, in_$p94: ref, in_$i95: i32, in_$i96: i1, in_$p22: ref) returns (out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i32, out_$i76: i32, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_$p81: ref, out_$i82: i32, out_$p83: ref, out_$i84: i32, out_$i85: i32, out_$p86: ref, out_$p87: ref, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$p91: ref, out_$i92: i32, out_$i93: i1, out_$p94: ref, out_$i95: i32, out_$i96: i1);
  modifies $M.1;



implementation oz_hcd_heartbeat_loop_$bb4(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$i20: i64, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p36: ref, in_$i37: i64, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$p42: ref, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i64, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i59: i32, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i32, in_$i76: i32, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_$p81: ref, in_$i82: i32, in_$p83: ref, in_$i84: i32, in_$i85: i32, in_$p86: ref, in_$p87: ref, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$p91: ref, in_$i92: i32, in_$i93: i1, in_$p94: ref, in_$i95: i32, in_$i96: i1, in_$p67: ref, in_$p80: ref, in_$p26: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$i103: i64, in_$i104: i1, in_$p22: ref, in_cmdloc_dummy_var_18: [ref]i8, in_cmdloc_dummy_var_19: [ref]i8, in_cmdloc_dummy_var_20: [ref]i8, in_cmdloc_dummy_var_21: [ref]i8, in_cmdloc_dummy_var_22: [ref]i8, in_cmdloc_dummy_var_23: [ref]i8) returns (out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p36: ref, out_$i37: i64, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$p42: ref, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i64, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i59: i32, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i32, out_$i76: i32, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_$p81: ref, out_$i82: i32, out_$p83: ref, out_$i84: i32, out_$i85: i32, out_$p86: ref, out_$p87: ref, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$p91: ref, out_$i92: i32, out_$i93: i1, out_$p94: ref, out_$i95: i32, out_$i96: i1, out_$p67: ref, out_$p80: ref, out_$p26: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$i103: i64, out_$i104: i1, out_$p22: ref, out_cmdloc_dummy_var_18: [ref]i8, out_cmdloc_dummy_var_19: [ref]i8, out_cmdloc_dummy_var_20: [ref]i8, out_cmdloc_dummy_var_21: [ref]i8, out_cmdloc_dummy_var_22: [ref]i8, out_cmdloc_dummy_var_23: [ref]i8)
{

  entry:
    out_$p23, out_$i24, out_$i25, out_$p27, out_$p28, out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$p34, out_$i35, out_$p36, out_$i37, out_$p38, out_$p39, out_$p40, out_$i41, out_$p42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$i59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$p81, out_$i82, out_$p83, out_$i84, out_$i85, out_$p86, out_$p87, out_$i88, out_$i89, out_$p90, out_$p91, out_$i92, out_$i93, out_$p94, out_$i95, out_$i96, out_$p67, out_$p80, out_$p26, out_$p98, out_$p99, out_$p100, out_$p101, out_$p102, out_$i103, out_$i104, out_$p22, out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23 := in_$p23, in_$i24, in_$i25, in_$p27, in_$p28, in_$p29, in_$i30, in_$p31, in_$i32, in_$p33, in_$p34, in_$i35, in_$p36, in_$i37, in_$p38, in_$p39, in_$p40, in_$i41, in_$p42, in_$i43, in_$p44, in_$p45, in_$i46, in_$i47, in_$p48, in_$i49, in_$i50, in_$i51, in_$p52, in_$p53, in_$i54, in_$p55, in_$i56, in_$i57, in_$p58, in_$i59, in_$p60, in_$p61, in_$p62, in_$p63, in_$p64, in_$i65, in_$i66, in_$p69, in_$p70, in_$p71, in_$p72, in_$p73, in_$p74, in_$i75, in_$i76, in_$p77, in_$i78, in_$i79, in_$p81, in_$i82, in_$p83, in_$i84, in_$i85, in_$p86, in_$p87, in_$i88, in_$i89, in_$p90, in_$p91, in_$i92, in_$i93, in_$p94, in_$i95, in_$i96, in_$p67, in_$p80, in_$p26, in_$p98, in_$p99, in_$p100, in_$p101, in_$p102, in_$i103, in_$i104, in_$p22, in_cmdloc_dummy_var_18, in_cmdloc_dummy_var_19, in_cmdloc_dummy_var_20, in_cmdloc_dummy_var_21, in_cmdloc_dummy_var_22, in_cmdloc_dummy_var_23;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1712;

  $bb30:
    assume out_$i104 == 1;
    assume {:verifier.code 0} true;
    out_$p22 := out_$p101;
    goto $bb30_dummy;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    out_$i104 := $ne.i64(out_$i103, in_$i20);
    goto corral_source_split_1727;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    out_$i103 := $p2i.ref.i64(out_$p102);
    goto corral_source_split_1726;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(out_$p100, $mul.ref($sub.ref(0, 16), 96)), $mul.ref(16, 1));
    goto corral_source_split_1725;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref(out_$p100, $mul.ref($sub.ref(0, 16), 96));
    goto corral_source_split_1724;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    out_$p100 := $bitcast.ref.ref(out_$p99);
    goto corral_source_split_1723;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    out_$p99 := $load.ref($M.1, out_$p98);
    goto corral_source_split_1722;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref($add.ref(out_$p26, $mul.ref(0, 96)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1721;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1720;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    out_$p26 := out_$p80;
    goto $bb8;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    out_$p26 := out_$p22;
    goto $bb8;

  $bb6:
    assume out_$i25 == 1;
    goto corral_source_split_1718;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i24, 0);
    goto corral_source_split_1716;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.1, out_$p23);
    goto corral_source_split_1715;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p22, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1714;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_1799;

  $bb29:
    assume {:verifier.code 0} true;
    out_$p80 := out_$p67;
    goto $bb20;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    out_$p80 := out_$p22;
    goto $bb20;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    out_$p80 := out_$p22;
    goto $bb20;

  $bb18:
    assume out_$i79 == 1;
    goto corral_source_split_1797;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    out_$i79 := $slt.i32(out_$i76, out_$i78);
    goto corral_source_split_1795;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.1, out_$p77);
    goto corral_source_split_1794;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p73, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_1793;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    out_$i76 := $add.i32(out_$i75, 1);
    goto corral_source_split_1792;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i32($M.1, out_$p74);
    goto corral_source_split_1791;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p22, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1790;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    out_$p73 := $load.ref($M.1, out_$p72);
    goto corral_source_split_1789;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p71, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1788;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    out_$p71 := $bitcast.ref.ref(out_$p70);
    goto corral_source_split_1787;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.1, out_$p69);
    goto corral_source_split_1786;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref($add.ref(out_$p22, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1785;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb27:
    assume out_$i96 == 1;
    goto corral_source_split_1823;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    out_$i96 := $eq.i32(out_$i95, 0);
    goto corral_source_split_1783;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} out_$i95 := list_empty(out_$p94);
    call {:si_unique_call 343} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i95);
    goto corral_source_split_1782;

  $bb16:
    call out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$p81, out_$i82, out_$p83, out_$i84, out_$i85, out_$p86, out_$p87, out_$i88, out_$i89, out_$p90, out_$p91, out_$i92, out_$i93, out_$p94, out_$i95, out_$i96 := oz_hcd_heartbeat_loop_$bb16(in_$p1, out_$p64, out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$p81, out_$i82, out_$p83, out_$i84, out_$i85, out_$p86, out_$p87, out_$i88, out_$i89, out_$p90, out_$p91, out_$i92, out_$i93, out_$p94, out_$i95, out_$i96, out_$p22);
    goto $bb16_last;

  $bb16_last:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(out_$p22, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_1781;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb25:
    assume {:verifier.code 0} true;
    assume out_$i93 == 1;
    assume false;
    return;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    out_$i93 := $ne.i32(out_$i92, 0);
    goto corral_source_split_1819;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i32($M.1, out_$p64);
    goto corral_source_split_1818;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} list_move_tail(out_$p91, in_$p1);
    goto corral_source_split_1817;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(out_$p71, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1816;

  $bb23:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p90, 0);
    goto corral_source_split_1814;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p22, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1813;

  $bb22:
    assume out_$i89 == 1;
    goto corral_source_split_1812;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    out_$i89 := $slt.i32(out_$i88, 0);
    goto corral_source_split_1810;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i32($M.1, out_$p87);
    goto corral_source_split_1809;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p22, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1808;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p86, out_$i85);
    goto corral_source_split_1807;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(out_$p22, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1806;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    out_$i85 := $sub.i32(out_$i82, out_$i84);
    goto corral_source_split_1805;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    out_$i84 := $load.i32($M.1, out_$p83);
    goto corral_source_split_1804;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p73, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_1803;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i32($M.1, out_$p81);
    goto corral_source_split_1802;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(out_$p22, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1801;

  $bb19:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb13:
    assume out_$i66 == 1;
    goto corral_source_split_1779;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    out_$p67 := out_$p22;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i32(out_$i65, 0);
    goto corral_source_split_1777;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.1, out_$p64);
    goto corral_source_split_1776;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p22, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1775;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_21 := $M.1;
    out_cmdloc_dummy_var_22 := $M.1;
    call {:si_unique_call 341} out_cmdloc_dummy_var_23 := $memcpy.i8(out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_$p62, out_$p63, 16, $zext.i32.i64(8), 0 == 1);
    $M.1 := out_cmdloc_dummy_var_23;
    goto corral_source_split_1774;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    out_$p63 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_1773;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    out_$p62 := $bitcast.ref.ref(out_$p61);
    goto corral_source_split_1772;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p22, $mul.ref(0, 96)), $mul.ref(32, 1));
    goto corral_source_split_1771;

  $bb11:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p60, out_$i59);
    goto corral_source_split_1769;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p22, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1768;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.1, out_$p58);
    goto corral_source_split_1767;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p22, $mul.ref(0, 96)), $mul.ref(52, 1));
    goto corral_source_split_1766;

  $bb10:
    assume out_$i57 == 1;
    goto corral_source_split_1765;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    out_$i57 := $sgt.i32(out_$i54, out_$i56);
    goto corral_source_split_1763;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i32($M.1, out_$p55);
    goto corral_source_split_1762;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p22, $mul.ref(0, 96)), $mul.ref(52, 1));
    goto corral_source_split_1761;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.1, out_$p53);
    goto corral_source_split_1760;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p22, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1759;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p52, out_$i51);
    goto corral_source_split_1758;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p22, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1757;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    out_$i51 := $add.i32(out_$i49, out_$i50);
    goto corral_source_split_1756;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    out_$i50 := $trunc.i64.i32(out_$i47);
    goto corral_source_split_1755;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i32($M.1, out_$p48);
    goto corral_source_split_1754;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p22, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1753;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} out_$i47 := div_u64(out_$i46, 1000000);
    call {:si_unique_call 340} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i47);
    goto corral_source_split_1752;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} out_$i46 := timespec_to_ns(in_$p3);
    call {:si_unique_call 338} {:cexpr "tmp"} boogie_si_record_i64(out_$i46);
    goto corral_source_split_1751;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_18 := $M.17;
    out_cmdloc_dummy_var_19 := $M.17;
    call {:si_unique_call 336} out_cmdloc_dummy_var_20 := $memcpy.i8(out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_$p44, out_$p45, 16, $zext.i32.i64(8), 0 == 1);
    $M.17 := out_cmdloc_dummy_var_20;
    goto corral_source_split_1750;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_1749;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    out_$p44 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_1748;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, out_$p42, out_$i43);
    goto corral_source_split_1747;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    out_$i43 := $extractvalue(out_$p38, 1);
    goto corral_source_split_1746;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p39, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1745;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $M.17 := $store.i64($M.17, out_$p40, out_$i41);
    goto corral_source_split_1744;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    out_$i41 := $extractvalue(out_$p38, 0);
    goto corral_source_split_1743;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p39, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1742;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    out_$p39 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_1741;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} out_$p38 := timespec_sub(out_$i30, out_$i32, out_$i35, out_$i37);
    goto corral_source_split_1740;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i64($M.1, out_$p36);
    goto corral_source_split_1739;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p33, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1738;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i64($M.1, out_$p34);
    goto corral_source_split_1737;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p33, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1736;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    out_$p33 := $bitcast.ref.ref(out_$p27);
    goto corral_source_split_1735;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i64($M.1, out_$p31);
    goto corral_source_split_1734;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p28, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1733;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i64($M.1, out_$p29);
    goto corral_source_split_1732;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p28, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1731;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_1730;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p22, $mul.ref(0, 96)), $mul.ref(32, 1));
    goto corral_source_split_1729;

  $bb7:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb28:
    assume !(out_$i96 == 1);
    goto corral_source_split_1825;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i66 == 1);
    goto $bb15;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    out_$p67 := out_$p22;
    goto $bb15;

  $bb26:
    assume !(out_$i93 == 1);
    goto corral_source_split_1821;

  $bb30_dummy:
    call {:si_unique_call 1} out_$p23, out_$i24, out_$i25, out_$p27, out_$p28, out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$p34, out_$i35, out_$p36, out_$i37, out_$p38, out_$p39, out_$p40, out_$i41, out_$p42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$i59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$p81, out_$i82, out_$p83, out_$i84, out_$i85, out_$p86, out_$p87, out_$i88, out_$i89, out_$p90, out_$p91, out_$i92, out_$i93, out_$p94, out_$i95, out_$i96, out_$p67, out_$p80, out_$p26, out_$p98, out_$p99, out_$p100, out_$p101, out_$p102, out_$i103, out_$i104, out_$p22, out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23 := oz_hcd_heartbeat_loop_$bb4(in_$p1, in_$p2, in_$p3, in_$p4, in_$i20, out_$p23, out_$i24, out_$i25, out_$p27, out_$p28, out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$p34, out_$i35, out_$p36, out_$i37, out_$p38, out_$p39, out_$p40, out_$i41, out_$p42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$i59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$p81, out_$i82, out_$p83, out_$i84, out_$i85, out_$p86, out_$p87, out_$i88, out_$i89, out_$p90, out_$p91, out_$i92, out_$i93, out_$p94, out_$i95, out_$i96, out_$p67, out_$p80, out_$p26, out_$p98, out_$p99, out_$p100, out_$p101, out_$p102, out_$i103, out_$i104, out_$p22, out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23);
    return;

  exit:
    return;
}



procedure oz_hcd_heartbeat_loop_$bb4(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$i20: i64, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p36: ref, in_$i37: i64, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$p42: ref, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i64, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i59: i32, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i32, in_$i76: i32, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_$p81: ref, in_$i82: i32, in_$p83: ref, in_$i84: i32, in_$i85: i32, in_$p86: ref, in_$p87: ref, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$p91: ref, in_$i92: i32, in_$i93: i1, in_$p94: ref, in_$i95: i32, in_$i96: i1, in_$p67: ref, in_$p80: ref, in_$p26: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$i103: i64, in_$i104: i1, in_$p22: ref, in_cmdloc_dummy_var_18: [ref]i8, in_cmdloc_dummy_var_19: [ref]i8, in_cmdloc_dummy_var_20: [ref]i8, in_cmdloc_dummy_var_21: [ref]i8, in_cmdloc_dummy_var_22: [ref]i8, in_cmdloc_dummy_var_23: [ref]i8) returns (out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p36: ref, out_$i37: i64, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$p42: ref, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i64, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i59: i32, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i32, out_$i76: i32, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_$p81: ref, out_$i82: i32, out_$p83: ref, out_$i84: i32, out_$i85: i32, out_$p86: ref, out_$p87: ref, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$p91: ref, out_$i92: i32, out_$i93: i1, out_$p94: ref, out_$i95: i32, out_$i96: i1, out_$p67: ref, out_$p80: ref, out_$p26: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$i103: i64, out_$i104: i1, out_$p22: ref, out_cmdloc_dummy_var_18: [ref]i8, out_cmdloc_dummy_var_19: [ref]i8, out_cmdloc_dummy_var_20: [ref]i8, out_cmdloc_dummy_var_21: [ref]i8, out_cmdloc_dummy_var_22: [ref]i8, out_cmdloc_dummy_var_23: [ref]i8);
  modifies $M.1, $M.42, $CurrAddr, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22;



implementation oz_usb_send_isoc_loop_$bb24(in_$p2: ref, in_$i53: i32, in_$p60: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$p74: ref, in_$i75: i32, in_$i76: i1, in_$p80: ref, in_$i81: i32, in_$i82: i1, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$i87: i64, in_$p88: ref, in_$i89: i64, in_$i90: i64, in_$p91: ref, in_$i92: i32, in_$i93: i32, in_$p94: ref, in_$p95: ref, in_$i96: i32, in_$p97: ref, in_$i98: i32, in_$i77: i32, in_$i78: i32, in_$i79: i32, in_$i102: i32, in_$i103: i1, in_$i66: i32, in_$i67: i32, in_$p68: ref, in_$i69: i32, in_$i104: i32, in_$i105: i32, in_$i106: i32, in_cmdloc_dummy_var_42: [ref]i8, in_cmdloc_dummy_var_43: [ref]i8, in_cmdloc_dummy_var_44: [ref]i8) returns (out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$p74: ref, out_$i75: i32, out_$i76: i1, out_$p80: ref, out_$i81: i32, out_$i82: i1, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$i87: i64, out_$p88: ref, out_$i89: i64, out_$i90: i64, out_$p91: ref, out_$i92: i32, out_$i93: i32, out_$p94: ref, out_$p95: ref, out_$i96: i32, out_$p97: ref, out_$i98: i32, out_$i77: i32, out_$i78: i32, out_$i79: i32, out_$i102: i32, out_$i103: i1, out_$i66: i32, out_$i67: i32, out_$p68: ref, out_$i69: i32, out_$i104: i32, out_$i105: i32, out_$i106: i32, out_cmdloc_dummy_var_42: [ref]i8, out_cmdloc_dummy_var_43: [ref]i8, out_cmdloc_dummy_var_44: [ref]i8)
{

  entry:
    out_$p70, out_$p71, out_$i72, out_$p74, out_$i75, out_$i76, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$i96, out_$p97, out_$i98, out_$i77, out_$i78, out_$i79, out_$i102, out_$i103, out_$i66, out_$i67, out_$p68, out_$i69, out_$i104, out_$i105, out_$i106, out_cmdloc_dummy_var_42, out_cmdloc_dummy_var_43, out_cmdloc_dummy_var_44 := in_$p70, in_$p71, in_$i72, in_$p74, in_$i75, in_$i76, in_$p80, in_$i81, in_$i82, in_$p83, in_$p84, in_$p85, in_$i86, in_$i87, in_$p88, in_$i89, in_$i90, in_$p91, in_$i92, in_$i93, in_$p94, in_$p95, in_$i96, in_$p97, in_$i98, in_$i77, in_$i78, in_$i79, in_$i102, in_$i103, in_$i66, in_$i67, in_$p68, in_$i69, in_$i104, in_$i105, in_$i106, in_cmdloc_dummy_var_42, in_cmdloc_dummy_var_43, in_cmdloc_dummy_var_44;
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2403;

  $bb33:
    assume out_$i103 == 1;
    assume {:verifier.code 0} true;
    out_$i66, out_$i67, out_$p68, out_$i69 := out_$i92, out_$i93, out_$p91, out_$i98;
    goto $bb33_dummy;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    out_$i104, out_$i105, out_$i106 := out_$i98, out_$i93, out_$i92;
    assume true;
    goto $bb33;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    out_$i103 := $slt.i32(out_$i98, out_$i102);
    goto corral_source_split_2442;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i32($M.1, in_$p60);
    goto corral_source_split_2441;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    out_$i98 := $add.i32(out_$i69, 1);
    call {:si_unique_call 405} {:cexpr "i"} boogie_si_record_i32(out_$i98);
    goto corral_source_split_2439;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p97, out_$i96);
    goto corral_source_split_2438;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(out_$p71, $mul.ref(out_$i72, 16)), $mul.ref(8, 1));
    goto corral_source_split_2437;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i32($M.1, out_$p95);
    goto corral_source_split_2436;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(out_$p71, $mul.ref(out_$i72, 16)), $mul.ref(4, 1));
    goto corral_source_split_2435;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p94, 0);
    goto corral_source_split_2434;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(out_$p71, $mul.ref(out_$i72, 16)), $mul.ref(12, 1));
    goto corral_source_split_2433;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    out_$i93 := $add.i32(out_$i67, 1);
    call {:si_unique_call 404} {:cexpr "unit_count"} boogie_si_record_i32(out_$i93);
    goto corral_source_split_2432;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    out_$i92 := $sub.i32(out_$i66, in_$i53);
    call {:si_unique_call 403} {:cexpr "rem"} boogie_si_record_i32(out_$i92);
    goto corral_source_split_2431;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref(out_$p68, $mul.ref(out_$i90, 1));
    goto corral_source_split_2430;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    out_$i90 := $sext.i32.i64(in_$i53);
    goto corral_source_split_2429;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_42 := $M.1;
    out_cmdloc_dummy_var_43 := $M.1;
    call {:si_unique_call 402} out_cmdloc_dummy_var_44 := $memcpy.i8(out_cmdloc_dummy_var_42, out_cmdloc_dummy_var_43, out_$p68, out_$p88, out_$i89, $zext.i32.i64(1), 0 == 1);
    $M.1 := out_cmdloc_dummy_var_44;
    goto corral_source_split_2428;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    out_$i89 := $sext.i32.i64(in_$i53);
    goto corral_source_split_2427;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref(out_$p84, $mul.ref(out_$i87, 1));
    goto corral_source_split_2426;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    out_$i87 := $zext.i32.i64(out_$i86);
    goto corral_source_split_2425;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i32($M.1, out_$p85);
    goto corral_source_split_2424;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p71, $mul.ref(out_$i72, 16)), $mul.ref(0, 1));
    goto corral_source_split_2423;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    out_$p84 := $load.ref($M.1, out_$p83);
    goto corral_source_split_2422;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p2, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2421;

  $bb29:
    assume out_$i82 == 1;
    goto corral_source_split_2420;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    out_$i77, out_$i78, out_$i79 := out_$i69, out_$i67, out_$i66;
    assume true;
    goto $bb29;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    out_$i82 := $ule.i32(out_$i81, out_$i66);
    goto corral_source_split_2416;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i32($M.1, out_$p80);
    goto corral_source_split_2415;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p71, $mul.ref(out_$i72, 16)), $mul.ref(4, 1));
    goto corral_source_split_2414;

  $bb26:
    assume out_$i76 == 1;
    goto corral_source_split_2413;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    out_$i77, out_$i78, out_$i79 := out_$i69, out_$i67, out_$i66;
    assume true;
    goto $bb26;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i32(in_$i53, out_$i75);
    goto corral_source_split_2411;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i32($M.1, out_$p74);
    goto corral_source_split_2410;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p71, $mul.ref(out_$i72, 16)), $mul.ref(4, 1));
    goto corral_source_split_2409;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    goto corral_source_split_2408;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    out_$i72 := $sext.i32.i64(out_$i69);
    goto corral_source_split_2407;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    out_$p71 := $bitcast.ref.ref(out_$p70);
    goto corral_source_split_2406;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p2, $mul.ref(0, 192)), $mul.ref(192, 1));
    goto corral_source_split_2405;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb33_dummy:
    call {:si_unique_call 1} out_$p70, out_$p71, out_$i72, out_$p74, out_$i75, out_$i76, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$i96, out_$p97, out_$i98, out_$i77, out_$i78, out_$i79, out_$i102, out_$i103, out_$i66, out_$i67, out_$p68, out_$i69, out_$i104, out_$i105, out_$i106, out_cmdloc_dummy_var_42, out_cmdloc_dummy_var_43, out_cmdloc_dummy_var_44 := oz_usb_send_isoc_loop_$bb24(in_$p2, in_$i53, in_$p60, out_$p70, out_$p71, out_$i72, out_$p74, out_$i75, out_$i76, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$i96, out_$p97, out_$i98, out_$i77, out_$i78, out_$i79, out_$i102, out_$i103, out_$i66, out_$i67, out_$p68, out_$i69, out_$i104, out_$i105, out_$i106, out_cmdloc_dummy_var_42, out_cmdloc_dummy_var_43, out_cmdloc_dummy_var_44);
    return;

  exit:
    return;
}



procedure oz_usb_send_isoc_loop_$bb24(in_$p2: ref, in_$i53: i32, in_$p60: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$p74: ref, in_$i75: i32, in_$i76: i1, in_$p80: ref, in_$i81: i32, in_$i82: i1, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$i87: i64, in_$p88: ref, in_$i89: i64, in_$i90: i64, in_$p91: ref, in_$i92: i32, in_$i93: i32, in_$p94: ref, in_$p95: ref, in_$i96: i32, in_$p97: ref, in_$i98: i32, in_$i77: i32, in_$i78: i32, in_$i79: i32, in_$i102: i32, in_$i103: i1, in_$i66: i32, in_$i67: i32, in_$p68: ref, in_$i69: i32, in_$i104: i32, in_$i105: i32, in_$i106: i32, in_cmdloc_dummy_var_42: [ref]i8, in_cmdloc_dummy_var_43: [ref]i8, in_cmdloc_dummy_var_44: [ref]i8) returns (out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$p74: ref, out_$i75: i32, out_$i76: i1, out_$p80: ref, out_$i81: i32, out_$i82: i1, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$i87: i64, out_$p88: ref, out_$i89: i64, out_$i90: i64, out_$p91: ref, out_$i92: i32, out_$i93: i32, out_$p94: ref, out_$p95: ref, out_$i96: i32, out_$p97: ref, out_$i98: i32, out_$i77: i32, out_$i78: i32, out_$i79: i32, out_$i102: i32, out_$i103: i1, out_$i66: i32, out_$i67: i32, out_$p68: ref, out_$i69: i32, out_$i104: i32, out_$i105: i32, out_$i106: i32, out_cmdloc_dummy_var_42: [ref]i8, out_cmdloc_dummy_var_43: [ref]i8, out_cmdloc_dummy_var_44: [ref]i8);
  modifies $M.1;



implementation oz_usb_send_isoc_loop_$bb16(in_$i1: i8, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$p34: ref, in_$p35: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$p52: ref, in_$i53: i32, in_$i54: i8, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i64, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$p74: ref, in_$i75: i32, in_$i76: i1, in_$p80: ref, in_$i81: i32, in_$i82: i1, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$i87: i64, in_$p88: ref, in_$i89: i64, in_$i90: i64, in_$p91: ref, in_$i92: i32, in_$i93: i32, in_$p94: ref, in_$p95: ref, in_$i96: i32, in_$p97: ref, in_$i98: i32, in_$i77: i32, in_$i78: i32, in_$i79: i32, in_$i102: i32, in_$i103: i1, in_$i66: i32, in_$i67: i32, in_$p68: ref, in_$i69: i32, in_$i104: i32, in_$i105: i32, in_$i106: i32, in_$i63: i32, in_$i64: i32, in_$i65: i32, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i107: i8, in_$i108: i32, in_$i109: i8, in_$i110: i32, in_$i111: i32, in_$i112: i32, in_$i113: i8, in_$p114: ref, in_$i115: i8, in_$p116: ref, in_$i117: i32, in_$i118: i8, in_$p119: ref, in_$i120: i8, in_$i121: i32, in_$i122: i32, in_$i123: i8, in_$i125: i32, in_$i126: i1, in_$i38: i32, in_cmdloc_dummy_var_42: [ref]i8, in_cmdloc_dummy_var_43: [ref]i8, in_cmdloc_dummy_var_44: [ref]i8, in_vslice_dummy_var_140: i32) returns (out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$p52: ref, out_$i53: i32, out_$i54: i8, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i64, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$p74: ref, out_$i75: i32, out_$i76: i1, out_$p80: ref, out_$i81: i32, out_$i82: i1, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$i87: i64, out_$p88: ref, out_$i89: i64, out_$i90: i64, out_$p91: ref, out_$i92: i32, out_$i93: i32, out_$p94: ref, out_$p95: ref, out_$i96: i32, out_$p97: ref, out_$i98: i32, out_$i77: i32, out_$i78: i32, out_$i79: i32, out_$i102: i32, out_$i103: i1, out_$i66: i32, out_$i67: i32, out_$p68: ref, out_$i69: i32, out_$i104: i32, out_$i105: i32, out_$i106: i32, out_$i63: i32, out_$i64: i32, out_$i65: i32, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$i107: i8, out_$i108: i32, out_$i109: i8, out_$i110: i32, out_$i111: i32, out_$i112: i32, out_$i113: i8, out_$p114: ref, out_$i115: i8, out_$p116: ref, out_$i117: i32, out_$i118: i8, out_$p119: ref, out_$i120: i8, out_$i121: i32, out_$i122: i32, out_$i123: i8, out_$i125: i32, out_$i126: i1, out_$i38: i32, out_cmdloc_dummy_var_42: [ref]i8, out_cmdloc_dummy_var_43: [ref]i8, out_cmdloc_dummy_var_44: [ref]i8, out_vslice_dummy_var_140: i32)
{

  entry:
    out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p46, out_$p47, out_$p48, out_$i49, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p70, out_$p71, out_$i72, out_$p74, out_$i75, out_$i76, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$i96, out_$p97, out_$i98, out_$i77, out_$i78, out_$i79, out_$i102, out_$i103, out_$i66, out_$i67, out_$p68, out_$i69, out_$i104, out_$i105, out_$i106, out_$i63, out_$i64, out_$i65, out_$i99, out_$i100, out_$i101, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$p114, out_$i115, out_$p116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i125, out_$i126, out_$i38, out_cmdloc_dummy_var_42, out_cmdloc_dummy_var_43, out_cmdloc_dummy_var_44, out_vslice_dummy_var_140 := in_$p39, in_$i40, in_$i41, in_$p42, in_$p43, in_$p44, in_$p46, in_$p47, in_$p48, in_$i49, in_$p52, in_$i53, in_$i54, in_$p55, in_$p56, in_$i57, in_$i58, in_$p59, in_$p60, in_$i61, in_$i62, in_$p70, in_$p71, in_$i72, in_$p74, in_$i75, in_$i76, in_$p80, in_$i81, in_$i82, in_$p83, in_$p84, in_$p85, in_$i86, in_$i87, in_$p88, in_$i89, in_$i90, in_$p91, in_$i92, in_$i93, in_$p94, in_$p95, in_$i96, in_$p97, in_$i98, in_$i77, in_$i78, in_$i79, in_$i102, in_$i103, in_$i66, in_$i67, in_$p68, in_$i69, in_$i104, in_$i105, in_$i106, in_$i63, in_$i64, in_$i65, in_$i99, in_$i100, in_$i101, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$p114, in_$i115, in_$p116, in_$i117, in_$i118, in_$p119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i125, in_$i126, in_$i38, in_cmdloc_dummy_var_42, in_cmdloc_dummy_var_43, in_cmdloc_dummy_var_44, in_vslice_dummy_var_140;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2369;

  $bb36:
    assume out_$i126 == 1;
    assume {:verifier.code 0} true;
    out_$i38 := out_$i99;
    goto $bb36_dummy;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    out_$i126 := $slt.i32(out_$i99, out_$i125);
    goto corral_source_split_2466;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    out_$i125 := $load.i32($M.1, in_$p35);
    goto corral_source_split_2465;

  SeqInstr_336:
    goto corral_source_split_2464;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} out_vslice_dummy_var_140 := oz_usb_submit_elt(in_$p34, out_$p39, in_$p3, out_$i118, out_$i123);
    goto SeqInstr_335;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    out_$i123 := $trunc.i32.i8(out_$i122);
    goto corral_source_split_2463;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    out_$i122 := $and.i32(out_$i121, 128);
    goto corral_source_split_2462;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    out_$i121 := $zext.i8.i32(out_$i120);
    goto corral_source_split_2461;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    out_$i120 := $load.i8($M.1, out_$p119);
    goto corral_source_split_2460;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1232)), $mul.ref(644, 1));
    goto corral_source_split_2459;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    out_$i118 := $trunc.i32.i8(out_$i117);
    goto corral_source_split_2458;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    out_$i117 := $zext.i8.i32(in_$i1);
    goto corral_source_split_2457;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p116, out_$i115);
    goto corral_source_split_2456;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(out_$p44, $mul.ref(1, 8)), $mul.ref(6, 1));
    goto corral_source_split_2455;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    out_$i115 := $trunc.i32.i8(out_$i100);
    goto corral_source_split_2454;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p114, out_$i113);
    goto corral_source_split_2453;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(out_$p43, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_2452;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    out_$i113 := $trunc.i32.i8(out_$i112);
    goto corral_source_split_2451;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    out_$i112 := $add.i32(out_$i111, 245);
    goto corral_source_split_2450;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    out_$i111 := $sub.i32(out_$i108, out_$i110);
    goto corral_source_split_2449;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    out_$i110 := $zext.i8.i32(out_$i109);
    goto corral_source_split_2448;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    out_$i109 := $trunc.i32.i8(out_$i101);
    goto corral_source_split_2447;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    out_$i108 := $zext.i8.i32(out_$i107);
    goto corral_source_split_2446;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    out_$i107 := $trunc.i32.i8(7);
    goto corral_source_split_2445;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2444;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i99, out_$i100, out_$i101 := out_$i63, out_$i64, out_$i65;
    goto $bb32;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    out_$i99, out_$i100, out_$i101 := out_$i77, out_$i78, out_$i79;
    goto $bb32;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2418;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i76 == 1);
    goto $bb28;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(out_$i82 == 1);
    goto $bb28;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    out_$i77, out_$i78, out_$i79 := out_$i69, out_$i67, out_$i66;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    out_$i82 := $ule.i32(out_$i81, out_$i66);
    goto corral_source_split_2416;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i32($M.1, out_$p80);
    goto corral_source_split_2415;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p71, $mul.ref(out_$i72, 16)), $mul.ref(4, 1));
    goto corral_source_split_2414;

  $bb26:
    assume out_$i76 == 1;
    goto corral_source_split_2413;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    out_$i77, out_$i78, out_$i79 := out_$i69, out_$i67, out_$i66;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i32(out_$i53, out_$i75);
    goto corral_source_split_2411;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i32($M.1, out_$p74);
    goto corral_source_split_2410;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p71, $mul.ref(out_$i72, 16)), $mul.ref(4, 1));
    goto corral_source_split_2409;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    goto corral_source_split_2408;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    out_$i72 := $sext.i32.i64(out_$i69);
    goto corral_source_split_2407;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    out_$p71 := $bitcast.ref.ref(out_$p70);
    goto corral_source_split_2406;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p2, $mul.ref(0, 192)), $mul.ref(192, 1));
    goto corral_source_split_2405;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb24:
    call out_$p70, out_$p71, out_$i72, out_$p74, out_$i75, out_$i76, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$i96, out_$p97, out_$i98, out_$i77, out_$i78, out_$i79, out_$i102, out_$i103, out_$i66, out_$i67, out_$p68, out_$i69, out_$i104, out_$i105, out_$i106, out_cmdloc_dummy_var_42, out_cmdloc_dummy_var_43, out_cmdloc_dummy_var_44 := oz_usb_send_isoc_loop_$bb24(in_$p2, out_$i53, out_$p60, out_$p70, out_$p71, out_$i72, out_$p74, out_$i75, out_$i76, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$i96, out_$p97, out_$i98, out_$i77, out_$i78, out_$i79, out_$i102, out_$i103, out_$i66, out_$i67, out_$p68, out_$i69, out_$i104, out_$i105, out_$i106, out_cmdloc_dummy_var_42, out_cmdloc_dummy_var_43, out_cmdloc_dummy_var_44);
    goto $bb24_last;

  $bb24_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2403;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    out_$i66, out_$i67, out_$p68, out_$i69 := 245, 0, out_$p59, out_$i38;
    goto $bb24;

  $bb33:
    assume out_$i103 == 1;
    assume {:verifier.code 0} true;
    out_$i66, out_$i67, out_$p68, out_$i69 := out_$i92, out_$i93, out_$p91, out_$i98;
    assume false;
    return;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    out_$i104, out_$i105, out_$i106 := out_$i98, out_$i93, out_$i92;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    out_$i103 := $slt.i32(out_$i98, out_$i102);
    goto corral_source_split_2442;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i32($M.1, out_$p60);
    goto corral_source_split_2441;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    out_$i98 := $add.i32(out_$i69, 1);
    call {:si_unique_call 405} {:cexpr "i"} boogie_si_record_i32(out_$i98);
    goto corral_source_split_2439;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p97, out_$i96);
    goto corral_source_split_2438;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(out_$p71, $mul.ref(out_$i72, 16)), $mul.ref(8, 1));
    goto corral_source_split_2437;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i32($M.1, out_$p95);
    goto corral_source_split_2436;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(out_$p71, $mul.ref(out_$i72, 16)), $mul.ref(4, 1));
    goto corral_source_split_2435;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p94, 0);
    goto corral_source_split_2434;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(out_$p71, $mul.ref(out_$i72, 16)), $mul.ref(12, 1));
    goto corral_source_split_2433;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    out_$i93 := $add.i32(out_$i67, 1);
    call {:si_unique_call 404} {:cexpr "unit_count"} boogie_si_record_i32(out_$i93);
    goto corral_source_split_2432;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    out_$i92 := $sub.i32(out_$i66, out_$i53);
    call {:si_unique_call 403} {:cexpr "rem"} boogie_si_record_i32(out_$i92);
    goto corral_source_split_2431;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref(out_$p68, $mul.ref(out_$i90, 1));
    goto corral_source_split_2430;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    out_$i90 := $sext.i32.i64(out_$i53);
    goto corral_source_split_2429;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_42 := $M.1;
    out_cmdloc_dummy_var_43 := $M.1;
    call {:si_unique_call 402} out_cmdloc_dummy_var_44 := $memcpy.i8(out_cmdloc_dummy_var_42, out_cmdloc_dummy_var_43, out_$p68, out_$p88, out_$i89, $zext.i32.i64(1), 0 == 1);
    $M.1 := out_cmdloc_dummy_var_44;
    goto corral_source_split_2428;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    out_$i89 := $sext.i32.i64(out_$i53);
    goto corral_source_split_2427;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref(out_$p84, $mul.ref(out_$i87, 1));
    goto corral_source_split_2426;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    out_$i87 := $zext.i32.i64(out_$i86);
    goto corral_source_split_2425;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i32($M.1, out_$p85);
    goto corral_source_split_2424;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p71, $mul.ref(out_$i72, 16)), $mul.ref(0, 1));
    goto corral_source_split_2423;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    out_$p84 := $load.ref($M.1, out_$p83);
    goto corral_source_split_2422;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p2, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2421;

  $bb29:
    assume out_$i82 == 1;
    goto corral_source_split_2420;

  $bb21:
    assume out_$i62 == 1;
    goto corral_source_split_2401;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    out_$i63, out_$i64, out_$i65 := out_$i38, 0, 245;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    out_$i62 := $slt.i32(out_$i38, out_$i61);
    goto corral_source_split_2399;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.1, out_$p60);
    goto corral_source_split_2398;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p2, $mul.ref(0, 192)), $mul.ref(164, 1));
    goto corral_source_split_2397;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref(out_$p56, $mul.ref(out_$i58, 1));
    goto corral_source_split_2396;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i64(out_$i57, 1);
    goto corral_source_split_2395;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    out_$i57 := $sext.i32.i64(7);
    goto corral_source_split_2394;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    out_$p56 := $bitcast.ref.ref(out_$p43);
    goto corral_source_split_2393;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p55, out_$i54);
    goto corral_source_split_2392;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p44, $mul.ref(1, 8)), $mul.ref(5, 1));
    goto corral_source_split_2391;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    out_$i54 := $trunc.i32.i8(out_$i53);
    goto corral_source_split_2390;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.1, out_$p52);
    call {:si_unique_call 401} {:cexpr "unit_size"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_2389;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 192)), $mul.ref(192, 1)), $mul.ref(out_$i49, 16)), $mul.ref(4, 1));
    goto corral_source_split_2388;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    out_$i49 := $sext.i32.i64(out_$i38);
    goto corral_source_split_2387;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p48, 3);
    goto corral_source_split_2386;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p44, $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_2385;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p47, in_$i1);
    goto corral_source_split_2384;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p44, $mul.ref(1, 8)), $mul.ref(3, 1));
    goto corral_source_split_2383;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p46, 23);
    goto corral_source_split_2382;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p44, $mul.ref(1, 8)), $mul.ref(2, 1));
    goto corral_source_split_2381;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    goto corral_source_split_2380;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    out_$p44 := $bitcast.ref.ref(out_$p43);
    goto corral_source_split_2379;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(out_$p42);
    goto corral_source_split_2378;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p39, $mul.ref(0, 328)), $mul.ref(64, 1));
    goto corral_source_split_2377;

  $bb19:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i64(out_$i40, 0);
    goto corral_source_split_2373;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    out_$i40 := $p2i.ref.i64(out_$p39);
    goto corral_source_split_2372;

  SeqInstr_333:
    goto corral_source_split_2371;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} out_$p39 := oz_elt_info_alloc(in_$p34);
    goto SeqInstr_332;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb22:
    assume {:verifier.code 0} true;
    assume !(out_$i62 == 1);
    goto $bb23;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    out_$i63, out_$i64, out_$i65 := out_$i104, out_$i105, out_$i106;
    goto $bb23;

  $bb34:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2468;

  $bb36_dummy:
    call {:si_unique_call 1} out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p46, out_$p47, out_$p48, out_$i49, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p70, out_$p71, out_$i72, out_$p74, out_$i75, out_$i76, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$i96, out_$p97, out_$i98, out_$i77, out_$i78, out_$i79, out_$i102, out_$i103, out_$i66, out_$i67, out_$p68, out_$i69, out_$i104, out_$i105, out_$i106, out_$i63, out_$i64, out_$i65, out_$i99, out_$i100, out_$i101, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$p114, out_$i115, out_$p116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i125, out_$i126, out_$i38, out_cmdloc_dummy_var_42, out_cmdloc_dummy_var_43, out_cmdloc_dummy_var_44, out_vslice_dummy_var_140 := oz_usb_send_isoc_loop_$bb16(in_$i1, in_$p2, in_$p3, in_$p5, in_$p34, in_$p35, out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p46, out_$p47, out_$p48, out_$i49, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p70, out_$p71, out_$i72, out_$p74, out_$i75, out_$i76, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$i96, out_$p97, out_$i98, out_$i77, out_$i78, out_$i79, out_$i102, out_$i103, out_$i66, out_$i67, out_$p68, out_$i69, out_$i104, out_$i105, out_$i106, out_$i63, out_$i64, out_$i65, out_$i99, out_$i100, out_$i101, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$p114, out_$i115, out_$p116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i125, out_$i126, out_$i38, out_cmdloc_dummy_var_42, out_cmdloc_dummy_var_43, out_cmdloc_dummy_var_44, out_vslice_dummy_var_140);
    return;

  exit:
    return;
}



procedure oz_usb_send_isoc_loop_$bb16(in_$i1: i8, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$p34: ref, in_$p35: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$p52: ref, in_$i53: i32, in_$i54: i8, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i64, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$p74: ref, in_$i75: i32, in_$i76: i1, in_$p80: ref, in_$i81: i32, in_$i82: i1, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$i87: i64, in_$p88: ref, in_$i89: i64, in_$i90: i64, in_$p91: ref, in_$i92: i32, in_$i93: i32, in_$p94: ref, in_$p95: ref, in_$i96: i32, in_$p97: ref, in_$i98: i32, in_$i77: i32, in_$i78: i32, in_$i79: i32, in_$i102: i32, in_$i103: i1, in_$i66: i32, in_$i67: i32, in_$p68: ref, in_$i69: i32, in_$i104: i32, in_$i105: i32, in_$i106: i32, in_$i63: i32, in_$i64: i32, in_$i65: i32, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i107: i8, in_$i108: i32, in_$i109: i8, in_$i110: i32, in_$i111: i32, in_$i112: i32, in_$i113: i8, in_$p114: ref, in_$i115: i8, in_$p116: ref, in_$i117: i32, in_$i118: i8, in_$p119: ref, in_$i120: i8, in_$i121: i32, in_$i122: i32, in_$i123: i8, in_$i125: i32, in_$i126: i1, in_$i38: i32, in_cmdloc_dummy_var_42: [ref]i8, in_cmdloc_dummy_var_43: [ref]i8, in_cmdloc_dummy_var_44: [ref]i8, in_vslice_dummy_var_140: i32) returns (out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$p52: ref, out_$i53: i32, out_$i54: i8, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i64, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$p74: ref, out_$i75: i32, out_$i76: i1, out_$p80: ref, out_$i81: i32, out_$i82: i1, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$i87: i64, out_$p88: ref, out_$i89: i64, out_$i90: i64, out_$p91: ref, out_$i92: i32, out_$i93: i32, out_$p94: ref, out_$p95: ref, out_$i96: i32, out_$p97: ref, out_$i98: i32, out_$i77: i32, out_$i78: i32, out_$i79: i32, out_$i102: i32, out_$i103: i1, out_$i66: i32, out_$i67: i32, out_$p68: ref, out_$i69: i32, out_$i104: i32, out_$i105: i32, out_$i106: i32, out_$i63: i32, out_$i64: i32, out_$i65: i32, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$i107: i8, out_$i108: i32, out_$i109: i8, out_$i110: i32, out_$i111: i32, out_$i112: i32, out_$i113: i8, out_$p114: ref, out_$i115: i8, out_$p116: ref, out_$i117: i32, out_$i118: i8, out_$p119: ref, out_$i120: i8, out_$i121: i32, out_$i122: i32, out_$i123: i8, out_$i125: i32, out_$i126: i1, out_$i38: i32, out_cmdloc_dummy_var_42: [ref]i8, out_cmdloc_dummy_var_43: [ref]i8, out_cmdloc_dummy_var_44: [ref]i8, out_vslice_dummy_var_140: i32);
  modifies $M.1, $M.9, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr;



implementation oz_usb_send_isoc_loop_$bb6(in_$i1: i8, in_$p2: ref, in_$p5: ref, in_$p11: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i64, in_$p24: ref, in_$i25: i32, in_$i26: i8, in_$p27: ref, in_$i28: i32, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i14: i32, in_vslice_dummy_var_139: i32) returns (out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i64, out_$p24: ref, out_$i25: i32, out_$i26: i8, out_$p27: ref, out_$i28: i32, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i14: i32, out_vslice_dummy_var_139: i32)
{

  entry:
    out_$p15, out_$p16, out_$i17, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i30, out_$i31, out_$i32, out_$i14, out_vslice_dummy_var_139 := in_$p15, in_$p16, in_$i17, in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$p24, in_$i25, in_$i26, in_$p27, in_$i28, in_$i30, in_$i31, in_$i32, in_$i14, in_vslice_dummy_var_139;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2337;

  $bb8:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$i14 := out_$i30;
    goto $bb8_dummy;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    out_$i32 := $slt.i32(out_$i30, out_$i31);
    goto corral_source_split_2356;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.1, in_$p11);
    goto corral_source_split_2355;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i14, 1);
    call {:si_unique_call 399} {:cexpr "i"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_2354;

  SeqInstr_330:
    goto corral_source_split_2353;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} out_vslice_dummy_var_139 := oz_send_isoc_unit(in_$p5, out_$i26, out_$p24, out_$i28);
    goto SeqInstr_329;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.1, out_$p27);
    goto corral_source_split_2352;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 16)), $mul.ref(4, 1));
    goto corral_source_split_2351;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    out_$i26 := $trunc.i32.i8(out_$i25);
    goto corral_source_split_2350;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i8.i32(in_$i1);
    goto corral_source_split_2349;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref(out_$p20, $mul.ref(out_$i23, 1));
    goto corral_source_split_2348;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i32.i64(out_$i22);
    goto corral_source_split_2347;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.1, out_$p21);
    goto corral_source_split_2346;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 16)), $mul.ref(0, 1));
    goto corral_source_split_2345;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.1, out_$p19);
    goto corral_source_split_2344;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p2, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2343;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    goto corral_source_split_2342;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i14);
    goto corral_source_split_2341;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_2340;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p2, $mul.ref(0, 192)), $mul.ref(192, 1));
    goto corral_source_split_2339;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$i17, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i30, out_$i31, out_$i32, out_$i14, out_vslice_dummy_var_139 := oz_usb_send_isoc_loop_$bb6(in_$i1, in_$p2, in_$p5, in_$p11, out_$p15, out_$p16, out_$i17, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i30, out_$i31, out_$i32, out_$i14, out_vslice_dummy_var_139);
    return;

  exit:
    return;
}



procedure oz_usb_send_isoc_loop_$bb6(in_$i1: i8, in_$p2: ref, in_$p5: ref, in_$p11: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i64, in_$p24: ref, in_$i25: i32, in_$i26: i8, in_$p27: ref, in_$i28: i32, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i14: i32, in_vslice_dummy_var_139: i32) returns (out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i64, out_$p24: ref, out_$i25: i32, out_$i26: i8, out_$p27: ref, out_$i28: i32, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i14: i32, out_vslice_dummy_var_139: i32);
  modifies $M.1, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, $M.40, $M.39, assertsPassed;



implementation oz_queue_elt_info_loop_$bb39(in_$p0: ref, in_$p38: ref, in_$p100: ref, in_$p102: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$i112: i32, in_$p113: ref, in_$i114: i32, in_$i115: i32, in_$p116: ref, in_$i117: i32, in_$i118: i32, in_$i119: i1, in_$p120: ref, in_$i121: i32, in_$i122: i1) returns (out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$i112: i32, out_$p113: ref, out_$i114: i32, out_$i115: i32, out_$p116: ref, out_$i117: i32, out_$i118: i32, out_$i119: i1, out_$p120: ref, out_$i121: i32, out_$i122: i1)
{

  entry:
    out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122 := in_$p106, in_$p107, in_$p108, in_$p109, in_$p110, in_$p111, in_$i112, in_$p113, in_$i114, in_$i115, in_$p116, in_$i117, in_$i118, in_$i119, in_$p120, in_$i121, in_$i122;
    goto $bb39, exit;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(in_$p38, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4050;

  $bb41:
    assume {:verifier.code 0} true;
    assume out_$i119 == 1;
    goto $bb41_dummy;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    out_$i119 := $ugt.i32(out_$i117, out_$i118);
    goto corral_source_split_4072;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    out_$i118 := $load.i32($M.1, in_$p102);
    goto corral_source_split_4071;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    out_$i117 := $load.i32($M.1, in_$p100);
    goto corral_source_split_4070;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} oz_elt_stream_put(in_$p38);
    goto corral_source_split_4069;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} oz_elt_info_free(in_$p0, out_$p108);
    goto corral_source_split_4068;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p116, out_$i115);
    goto corral_source_split_4067;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(in_$p38, $mul.ref(0, 48)), $mul.ref(36, 1));
    goto corral_source_split_4066;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    out_$i115 := $sub.i32(out_$i112, out_$i114);
    goto corral_source_split_4065;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i32($M.1, out_$p113);
    goto corral_source_split_4064;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(out_$p108, $mul.ref(0, 328)), $mul.ref(324, 1));
    goto corral_source_split_4063;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    out_$i112 := $load.i32($M.1, out_$p111);
    goto corral_source_split_4062;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(in_$p38, $mul.ref(0, 48)), $mul.ref(36, 1));
    goto corral_source_split_4061;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} list_del_init(out_$p110);
    goto corral_source_split_4060;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(out_$p108, $mul.ref(0, 328)), $mul.ref(16, 1));
    goto corral_source_split_4059;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} list_del_init(out_$p109);
    goto corral_source_split_4058;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(out_$p108, $mul.ref(0, 328)), $mul.ref(0, 1));
    goto corral_source_split_4057;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    out_$p108 := $bitcast.ref.ref(out_$p107);
    goto corral_source_split_4056;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    out_$p107 := $load.ref($M.1, out_$p106);
    goto corral_source_split_4055;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref($add.ref(in_$p38, $mul.ref(0, 48)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_4054;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb43:
    assume out_$i122 == 1;
    goto corral_source_split_4076;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i121, 0);
    goto corral_source_split_4052;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} out_$i121 := list_empty(out_$p120);
    call {:si_unique_call 660} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i121);
    goto corral_source_split_4051;

  $bb41_dummy:
    call {:si_unique_call 1} out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122 := oz_queue_elt_info_loop_$bb39(in_$p0, in_$p38, in_$p100, in_$p102, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122);
    return;

  exit:
    return;
}



procedure oz_queue_elt_info_loop_$bb39(in_$p0: ref, in_$p38: ref, in_$p100: ref, in_$p102: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$i112: i32, in_$p113: ref, in_$i114: i32, in_$i115: i32, in_$p116: ref, in_$i117: i32, in_$i118: i32, in_$i119: i1, in_$p120: ref, in_$i121: i32, in_$i122: i1) returns (out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$i112: i32, out_$p113: ref, out_$i114: i32, out_$i115: i32, out_$p116: ref, out_$i117: i32, out_$i118: i32, out_$i119: i1, out_$p120: ref, out_$i121: i32, out_$i122: i1);
  modifies $M.1;



implementation oz_queue_elt_info_loop_$bb6(in_$i2: i8, in_$i12: i64, in_$p17: ref, in_$p18: ref, in_$i19: i8, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p16: ref, in_$p31: ref, in_$p32: ref) returns (out_$p17: ref, out_$p18: ref, out_$i19: i8, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p16: ref, out_$p31: ref, out_$p32: ref)
{

  entry:
    out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p27, out_$p28, out_$i29, out_$i30, out_$p16, out_$p31, out_$p32 := in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$p23, in_$p24, in_$p27, in_$p28, in_$i29, in_$i30, in_$p16, in_$p31, in_$p32;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3925;

  $bb12:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$p16 := out_$p28;
    goto $bb12_dummy;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    out_$p31, out_$p32 := out_$p16, out_$p28;
    assume true;
    goto $bb12;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i64(out_$i29, in_$i12);
    goto corral_source_split_3945;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_3944;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.1, out_$p27);
    goto corral_source_split_3943;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p16, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3942;

  $bb9:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    out_$p23, out_$p24 := out_$p16, out_$p16;
    assume true;
    goto $bb9;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i20, out_$i21);
    goto corral_source_split_3932;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i8.i32(in_$i2);
    goto corral_source_split_3931;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i8.i32(out_$i19);
    goto corral_source_split_3930;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i8($M.1, out_$p18);
    goto corral_source_split_3929;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p17, $mul.ref(0, 48)), $mul.ref(45, 1));
    goto corral_source_split_3928;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p17 := $bitcast.ref.ref(out_$p16);
    goto corral_source_split_3927;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p27, out_$p28, out_$i29, out_$i30, out_$p16, out_$p31, out_$p32 := oz_queue_elt_info_loop_$bb6(in_$i2, in_$i12, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p27, out_$p28, out_$i29, out_$i30, out_$p16, out_$p31, out_$p32);
    return;

  exit:
    return;
}



procedure oz_queue_elt_info_loop_$bb6(in_$i2: i8, in_$i12: i64, in_$p17: ref, in_$p18: ref, in_$i19: i8, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p16: ref, in_$p31: ref, in_$p32: ref) returns (out_$p17: ref, out_$p18: ref, out_$i19: i8, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p16: ref, out_$p31: ref, out_$p32: ref);



implementation oz_send_isoc_unit_loop_$bb34(in_$i160: i64, in_$p163: ref, in_$p164: ref, in_$i165: i64, in_$i166: i1, in_$p167: ref, in_$p169: ref, in_$p170: ref, in_$p171: ref, in_$p172: ref, in_$i173: i64, in_$i174: i1, in_$p162: ref) returns (out_$p163: ref, out_$p164: ref, out_$i165: i64, out_$i166: i1, out_$p167: ref, out_$p169: ref, out_$p170: ref, out_$p171: ref, out_$p172: ref, out_$i173: i64, out_$i174: i1, out_$p162: ref)
{

  entry:
    out_$p163, out_$p164, out_$i165, out_$i166, out_$p167, out_$p169, out_$p170, out_$p171, out_$p172, out_$i173, out_$i174, out_$p162 := in_$p163, in_$p164, in_$i165, in_$i166, in_$p167, in_$p169, in_$p170, in_$p171, in_$p172, in_$i173, in_$i174, in_$p162;
    goto $bb34, exit;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_4353;

  $bb40:
    assume out_$i174 == 1;
    assume {:verifier.code 0} true;
    out_$p162 := out_$p170;
    goto $bb40_dummy;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    out_$i174 := $ne.i64(out_$i173, in_$i160);
    goto corral_source_split_4371;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    out_$i173 := $p2i.ref.i64(out_$p172);
    goto corral_source_split_4370;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    out_$p172 := $add.ref($add.ref(out_$p171, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4369;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    out_$p171 := $bitcast.ref.ref(out_$p170);
    goto corral_source_split_4368;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    out_$p170 := $load.ref($M.1, out_$p169);
    goto corral_source_split_4367;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p169 := $add.ref($add.ref($add.ref(out_$p162, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4366;

  $bb37:
    assume !(out_$i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    out_$p167 := out_$p162;
    assume true;
    goto $bb37;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    out_$i166 := $ne.i64(out_$i165, 0);
    goto corral_source_split_4358;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    out_$i165 := $p2i.ref.i64(out_$p164);
    goto corral_source_split_4357;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    out_$p164 := $load.ref($M.1, out_$p163);
    goto corral_source_split_4356;

  $bb35:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref($add.ref(out_$p162, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_4355;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb40_dummy:
    call {:si_unique_call 1} out_$p163, out_$p164, out_$i165, out_$i166, out_$p167, out_$p169, out_$p170, out_$p171, out_$p172, out_$i173, out_$i174, out_$p162 := oz_send_isoc_unit_loop_$bb34(in_$i160, out_$p163, out_$p164, out_$i165, out_$i166, out_$p167, out_$p169, out_$p170, out_$p171, out_$p172, out_$i173, out_$i174, out_$p162);
    return;

  exit:
    return;
}



procedure oz_send_isoc_unit_loop_$bb34(in_$i160: i64, in_$p163: ref, in_$p164: ref, in_$i165: i64, in_$i166: i1, in_$p167: ref, in_$p169: ref, in_$p170: ref, in_$p171: ref, in_$p172: ref, in_$i173: i64, in_$i174: i1, in_$p162: ref) returns (out_$p163: ref, out_$p164: ref, out_$i165: i64, out_$i166: i1, out_$p167: ref, out_$p169: ref, out_$p170: ref, out_$p171: ref, out_$p172: ref, out_$i173: i64, out_$i174: i1, out_$p162: ref);



implementation pd_stream_find_loop_$bb4(in_$i1: i8, in_$i9: i64, in_$p12: ref, in_$i13: i8, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p11: ref) returns (out_$p12: ref, out_$i13: i8, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p11: ref)
{

  entry:
    out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p11 := in_$p12, in_$i13, in_$i14, in_$i15, in_$i16, in_$p17, in_$p20, in_$p21, in_$p22, in_$p23, in_$i24, in_$i25, in_$p11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4460;

  $bb10:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$p11 := out_$p21;
    goto $bb10_dummy;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, in_$i9);
    goto corral_source_split_4477;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_4476;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p22, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4475;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_4474;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.1, out_$p20);
    goto corral_source_split_4473;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4472;

  $bb7:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    out_$p17 := out_$p11;
    assume true;
    goto $bb7;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i14, out_$i15);
    goto corral_source_split_4466;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i8.i32(in_$i1);
    goto corral_source_split_4465;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i8.i32(out_$i13);
    goto corral_source_split_4464;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i8($M.1, out_$p12);
    goto corral_source_split_4463;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4462;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p11 := pd_stream_find_loop_$bb4(in_$i1, in_$i9, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p11);
    return;

  exit:
    return;
}



procedure pd_stream_find_loop_$bb4(in_$i1: i8, in_$i9: i64, in_$p12: ref, in_$i13: i8, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p11: ref) returns (out_$p12: ref, out_$i13: i8, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p11: ref);



implementation oz_usb_handle_ep_data_loop_$bb25(in_$p0: ref, in_$p41: ref, in_$i45: i32, in_$i49: i32, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i8, in_$i57: i32, in_$i58: i8, in_$i59: i64, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$i51: i32, in_$p52: ref) returns (out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i8, out_$i57: i32, out_$i58: i8, out_$i59: i64, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$i51: i32, out_$p52: ref)
{

  entry:
    out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i51, out_$p52 := in_$p53, in_$p54, in_$p55, in_$i56, in_$i57, in_$i58, in_$i59, in_$p60, in_$i61, in_$i62, in_$i51, in_$p52;
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4952;

  $bb27:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$i51, out_$p52 := out_$i61, out_$p60;
    goto $bb27_dummy;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    out_$i62 := $slt.i32(out_$i61, in_$i49);
    goto corral_source_split_4964;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    out_$i61 := $add.i32(out_$i51, 1);
    call {:si_unique_call 833} {:cexpr "i"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_4963;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref(out_$p52, $mul.ref(out_$i59, 1));
    goto corral_source_split_4962;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    out_$i59 := $sext.i32.i64(in_$i45);
    goto corral_source_split_4961;

  SeqInstr_576:
    goto corral_source_split_4960;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} oz_hcd_data_ind(out_$p54, out_$i58, out_$p52, in_$i45);
    goto SeqInstr_575;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    out_$i58 := $trunc.i32.i8(out_$i57);
    goto corral_source_split_4959;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    out_$i57 := $zext.i8.i32(out_$i56);
    goto corral_source_split_4958;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i8($M.1, out_$p55);
    goto corral_source_split_4957;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p41, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_4956;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.1, out_$p53);
    goto corral_source_split_4955;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4954;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb27_dummy:
    call {:si_unique_call 1} out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i51, out_$p52 := oz_usb_handle_ep_data_loop_$bb25(in_$p0, in_$p41, in_$i45, in_$i49, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i51, out_$p52);
    return;

  exit:
    return;
}



procedure oz_usb_handle_ep_data_loop_$bb25(in_$p0: ref, in_$p41: ref, in_$i45: i32, in_$i49: i32, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i8, in_$i57: i32, in_$i58: i8, in_$i59: i64, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$i51: i32, in_$p52: ref) returns (out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i8, out_$i57: i32, out_$i58: i8, out_$i59: i64, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$i51: i32, out_$p52: ref);
  modifies $M.1, $M.16, assertsPassed, $M.15;



implementation oz_usb_handle_ep_data_loop_$bb13(in_$p0: ref, in_$p12: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i8, in_$i30: i32, in_$i31: i8, in_$p32: ref, in_$i33: i8, in_$i34: i32, in_$p35: ref, in_$i36: i8, in_$i37: i64, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$i24: i32, in_$p25: ref) returns (out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i8, out_$i30: i32, out_$i31: i8, out_$p32: ref, out_$i33: i8, out_$i34: i32, out_$p35: ref, out_$i36: i8, out_$i37: i64, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$i24: i32, out_$p25: ref)
{

  entry:
    out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i24, out_$p25 := in_$p26, in_$p27, in_$p28, in_$i29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$p35, in_$i36, in_$i37, in_$p38, in_$i39, in_$i40, in_$i24, in_$p25;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4924;

  $bb15:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$i24, out_$p25 := out_$i39, out_$p38;
    goto $bb15_dummy;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(out_$i24, 0);
    goto corral_source_split_4941;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    out_$i39 := $sub.i32(out_$i24, 1);
    call {:si_unique_call 830} {:cexpr "n"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_4940;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref(out_$p25, $mul.ref(out_$i37, 1));
    goto corral_source_split_4939;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i8.i64(out_$i36);
    goto corral_source_split_4938;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i8($M.1, out_$p35);
    goto corral_source_split_4937;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p12, $mul.ref(0, 7)), $mul.ref(5, 1));
    goto corral_source_split_4936;

  SeqInstr_573:
    goto corral_source_split_4935;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} oz_hcd_data_ind(out_$p27, out_$i31, out_$p25, out_$i34);
    goto SeqInstr_572;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i8.i32(out_$i33);
    goto corral_source_split_4934;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i8($M.1, out_$p32);
    goto corral_source_split_4933;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p12, $mul.ref(0, 7)), $mul.ref(5, 1));
    goto corral_source_split_4932;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    out_$i31 := $trunc.i32.i8(out_$i30);
    goto corral_source_split_4931;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i8.i32(out_$i29);
    goto corral_source_split_4930;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i8($M.1, out_$p28);
    goto corral_source_split_4929;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p12, $mul.ref(0, 7)), $mul.ref(3, 1));
    goto corral_source_split_4928;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.1, out_$p26);
    goto corral_source_split_4927;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4926;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i24, out_$p25 := oz_usb_handle_ep_data_loop_$bb13(in_$p0, in_$p12, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i24, out_$p25);
    return;

  exit:
    return;
}



procedure oz_usb_handle_ep_data_loop_$bb13(in_$p0: ref, in_$p12: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i8, in_$i30: i32, in_$i31: i8, in_$p32: ref, in_$i33: i8, in_$i34: i32, in_$p35: ref, in_$i36: i8, in_$i37: i64, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$i24: i32, in_$p25: ref) returns (out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i8, out_$i30: i32, out_$i31: i8, out_$p32: ref, out_$i33: i8, out_$i34: i32, out_$p35: ref, out_$i36: i8, out_$i37: i64, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$i24: i32, out_$p25: ref);
  modifies $M.1, $M.16, assertsPassed, $M.15;



implementation oz_find_urb_by_id_loop_$bb6(in_$i2: i8, in_$i17: i64, in_$p21: ref, in_$p22: ref, in_$i23: i8, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$p28: ref, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$p20: ref, in_$p37: ref) returns (out_$p21: ref, out_$p22: ref, out_$i23: i8, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$p28: ref, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$p20: ref, out_$p37: ref)
{

  entry:
    out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p33, out_$p34, out_$i35, out_$i36, out_$p20, out_$p37 := in_$p21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i26, in_$p27, in_$p28, in_$p33, in_$p34, in_$i35, in_$i36, in_$p20, in_$p37;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4989;

  $bb12:
    assume out_$i36 == 1;
    assume {:verifier.code 0} true;
    out_$p20 := out_$p34;
    goto $bb12_dummy;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    out_$p37 := out_$p20;
    assume true;
    goto $bb12;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i64(out_$i35, in_$i17);
    goto corral_source_split_5008;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    out_$i35 := $p2i.ref.i64(out_$p34);
    goto corral_source_split_5007;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.1, out_$p33);
    goto corral_source_split_5006;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p20, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5005;

  $bb9:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    out_$p27, out_$p28 := out_$p20, out_$p20;
    assume true;
    goto $bb9;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i24, out_$i25);
    goto corral_source_split_4996;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i8.i32(in_$i2);
    goto corral_source_split_4995;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i8.i32(out_$i23);
    goto corral_source_split_4994;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i8($M.1, out_$p22);
    goto corral_source_split_4993;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4992;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_4991;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p33, out_$p34, out_$i35, out_$i36, out_$p20, out_$p37 := oz_find_urb_by_id_loop_$bb6(in_$i2, in_$i17, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p33, out_$p34, out_$i35, out_$i36, out_$p20, out_$p37);
    return;

  exit:
    return;
}



procedure oz_find_urb_by_id_loop_$bb6(in_$i2: i8, in_$i17: i64, in_$p21: ref, in_$p22: ref, in_$i23: i8, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$p28: ref, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$p20: ref, in_$p37: ref) returns (out_$p21: ref, out_$p22: ref, out_$i23: i8, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$p28: ref, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$p20: ref, out_$p37: ref);



implementation oz_clean_endpoints_for_interface_loop_$bb24(in_$p1: ref, in_$i61: i64, in_$p65: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$p63: ref, in_$p64: ref) returns (out_$p65: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$p63: ref, out_$p64: ref)
{

  entry:
    out_$p65, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$p63, out_$p64 := in_$p65, in_$p67, in_$p68, in_$p69, in_$p70, in_$p71, in_$i72, in_$i73, in_$p63, in_$p64;
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5241;

  $bb26:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$p63, out_$p64 := out_$p70, out_$p63;
    goto $bb26_dummy;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i64(out_$i72, in_$i61);
    goto corral_source_split_5252;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    out_$i72 := $p2i.ref.i64(out_$p71);
    goto corral_source_split_5251;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p63, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5250;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref(out_$p69, $mul.ref($sub.ref(0, 16), 96));
    goto corral_source_split_5249;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    out_$p69 := $bitcast.ref.ref(out_$p68);
    goto corral_source_split_5248;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.1, out_$p67);
    goto corral_source_split_5247;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref($add.ref(out_$p63, $mul.ref(0, 96)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_5246;

  SeqInstr_609:
    goto corral_source_split_5245;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} oz_ep_free(in_$p1, out_$p64);
    goto SeqInstr_608;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} list_del_init(out_$p65);
    goto corral_source_split_5244;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p64, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5243;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb26_dummy:
    call {:si_unique_call 1} out_$p65, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$p63, out_$p64 := oz_clean_endpoints_for_interface_loop_$bb24(in_$p1, in_$i61, out_$p65, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$p63, out_$p64);
    return;

  exit:
    return;
}



procedure oz_clean_endpoints_for_interface_loop_$bb24(in_$p1: ref, in_$i61: i64, in_$p65: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$p63: ref, in_$p64: ref) returns (out_$p65: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$p63: ref, out_$p64: ref);
  modifies $M.1, $M.16, $CurrAddr, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $M.40, $M.9;



implementation oz_build_endpoints_for_interface_loop_$bb11(in_$p1: ref, in_$p2: ref, in_$i3: i32, in_$p5: ref, in_$i9: i32, in_$p19: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$p30: ref, in_$i31: i8, in_$i32: i32, in_$i33: i32, in_$i34: i8, in_$i35: i32, in_$i36: i1, in_$p38: ref, in_$i39: i8, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$p44: ref, in_$i45: i8, in_$i46: i32, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i32, in_$p51: ref, in_$i52: i64, in_$i53: i1, in_$p55: ref, in_$i56: i8, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i8, in_$i61: i32, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$i68: i32, in_$i69: i32, in_$p70: ref, in_$p71: ref, in_$i72: i32, in_$i73: i32, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i32, in_$i78: i8, in_$i79: i32, in_$i80: i1, in_$p81: ref, in_$i82: i32, in_$i83: i32, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$i87: i1, in_$i88: i32, in_$i89: i64, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$p96: ref, in_$i97: i32, in_$i98: i32, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$p102: ref, in_$p103: ref, in_$i104: i64, in_$p106: ref, in_$p107: ref, in_$i108: i8, in_$i109: i32, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$p113: ref, in_$i114: i32, in_$i116: i32, in_$i117: i64, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$i122: i64, in_$p124: ref, in_$i125: i32, in_$i126: i32, in_$i127: i32, in_$i128: i32, in_$p129: ref, in_$p130: ref, in_$i131: i64, in_$p133: ref, in_$p134: ref, in_$i135: i8, in_$i136: i32, in_$i137: i32, in_$i138: i1, in_$p139: ref, in_$p140: ref, in_$i141: i32, in_$i115: i32, in_$p142: ref, in_$i143: i1, in_$p144: ref, in_$p145: ref, in_$i146: i64, in_$i147: i1, in_$p148: ref, in_$p149: ref, in_$i150: i32, in_$i151: i8, in_$i152: i32, in_$i153: i1, in_$i23: i32, in_$i24: i32) returns (out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$p30: ref, out_$i31: i8, out_$i32: i32, out_$i33: i32, out_$i34: i8, out_$i35: i32, out_$i36: i1, out_$p38: ref, out_$i39: i8, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$p44: ref, out_$i45: i8, out_$i46: i32, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i32, out_$p51: ref, out_$i52: i64, out_$i53: i1, out_$p55: ref, out_$i56: i8, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i8, out_$i61: i32, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$i68: i32, out_$i69: i32, out_$p70: ref, out_$p71: ref, out_$i72: i32, out_$i73: i32, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i32, out_$i78: i8, out_$i79: i32, out_$i80: i1, out_$p81: ref, out_$i82: i32, out_$i83: i32, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$i87: i1, out_$i88: i32, out_$i89: i64, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$p96: ref, out_$i97: i32, out_$i98: i32, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$p102: ref, out_$p103: ref, out_$i104: i64, out_$p106: ref, out_$p107: ref, out_$i108: i8, out_$i109: i32, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$p113: ref, out_$i114: i32, out_$i116: i32, out_$i117: i64, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$i122: i64, out_$p124: ref, out_$i125: i32, out_$i126: i32, out_$i127: i32, out_$i128: i32, out_$p129: ref, out_$p130: ref, out_$i131: i64, out_$p133: ref, out_$p134: ref, out_$i135: i8, out_$i136: i32, out_$i137: i32, out_$i138: i1, out_$p139: ref, out_$p140: ref, out_$i141: i32, out_$i115: i32, out_$p142: ref, out_$i143: i1, out_$p144: ref, out_$p145: ref, out_$i146: i64, out_$i147: i1, out_$p148: ref, out_$p149: ref, out_$i150: i32, out_$i151: i8, out_$i152: i32, out_$i153: i1, out_$i23: i32, out_$i24: i32)
{

  entry:
    out_$p25, out_$p26, out_$i27, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$p55, out_$i56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$p70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p91, out_$p92, out_$p93, out_$i94, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$p103, out_$i104, out_$p106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$p113, out_$i114, out_$i116, out_$i117, out_$p119, out_$p120, out_$p121, out_$i122, out_$p124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p129, out_$p130, out_$i131, out_$p133, out_$p134, out_$i135, out_$i136, out_$i137, out_$i138, out_$p139, out_$p140, out_$i141, out_$i115, out_$p142, out_$i143, out_$p144, out_$p145, out_$i146, out_$i147, out_$p148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i23, out_$i24 := in_$p25, in_$p26, in_$i27, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$p44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$p51, in_$i52, in_$i53, in_$p55, in_$i56, in_$p57, in_$p58, in_$p59, in_$i60, in_$i61, in_$i62, in_$i63, in_$p64, in_$i65, in_$i66, in_$p67, in_$i68, in_$i69, in_$p70, in_$p71, in_$i72, in_$i73, in_$p74, in_$p75, in_$p76, in_$i77, in_$i78, in_$i79, in_$i80, in_$p81, in_$i82, in_$i83, in_$p84, in_$p85, in_$i86, in_$i87, in_$i88, in_$i89, in_$p91, in_$p92, in_$p93, in_$i94, in_$p96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$p102, in_$p103, in_$i104, in_$p106, in_$p107, in_$i108, in_$i109, in_$i110, in_$i111, in_$p112, in_$p113, in_$i114, in_$i116, in_$i117, in_$p119, in_$p120, in_$p121, in_$i122, in_$p124, in_$i125, in_$i126, in_$i127, in_$i128, in_$p129, in_$p130, in_$i131, in_$p133, in_$p134, in_$i135, in_$i136, in_$i137, in_$i138, in_$p139, in_$p140, in_$i141, in_$i115, in_$p142, in_$i143, in_$p144, in_$p145, in_$i146, in_$i147, in_$p148, in_$p149, in_$i150, in_$i151, in_$i152, in_$i153, in_$i23, in_$i24;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5788;

  $bb53:
    assume out_$i153 == 1;
    assume {:verifier.code 0} true;
    out_$i23, out_$i24 := out_$i115, out_$i150;
    goto $bb53_dummy;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    out_$i153 := $slt.i32(out_$i150, out_$i152);
    goto corral_source_split_5963;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    out_$i152 := $zext.i8.i32(out_$i151);
    goto corral_source_split_5962;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    out_$i151 := $load.i8($M.1, in_$p19);
    goto corral_source_split_5961;

  $bb52:
    assume {:verifier.code 0} true;
    out_$i150 := $add.i32(out_$i24, 1);
    call {:si_unique_call 906} {:cexpr "i"} boogie_si_record_i32(out_$i150);
    goto corral_source_split_5960;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_627:
    goto corral_source_split_5958;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} oz_usb_request_heartbeat(out_$p149);
    goto SeqInstr_626;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    out_$p149 := $load.ref($M.1, out_$p148);
    goto corral_source_split_5957;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref(in_$p1, $mul.ref(0, 400)), $mul.ref(8, 1));
    goto corral_source_split_5956;

  $bb50:
    assume out_$i147 == 1;
    goto corral_source_split_5955;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    out_$i147 := $ne.i64(out_$i146, 0);
    goto corral_source_split_5953;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    out_$i146 := $p2i.ref.i64(out_$p145);
    goto corral_source_split_5952;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    out_$p145 := $load.ref($M.1, out_$p144);
    goto corral_source_split_5951;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref(in_$p1, $mul.ref(0, 400)), $mul.ref(8, 1));
    goto corral_source_split_5950;

  $bb47:
    assume out_$i143 == 1;
    goto corral_source_split_5949;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    out_$i143 := $ne.i32(out_$i115, 0);
    goto corral_source_split_5942;

  SeqInstr_624:
    goto corral_source_split_5941;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} ldv_spin_unlock_bh_127(out_$p142);
    goto SeqInstr_623;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(in_$p5, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_5940;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_5939;

  $bb46:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i115 := out_$i141;
    goto $bb43;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    out_$i115 := out_$i114;
    goto $bb43;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_5937;

  $bb41:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    out_$i114 := out_$i23;
    goto $bb42;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    out_$i114 := 1;
    goto $bb42;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} list_add_tail(out_$p112, out_$p113);
    goto corral_source_split_5935;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(in_$p1, $mul.ref(0, 400)), $mul.ref(384, 1));
    goto corral_source_split_5934;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(out_$p51, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5933;

  $bb40:
    assume out_$i111 == 1;
    goto corral_source_split_5932;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i110, 1);
    goto corral_source_split_5904;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    out_$i110 := $and.i32(out_$i109, 3);
    goto corral_source_split_5903;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    out_$i109 := $zext.i8.i32(out_$i108);
    goto corral_source_split_5902;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    out_$i108 := $load.i8($M.1, out_$p107);
    goto corral_source_split_5901;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(out_$p51, $mul.ref(0, 96)), $mul.ref(57, 1));
    goto corral_source_split_5900;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p106, out_$i101);
    goto corral_source_split_5899;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(out_$p103, $mul.ref(out_$i104, 8)), $mul.ref(0, 1));
    goto corral_source_split_5898;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    goto corral_source_split_5897;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    out_$i104 := $sext.i32.i64(in_$i9);
    goto corral_source_split_5896;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    out_$p103 := $load.ref($M.1, out_$p102);
    goto corral_source_split_5895;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(in_$p1, $mul.ref(0, 400)), $mul.ref(104, 1));
    goto corral_source_split_5894;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    out_$i101 := $or.i32(out_$i97, out_$i100);
    goto corral_source_split_5893;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    out_$i100 := $shl.i32(1, out_$i99);
    goto corral_source_split_5892;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    out_$i99 := $add.i32(out_$i98, 16);
    goto corral_source_split_5891;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    out_$i98 := $zext.i8.i32(out_$i34);
    goto corral_source_split_5890;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    out_$i97 := $load.i32($M.1, out_$p96);
    goto corral_source_split_5889;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p93, $mul.ref(out_$i94, 8)), $mul.ref(0, 1));
    goto corral_source_split_5888;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    goto corral_source_split_5887;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    out_$i94 := $sext.i32.i64(in_$i9);
    goto corral_source_split_5886;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    out_$p93 := $load.ref($M.1, out_$p92);
    goto corral_source_split_5885;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p1, $mul.ref(0, 400)), $mul.ref(104, 1));
    goto corral_source_split_5884;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p91, out_$p51);
    goto corral_source_split_5883;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 400)), $mul.ref(240, 1)), $mul.ref(out_$i89, 8));
    goto corral_source_split_5882;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    out_$i89 := $sext.i32.i64(out_$i88);
    goto corral_source_split_5881;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i8.i32(out_$i34);
    goto corral_source_split_5880;

  $bb38:
    assume out_$i87 == 1;
    goto corral_source_split_5879;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    out_$i87 := $slt.i32(out_$i86, 0);
    goto corral_source_split_5877;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    out_$i86 := $sext.i8.i32(out_$i31);
    goto corral_source_split_5876;

  SeqInstr_621:
    goto corral_source_split_5875;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} ldv_spin_lock_bh_126(out_$p85);
    goto SeqInstr_620;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p5, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_5874;

  $bb30:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p70, out_$i69);
    goto corral_source_split_5852;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p51, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_5851;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    out_$i69 := $or.i32(out_$i68, 1);
    goto corral_source_split_5850;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.1, out_$p67);
    goto corral_source_split_5849;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p51, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_5848;

  $bb31:
    assume out_$i66 == 1;
    goto corral_source_split_5847;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    out_$i66 := $slt.i32(out_$i65, 0);
    goto corral_source_split_5845;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i8.i32(out_$i31);
    goto corral_source_split_5844;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p64, 200);
    goto corral_source_split_5843;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p51, $mul.ref(0, 96)), $mul.ref(52, 1));
    goto corral_source_split_5842;

  $bb29:
    assume out_$i63 == 1;
    goto corral_source_split_5841;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i62, 1);
    goto corral_source_split_5839;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    out_$i62 := $and.i32(out_$i61, 3);
    goto corral_source_split_5838;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    out_$i61 := $zext.i8.i32(out_$i60);
    goto corral_source_split_5837;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i8($M.1, out_$p59);
    goto corral_source_split_5836;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p51, $mul.ref(0, 96)), $mul.ref(57, 1));
    goto corral_source_split_5835;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p58, out_$i34);
    goto corral_source_split_5834;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p51, $mul.ref(0, 96)), $mul.ref(56, 1));
    goto corral_source_split_5833;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p57, out_$i56);
    goto corral_source_split_5832;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p51, $mul.ref(0, 96)), $mul.ref(57, 1));
    goto corral_source_split_5831;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i8($M.1, out_$p55);
    goto corral_source_split_5830;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref($add.ref(out_$p26, $mul.ref(out_$i27, 72)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_5829;

  $bb27:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i64(out_$i52, 0);
    goto corral_source_split_5824;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    out_$i52 := $p2i.ref.i64(out_$p51);
    goto corral_source_split_5823;

  SeqInstr_612:
    goto corral_source_split_5822;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} out_$p51 := oz_ep_alloc(out_$i50, in_$i3);
    goto SeqInstr_611;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_5821;

  $bb14:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    out_$i50 := 0;
    goto $bb25;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    out_$i50 := out_$i49;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_5819;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i49 := 0;
    goto $bb24;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i49 := 512;
    goto $bb24;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i49 := 24576;
    goto $bb24;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i42 == 1;
    goto corral_source_split_5809;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i41, 1);
    goto corral_source_split_5807;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    out_$i41 := $and.i32(out_$i40, 3);
    goto corral_source_split_5806;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i8.i32(out_$i39);
    goto corral_source_split_5805;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i8($M.1, out_$p38);
    goto corral_source_split_5804;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref($add.ref(out_$p26, $mul.ref(out_$i27, 72)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_5803;

  $bb13:
    assume out_$i36 == 1;
    goto corral_source_split_5802;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    out_$i36 := $slt.i32(out_$i35, 0);
    goto corral_source_split_5800;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i8.i32(out_$i31);
    goto corral_source_split_5799;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    out_$i34 := $trunc.i32.i8(out_$i33);
    call {:si_unique_call 896} {:cexpr "ep_num"} boogie_si_record_i8(out_$i34);
    goto corral_source_split_5798;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    out_$i33 := $and.i32(out_$i32, 15);
    goto corral_source_split_5797;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i8.i32(out_$i31);
    goto corral_source_split_5796;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i8($M.1, out_$p30);
    call {:si_unique_call 895} {:cexpr "ep_addr"} boogie_si_record_i8(out_$i31);
    goto corral_source_split_5795;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref(out_$p26, $mul.ref(out_$i27, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_5794;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    goto corral_source_split_5793;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i24);
    goto corral_source_split_5792;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.1, out_$p25);
    goto corral_source_split_5791;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5790;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i48 == 1;
    goto corral_source_split_5817;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i47, 3);
    goto corral_source_split_5815;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    out_$i47 := $and.i32(out_$i46, 3);
    goto corral_source_split_5814;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i8.i32(out_$i45);
    goto corral_source_split_5813;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i8($M.1, out_$p44);
    goto corral_source_split_5812;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref($add.ref(out_$p26, $mul.ref(out_$i27, 72)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_5811;

  $bb16:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb35:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p84, out_$i83);
    goto corral_source_split_5872;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p51, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_5871;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    out_$i83 := $and.i32(out_$i82, $sub.i32(0, 3));
    goto corral_source_split_5870;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i32($M.1, out_$p81);
    goto corral_source_split_5869;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(out_$p51, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_5868;

  $bb34:
    assume out_$i80 == 1;
    goto corral_source_split_5867;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    out_$i80 := $ne.i32(out_$i79, 0);
    goto corral_source_split_5865;

  SeqInstr_618:
    call {:si_unique_call 900} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_5864;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} out_$i79 := oz_usb_stream_create(out_$p76, out_$i78);
    goto SeqInstr_617;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    out_$i78 := $trunc.i32.i8(out_$i77);
    goto corral_source_split_5863;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i8.i32(out_$i34);
    goto corral_source_split_5862;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    out_$p76 := $load.ref($M.1, out_$p75);
    goto corral_source_split_5861;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p1, $mul.ref(0, 400)), $mul.ref(8, 1));
    goto corral_source_split_5860;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p74, out_$i73);
    goto corral_source_split_5859;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p51, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_5858;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    out_$i73 := $or.i32(out_$i72, 2);
    goto corral_source_split_5857;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i32($M.1, out_$p71);
    goto corral_source_split_5856;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p51, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_5855;

  $bb32:
    assume !(out_$i66 == 1);
    goto corral_source_split_5854;

  $bb45:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    out_$i141 := out_$i23;
    goto $bb46;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    out_$i141 := 1;
    goto $bb46;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} list_add_tail(out_$p139, out_$p140);
    goto corral_source_split_5947;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(in_$p1, $mul.ref(0, 400)), $mul.ref(368, 1));
    goto corral_source_split_5946;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref(out_$p51, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_5945;

  $bb44:
    assume out_$i138 == 1;
    goto corral_source_split_5944;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    out_$i138 := $eq.i32(out_$i137, 1);
    goto corral_source_split_5930;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    out_$i137 := $and.i32(out_$i136, 3);
    goto corral_source_split_5929;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    out_$i136 := $zext.i8.i32(out_$i135);
    goto corral_source_split_5928;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    out_$i135 := $load.i8($M.1, out_$p134);
    goto corral_source_split_5927;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(out_$p51, $mul.ref(0, 96)), $mul.ref(57, 1));
    goto corral_source_split_5926;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p133, out_$i128);
    goto corral_source_split_5925;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref(out_$p130, $mul.ref(out_$i131, 8)), $mul.ref(0, 1));
    goto corral_source_split_5924;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    goto corral_source_split_5923;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    out_$i131 := $sext.i32.i64(in_$i9);
    goto corral_source_split_5922;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    out_$p130 := $load.ref($M.1, out_$p129);
    goto corral_source_split_5921;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(in_$p1, $mul.ref(0, 400)), $mul.ref(104, 1));
    goto corral_source_split_5920;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    out_$i128 := $or.i32(out_$i125, out_$i127);
    goto corral_source_split_5919;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    out_$i127 := $shl.i32(1, out_$i126);
    goto corral_source_split_5918;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    out_$i126 := $zext.i8.i32(out_$i34);
    goto corral_source_split_5917;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    out_$i125 := $load.i32($M.1, out_$p124);
    goto corral_source_split_5916;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(out_$p121, $mul.ref(out_$i122, 8)), $mul.ref(0, 1));
    goto corral_source_split_5915;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    goto corral_source_split_5914;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    out_$i122 := $sext.i32.i64(in_$i9);
    goto corral_source_split_5913;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    out_$p121 := $load.ref($M.1, out_$p120);
    goto corral_source_split_5912;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(in_$p1, $mul.ref(0, 400)), $mul.ref(104, 1));
    goto corral_source_split_5911;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p119, out_$p51);
    goto corral_source_split_5910;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 400)), $mul.ref(112, 1)), $mul.ref(out_$i117, 8));
    goto corral_source_split_5909;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    out_$i117 := $sext.i32.i64(out_$i116);
    goto corral_source_split_5908;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    out_$i116 := $zext.i8.i32(out_$i34);
    goto corral_source_split_5907;

  $bb39:
    assume !(out_$i87 == 1);
    goto corral_source_split_5906;

  $bb48:
    assume {:verifier.code 0} true;
    assume !(out_$i143 == 1);
    goto $bb49;

  $bb51:
    assume {:verifier.code 0} true;
    assume !(out_$i147 == 1);
    goto $bb49;

  $bb53_dummy:
    call {:si_unique_call 1} out_$p25, out_$p26, out_$i27, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$p55, out_$i56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$p70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p91, out_$p92, out_$p93, out_$i94, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$p103, out_$i104, out_$p106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$p113, out_$i114, out_$i116, out_$i117, out_$p119, out_$p120, out_$p121, out_$i122, out_$p124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p129, out_$p130, out_$i131, out_$p133, out_$p134, out_$i135, out_$i136, out_$i137, out_$i138, out_$p139, out_$p140, out_$i141, out_$i115, out_$p142, out_$i143, out_$p144, out_$p145, out_$i146, out_$i147, out_$p148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i23, out_$i24 := oz_build_endpoints_for_interface_loop_$bb11(in_$p1, in_$p2, in_$i3, in_$p5, in_$i9, in_$p19, out_$p25, out_$p26, out_$i27, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$p55, out_$i56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$p70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p91, out_$p92, out_$p93, out_$i94, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$p103, out_$i104, out_$p106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$p113, out_$i114, out_$i116, out_$i117, out_$p119, out_$p120, out_$p121, out_$i122, out_$p124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p129, out_$p130, out_$i131, out_$p133, out_$p134, out_$i135, out_$i136, out_$i137, out_$i138, out_$p139, out_$p140, out_$i141, out_$i115, out_$p142, out_$i143, out_$p144, out_$p145, out_$i146, out_$i147, out_$p148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i23, out_$i24);
    return;

  exit:
    return;
}



procedure oz_build_endpoints_for_interface_loop_$bb11(in_$p1: ref, in_$p2: ref, in_$i3: i32, in_$p5: ref, in_$i9: i32, in_$p19: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$p30: ref, in_$i31: i8, in_$i32: i32, in_$i33: i32, in_$i34: i8, in_$i35: i32, in_$i36: i1, in_$p38: ref, in_$i39: i8, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$p44: ref, in_$i45: i8, in_$i46: i32, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i32, in_$p51: ref, in_$i52: i64, in_$i53: i1, in_$p55: ref, in_$i56: i8, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i8, in_$i61: i32, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$i68: i32, in_$i69: i32, in_$p70: ref, in_$p71: ref, in_$i72: i32, in_$i73: i32, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i32, in_$i78: i8, in_$i79: i32, in_$i80: i1, in_$p81: ref, in_$i82: i32, in_$i83: i32, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$i87: i1, in_$i88: i32, in_$i89: i64, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$p96: ref, in_$i97: i32, in_$i98: i32, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$p102: ref, in_$p103: ref, in_$i104: i64, in_$p106: ref, in_$p107: ref, in_$i108: i8, in_$i109: i32, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$p113: ref, in_$i114: i32, in_$i116: i32, in_$i117: i64, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$i122: i64, in_$p124: ref, in_$i125: i32, in_$i126: i32, in_$i127: i32, in_$i128: i32, in_$p129: ref, in_$p130: ref, in_$i131: i64, in_$p133: ref, in_$p134: ref, in_$i135: i8, in_$i136: i32, in_$i137: i32, in_$i138: i1, in_$p139: ref, in_$p140: ref, in_$i141: i32, in_$i115: i32, in_$p142: ref, in_$i143: i1, in_$p144: ref, in_$p145: ref, in_$i146: i64, in_$i147: i1, in_$p148: ref, in_$p149: ref, in_$i150: i32, in_$i151: i8, in_$i152: i32, in_$i153: i1, in_$i23: i32, in_$i24: i32) returns (out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$p30: ref, out_$i31: i8, out_$i32: i32, out_$i33: i32, out_$i34: i8, out_$i35: i32, out_$i36: i1, out_$p38: ref, out_$i39: i8, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$p44: ref, out_$i45: i8, out_$i46: i32, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i32, out_$p51: ref, out_$i52: i64, out_$i53: i1, out_$p55: ref, out_$i56: i8, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i8, out_$i61: i32, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$i68: i32, out_$i69: i32, out_$p70: ref, out_$p71: ref, out_$i72: i32, out_$i73: i32, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i32, out_$i78: i8, out_$i79: i32, out_$i80: i1, out_$p81: ref, out_$i82: i32, out_$i83: i32, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$i87: i1, out_$i88: i32, out_$i89: i64, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$p96: ref, out_$i97: i32, out_$i98: i32, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$p102: ref, out_$p103: ref, out_$i104: i64, out_$p106: ref, out_$p107: ref, out_$i108: i8, out_$i109: i32, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$p113: ref, out_$i114: i32, out_$i116: i32, out_$i117: i64, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$i122: i64, out_$p124: ref, out_$i125: i32, out_$i126: i32, out_$i127: i32, out_$i128: i32, out_$p129: ref, out_$p130: ref, out_$i131: i64, out_$p133: ref, out_$p134: ref, out_$i135: i8, out_$i136: i32, out_$i137: i32, out_$i138: i1, out_$p139: ref, out_$p140: ref, out_$i141: i32, out_$i115: i32, out_$p142: ref, out_$i143: i1, out_$p144: ref, out_$p145: ref, out_$i146: i64, out_$i147: i1, out_$p148: ref, out_$p149: ref, out_$i150: i32, out_$i151: i8, out_$i152: i32, out_$i153: i1, out_$i23: i32, out_$i24: i32);
  modifies $M.30, $M.31, $M.1, $M.32, $M.13, $M.33, $M.34, $M.35, $M.36, $M.37, $CurrAddr, assertsPassed, $M.38, $M.16, $M.40, $M.9;



implementation oz_elt_stream_delete_loop_$bb20(in_$p0: ref, in_$p2: ref, in_$p20: ref, in_$i36: i64, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i24, in_$i59: i24, in_$i60: i24, in_$p61: ref, in_$p62: ref, in_$i63: i8, in_$i64: i64, in_$i65: i64, in_$i66: i64, in_$i67: i1, in_$p68: ref, in_$i69: i32, in_$p70: ref, in_$i71: i32, in_$p72: ref, in_$i73: i32, in_$p74: ref, in_$p75: ref, in_$i76: i64, in_$i77: i1, in_$p38: ref, in_$p39: ref) returns (out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i24, out_$i59: i24, out_$i60: i24, out_$p61: ref, out_$p62: ref, out_$i63: i8, out_$i64: i64, out_$i65: i64, out_$i66: i64, out_$i67: i1, out_$p68: ref, out_$i69: i32, out_$p70: ref, out_$i71: i32, out_$p72: ref, out_$i73: i32, out_$p74: ref, out_$p75: ref, out_$i76: i64, out_$i77: i1, out_$p38: ref, out_$p39: ref)
{

  entry:
    out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$p70, out_$i71, out_$p72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p38, out_$p39 := in_$p40, in_$p41, in_$p42, in_$p43, in_$i44, in_$p45, in_$i46, in_$i47, in_$p48, in_$i49, in_$i50, in_$i51, in_$p52, in_$p53, in_$p54, in_$p55, in_$p56, in_$p57, in_$i58, in_$i59, in_$i60, in_$p61, in_$p62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$p68, in_$i69, in_$p70, in_$i71, in_$p72, in_$i73, in_$p74, in_$p75, in_$i76, in_$i77, in_$p38, in_$p39;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6274;

  $bb28:
    assume out_$i77 == 1;
    assume {:verifier.code 0} true;
    out_$p38, out_$p39 := out_$p75, out_$p38;
    goto $bb28_dummy;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    out_$i77 := $ne.i64(out_$i76, in_$i36);
    goto corral_source_split_6330;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    out_$i76 := $p2i.ref.i64(out_$p38);
    goto corral_source_split_6329;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.1, out_$p74);
    goto corral_source_split_6328;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p38, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6327;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} oz_elt_info_free(in_$p0, out_$p40);
    goto corral_source_split_6326;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} oz_elt_stream_put(in_$p20);
    goto corral_source_split_6325;

  $bb23:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb25:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} __dynamic_pr_debug.ref.ref.i32.i32.i32(in_$p2, .str.15, out_$i71, out_$i73, out_$i69);
    goto corral_source_split_6323;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i32($M.1, out_$p72);
    goto corral_source_split_6322;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p40, $mul.ref(0, 328)), $mul.ref(324, 1));
    goto corral_source_split_6321;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i32($M.1, out_$p70);
    goto corral_source_split_6320;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p20, $mul.ref(0, 48)), $mul.ref(36, 1));
    goto corral_source_split_6319;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} out_$i69 := atomic_read(out_$p68);
    call {:si_unique_call 967} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_6318;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p20, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_6317;

  $bb24:
    assume out_$i67 == 1;
    goto corral_source_split_6316;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    out_$i67 := $ne.i64(out_$i66, 0);
    goto corral_source_split_6314;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} out_$i66 := ldv__builtin_expect(out_$i65, 0);
    call {:si_unique_call 965} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i66);
    goto corral_source_split_6313;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    out_$i65 := $and.i64(out_$i64, 1);
    goto corral_source_split_6312;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i8.i64(out_$i63);
    goto corral_source_split_6311;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i8($M.29, out_$p62);
    goto corral_source_split_6310;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6309;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, out_$p61, 0);
    goto corral_source_split_6308;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6307;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, out_$p57, out_$i60);
    goto corral_source_split_6306;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    out_$i60 := $or.i24(out_$i59, 121);
    goto corral_source_split_6305;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    out_$i59 := $and.i24(out_$i58, $sub.i24(0, 262144));
    goto corral_source_split_6304;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i24($M.28, out_$p57);
    goto corral_source_split_6303;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    out_$p57 := $bitcast.ref.ref(out_$p56);
    goto corral_source_split_6302;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6301;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, out_$p55, .str.15);
    goto corral_source_split_6300;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6299;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, out_$p54, .str.14);
    goto corral_source_split_6298;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6297;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, out_$p53, .str.13);
    goto corral_source_split_6296;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6295;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, out_$p52, .str.4);
    goto corral_source_split_6294;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6293;

  $bb22:
    assume out_$i51 == 1;
    goto corral_source_split_6292;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i32(out_$i50, 0);
    goto corral_source_split_6290;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    out_$i50 := $and.i32(out_$i49, 1);
    goto corral_source_split_6289;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    out_$i49 := $M.23;
    goto corral_source_split_6288;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p48, out_$i47);
    goto corral_source_split_6287;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p20, $mul.ref(0, 48)), $mul.ref(36, 1));
    goto corral_source_split_6286;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    out_$i47 := $sub.i32(out_$i44, out_$i46);
    goto corral_source_split_6285;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.1, out_$p45);
    goto corral_source_split_6284;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p40, $mul.ref(0, 328)), $mul.ref(324, 1));
    goto corral_source_split_6283;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.1, out_$p43);
    goto corral_source_split_6282;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p20, $mul.ref(0, 48)), $mul.ref(36, 1));
    goto corral_source_split_6281;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} list_del_init(out_$p42);
    goto corral_source_split_6280;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p40, $mul.ref(0, 328)), $mul.ref(16, 1));
    goto corral_source_split_6279;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} list_del_init(out_$p41);
    goto corral_source_split_6278;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p40, $mul.ref(0, 328)), $mul.ref(0, 1));
    goto corral_source_split_6277;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(out_$p39);
    goto corral_source_split_6276;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb28_dummy:
    call {:si_unique_call 1} out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$p70, out_$i71, out_$p72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p38, out_$p39 := oz_elt_stream_delete_loop_$bb20(in_$p0, in_$p2, in_$p20, in_$i36, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$p70, out_$i71, out_$p72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p38, out_$p39);
    return;

  exit:
    return;
}



procedure oz_elt_stream_delete_loop_$bb20(in_$p0: ref, in_$p2: ref, in_$p20: ref, in_$i36: i64, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i24, in_$i59: i24, in_$i60: i24, in_$p61: ref, in_$p62: ref, in_$i63: i8, in_$i64: i64, in_$i65: i64, in_$i66: i64, in_$i67: i1, in_$p68: ref, in_$i69: i32, in_$p70: ref, in_$i71: i32, in_$p72: ref, in_$i73: i32, in_$p74: ref, in_$p75: ref, in_$i76: i64, in_$i77: i1, in_$p38: ref, in_$p39: ref) returns (out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i24, out_$i59: i24, out_$i60: i24, out_$p61: ref, out_$p62: ref, out_$i63: i8, out_$i64: i64, out_$i65: i64, out_$i66: i64, out_$i67: i1, out_$p68: ref, out_$i69: i32, out_$p70: ref, out_$i71: i32, out_$p72: ref, out_$i73: i32, out_$p74: ref, out_$p75: ref, out_$i76: i64, out_$i77: i1, out_$p38: ref, out_$p39: ref);
  modifies $M.1, $M.29, $M.28, $M.27, $M.26, $M.25, $M.24;



implementation oz_elt_stream_delete_loop_$bb4(in_$i1: i8, in_$i9: i64, in_$p12: ref, in_$p13: ref, in_$i14: i8, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p11: ref) returns (out_$p12: ref, out_$p13: ref, out_$i14: i8, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$p19: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p11: ref)
{

  entry:
    out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p21, out_$p22, out_$i23, out_$i24, out_$p11 := in_$p12, in_$p13, in_$i14, in_$i15, in_$i16, in_$i17, in_$p18, in_$p19, in_$p21, in_$p22, in_$i23, in_$i24, in_$p11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6234;

  $bb10:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$p11 := out_$p22;
    goto $bb10_dummy;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i23, in_$i9);
    goto corral_source_split_6253;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_6252;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.1, out_$p21);
    goto corral_source_split_6251;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p11, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6250;

  $bb7:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    out_$p18, out_$p19 := out_$p11, out_$p11;
    assume true;
    goto $bb7;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i15, out_$i16);
    goto corral_source_split_6241;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i8.i32(in_$i1);
    goto corral_source_split_6240;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i8.i32(out_$i14);
    goto corral_source_split_6239;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i8($M.1, out_$p13);
    goto corral_source_split_6238;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p12, $mul.ref(0, 48)), $mul.ref(45, 1));
    goto corral_source_split_6237;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p12 := $bitcast.ref.ref(out_$p11);
    goto corral_source_split_6236;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p21, out_$p22, out_$i23, out_$i24, out_$p11 := oz_elt_stream_delete_loop_$bb4(in_$i1, in_$i9, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p21, out_$p22, out_$i23, out_$i24, out_$p11);
    return;

  exit:
    return;
}



procedure oz_elt_stream_delete_loop_$bb4(in_$i1: i8, in_$i9: i64, in_$p12: ref, in_$p13: ref, in_$i14: i8, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p11: ref) returns (out_$p12: ref, out_$p13: ref, out_$i14: i8, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$p19: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p11: ref);



implementation oz_clean_endpoints_for_config_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$i8: i32, in_$i9: i32, in_$i10: i1, in_$i7: i32) returns (out_$i8: i32, out_$i9: i32, out_$i10: i1, out_$i7: i32)
{

  entry:
    out_$i8, out_$i9, out_$i10, out_$i7 := in_$i8, in_$i9, in_$i10, in_$i7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6349;

  $bb6:
    assume out_$i10 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i8;
    goto $bb6_dummy;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    out_$i10 := $slt.i32(out_$i8, out_$i9);
    goto corral_source_split_6354;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i32($M.1, in_$p4);
    goto corral_source_split_6353;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    out_$i8 := $add.i32(out_$i7, 1);
    call {:si_unique_call 974} {:cexpr "i"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_6352;

  SeqInstr_687:
    goto corral_source_split_6351;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} oz_clean_endpoints_for_interface(in_$p0, in_$p1, out_$i7);
    goto SeqInstr_686;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i8, out_$i9, out_$i10, out_$i7 := oz_clean_endpoints_for_config_loop_$bb4(in_$p0, in_$p1, in_$p4, out_$i8, out_$i9, out_$i10, out_$i7);
    return;

  exit:
    return;
}



procedure oz_clean_endpoints_for_config_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$i8: i32, in_$i9: i32, in_$i10: i1, in_$i7: i32) returns (out_$i8: i32, out_$i9: i32, out_$i10: i1, out_$i7: i32);
  modifies $M.1, $M.16, $CurrAddr, assertsPassed, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.40, $M.9;



implementation oz_build_endpoints_for_config_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i3: i32, in_$i9: i32, in_$i24: i64, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i1, in_$i23: i32) returns (out_$i24: i64, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i1, out_$i23: i32)
{

  entry:
    out_$i24, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i23 := in_$i24, in_$p26, in_$p27, in_$p28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i23;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6411;

  $bb17:
    assume out_$i33 == 1;
    assume {:verifier.code 0} true;
    out_$i23 := out_$i32;
    goto $bb17_dummy;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    out_$i33 := $slt.i32(out_$i32, in_$i9);
    goto corral_source_split_6426;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i32 := $add.i32(out_$i23, 1);
    call {:si_unique_call 986} {:cexpr "i"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_6425;

  $bb14:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_6419;

  SeqInstr_705:
    call {:si_unique_call 984} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_6418;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} out_$i30 := oz_build_endpoints_for_interface(in_$p0, in_$p1, out_$p29, in_$i3);
    goto SeqInstr_704;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(out_$p28);
    goto corral_source_split_6417;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p27, $mul.ref(0, 8)), $mul.ref(8, 1));
    goto corral_source_split_6416;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.1, out_$p26);
    goto corral_source_split_6415;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 680)), $mul.ref(408, 1)), $mul.ref(out_$i24, 8));
    goto corral_source_split_6414;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i24 := $sext.i32.i64(out_$i23);
    goto corral_source_split_6413;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i24, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i23 := oz_build_endpoints_for_config_loop_$bb11(in_$p0, in_$p1, in_$p2, in_$i3, in_$i9, out_$i24, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i23);
    return;

  exit:
    return;
}



procedure oz_build_endpoints_for_config_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i3: i32, in_$i9: i32, in_$i24: i64, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i1, in_$i23: i32) returns (out_$i24: i64, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i1, out_$i23: i32);
  modifies $M.1, $M.16, $CurrAddr, assertsPassed, $M.30, $M.31, $M.32, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.40, $M.9, $M.13, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation oz_dequeue_ep_urb_loop_$bb9(in_$p3: ref, in_$i26: i64, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p28: ref) returns (out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p28: ref)
{

  entry:
    out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p38, out_$p39, out_$i40, out_$i41, out_$p28 := in_$p29, in_$p30, in_$p31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p36, in_$p38, in_$p39, in_$i40, in_$i41, in_$p28;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6467;

  $bb15:
    assume out_$i41 == 1;
    assume {:verifier.code 0} true;
    out_$p28 := out_$p39;
    goto $bb15_dummy;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i64(out_$i40, in_$i26);
    goto corral_source_split_6484;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    out_$i40 := $p2i.ref.i64(out_$p39);
    goto corral_source_split_6483;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.1, out_$p38);
    goto corral_source_split_6482;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p28, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6481;

  $bb12:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    out_$p35, out_$p36 := out_$p28, out_$p28;
    assume true;
    goto $bb12;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i64(out_$i32, out_$i33);
    goto corral_source_split_6474;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(in_$p3);
    goto corral_source_split_6473;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    out_$i32 := $p2i.ref.i64(out_$p31);
    goto corral_source_split_6472;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.1, out_$p30);
    goto corral_source_split_6471;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p29, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6470;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(out_$p28);
    goto corral_source_split_6469;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p38, out_$p39, out_$i40, out_$i41, out_$p28 := oz_dequeue_ep_urb_loop_$bb9(in_$p3, in_$i26, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p38, out_$p39, out_$i40, out_$i41, out_$p28);
    return;

  exit:
    return;
}



procedure oz_dequeue_ep_urb_loop_$bb9(in_$p3: ref, in_$i26: i64, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p28: ref) returns (out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p28: ref);



implementation tasklet_unlock_wait_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i5: i1) returns (out_$i4: i32, out_$i5: i1)
{

  entry:
    out_$i4, out_$i5 := in_$i4, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i5 == 1;
    goto $bb6_dummy;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_7041;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} out_$i4 := constant_test_bit(1, in_$p1);
    call {:si_unique_call 1124} {:cexpr "tmp"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_7040;

  SeqInstr_882:
    goto corral_source_split_7039;

  SeqInstr_881:
    assume assertsPassed;
    goto SeqInstr_882;

  $bb5:
    call {:si_unique_call 1122} devirtbounce.3(0);
    goto SeqInstr_881;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i4, out_$i5 := tasklet_unlock_wait_loop_$bb4(in_$p1, out_$i4, out_$i5);
    return;

  exit:
    return;
}



procedure tasklet_unlock_wait_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i5: i1) returns (out_$i4: i32, out_$i5: i1);
  modifies $M.12, $M.13, assertsPassed;



implementation ldv_platform_platform_instance_1_loop_$bb10(in_$p1: ref, in_$p10: ref, in_$i26: i32, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i32, in_$p33: ref, in_$i34: i32) returns (out_$i26: i32, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i32, out_$p33: ref, out_$i34: i32)
{

  entry:
    out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$i34 := in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p33, in_$i34;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} out_$i26 := ldv_undef_int();
    call {:si_unique_call 1158} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_7133;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb36_dummy;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} ldv_platform_instance_callback_1_21($u5, in_$p10, out_$i34);
    goto corral_source_split_7145;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.47, out_$p33);
    goto corral_source_split_7144;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7143;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i27 == 1;
    goto corral_source_split_7141;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i26, 1);
    goto corral_source_split_7134;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} ldv_platform_instance_callback_1_20($u6, in_$p10);
    goto corral_source_split_7151;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i28 == 1;
    goto corral_source_split_7149;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i26, 2);
    goto corral_source_split_7147;

  $bb16:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} ldv_platform_instance_callback_1_7($u7, in_$p10);
    goto corral_source_split_7157;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume out_$i29 == 1;
    goto corral_source_split_7155;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i26, 3);
    goto corral_source_split_7153;

  $bb20:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} ldv_dispatch_pm_deregister_1_5();
    goto corral_source_split_7164;

  SeqInstr_897:
    goto corral_source_split_7163;

  SeqInstr_896:
    assume assertsPassed;
    goto SeqInstr_897;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} ldv_dispatch_pm_register_1_6();
    goto SeqInstr_896;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume out_$i30 == 1;
    goto corral_source_split_7161;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i26;
    assume true;
    goto $bb27;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i26, 4);
    goto corral_source_split_7159;

  $bb24:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb36_dummy:
    call {:si_unique_call 1} out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$i34 := ldv_platform_platform_instance_1_loop_$bb10(in_$p1, in_$p10, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$i34);
    return;

  exit:
    return;
}



procedure ldv_platform_platform_instance_1_loop_$bb10(in_$p1: ref, in_$p10: ref, in_$i26: i32, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i32, in_$p33: ref, in_$i34: i32) returns (out_$i26: i32, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i32, out_$p33: ref, out_$i34: i32);
  modifies $M.48, $M.95, $CurrAddr, $M.44, $M.1, $M.33, $M.103, $M.17, $M.45, $M.16, $M.104, $M.105, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $M.41, $M.106, $M.107, $M.42, $M.15, $M.12, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_platform_platform_instance_1_loop_$bb7(in_$p1: ref, in_$p8: ref, in_$p10: ref, in_$p13: ref, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i32, in_$i24: i1, in_$i26: i32, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$p35: ref, in_$p36: ref) returns (out_$p13: ref, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i32, out_$i24: i1, out_$i26: i32, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$p35: ref, out_$p36: ref)
{

  entry:
    out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$p35, out_$p36 := in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$p33, in_$i34, in_$p35, in_$p36;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} ldv_ldv_pre_probe_210();
    goto corral_source_split_7115;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i24 == 1;
    goto $bb12_dummy;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, 0);
    goto corral_source_split_7137;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} out_$i23 := ldv_undef_int();
    call {:si_unique_call 1160} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_7136;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_900:
    goto corral_source_split_7172;

  SeqInstr_899:
    assume assertsPassed;
    goto SeqInstr_900;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} ldv_platform_instance_release_1_3(out_$p36, in_$p10);
    goto SeqInstr_899;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.1, out_$p35);
    goto corral_source_split_7171;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p8, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_7170;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume out_$i32 == 1;
    goto corral_source_split_7168;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 5);
    goto corral_source_split_7166;

  $bb28:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i26;
    assume true;
    goto $bb27, $bb28;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i26, 4);
    goto corral_source_split_7159;

  $bb24:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i26, 3);
    goto corral_source_split_7153;

  $bb20:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i26, 2);
    goto corral_source_split_7147;

  $bb16:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i26, 1);
    goto corral_source_split_7134;

  $bb10:
    call out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$i34 := ldv_platform_platform_instance_1_loop_$bb10(in_$p1, in_$p10, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$i34);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} out_$i26 := ldv_undef_int();
    call {:si_unique_call 1158} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_7133;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb36:
    assume {:verifier.code 0} true;
    assume false;
    return;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} ldv_platform_instance_callback_1_21($u5, in_$p10, out_$i34);
    goto corral_source_split_7145;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.47, out_$p33);
    goto corral_source_split_7144;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7143;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i27 == 1;
    goto corral_source_split_7141;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} ldv_platform_instance_callback_1_20($u6, in_$p10);
    goto corral_source_split_7151;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i28 == 1;
    goto corral_source_split_7149;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} ldv_platform_instance_callback_1_7($u7, in_$p10);
    goto corral_source_split_7157;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume out_$i29 == 1;
    goto corral_source_split_7155;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} ldv_dispatch_pm_deregister_1_5();
    goto corral_source_split_7164;

  SeqInstr_897:
    goto corral_source_split_7163;

  SeqInstr_896:
    assume assertsPassed;
    goto SeqInstr_897;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} ldv_dispatch_pm_register_1_6();
    goto SeqInstr_896;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume out_$i30 == 1;
    goto corral_source_split_7161;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} ldv_assume(out_$i20);
    goto corral_source_split_7126;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i1.i32(out_$i19);
    goto corral_source_split_7125;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i16, 0);
    goto corral_source_split_7124;

  $bb8:
    assume out_$i18 == 1;
    goto corral_source_split_7123;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i32(out_$i17, 0);
    goto corral_source_split_7121;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} out_$i17 := ldv_undef_int();
    call {:si_unique_call 1154} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_7120;

  SeqInstr_894:
    call {:si_unique_call 1152} {:cexpr "ldv_1_probed_default"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_7119;

  SeqInstr_893:
    assume assertsPassed;
    goto SeqInstr_894;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} out_$i16 := ldv_ldv_post_probe_211(out_$i15);
    goto SeqInstr_893;

  SeqInstr_891:
    call {:si_unique_call 1150} {:cexpr "ldv_1_probed_default"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_7118;

  SeqInstr_890:
    assume assertsPassed;
    goto SeqInstr_891;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} out_$i15 := ldv_platform_instance_probe_1_14(out_$p14, in_$p10);
    goto SeqInstr_890;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.1, out_$p13);
    goto corral_source_split_7117;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p8, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_7116;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} ldv_assume(out_$i22);
    goto corral_source_split_7131;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i1.i32(out_$i21);
    goto corral_source_split_7130;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i32(out_$i16, 0);
    goto corral_source_split_7129;

  $bb9:
    assume !(out_$i18 == 1);
    goto corral_source_split_7128;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$p35, out_$p36 := ldv_platform_platform_instance_1_loop_$bb7(in_$p1, in_$p8, in_$p10, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$p35, out_$p36);
    return;

  exit:
    return;
}



procedure ldv_platform_platform_instance_1_loop_$bb7(in_$p1: ref, in_$p8: ref, in_$p10: ref, in_$p13: ref, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i32, in_$i24: i1, in_$i26: i32, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$p35: ref, in_$p36: ref) returns (out_$p13: ref, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i32, out_$i24: i1, out_$i26: i32, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$p35: ref, out_$p36: ref);
  modifies $M.96, $M.97, $M.44, $M.45, $M.1, assertsPassed, $M.15, $M.48, $M.95, $CurrAddr, $M.33, $M.103, $M.17, $M.16, $M.104, $M.105, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.41, $M.106, $M.107, $M.42, $M.12, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation oz_hcd_clear_orphanage_loop_$bb6(in_$p0: ref, in_$i1: i32, in_$i15: i64, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p25: ref, in_$p26: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p17: ref, in_$p18: ref) returns (out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p25: ref, out_$p26: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p17: ref, out_$p18: ref)
{

  entry:
    out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p25, out_$p26, out_$p28, out_$i29, out_$i30, out_$p17, out_$p18 := in_$p19, in_$p20, in_$p21, in_$p22, in_$p23, in_$p25, in_$p26, in_$p28, in_$i29, in_$i30, in_$p17, in_$p18;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7264;

  $bb8:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$p17, out_$p18 := out_$p26, out_$p17;
    goto $bb8_dummy;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i64(out_$i29, in_$i15);
    goto corral_source_split_7279;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_7278;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p17, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7277;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    goto corral_source_split_7276;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.1, out_$p25);
    goto corral_source_split_7275;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7274;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} oz_free_urb_link(out_$p18);
    goto corral_source_split_7273;

  SeqInstr_927:
    goto corral_source_split_7272;

  SeqInstr_926:
    assume assertsPassed;
    goto SeqInstr_927;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} oz_complete_urb(out_$p21, out_$p23, in_$i1);
    goto SeqInstr_926;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.1, out_$p22);
    goto corral_source_split_7271;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p18, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7270;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.1, out_$p20);
    goto corral_source_split_7269;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3344)), $mul.ref(3336, 1));
    goto corral_source_split_7268;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} list_del(out_$p19);
    goto corral_source_split_7267;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p18, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7266;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p25, out_$p26, out_$p28, out_$i29, out_$i30, out_$p17, out_$p18 := oz_hcd_clear_orphanage_loop_$bb6(in_$p0, in_$i1, in_$i15, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p25, out_$p26, out_$p28, out_$i29, out_$i30, out_$p17, out_$p18);
    return;

  exit:
    return;
}



procedure oz_hcd_clear_orphanage_loop_$bb6(in_$p0: ref, in_$i1: i32, in_$i15: i64, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p25: ref, in_$p26: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p17: ref, in_$p18: ref) returns (out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p25: ref, out_$p26: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p17: ref, out_$p18: ref);
  modifies $M.1, $M.15, assertsPassed;



implementation ldv_platform_pm_ops_instance_2_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i32, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$p77: ref, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$i95: i64, in_$i96: i1, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$i102: i1, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i64, in_$i108: i1, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i113: i64, in_$i114: i1, in_$p115: ref, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$i127: i64, in_$i128: i1, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$i133: i64, in_$i134: i1, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$i139: i64, in_$i140: i1, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$i145: i64, in_$i146: i1, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$i151: i64, in_$i152: i1, in_$p153: ref, in_$p154: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i32, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$p77: ref, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$i95: i64, out_$i96: i1, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$i102: i1, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i64, out_$i108: i1, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i113: i64, out_$i114: i1, out_$p115: ref, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$i127: i64, out_$i128: i1, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$i133: i64, out_$i134: i1, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$i139: i64, out_$i140: i1, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$i145: i64, out_$i146: i1, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$i151: i64, out_$i152: i1, out_$p153: ref, out_$p154: ref)
{

  entry:
    out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p93, out_$p94, out_$i95, out_$i96, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$p135, out_$p136, out_$p137, out_$p138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_$p144, out_$i145, out_$i146, out_$p147, out_$p148, out_$p149, out_$p150, out_$i151, out_$i152, out_$p153, out_$p154 := in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$p7, in_$p8, in_$i9, in_$i10, in_$p11, in_$p12, in_$p13, in_$p14, in_$i15, in_$i16, in_$p17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p36, in_$i37, in_$i38, in_$p39, in_$p40, in_$i41, in_$i42, in_$p43, in_$p44, in_$i45, in_$i46, in_$p47, in_$p48, in_$p49, in_$p50, in_$i51, in_$i52, in_$p53, in_$p54, in_$p55, in_$p56, in_$i57, in_$i58, in_$p59, in_$p60, in_$p61, in_$p62, in_$i63, in_$i64, in_$p65, in_$p66, in_$p67, in_$p68, in_$i69, in_$i70, in_$p71, in_$p72, in_$p73, in_$p74, in_$i75, in_$i76, in_$p77, in_$p78, in_$i79, in_$i80, in_$p81, in_$p82, in_$i83, in_$i84, in_$p85, in_$p86, in_$p87, in_$p88, in_$i89, in_$i90, in_$p91, in_$p92, in_$p93, in_$p94, in_$i95, in_$i96, in_$p97, in_$p98, in_$p99, in_$p100, in_$i101, in_$i102, in_$p103, in_$p104, in_$p105, in_$p106, in_$i107, in_$i108, in_$p109, in_$p110, in_$p111, in_$p112, in_$i113, in_$i114, in_$p115, in_$p116, in_$i117, in_$i118, in_$p119, in_$p120, in_$i121, in_$i122, in_$p123, in_$p124, in_$p125, in_$p126, in_$i127, in_$i128, in_$p129, in_$p130, in_$p131, in_$p132, in_$i133, in_$i134, in_$p135, in_$p136, in_$p137, in_$p138, in_$i139, in_$i140, in_$p141, in_$p142, in_$p143, in_$p144, in_$i145, in_$i146, in_$p147, in_$p148, in_$p149, in_$p150, in_$i151, in_$i152, in_$p153, in_$p154;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} out_$i1 := ldv_undef_int();
    call {:si_unique_call 1199} {:cexpr "tmp"} boogie_si_record_i32(out_$i1);
    goto corral_source_split_7291;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb22_dummy;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_930:
    goto corral_source_split_7328;

  SeqInstr_929:
    assume assertsPassed;
    goto SeqInstr_930;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} ldv_pm_ops_instance_runtime_idle_2_27(out_$p12, $u9);
    goto SeqInstr_929;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.50, out_$p11);
    goto corral_source_split_7327;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_7326;

  $bb19:
    assume out_$i10 == 1;
    goto corral_source_split_7325;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i64(out_$i9, 0);
    goto corral_source_split_7299;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_7298;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.49, out_$p7);
    goto corral_source_split_7297;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_7296;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb2:
    assume out_$i2 == 1;
    goto corral_source_split_7294;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    out_$i2 := $eq.i32(out_$i1, 1);
    goto corral_source_split_7292;

  $bb27:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_936:
    goto corral_source_split_7343;

  SeqInstr_935:
    assume assertsPassed;
    goto SeqInstr_936;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} ldv_pm_ops_instance_runtime_resume_2_24(out_$p24, $u9);
    goto SeqInstr_935;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.54, out_$p23);
    goto corral_source_split_7342;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_7341;

  $bb26:
    assume out_$i22 == 1;
    goto corral_source_split_7340;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_7338;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_7337;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.53, out_$p19);
    goto corral_source_split_7336;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_7335;

  $bb24:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_933:
    goto corral_source_split_7333;

  SeqInstr_932:
    assume assertsPassed;
    goto SeqInstr_933;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} ldv_pm_ops_instance_runtime_suspend_2_25(out_$p18, $u9);
    goto SeqInstr_932;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.52, out_$p17);
    goto corral_source_split_7332;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_7331;

  $bb23:
    assume out_$i16 == 1;
    goto corral_source_split_7330;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_7308;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_7307;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.51, out_$p13);
    goto corral_source_split_7306;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_7305;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i3 == 1;
    goto corral_source_split_7303;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i3 := $eq.i32(out_$i1, 2);
    goto corral_source_split_7301;

  $bb3:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb111:
    assume !(out_$i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    goto $bb112;

  SeqInstr_996:
    goto corral_source_split_7568;

  SeqInstr_995:
    assume assertsPassed;
    goto SeqInstr_996;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} ldv_pm_ops_instance_complete_2_3(out_$p154, $u9);
    goto SeqInstr_995;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    out_$p154 := $load.ref($M.94, out_$p153);
    goto corral_source_split_7567;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_7566;

  $bb110:
    assume out_$i152 == 1;
    goto corral_source_split_7565;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    out_$i152 := $ne.i64(out_$i151, 0);
    goto corral_source_split_7443;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    out_$i151 := $p2i.ref.i64(out_$p150);
    goto corral_source_split_7442;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    out_$p150 := $load.ref($M.93, out_$p149);
    goto corral_source_split_7441;

  $bb66:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_7440;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb64:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    goto $bb65;

  SeqInstr_957:
    goto corral_source_split_7438;

  SeqInstr_956:
    assume assertsPassed;
    goto SeqInstr_957;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} ldv_pm_ops_instance_resume_2_16(out_$p72, $u9);
    goto SeqInstr_956;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.68, out_$p71);
    goto corral_source_split_7437;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_7436;

  $bb63:
    assume out_$i70 == 1;
    goto corral_source_split_7435;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i64(out_$i69, 0);
    goto corral_source_split_7418;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    out_$i69 := $p2i.ref.i64(out_$p68);
    goto corral_source_split_7417;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.67, out_$p67);
    goto corral_source_split_7416;

  $bb56:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_7415;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb54:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    goto $bb55;

  SeqInstr_948:
    goto corral_source_split_7413;

  SeqInstr_947:
    assume assertsPassed;
    goto SeqInstr_948;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} ldv_pm_ops_instance_resume_noirq_2_19(out_$p54, $u9);
    goto SeqInstr_947;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.62, out_$p53);
    goto corral_source_split_7412;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_7411;

  $bb53:
    assume out_$i52 == 1;
    goto corral_source_split_7410;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i64(out_$i51, 0);
    goto corral_source_split_7408;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(out_$p50);
    goto corral_source_split_7407;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.61, out_$p49);
    goto corral_source_split_7406;

  $bb52:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_7405;

  $bb51:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_945:
    goto corral_source_split_7403;

  SeqInstr_944:
    assume assertsPassed;
    goto SeqInstr_945;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} ldv_pm_ops_instance_suspend_noirq_2_20(out_$p48, $u9);
    goto SeqInstr_944;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.60, out_$p47);
    goto corral_source_split_7402;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_7401;

  $bb50:
    assume out_$i46 == 1;
    goto corral_source_split_7400;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i45, 0);
    goto corral_source_split_7392;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_7391;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.59, out_$p43);
    goto corral_source_split_7390;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_7389;

  $bb48:
    assume out_$i42 == 1;
    goto corral_source_split_7388;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i41, 0);
    goto corral_source_split_7386;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} out_$i41 := ldv_undef_int();
    call {:si_unique_call 1210} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_7385;

  $bb46:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_942:
    goto corral_source_split_7383;

  SeqInstr_941:
    assume assertsPassed;
    goto SeqInstr_942;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} ldv_pm_ops_instance_suspend_2_21(out_$p40, $u9);
    goto SeqInstr_941;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.58, out_$p39);
    goto corral_source_split_7382;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_7381;

  $bb45:
    assume out_$i38 == 1;
    goto corral_source_split_7380;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i64(out_$i37, 0);
    goto corral_source_split_7358;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    out_$i37 := $p2i.ref.i64(out_$p36);
    goto corral_source_split_7357;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.57, out_$p35);
    goto corral_source_split_7356;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_7355;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume out_$i32 == 1;
    goto corral_source_split_7353;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 1);
    goto corral_source_split_7351;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} out_$i31 := ldv_undef_int();
    call {:si_unique_call 1206} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_7350;

  $bb30:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_939:
    goto corral_source_split_7348;

  SeqInstr_938:
    assume assertsPassed;
    goto SeqInstr_939;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} ldv_pm_ops_instance_prepare_2_22(out_$p30, $u9);
    goto SeqInstr_938;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.56, out_$p29);
    goto corral_source_split_7347;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_7346;

  $bb29:
    assume out_$i28 == 1;
    goto corral_source_split_7345;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, 0);
    goto corral_source_split_7317;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_7316;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.55, out_$p25);
    goto corral_source_split_7315;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_7314;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i4 == 1;
    goto corral_source_split_7312;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    out_$i5 := out_$i1;
    assume true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i1, 3);
    goto corral_source_split_7310;

  $bb7:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb61:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    goto $bb62;

  SeqInstr_954:
    goto corral_source_split_7433;

  SeqInstr_953:
    assume assertsPassed;
    goto SeqInstr_954;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} ldv_pm_ops_instance_resume_early_2_17(out_$p66, $u9);
    goto SeqInstr_953;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.66, out_$p65);
    goto corral_source_split_7432;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_7431;

  $bb60:
    assume out_$i64 == 1;
    goto corral_source_split_7430;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i64(out_$i63, 0);
    goto corral_source_split_7428;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    out_$i63 := $p2i.ref.i64(out_$p62);
    goto corral_source_split_7427;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.65, out_$p61);
    goto corral_source_split_7426;

  $bb59:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_7425;

  $bb58:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    goto $bb59;

  SeqInstr_951:
    goto corral_source_split_7423;

  SeqInstr_950:
    assume assertsPassed;
    goto SeqInstr_951;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} ldv_pm_ops_instance_suspend_late_2_18(out_$p60, $u9);
    goto SeqInstr_950;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.64, out_$p59);
    goto corral_source_split_7422;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_7421;

  $bb57:
    assume out_$i58 == 1;
    goto corral_source_split_7420;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i64(out_$i57, 0);
    goto corral_source_split_7398;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    out_$i57 := $p2i.ref.i64(out_$p56);
    goto corral_source_split_7397;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.63, out_$p55);
    goto corral_source_split_7396;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_7395;

  $bb49:
    assume !(out_$i42 == 1);
    goto corral_source_split_7394;

  $bb86:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    goto $bb87;

  SeqInstr_975:
    goto corral_source_split_7503;

  SeqInstr_974:
    assume assertsPassed;
    goto SeqInstr_975;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} ldv_pm_ops_instance_thaw_2_10(out_$p110, $u9);
    goto SeqInstr_974;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    out_$p110 := $load.ref($M.80, out_$p109);
    goto corral_source_split_7502;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_7501;

  $bb85:
    assume out_$i108 == 1;
    goto corral_source_split_7500;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i64(out_$i107, 0);
    goto corral_source_split_7483;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    out_$i107 := $p2i.ref.i64(out_$p106);
    goto corral_source_split_7482;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    out_$p106 := $load.ref($M.79, out_$p105);
    goto corral_source_split_7481;

  $bb78:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_7480;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb76:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    goto $bb77;

  SeqInstr_966:
    goto corral_source_split_7478;

  SeqInstr_965:
    assume assertsPassed;
    goto SeqInstr_966;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} ldv_pm_ops_instance_thaw_early_2_13(out_$p92, $u9);
    goto SeqInstr_965;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    out_$p92 := $load.ref($M.74, out_$p91);
    goto corral_source_split_7477;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_7476;

  $bb75:
    assume out_$i90 == 1;
    goto corral_source_split_7475;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    out_$i90 := $ne.i64(out_$i89, 0);
    goto corral_source_split_7473;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    out_$i89 := $p2i.ref.i64(out_$p88);
    goto corral_source_split_7472;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.73, out_$p87);
    goto corral_source_split_7471;

  $bb74:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_7470;

  $bb73:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    goto $bb74;

  SeqInstr_963:
    goto corral_source_split_7468;

  SeqInstr_962:
    assume assertsPassed;
    goto SeqInstr_963;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} ldv_pm_ops_instance_freeze_late_2_14(out_$p86, $u9);
    goto SeqInstr_962;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.72, out_$p85);
    goto corral_source_split_7467;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_7466;

  $bb72:
    assume out_$i84 == 1;
    goto corral_source_split_7465;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i64(out_$i83, 0);
    goto corral_source_split_7457;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    out_$i83 := $p2i.ref.i64(out_$p82);
    goto corral_source_split_7456;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.71, out_$p81);
    goto corral_source_split_7455;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_7454;

  $bb70:
    assume out_$i80 == 1;
    goto corral_source_split_7453;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    out_$i80 := $ne.i32(out_$i79, 0);
    goto corral_source_split_7451;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} out_$i79 := ldv_undef_int();
    call {:si_unique_call 1218} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_7450;

  $bb68:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_960:
    goto corral_source_split_7448;

  SeqInstr_959:
    assume assertsPassed;
    goto SeqInstr_960;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} ldv_pm_ops_instance_freeze_2_15(out_$p78, $u9);
    goto SeqInstr_959;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.70, out_$p77);
    goto corral_source_split_7447;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_7446;

  $bb67:
    assume out_$i76 == 1;
    goto corral_source_split_7445;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.i64(out_$i75, 0);
    goto corral_source_split_7367;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    out_$i75 := $p2i.ref.i64(out_$p74);
    goto corral_source_split_7366;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.69, out_$p73);
    goto corral_source_split_7365;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_7364;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i33 == 1;
    goto corral_source_split_7362;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i31, 2);
    goto corral_source_split_7360;

  $bb33:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb83:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_972:
    goto corral_source_split_7498;

  SeqInstr_971:
    assume assertsPassed;
    goto SeqInstr_972;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} ldv_pm_ops_instance_thaw_noirq_2_11(out_$p104, $u9);
    goto SeqInstr_971;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    out_$p104 := $load.ref($M.78, out_$p103);
    goto corral_source_split_7497;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_7496;

  $bb82:
    assume out_$i102 == 1;
    goto corral_source_split_7495;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    out_$i102 := $ne.i64(out_$i101, 0);
    goto corral_source_split_7493;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    out_$i101 := $p2i.ref.i64(out_$p100);
    goto corral_source_split_7492;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    out_$p100 := $load.ref($M.77, out_$p99);
    goto corral_source_split_7491;

  $bb81:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_7490;

  $bb80:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    goto $bb81;

  SeqInstr_969:
    goto corral_source_split_7488;

  SeqInstr_968:
    assume assertsPassed;
    goto SeqInstr_969;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} ldv_pm_ops_instance_freeze_noirq_2_12(out_$p98, $u9);
    goto SeqInstr_968;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    out_$p98 := $load.ref($M.76, out_$p97);
    goto corral_source_split_7487;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_7486;

  $bb79:
    assume out_$i96 == 1;
    goto corral_source_split_7485;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    out_$i96 := $ne.i64(out_$i95, 0);
    goto corral_source_split_7463;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    out_$i95 := $p2i.ref.i64(out_$p94);
    goto corral_source_split_7462;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    out_$p94 := $load.ref($M.75, out_$p93);
    goto corral_source_split_7461;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_7460;

  $bb71:
    assume !(out_$i80 == 1);
    goto corral_source_split_7459;

  $bb107:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    goto $bb108;

  SeqInstr_993:
    goto corral_source_split_7563;

  SeqInstr_992:
    assume assertsPassed;
    goto SeqInstr_993;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} ldv_pm_ops_instance_restore_2_4(out_$p148, $u9);
    goto SeqInstr_992;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    out_$p148 := $load.ref($M.92, out_$p147);
    goto corral_source_split_7562;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_7561;

  $bb106:
    assume out_$i146 == 1;
    goto corral_source_split_7560;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    out_$i146 := $ne.i64(out_$i145, 0);
    goto corral_source_split_7543;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    out_$i145 := $p2i.ref.i64(out_$p144);
    goto corral_source_split_7542;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    out_$p144 := $load.ref($M.91, out_$p143);
    goto corral_source_split_7541;

  $bb99:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_7540;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb97:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    goto $bb98;

  SeqInstr_984:
    goto corral_source_split_7538;

  SeqInstr_983:
    assume assertsPassed;
    goto SeqInstr_984;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} ldv_pm_ops_instance_restore_early_2_7(out_$p130, $u9);
    goto SeqInstr_983;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    out_$p130 := $load.ref($M.86, out_$p129);
    goto corral_source_split_7537;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_7536;

  $bb96:
    assume out_$i128 == 1;
    goto corral_source_split_7535;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    out_$i128 := $ne.i64(out_$i127, 0);
    goto corral_source_split_7533;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    out_$i127 := $p2i.ref.i64(out_$p126);
    goto corral_source_split_7532;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    out_$p126 := $load.ref($M.85, out_$p125);
    goto corral_source_split_7531;

  $bb95:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_7530;

  $bb94:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    goto $bb95;

  SeqInstr_981:
    goto corral_source_split_7528;

  SeqInstr_980:
    assume assertsPassed;
    goto SeqInstr_981;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} ldv_pm_ops_instance_poweroff_late_2_8(out_$p124, $u9);
    goto SeqInstr_980;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    out_$p124 := $load.ref($M.84, out_$p123);
    goto corral_source_split_7527;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_7526;

  $bb93:
    assume out_$i122 == 1;
    goto corral_source_split_7525;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    out_$i122 := $ne.i64(out_$i121, 0);
    goto corral_source_split_7517;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    out_$i121 := $p2i.ref.i64(out_$p120);
    goto corral_source_split_7516;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    out_$p120 := $load.ref($M.83, out_$p119);
    goto corral_source_split_7515;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_7514;

  $bb91:
    assume out_$i118 == 1;
    goto corral_source_split_7513;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    out_$i118 := $ne.i32(out_$i117, 0);
    goto corral_source_split_7511;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} out_$i117 := ldv_undef_int();
    call {:si_unique_call 1226} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i117);
    goto corral_source_split_7510;

  $bb89:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    goto $bb90;

  SeqInstr_978:
    goto corral_source_split_7508;

  SeqInstr_977:
    assume assertsPassed;
    goto SeqInstr_978;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} ldv_pm_ops_instance_poweroff_2_9(out_$p116, $u9);
    goto SeqInstr_977;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    out_$p116 := $load.ref($M.82, out_$p115);
    goto corral_source_split_7507;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_7506;

  $bb88:
    assume out_$i114 == 1;
    goto corral_source_split_7505;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    out_$i114 := $ne.i64(out_$i113, 0);
    goto corral_source_split_7376;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    out_$i113 := $p2i.ref.i64(out_$p112);
    goto corral_source_split_7375;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    out_$p112 := $load.ref($M.81, out_$p111);
    goto corral_source_split_7374;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_7373;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume out_$i34 == 1;
    goto corral_source_split_7371;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i31, 3);
    goto corral_source_split_7369;

  $bb37:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb104:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    goto $bb105;

  SeqInstr_990:
    goto corral_source_split_7558;

  SeqInstr_989:
    assume assertsPassed;
    goto SeqInstr_990;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} ldv_pm_ops_instance_restore_noirq_2_5(out_$p142, $u9);
    goto SeqInstr_989;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    out_$p142 := $load.ref($M.90, out_$p141);
    goto corral_source_split_7557;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_7556;

  $bb103:
    assume out_$i140 == 1;
    goto corral_source_split_7555;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    out_$i140 := $ne.i64(out_$i139, 0);
    goto corral_source_split_7553;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    out_$i139 := $p2i.ref.i64(out_$p138);
    goto corral_source_split_7552;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    out_$p138 := $load.ref($M.89, out_$p137);
    goto corral_source_split_7551;

  $bb102:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_7550;

  $bb101:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    goto $bb102;

  SeqInstr_987:
    goto corral_source_split_7548;

  SeqInstr_986:
    assume assertsPassed;
    goto SeqInstr_987;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} ldv_pm_ops_instance_poweroff_noirq_2_6(out_$p136, $u9);
    goto SeqInstr_986;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    out_$p136 := $load.ref($M.88, out_$p135);
    goto corral_source_split_7547;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_7546;

  $bb100:
    assume out_$i134 == 1;
    goto corral_source_split_7545;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    out_$i134 := $ne.i64(out_$i133, 0);
    goto corral_source_split_7523;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    out_$i133 := $p2i.ref.i64(out_$p132);
    goto corral_source_split_7522;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    out_$p132 := $load.ref($M.87, out_$p131);
    goto corral_source_split_7521;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref($u8, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_7520;

  $bb92:
    assume !(out_$i118 == 1);
    goto corral_source_split_7519;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} ldv_stop();
    goto corral_source_split_7378;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p93, out_$p94, out_$i95, out_$i96, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$p135, out_$p136, out_$p137, out_$p138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_$p144, out_$i145, out_$i146, out_$p147, out_$p148, out_$p149, out_$p150, out_$i151, out_$i152, out_$p153, out_$p154 := ldv_platform_pm_ops_instance_2_loop_$bb1(out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p93, out_$p94, out_$i95, out_$i96, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$p135, out_$p136, out_$p137, out_$p138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_$p144, out_$i145, out_$i146, out_$p147, out_$p148, out_$p149, out_$p150, out_$i151, out_$i152, out_$p153, out_$p154);
    return;

  exit:
    return;
}



procedure ldv_platform_pm_ops_instance_2_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i32, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$p77: ref, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$i95: i64, in_$i96: i1, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$i102: i1, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i64, in_$i108: i1, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i113: i64, in_$i114: i1, in_$p115: ref, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$i127: i64, in_$i128: i1, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$i133: i64, in_$i134: i1, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$i139: i64, in_$i140: i1, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$i145: i64, in_$i146: i1, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$i151: i64, in_$i152: i1, in_$p153: ref, in_$p154: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i32, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$p77: ref, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$i95: i64, out_$i96: i1, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$i102: i1, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i64, out_$i108: i1, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i113: i64, out_$i114: i1, out_$p115: ref, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$i127: i64, out_$i128: i1, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$i133: i64, out_$i134: i1, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$i139: i64, out_$i140: i1, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$i145: i64, out_$i146: i1, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$i151: i64, out_$i152: i1, out_$p153: ref, out_$p154: ref);
  modifies $M.44, $M.1, $M.33, $M.103, $M.17, $M.45, $M.16, $M.104, $M.105, $M.2, $M.18, $M.19, $M.20, $M.21, $M.22, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, assertsPassed, $CurrAddr, $M.41, $M.106, $M.107, $M.42, $M.15, $M.12, $M.9, $M.40, $M.39, $M.30, $M.31, $M.32, $M.13, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation {:SIextraRecBound 8} oz_hcd_hub_status_data_loop_$bb1(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$i7: i64, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$i13: i1, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i24, in_$i24: i24, in_$i25: i24, in_$p26: ref, in_$p27: ref, in_$i28: i8, in_$i29: i64, in_$i30: i64, in_$i31: i64, in_$i32: i1, in_$i33: i64, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i64, in_$p42: ref, in_$i43: i1, in_$i44: i8, in_$i45: i32, in_$i46: i32, in_$i47: i32, in_$i48: i8, in_$i49: i32, in_$i50: i32, in_$i51: i8, in_$p52: ref, in_$i53: i8, in_$i54: i32, in_$i55: i32, in_$i56: i32, in_$i57: i8, in_$i58: i32, in_$i59: i32, in_$i60: i8, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$i64: i1, in_$i6: i32) returns (out_$i7: i64, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$i13: i1, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i24, out_$i24: i24, out_$i25: i24, out_$p26: ref, out_$p27: ref, out_$i28: i8, out_$i29: i64, out_$i30: i64, out_$i31: i64, out_$i32: i1, out_$i33: i64, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i64, out_$p42: ref, out_$i43: i1, out_$i44: i8, out_$i45: i32, out_$i46: i32, out_$i47: i32, out_$i48: i8, out_$i49: i32, out_$i50: i32, out_$i51: i8, out_$p52: ref, out_$i53: i8, out_$i54: i32, out_$i55: i32, out_$i56: i32, out_$i57: i8, out_$i58: i32, out_$i59: i32, out_$i60: i8, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$i64: i1, out_$i6: i32)
{

  entry:
    out_$i7, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p36, out_$i37, out_$i38, out_$i39, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i6 := in_$i7, in_$p10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$p17, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$i25, in_$p26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$p36, in_$i37, in_$i38, in_$i39, in_$p42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$p52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p61, in_$i62, in_$i63, in_$i64, in_$i6;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_8185;

  $bb15:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i63;
    goto $bb15_dummy;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    out_$i64 := $sle.i32(out_$i63, 7);
    goto corral_source_split_8259;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i32(out_$i62, 1);
    call {:si_unique_call 1375} {:cexpr "i"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_8258;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_8257;

  $bb4:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    out_$i62 := out_$i6;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i62 := out_$i6;
    goto $bb14;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p61, out_$i60);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, in_$p1, out_$i51);
    goto corral_source_split_8243;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    out_$i51 := $trunc.i32.i8(out_$i50);
    goto corral_source_split_8242;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    out_$i50 := $or.i32(out_$i45, out_$i49);
    goto corral_source_split_8241;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    out_$i49 := $sext.i8.i32(out_$i48);
    goto corral_source_split_8240;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    out_$i48 := $trunc.i32.i8(out_$i47);
    goto corral_source_split_8239;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    out_$i47 := $shl.i32(1, out_$i46);
    goto corral_source_split_8238;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i32(out_$i6, 1);
    goto corral_source_split_8237;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    out_$i45 := $sext.i8.i32(out_$i44);
    goto corral_source_split_8236;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i8($M.1, in_$p1);
    goto corral_source_split_8235;

  $bb11:
    assume out_$i43 == 1;
    goto corral_source_split_8234;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    out_$i43 := $sle.i32(out_$i6, 6);
    goto corral_source_split_8232;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p42, out_$i38);
    goto corral_source_split_8231;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 3344)), $mul.ref(128, 1)), $mul.ref(out_$i39, 400)), $mul.ref(0, 1));
    goto corral_source_split_8230;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i6);
    goto corral_source_split_8229;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    out_$i38 := $and.i32(out_$i37, $sub.i32(0, 3));
    goto corral_source_split_8228;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.1, out_$p36);
    goto corral_source_split_8227;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 3344)), $mul.ref(128, 1)), $mul.ref(out_$i33, 400)), $mul.ref(0, 1));
    goto corral_source_split_8226;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i6);
    goto corral_source_split_8225;

  $bb6:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb8:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} __dynamic_pr_debug.ref.ref.i32(in_$p2, .str.70, out_$i6);
    goto corral_source_split_8223;

  $bb7:
    assume out_$i32 == 1;
    goto corral_source_split_8222;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i64(out_$i31, 0);
    goto corral_source_split_8220;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} out_$i31 := ldv__builtin_expect(out_$i30, 0);
    call {:si_unique_call 1373} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i31);
    goto corral_source_split_8219;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    out_$i30 := $and.i64(out_$i29, 1);
    goto corral_source_split_8218;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i8.i64(out_$i28);
    goto corral_source_split_8217;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i8($M.29, out_$p27);
    goto corral_source_split_8216;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8215;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, out_$p26, 0);
    goto corral_source_split_8214;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8213;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $M.28 := $store.i24($M.28, out_$p22, out_$i25);
    goto corral_source_split_8212;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    out_$i25 := $or.i24(out_$i24, 1891);
    goto corral_source_split_8211;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    out_$i24 := $and.i24(out_$i23, $sub.i24(0, 262144));
    goto corral_source_split_8210;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i24($M.28, out_$p22);
    goto corral_source_split_8209;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_8208;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8207;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, out_$p20, .str.70);
    goto corral_source_split_8206;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8205;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, out_$p19, .str.36);
    goto corral_source_split_8204;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8203;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, out_$p18, .str.69);
    goto corral_source_split_8202;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8201;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, out_$p17, .str.4);
    goto corral_source_split_8200;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8199;

  $bb5:
    assume out_$i16 == 1;
    goto corral_source_split_8198;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i32(out_$i15, 0);
    goto corral_source_split_8196;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    out_$i15 := $and.i32(out_$i14, 8);
    goto corral_source_split_8195;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    out_$i14 := $M.23;
    goto corral_source_split_8194;

  $bb3:
    assume out_$i13 == 1;
    goto corral_source_split_8193;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i32(out_$i12, 0);
    goto corral_source_split_8191;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    out_$i12 := $and.i32(out_$i11, 2);
    goto corral_source_split_8190;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i32($M.1, out_$p10);
    goto corral_source_split_8189;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 3344)), $mul.ref(128, 1)), $mul.ref(out_$i7, 400)), $mul.ref(0, 1));
    goto corral_source_split_8188;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i7 := $sext.i32.i64(out_$i6);
    goto corral_source_split_8187;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref(in_$p1, $mul.ref(1, 1));
    goto corral_source_split_8255;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    out_$i60 := $trunc.i32.i8(out_$i59);
    goto corral_source_split_8254;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    out_$i59 := $or.i32(out_$i54, out_$i58);
    goto corral_source_split_8253;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    out_$i58 := $sext.i8.i32(out_$i57);
    goto corral_source_split_8252;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    out_$i57 := $trunc.i32.i8(out_$i56);
    goto corral_source_split_8251;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    out_$i56 := $shl.i32(1, out_$i55);
    goto corral_source_split_8250;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    out_$i55 := $add.i32(out_$i6, $sub.i32(0, 7));
    goto corral_source_split_8249;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    out_$i54 := $sext.i8.i32(out_$i53);
    goto corral_source_split_8248;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i8($M.1, out_$p52);
    goto corral_source_split_8247;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref(in_$p1, $mul.ref(1, 1));
    goto corral_source_split_8246;

  $bb12:
    assume !(out_$i43 == 1);
    goto corral_source_split_8245;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i7, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p36, out_$i37, out_$i38, out_$i39, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i6 := oz_hcd_hub_status_data_loop_$bb1(in_$p1, in_$p2, in_$p3, out_$i7, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p36, out_$i37, out_$i38, out_$i39, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i6);
    return;

  exit:
    return;
}



procedure oz_hcd_hub_status_data_loop_$bb1(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$i7: i64, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$i13: i1, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i24, in_$i24: i24, in_$i25: i24, in_$p26: ref, in_$p27: ref, in_$i28: i8, in_$i29: i64, in_$i30: i64, in_$i31: i64, in_$i32: i1, in_$i33: i64, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i64, in_$p42: ref, in_$i43: i1, in_$i44: i8, in_$i45: i32, in_$i46: i32, in_$i47: i32, in_$i48: i8, in_$i49: i32, in_$i50: i32, in_$i51: i8, in_$p52: ref, in_$i53: i8, in_$i54: i32, in_$i55: i32, in_$i56: i32, in_$i57: i8, in_$i58: i32, in_$i59: i32, in_$i60: i8, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$i64: i1, in_$i6: i32) returns (out_$i7: i64, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$i13: i1, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i24, out_$i24: i24, out_$i25: i24, out_$p26: ref, out_$p27: ref, out_$i28: i8, out_$i29: i64, out_$i30: i64, out_$i31: i64, out_$i32: i1, out_$i33: i64, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i64, out_$p42: ref, out_$i43: i1, out_$i44: i8, out_$i45: i32, out_$i46: i32, out_$i47: i32, out_$i48: i8, out_$i49: i32, out_$i50: i32, out_$i51: i8, out_$p52: ref, out_$i53: i8, out_$i54: i32, out_$i55: i32, out_$i56: i32, out_$i57: i8, out_$i58: i32, out_$i59: i32, out_$i60: i8, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$i64: i1, out_$i6: i32);
  modifies $M.1, $M.29, $M.28, $M.27, $M.26, $M.25, $M.24;



implementation oz_get_pd_list_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i10: i1, in_$i11: i32, in_$i13: i32, in_$p14: ref, in_$i15: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$i8: i32, in_$p9: ref, in_$i26: i32) returns (out_$i10: i1, out_$i11: i32, out_$i13: i32, out_$p14: ref, out_$i15: i64, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$i8: i32, out_$p9: ref, out_$i26: i32)
{

  entry:
    out_$i10, out_$i11, out_$i13, out_$p14, out_$i15, out_$p16, out_$p17, out_$p18, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i8, out_$p9, out_$i26 := in_$i10, in_$i11, in_$i13, in_$p14, in_$i15, in_$p16, in_$p17, in_$p18, in_$p20, in_$p21, in_$p22, in_$p23, in_$i24, in_$i25, in_$i8, in_$p9, in_$i26;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10304;

  $bb10:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i8, out_$p9 := out_$i13, out_$p21;
    goto $bb10_dummy;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i13;
    assume true;
    goto $bb10;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, $p2i.ref.i64(g_pd_list));
    goto corral_source_split_10325;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_10324;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p22, $mul.ref(0, 1232)), $mul.ref(0, 1));
    goto corral_source_split_10323;

  corral_source_split_10321:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_10322;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.1, out_$p20);
    goto corral_source_split_10321;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(out_$p9, $mul.ref(0, 1232)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_10320;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} ether_addr_copy(out_$p16, out_$p18);
    goto corral_source_split_10319;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_10318;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p9, $mul.ref(0, 1232)), $mul.ref(20, 1));
    goto corral_source_split_10317;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref(out_$p14, $mul.ref(out_$i15, 1));
    goto corral_source_split_10316;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i8);
    goto corral_source_split_10315;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    out_$p14 := $bitcast.ref.ref(in_$p0);
    goto corral_source_split_10314;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i8, 1);
    call {:si_unique_call 1678} {:cexpr "count"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_10313;

  $bb7:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i8;
    assume true;
    goto $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i10 := $sge.i32(out_$i8, in_$i1);
    goto corral_source_split_10306;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i10, out_$i11, out_$i13, out_$p14, out_$i15, out_$p16, out_$p17, out_$p18, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i8, out_$p9, out_$i26 := oz_get_pd_list_loop_$bb4(in_$p0, in_$i1, out_$i10, out_$i11, out_$i13, out_$p14, out_$i15, out_$p16, out_$p17, out_$p18, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i8, out_$p9, out_$i26);
    return;

  exit:
    return;
}



procedure oz_get_pd_list_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i10: i1, in_$i11: i32, in_$i13: i32, in_$p14: ref, in_$i15: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$i8: i32, in_$p9: ref, in_$i26: i32) returns (out_$i10: i1, out_$i11: i32, out_$i13: i32, out_$p14: ref, out_$i15: i64, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$i8: i32, out_$p9: ref, out_$i26: i32);
  modifies $M.1;



implementation oz_binding_remove_loop_$bb4(in_$p0: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p8: ref, in_$p24: ref) returns (out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p8: ref, out_$p24: ref)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p8, out_$p24 := in_$p9, in_$p10, in_$i11, in_$i12, in_$p13, in_$p17, in_$p18, in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$p8, in_$p24;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_10496;

  $bb10:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$p8 := out_$p20;
    goto $bb10_dummy;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    out_$p24 := out_$p20;
    assume true;
    goto $bb10;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i64(out_$i22, $p2i.ref.i64(g_binding));
    goto corral_source_split_10515;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p21);
    goto corral_source_split_10514;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p19, $mul.ref($sub.ref(0, 88), 104)), $mul.ref(88, 1));
    goto corral_source_split_10513;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref(out_$p19, $mul.ref($sub.ref(0, 88), 104));
    goto corral_source_split_10512;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    out_$p19 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_10511;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.1, out_$p17);
    goto corral_source_split_10510;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref($add.ref(out_$p8, $mul.ref(0, 104)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_10509;

  $bb7:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    out_$p13 := out_$p8;
    assume true;
    goto $bb7;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i11, 0);
    goto corral_source_split_10501;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} out_$i11 := strncmp(out_$p10, in_$p0, 32);
    call {:si_unique_call 1727} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_10500;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    out_$p10 := $bitcast.ref.ref(out_$p9);
    goto corral_source_split_10499;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p8, $mul.ref(0, 104)), $mul.ref(56, 1));
    goto corral_source_split_10498;

  corral_source_split_10496:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p8, out_$p24 := oz_binding_remove_loop_$bb4(in_$p0, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p8, out_$p24);
    return;

  exit:
    return;
}



procedure oz_binding_remove_loop_$bb4(in_$p0: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p8: ref, in_$p24: ref) returns (out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p8: ref, out_$p24: ref);



implementation pd_stop_all_for_device_loop_$bb15(in_$p1: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$i34: i1) returns (out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$i34: i1)
{

  entry:
    out_$p30, out_$p31, out_$p32, out_$i33, out_$i34 := in_$p30, in_$p31, in_$p32, in_$i33, in_$i34;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume {:verifier.code 0} true;
    assume out_$i34 == 1;
    goto $bb17_dummy;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i33, 0);
    goto corral_source_split_10661;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} out_$i33 := list_empty(in_$p1);
    call {:si_unique_call 1769} {:cexpr "tmp"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_10660;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1767} oz_pd_put(out_$p32);
    goto corral_source_split_10659;

  SeqInstr_1335:
    goto corral_source_split_10658;

  SeqInstr_1334:
    assume assertsPassed;
    goto SeqInstr_1335;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} oz_pd_stop(out_$p32);
    goto SeqInstr_1334;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    out_$p32 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_10657;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.1, out_$p30);
    goto corral_source_split_10656;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10655;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p30, out_$p31, out_$p32, out_$i33, out_$i34 := pd_stop_all_for_device_loop_$bb15(in_$p1, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34);
    return;

  exit:
    return;
}



procedure pd_stop_all_for_device_loop_$bb15(in_$p1: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$i34: i1) returns (out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$i34: i1);
  modifies $M.1, $CurrAddr, $M.13, assertsPassed, $M.2, $M.16, $M.10, $M.43, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.40, $M.9, $M.15;



implementation pd_stop_all_for_device_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$p20: ref, in_$p22: ref, in_$p23: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p13: ref, in_$p14: ref) returns (out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$p20: ref, out_$p22: ref, out_$p23: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p13: ref, out_$p14: ref)
{

  entry:
    out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p22, out_$p23, out_$p25, out_$i26, out_$i27, out_$p13, out_$p14 := in_$p15, in_$p16, in_$i17, in_$i18, in_$i19, in_$p20, in_$p22, in_$p23, in_$p25, in_$i26, in_$i27, in_$p13, in_$p14;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10627;

  $bb9:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$p13, out_$p14 := out_$p23, out_$p13;
    goto $bb9_dummy;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i64(out_$i26, $p2i.ref.i64(g_pd_list));
    goto corral_source_split_10645;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(out_$p25);
    goto corral_source_split_10644;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p13, $mul.ref(0, 1232)), $mul.ref(0, 1));
    goto corral_source_split_10643;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    goto corral_source_split_10642;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.1, out_$p22);
    goto corral_source_split_10641;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref($add.ref(out_$p13, $mul.ref(0, 1232)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_10640;

  $bb7:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} oz_pd_get(out_$p14);
    goto corral_source_split_10638;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} list_move(out_$p20, in_$p1);
    goto corral_source_split_10637;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p14, $mul.ref(0, 1232)), $mul.ref(0, 1));
    goto corral_source_split_10636;

  $bb6:
    assume out_$i19 == 1;
    goto corral_source_split_10635;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i64(out_$i17, out_$i18);
    goto corral_source_split_10633;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    out_$i18 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_10632;

  corral_source_split_10630:
    assume {:verifier.code 0} true;
    out_$i17 := $p2i.ref.i64(out_$p16);
    goto corral_source_split_10631;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.1, out_$p15);
    goto corral_source_split_10630;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p14, $mul.ref(0, 1232)), $mul.ref(864, 1));
    goto corral_source_split_10629;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p22, out_$p23, out_$p25, out_$i26, out_$i27, out_$p13, out_$p14 := pd_stop_all_for_device_loop_$bb4(in_$p0, in_$p1, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p22, out_$p23, out_$p25, out_$i26, out_$i27, out_$p13, out_$p14);
    return;

  exit:
    return;
}



procedure pd_stop_all_for_device_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$p20: ref, in_$p22: ref, in_$p23: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p13: ref, in_$p14: ref) returns (out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$p20: ref, out_$p22: ref, out_$p23: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p13: ref, out_$p14: ref);
  modifies $M.1;



implementation oz_pd_indicate_farewells_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i8, in_$i17: i32, in_$i18: i8, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i8, in_$i23: i32, in_$i24: i8, in_$p25: ref, in_$i26: i32, in_$i27: i1) returns (out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i8, out_$i17: i32, out_$i18: i8, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i8, out_$i23: i32, out_$i24: i8, out_$p25: ref, out_$i26: i32, out_$i27: i1)
{

  entry:
    out_$p5, out_$p6, out_$p7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27 := in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$p10, in_$i11, in_$i12, in_$p13, in_$p14, in_$p15, in_$i16, in_$i17, in_$i18, in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_$p25, in_$i26, in_$i27;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i27 == 1);
    goto $bb11_dummy;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_10728;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} out_$i26 := list_empty(in_$p1);
    call {:si_unique_call 1792} {:cexpr "tmp"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_10727;

  SeqInstr_1368:
    goto corral_source_split_10726;

  SeqInstr_1367:
    assume assertsPassed;
    goto SeqInstr_1368;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} ldv_spin_lock_bh_121(g_polling_lock);
    goto SeqInstr_1367;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} kfree(out_$p25);
    goto corral_source_split_10725;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(out_$p7);
    goto corral_source_split_10724;

  $bb9:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_10722:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_1365:
    goto corral_source_split_10722;

  SeqInstr_1364:
    assume assertsPassed;
    goto SeqInstr_1365;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    out_$i24 := $trunc.i32.i8(out_$i23);
    call {:si_unique_call 1788} devirtbounce.7(out_$p14, in_$p0, out_$i18, out_$p20, out_$i24);
    goto SeqInstr_1364;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i8.i32(out_$i22);
    goto corral_source_split_10721;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i8($M.1, out_$p21);
    goto corral_source_split_10720;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p7, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_10719;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p19);
    goto corral_source_split_10718;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p7, $mul.ref(0, 24)), $mul.ref(19, 1));
    goto corral_source_split_10717;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    out_$i18 := $trunc.i32.i8(out_$i17);
    goto corral_source_split_10716;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i8.i32(out_$i16);
    goto corral_source_split_10715;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i8($M.1, out_$p15);
    goto corral_source_split_10714;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p7, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_10713;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.98, out_$p13);
    goto corral_source_split_10712;

  $bb8:
    assume out_$i12 == 1;
    out_$p13 := $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(1, 56)), $mul.ref(48, 1));
    goto corral_source_split_10711;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i64(out_$i11, 0);
    goto corral_source_split_10709;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    out_$i11 := $p2i.ref.i64(out_$p10);
    goto corral_source_split_10708;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.98, out_$p9);
    goto corral_source_split_10707;

  SeqInstr_1362:
    out_$p9 := $add.ref($add.ref($add.ref(g_app_if, $mul.ref(0, 280)), $mul.ref(1, 56)), $mul.ref(48, 1));
    goto corral_source_split_10706;

  SeqInstr_1361:
    assume assertsPassed;
    goto SeqInstr_1362;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} ldv_spin_unlock_bh_122(g_polling_lock);
    goto SeqInstr_1361;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} list_del(out_$p8);
    goto corral_source_split_10705;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(out_$p7, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_10704;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    out_$p7 := $bitcast.ref.ref(out_$p6);
    goto corral_source_split_10703;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.1, out_$p5);
    goto corral_source_split_10702;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1232)), $mul.ref(760, 1)), $mul.ref(0, 1));
    goto corral_source_split_10701;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p5, out_$p6, out_$p7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27 := oz_pd_indicate_farewells_loop_$bb4(in_$p0, in_$p1, out_$p5, out_$p6, out_$p7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27);
    return;

  exit:
    return;
}



procedure oz_pd_indicate_farewells_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i8, in_$i17: i32, in_$i18: i8, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i8, in_$i23: i32, in_$i24: i8, in_$p25: ref, in_$i26: i32, in_$i27: i1) returns (out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i8, out_$i17: i32, out_$i18: i8, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i8, out_$i23: i32, out_$i24: i8, out_$p25: ref, out_$i26: i32, out_$i27: i1);
  modifies $M.13, assertsPassed, $M.1, $M.2, $M.16, $M.15, $CurrAddr;



implementation oz_pd_find_loop_$bb4(in_$p0: ref, in_$p7: ref, in_$p8: ref, in_$i9: i1, in_$i10: i8, in_$i11: i1, in_$p12: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p6: ref) returns (out_$p7: ref, out_$p8: ref, out_$i9: i1, out_$i10: i8, out_$i11: i1, out_$p12: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p6: ref)
{

  entry:
    out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$p12, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p6 := in_$p7, in_$p8, in_$i9, in_$i10, in_$i11, in_$p12, in_$p15, in_$p16, in_$p17, in_$p18, in_$i19, in_$i20, in_$p6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_10970;

  $bb10:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$p6 := out_$p16;
    goto $bb10_dummy;

  corral_source_split_10989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_10988:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i64(out_$i19, $p2i.ref.i64(g_pd_list));
    goto corral_source_split_10989;

  corral_source_split_10987:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_10988;

  corral_source_split_10986:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p17, $mul.ref(0, 1232)), $mul.ref(0, 1));
    goto corral_source_split_10987;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    out_$p17 := $bitcast.ref.ref(out_$p16);
    goto corral_source_split_10986;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.1, out_$p15);
    goto corral_source_split_10985;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref($add.ref(out_$p6, $mul.ref(0, 1232)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_10984;

  $bb7:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    out_$p12 := out_$p6;
    assume true;
    goto $bb7;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    out_$i11 := $trunc.i8.i1(out_$i10);
    goto corral_source_split_10976;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    out_$i10 := $zext.i1.i8(out_$i9);
    call {:si_unique_call 1820} {:cexpr "tmp"} boogie_si_record_i8(out_$i10);
    goto corral_source_split_10975;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} out_$i9 := ether_addr_equal(out_$p8, in_$p0);
    goto corral_source_split_10974;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    out_$p8 := $bitcast.ref.ref(out_$p7);
    goto corral_source_split_10973;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(out_$p6, $mul.ref(0, 1232)), $mul.ref(20, 1));
    goto corral_source_split_10972;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$p12, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p6 := oz_pd_find_loop_$bb4(in_$p0, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$p12, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p6);
    return;

  exit:
    return;
}



procedure oz_pd_find_loop_$bb4(in_$p0: ref, in_$p7: ref, in_$p8: ref, in_$i9: i1, in_$i10: i8, in_$i11: i1, in_$p12: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p6: ref) returns (out_$p7: ref, out_$p8: ref, out_$i9: i1, out_$i10: i8, out_$i11: i1, out_$p12: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p6: ref);



implementation oz_protocol_term_loop_$bb15(in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i37: i1) returns (out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i37: i1)
{

  entry:
    out_$p34, out_$p35, out_$i36, out_$i37 := in_$p34, in_$p35, in_$i36, in_$i37;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume {:verifier.code 0} true;
    assume out_$i37 == 1;
    goto $bb17_dummy;

  corral_source_split_11219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_11218:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i36, 0);
    goto corral_source_split_11219;

  corral_source_split_11217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1898} out_$i36 := list_empty(g_pd_list);
    call {:si_unique_call 1899} {:cexpr "tmp"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_11218;

  SeqInstr_1497:
    goto corral_source_split_11217;

  SeqInstr_1496:
    assume assertsPassed;
    goto SeqInstr_1497;

  corral_source_split_11216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} ldv_spin_lock_bh_121(g_polling_lock);
    goto SeqInstr_1496;

  corral_source_split_11215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1896} oz_pd_put(out_$p35);
    goto corral_source_split_11216;

  SeqInstr_1494:
    goto corral_source_split_11215;

  SeqInstr_1493:
    assume assertsPassed;
    goto SeqInstr_1494;

  corral_source_split_11214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} oz_pd_stop(out_$p35);
    goto SeqInstr_1493;

  SeqInstr_1491:
    goto corral_source_split_11214;

  SeqInstr_1490:
    assume assertsPassed;
    goto SeqInstr_1491;

  corral_source_split_11213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1894} ldv_spin_unlock_bh_122(g_polling_lock);
    goto SeqInstr_1490;

  corral_source_split_11212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} oz_pd_get(out_$p35);
    goto corral_source_split_11213;

  corral_source_split_11211:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p34);
    goto corral_source_split_11212;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.1, g_pd_list);
    goto corral_source_split_11211;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p34, out_$p35, out_$i36, out_$i37 := oz_protocol_term_loop_$bb15(out_$p34, out_$p35, out_$i36, out_$i37);
    return;

  exit:
    return;
}



procedure oz_protocol_term_loop_$bb15(in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i37: i1) returns (out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i37: i1);
  modifies $M.13, assertsPassed, $M.1, $CurrAddr, $M.2, $M.16, $M.10, $M.43, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.40, $M.9, $M.15;



implementation oz_protocol_term_loop_$bb4(in_$p13: ref, in_$p14: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p11: ref, in_$p12: ref) returns (out_$p13: ref, out_$p14: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p11: ref, out_$p12: ref)
{

  entry:
    out_$p13, out_$p14, out_$p16, out_$p17, out_$i18, out_$i19, out_$p21, out_$p22, out_$p23, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p11, out_$p12 := in_$p13, in_$p14, in_$p16, in_$p17, in_$i18, in_$i19, in_$p21, in_$p22, in_$p23, in_$p25, in_$p26, in_$p27, in_$p28, in_$p29, in_$i30, in_$i31, in_$p11, in_$p12;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11174;

  $bb9:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$p11, out_$p12 := out_$p12, out_$p28;
    goto $bb9_dummy;

  corral_source_split_11200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_11199:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i64(out_$i30, $p2i.ref.i64(g_binding));
    goto corral_source_split_11200;

  corral_source_split_11198:
    assume {:verifier.code 0} true;
    out_$i30 := $p2i.ref.i64(out_$p29);
    goto corral_source_split_11199;

  corral_source_split_11197:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p12, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_11198;

  corral_source_split_11196:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref(out_$p27, $mul.ref($sub.ref(0, 88), 104));
    goto corral_source_split_11197;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    out_$p27 := $bitcast.ref.ref(out_$p26);
    goto corral_source_split_11196;

  corral_source_split_11194:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.1, out_$p25);
    goto corral_source_split_11195;

  corral_source_split_11193:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 104)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_11194;

  SeqInstr_1482:
    goto corral_source_split_11193;

  SeqInstr_1481:
    assume assertsPassed;
    goto SeqInstr_1482;

  corral_source_split_11192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1888} ldv_spin_lock_bh_132___0(g_binding_lock);
    goto SeqInstr_1481;

  corral_source_split_11191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} kfree(out_$p23);
    goto corral_source_split_11192;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p11);
    goto corral_source_split_11191;

  $bb7:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_11189:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_1479:
    goto corral_source_split_11189;

  SeqInstr_1478:
    assume assertsPassed;
    goto SeqInstr_1479;

  corral_source_split_11188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} dev_put___0(out_$p22);
    goto SeqInstr_1478;

  corral_source_split_11187:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.1, out_$p21);
    goto corral_source_split_11188;

  corral_source_split_11186:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_11187;

  $bb6:
    assume out_$i19 == 1;
    goto corral_source_split_11186;

  corral_source_split_11184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_11183:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i64(out_$i18, 0);
    goto corral_source_split_11184;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    out_$i18 := $p2i.ref.i64(out_$p17);
    goto corral_source_split_11183;

  corral_source_split_11181:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.1, out_$p16);
    goto corral_source_split_11182;

  corral_source_split_11180:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_11181;

  corral_source_split_11179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} dev_remove_pack(out_$p14);
    goto corral_source_split_11180;

  corral_source_split_11178:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p11, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_11179;

  SeqInstr_1476:
    goto corral_source_split_11178;

  SeqInstr_1475:
    assume assertsPassed;
    goto SeqInstr_1476;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} ldv_spin_unlock_bh_133___0(g_binding_lock);
    goto SeqInstr_1475;

  corral_source_split_11176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} list_del(out_$p13);
    goto corral_source_split_11177;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p11, $mul.ref(0, 104)), $mul.ref(88, 1));
    goto corral_source_split_11176;

  corral_source_split_11174:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$p16, out_$p17, out_$i18, out_$i19, out_$p21, out_$p22, out_$p23, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p11, out_$p12 := oz_protocol_term_loop_$bb4(out_$p13, out_$p14, out_$p16, out_$p17, out_$i18, out_$i19, out_$p21, out_$p22, out_$p23, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p11, out_$p12);
    return;

  exit:
    return;
}



procedure oz_protocol_term_loop_$bb4(in_$p13: ref, in_$p14: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p11: ref, in_$p12: ref) returns (out_$p13: ref, out_$p14: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p11: ref, out_$p12: ref);
  modifies $M.99, assertsPassed, $M.1, $M.2, $M.16, $M.15, $M.9, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $CurrAddr, $M.30, $M.31, $M.32, $M.40, $M.13, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation oz_protocol_init_loop_$bb14(in_$p1: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i8, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i1, in_$p18: ref) returns (out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i8, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i1, out_$p18: ref)
{

  entry:
    out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p18 := in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_$p25, in_$i26, in_$i27, in_$i28, in_$p18;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_11465;

  $bb19:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$p18 := out_$p20;
    goto $bb19_dummy;

  corral_source_split_11480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_11479:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i27, 0);
    goto corral_source_split_11480;

  corral_source_split_11478:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i8.i32(out_$i26);
    goto corral_source_split_11479;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i8($M.114, out_$p20);
    goto corral_source_split_11478;

  $bb17:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_11476:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_1593:
    goto corral_source_split_11476;

  SeqInstr_1592:
    assume assertsPassed;
    goto SeqInstr_1593;

  corral_source_split_11475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1983} oz_binding_add(out_$p25);
    goto SeqInstr_1592;

  corral_source_split_11474:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_11475;

  $bb16:
    assume out_$i24 == 1;
    goto corral_source_split_11474;

  corral_source_split_11472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_11471:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, 0);
    goto corral_source_split_11472;

  corral_source_split_11470:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i8.i32(out_$i22);
    goto corral_source_split_11471;

  corral_source_split_11469:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i8($M.1, out_$p21);
    goto corral_source_split_11470;

  corral_source_split_11468:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_11469;

  corral_source_split_11467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1982} out_$p20 := oz_get_next_device_name(out_$p18, out_$p19, 32);
    goto corral_source_split_11468;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p19 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_11467;

  corral_source_split_11465:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p18 := oz_protocol_init_loop_$bb14(in_$p1, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p18);
    return;

  exit:
    return;
}



procedure oz_protocol_init_loop_$bb14(in_$p1: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i8, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i1, in_$p18: ref) returns (out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i8, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i1, out_$p18: ref);
  modifies $M.1, $M.99, assertsPassed, $CurrAddr;



implementation oz_get_next_device_name_loop_$bb12(in_$p21: ref, in_$p22: ref, in_$i23: i8, in_$i24: i32, in_$i25: i8, in_$i26: i32, in_$i27: i1, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$i30: i8, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p28: ref, in_$p29: ref) returns (out_$p21: ref, out_$p22: ref, out_$i23: i8, out_$i24: i32, out_$i25: i8, out_$i26: i32, out_$i27: i1, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$i30: i8, out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p28: ref, out_$p29: ref)
{

  entry:
    out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p18, out_$p19, out_$i20, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p28, out_$p29 := in_$p21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$p18, in_$p19, in_$i20, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p36, in_$p28, in_$p29;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11528;

  $bb14:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$p18, out_$p19, out_$i20 := out_$p22, out_$p21, out_$i24;
    goto $bb14_dummy;

  corral_source_split_11542:
    assume {:verifier.code 0} true;
    out_$p28, out_$p29 := out_$p21, out_$p22;
    assume true;
    goto $bb14;

  corral_source_split_11541:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_11542;

  corral_source_split_11540:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i8.i32(out_$i25);
    goto corral_source_split_11541;

  corral_source_split_11539:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i8($M.114, out_$p22);
    goto corral_source_split_11540;

  corral_source_split_11538:
    assume {:verifier.code 0} true;
    out_$i24 := $sub.i32(out_$i20, 1);
    call {:si_unique_call 1994} {:cexpr "max_size"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_11539;

  corral_source_split_11537:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p19, out_$i23);
    goto corral_source_split_11538;

  corral_source_split_11536:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i8($M.114, out_$p18);
    goto corral_source_split_11537;

  corral_source_split_11535:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref(out_$p18, $mul.ref(1, 1));
    goto corral_source_split_11536;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref(out_$p19, $mul.ref(1, 1));
    goto corral_source_split_11535;

  corral_source_split_11546:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb16:
    assume out_$i34 == 1;
    goto corral_source_split_11546;

  corral_source_split_11533:
    assume {:verifier.code 0} true;
    out_$p35, out_$p36 := out_$p19, out_$p18;
    assume true;
    goto $bb16;

  corral_source_split_11532:
    assume {:verifier.code 0} true;
    out_$i34 := $and.i1(out_$i32, out_$i33);
    goto corral_source_split_11533;

  corral_source_split_11531:
    assume {:verifier.code 0} true;
    out_$i33 := $sgt.i32(out_$i20, 1);
    goto corral_source_split_11532;

  corral_source_split_11530:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i32(out_$i31, 44);
    goto corral_source_split_11531;

  corral_source_split_11529:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i8.i32(out_$i30);
    goto corral_source_split_11530;

  corral_source_split_11528:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i8($M.114, out_$p18);
    goto corral_source_split_11529;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p18, out_$p19, out_$i20, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p28, out_$p29 := oz_get_next_device_name_loop_$bb12(out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p18, out_$p19, out_$i20, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p28, out_$p29);
    return;

  exit:
    return;
}



procedure oz_get_next_device_name_loop_$bb12(in_$p21: ref, in_$p22: ref, in_$i23: i8, in_$i24: i32, in_$i25: i8, in_$i26: i32, in_$i27: i1, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$i30: i8, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p28: ref, in_$p29: ref) returns (out_$p21: ref, out_$p22: ref, out_$i23: i8, out_$i24: i32, out_$i25: i8, out_$i26: i32, out_$i27: i1, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$i30: i8, out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p28: ref, out_$p29: ref);
  modifies $M.1;



implementation oz_get_next_device_name_loop_$bb4(in_$p8: ref, in_$i9: i8, in_$i10: i32, in_$i11: i1, in_$p7: ref, in_$p12: ref) returns (out_$p8: ref, out_$i9: i8, out_$i10: i32, out_$i11: i1, out_$p7: ref, out_$p12: ref)
{

  entry:
    out_$p8, out_$i9, out_$i10, out_$i11, out_$p7, out_$p12 := in_$p8, in_$i9, in_$i10, in_$i11, in_$p7, in_$p12;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_11513;

  $bb6:
    assume out_$i11 == 1;
    assume {:verifier.code 0} true;
    out_$p7 := out_$p8;
    goto $bb6_dummy;

  corral_source_split_11518:
    assume {:verifier.code 0} true;
    out_$p12 := out_$p8;
    assume true;
    goto $bb6;

  corral_source_split_11517:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i10, 44);
    goto corral_source_split_11518;

  corral_source_split_11516:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i8.i32(out_$i9);
    goto corral_source_split_11517;

  corral_source_split_11515:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i8($M.114, out_$p8);
    goto corral_source_split_11516;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref(out_$p7, $mul.ref(1, 1));
    goto corral_source_split_11515;

  corral_source_split_11513:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p8, out_$i9, out_$i10, out_$i11, out_$p7, out_$p12 := oz_get_next_device_name_loop_$bb4(out_$p8, out_$i9, out_$i10, out_$i11, out_$p7, out_$p12);
    return;

  exit:
    return;
}



procedure oz_get_next_device_name_loop_$bb4(in_$p8: ref, in_$i9: i8, in_$i10: i32, in_$i11: i1, in_$p7: ref, in_$p12: ref) returns (out_$p8: ref, out_$i9: i8, out_$i10: i32, out_$i11: i1, out_$p7: ref, out_$p12: ref);



implementation ldv_file_operations_file_operations_instance_0_loop_$bb10(in_$p7: ref, in_$p9: ref, in_$p14: ref, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i32, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$i47: i32, in_$p48: ref, in_$p49: ref, in_$p50: ref) returns (out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i32, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$i47: i32, out_$p48: ref, out_$p49: ref, out_$p50: ref)
{

  entry:
    out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50 := in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$p38, in_$p39, in_$p40, in_$p41, in_$p42, in_$p43, in_$p44, in_$i45, in_$i46, in_$i47, in_$p48, in_$p49, in_$p50;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2043} out_$i31 := ldv_undef_int();
    call {:si_unique_call 2044} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_11667;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb36_dummy;

  corral_source_split_11713:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_11707:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_11689:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_11677:
    assume {:verifier.code 0} true;
    goto $bb36;

  SeqInstr_1632:
    goto corral_source_split_11677;

  SeqInstr_1631:
    assume assertsPassed;
    goto SeqInstr_1632;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2047} ldv_file_operations_instance_callback_0_23($u14, in_$p9, $u10, $u0);
    goto SeqInstr_1631;

  corral_source_split_11675:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i32 == 1;
    goto corral_source_split_11675;

  corral_source_split_11668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_11667:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 1);
    goto corral_source_split_11668;

  corral_source_split_11688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2052} ldv_free(out_$p41);
    goto corral_source_split_11689;

  corral_source_split_11687:
    assume {:verifier.code 0} true;
    out_$p41 := $bitcast.ref.ref(out_$p40);
    goto corral_source_split_11688;

  corral_source_split_11686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2051} ldv_free(out_$p38);
    goto corral_source_split_11687;

  SeqInstr_1635:
    goto corral_source_split_11686;

  SeqInstr_1634:
    assume assertsPassed;
    goto SeqInstr_1635;

  corral_source_split_11685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2050} ldv_file_operations_instance_callback_0_20($u15, in_$p9, out_$p38, $u0, out_$p40);
    goto SeqInstr_1634;

  corral_source_split_11684:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(out_$p39);
    goto corral_source_split_11685;

  corral_source_split_11683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2049} out_$p39 := ldv_xmalloc(8);
    goto corral_source_split_11684;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2048} out_$p38 := ldv_xmalloc(1);
    goto corral_source_split_11683;

  corral_source_split_11681:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i33 == 1;
    goto corral_source_split_11681;

  corral_source_split_11679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i31, 2);
    goto corral_source_split_11679;

  $bb16:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_11706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2058} ldv_free(out_$p50);
    goto corral_source_split_11707;

  corral_source_split_11705:
    assume {:verifier.code 0} true;
    out_$p50 := $bitcast.ref.ref(out_$p44);
    goto corral_source_split_11706;

  corral_source_split_11704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2057} ldv_free(out_$p42);
    goto corral_source_split_11705;

  SeqInstr_1638:
    goto corral_source_split_11704;

  SeqInstr_1637:
    assume assertsPassed;
    goto SeqInstr_1638;

  corral_source_split_11703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2056} ldv_file_operations_instance_write_0_4(out_$p49, in_$p9, out_$p42, $u0, out_$p44);
    goto SeqInstr_1637;

  corral_source_split_11702:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.1, out_$p48);
    goto corral_source_split_11703;

  corral_source_split_11701:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p7, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_11702;

  corral_source_split_11700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2055} ldv_assume(out_$i47);
    goto corral_source_split_11701;

  corral_source_split_11699:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i1.i32(out_$i46);
    goto corral_source_split_11700;

  corral_source_split_11698:
    assume {:verifier.code 0} true;
    out_$i46 := $ule.i64(out_$i45, 2147479552);
    goto corral_source_split_11699;

  corral_source_split_11697:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(in_$p14);
    goto corral_source_split_11698;

  corral_source_split_11696:
    assume {:verifier.code 0} true;
    out_$p44 := $bitcast.ref.ref(out_$p43);
    goto corral_source_split_11697;

  corral_source_split_11695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2054} out_$p43 := ldv_xmalloc(8);
    goto corral_source_split_11696;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2053} out_$p42 := ldv_xmalloc(1);
    goto corral_source_split_11695;

  corral_source_split_11693:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume out_$i34 == 1;
    goto corral_source_split_11693;

  corral_source_split_11691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i31, 3);
    goto corral_source_split_11691;

  $bb20:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_1641:
    goto corral_source_split_11713;

  SeqInstr_1640:
    assume assertsPassed;
    goto SeqInstr_1641;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2059} ldv_file_operations_instance_callback_0_5($u16, in_$p9, in_$p14);
    goto SeqInstr_1640;

  corral_source_split_11711:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume out_$i35 == 1;
    goto corral_source_split_11711;

  corral_source_split_11709:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i31;
    assume true;
    goto $bb27;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i31, 4);
    goto corral_source_split_11709;

  $bb24:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb36_dummy:
    call {:si_unique_call 1} out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50 := ldv_file_operations_file_operations_instance_0_loop_$bb10(in_$p7, in_$p9, in_$p14, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50);
    return;

  exit:
    return;
}



procedure ldv_file_operations_file_operations_instance_0_loop_$bb10(in_$p7: ref, in_$p9: ref, in_$p14: ref, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i32, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$i47: i32, in_$p48: ref, in_$p49: ref, in_$p50: ref) returns (out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i32, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$i47: i32, out_$p48: ref, out_$p49: ref, out_$p50: ref);
  modifies $M.1, $M.5, $M.10, $CurrAddr, $M.13, assertsPassed, $M.99, $M.2, $M.16, $M.15, $M.9, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.43, $M.30, $M.31, $M.32, $M.40, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_file_operations_file_operations_instance_0_loop_$bb7(in_$p7: ref, in_$p9: ref, in_$p11: ref, in_$p14: ref, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i23: i1, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$i47: i32, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref) returns (out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i23: i1, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$i47: i32, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref)
{

  entry:
    out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52 := in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$p38, in_$p39, in_$p40, in_$p41, in_$p42, in_$p43, in_$p44, in_$i45, in_$i46, in_$i47, in_$p48, in_$p49, in_$p50, in_$p51, in_$p52;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p7, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_11650;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i28 == 1;
    goto $bb12_dummy;

  corral_source_split_11671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_11670:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i27, 0);
    goto corral_source_split_11671;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2045} out_$i27 := ldv_undef_int();
    call {:si_unique_call 2046} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_11670;

  corral_source_split_11665:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_11721:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_11720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2060} ldv_file_operations_instance_release_0_2(out_$p52, in_$p11, in_$p9);
    goto corral_source_split_11721;

  corral_source_split_11719:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.1, out_$p51);
    goto corral_source_split_11720;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p7, $mul.ref(0, 240)), $mul.ref(128, 1));
    goto corral_source_split_11719;

  corral_source_split_11717:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume out_$i37 == 1;
    goto corral_source_split_11717;

  corral_source_split_11715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i36, 5);
    goto corral_source_split_11715;

  $bb28:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_11709:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i31;
    assume true;
    goto $bb27, $bb28;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i31, 4);
    goto corral_source_split_11709;

  $bb24:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_11691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i31, 3);
    goto corral_source_split_11691;

  $bb20:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_11679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i31, 2);
    goto corral_source_split_11679;

  $bb16:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_11668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_11667:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 1);
    goto corral_source_split_11668;

  $bb10:
    call out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50 := ldv_file_operations_file_operations_instance_0_loop_$bb10(in_$p7, in_$p9, in_$p14, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2043} out_$i31 := ldv_undef_int();
    call {:si_unique_call 2044} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_11667;

  corral_source_split_11660:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb36:
    assume {:verifier.code 0} true;
    assume false;
    return;

  corral_source_split_11713:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_11707:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_11689:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_11677:
    assume {:verifier.code 0} true;
    goto $bb36;

  SeqInstr_1632:
    goto corral_source_split_11677;

  SeqInstr_1631:
    assume assertsPassed;
    goto SeqInstr_1632;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2047} ldv_file_operations_instance_callback_0_23($u14, in_$p9, $u10, $u0);
    goto SeqInstr_1631;

  corral_source_split_11675:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i32 == 1;
    goto corral_source_split_11675;

  corral_source_split_11688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2052} ldv_free(out_$p41);
    goto corral_source_split_11689;

  corral_source_split_11687:
    assume {:verifier.code 0} true;
    out_$p41 := $bitcast.ref.ref(out_$p40);
    goto corral_source_split_11688;

  corral_source_split_11686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2051} ldv_free(out_$p38);
    goto corral_source_split_11687;

  SeqInstr_1635:
    goto corral_source_split_11686;

  SeqInstr_1634:
    assume assertsPassed;
    goto SeqInstr_1635;

  corral_source_split_11685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2050} ldv_file_operations_instance_callback_0_20($u15, in_$p9, out_$p38, $u0, out_$p40);
    goto SeqInstr_1634;

  corral_source_split_11684:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(out_$p39);
    goto corral_source_split_11685;

  corral_source_split_11683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2049} out_$p39 := ldv_xmalloc(8);
    goto corral_source_split_11684;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2048} out_$p38 := ldv_xmalloc(1);
    goto corral_source_split_11683;

  corral_source_split_11681:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i33 == 1;
    goto corral_source_split_11681;

  corral_source_split_11706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2058} ldv_free(out_$p50);
    goto corral_source_split_11707;

  corral_source_split_11705:
    assume {:verifier.code 0} true;
    out_$p50 := $bitcast.ref.ref(out_$p44);
    goto corral_source_split_11706;

  corral_source_split_11704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2057} ldv_free(out_$p42);
    goto corral_source_split_11705;

  SeqInstr_1638:
    goto corral_source_split_11704;

  SeqInstr_1637:
    assume assertsPassed;
    goto SeqInstr_1638;

  corral_source_split_11703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2056} ldv_file_operations_instance_write_0_4(out_$p49, in_$p9, out_$p42, $u0, out_$p44);
    goto SeqInstr_1637;

  corral_source_split_11702:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.1, out_$p48);
    goto corral_source_split_11703;

  corral_source_split_11701:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p7, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_11702;

  corral_source_split_11700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2055} ldv_assume(out_$i47);
    goto corral_source_split_11701;

  corral_source_split_11699:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i1.i32(out_$i46);
    goto corral_source_split_11700;

  corral_source_split_11698:
    assume {:verifier.code 0} true;
    out_$i46 := $ule.i64(out_$i45, 2147479552);
    goto corral_source_split_11699;

  corral_source_split_11697:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(in_$p14);
    goto corral_source_split_11698;

  corral_source_split_11696:
    assume {:verifier.code 0} true;
    out_$p44 := $bitcast.ref.ref(out_$p43);
    goto corral_source_split_11697;

  corral_source_split_11695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2054} out_$p43 := ldv_xmalloc(8);
    goto corral_source_split_11696;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2053} out_$p42 := ldv_xmalloc(1);
    goto corral_source_split_11695;

  corral_source_split_11693:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume out_$i34 == 1;
    goto corral_source_split_11693;

  SeqInstr_1641:
    goto corral_source_split_11713;

  SeqInstr_1640:
    assume assertsPassed;
    goto SeqInstr_1641;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2059} ldv_file_operations_instance_callback_0_5($u16, in_$p9, in_$p14);
    goto SeqInstr_1640;

  corral_source_split_11711:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume out_$i35 == 1;
    goto corral_source_split_11711;

  corral_source_split_11659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2041} ldv_assume(out_$i24);
    goto corral_source_split_11660;

  corral_source_split_11658:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i1.i32(out_$i23);
    goto corral_source_split_11659;

  corral_source_split_11657:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i20, 0);
    goto corral_source_split_11658;

  $bb8:
    assume out_$i22 == 1;
    goto corral_source_split_11657;

  corral_source_split_11655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_11654:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_11655;

  corral_source_split_11653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2039} out_$i21 := ldv_undef_int();
    call {:si_unique_call 2040} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_11654;

  corral_source_split_11652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2037} out_$i20 := ldv_filter_err_code(out_$i19);
    call {:si_unique_call 2038} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_11653;

  corral_source_split_11651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2035} out_$i19 := ldv_file_operations_instance_probe_0_12(out_$p18, in_$p11, in_$p9);
    call {:si_unique_call 2036} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_11652;

  corral_source_split_11650:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.1, out_$p17);
    goto corral_source_split_11651;

  corral_source_split_11664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2042} ldv_assume(out_$i26);
    goto corral_source_split_11665;

  corral_source_split_11663:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i1.i32(out_$i25);
    goto corral_source_split_11664;

  corral_source_split_11662:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i32(out_$i20, 0);
    goto corral_source_split_11663;

  $bb9:
    assume !(out_$i22 == 1);
    goto corral_source_split_11662;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52 := ldv_file_operations_file_operations_instance_0_loop_$bb7(in_$p7, in_$p9, in_$p11, in_$p14, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52);
    return;

  exit:
    return;
}



procedure ldv_file_operations_file_operations_instance_0_loop_$bb7(in_$p7: ref, in_$p9: ref, in_$p11: ref, in_$p14: ref, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i23: i1, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$i47: i32, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref) returns (out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i23: i1, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$i47: i32, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref);
  modifies $M.1, $M.5, $M.10, $CurrAddr, $M.13, assertsPassed, $M.99, $M.2, $M.16, $M.15, $M.9, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.43, $M.30, $M.31, $M.32, $M.40, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation ldv_struct_hc_driver_io_instance_3_loop_$bb7(in_$p2: ref, in_$p4: ref, in_$p6: ref, in_$i24: i32, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i32, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i16, in_$i41: i32, in_$i42: i16, in_$i43: i32, in_$i44: i16, in_$i45: i32, in_$i46: i16) returns (out_$i24: i32, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i32, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i16, out_$i41: i32, out_$i42: i16, out_$i43: i32, out_$i44: i16, out_$i45: i32, out_$i46: i16)
{

  entry:
    out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46 := in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$p37, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2109} out_$i24 := ldv_undef_int();
    call {:si_unique_call 2110} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_11828;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb57_dummy;

  corral_source_split_11904:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_11898:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_11892:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_11886:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_11880:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_11874:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_11858:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_11850:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_11844:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_11838:
    assume {:verifier.code 0} true;
    goto $bb57;

  SeqInstr_1671:
    goto corral_source_split_11838;

  SeqInstr_1670:
    assume assertsPassed;
    goto SeqInstr_1671;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2113} ldv_io_instance_callback_3_31($u18, in_$p4, in_$p2, $u10);
    goto SeqInstr_1670;

  corral_source_split_11836:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume out_$i25 == 1;
    goto corral_source_split_11836;

  corral_source_split_11829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_11828:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, 1);
    goto corral_source_split_11829;

  SeqInstr_1674:
    goto corral_source_split_11844;

  SeqInstr_1673:
    assume assertsPassed;
    goto SeqInstr_1674;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2114} ldv_io_instance_callback_3_28($u18, in_$p4, in_$p2, $u10);
    goto SeqInstr_1673;

  corral_source_split_11842:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume out_$i26 == 1;
    goto corral_source_split_11842;

  corral_source_split_11840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i24, 2);
    goto corral_source_split_11840;

  $bb13:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2115} ldv_io_instance_callback_3_27($u19, in_$p4);
    goto corral_source_split_11850;

  corral_source_split_11848:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume out_$i27 == 1;
    goto corral_source_split_11848;

  corral_source_split_11846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i24, 3);
    goto corral_source_split_11846;

  $bb17:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_11857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2118} ldv_free(out_$p37);
    goto corral_source_split_11858;

  SeqInstr_1677:
    goto corral_source_split_11857;

  SeqInstr_1676:
    assume assertsPassed;
    goto SeqInstr_1677;

  corral_source_split_11856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2117} ldv_io_instance_callback_3_24($u20, in_$p4, out_$p37);
    goto SeqInstr_1676;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2116} out_$p37 := ldv_xmalloc(1);
    goto corral_source_split_11856;

  corral_source_split_11854:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb24:
    assume out_$i28 == 1;
    goto corral_source_split_11854;

  corral_source_split_11852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i24, 4);
    goto corral_source_split_11852;

  $bb21:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_11873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2121} ldv_free(out_$p38);
    goto corral_source_split_11874;

  SeqInstr_1680:
    goto corral_source_split_11873;

  SeqInstr_1679:
    assume assertsPassed;
    goto SeqInstr_1680;

  corral_source_split_11872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2120} ldv_io_instance_callback_3_21($u22, in_$p4, out_$i40, out_$i42, out_$i44, out_$p38, out_$i46);
    goto SeqInstr_1679;

  corral_source_split_11871:
    assume {:verifier.code 0} true;
    out_$i46 := $trunc.i32.i16(out_$i45);
    goto corral_source_split_11872;

  corral_source_split_11870:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i16.i32($u21);
    goto corral_source_split_11871;

  corral_source_split_11869:
    assume {:verifier.code 0} true;
    out_$i44 := $trunc.i32.i16(out_$i43);
    goto corral_source_split_11870;

  corral_source_split_11868:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i16.i32($u21);
    goto corral_source_split_11869;

  corral_source_split_11867:
    assume {:verifier.code 0} true;
    out_$i42 := $trunc.i32.i16(out_$i41);
    goto corral_source_split_11868;

  corral_source_split_11866:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i16.i32($u21);
    goto corral_source_split_11867;

  corral_source_split_11865:
    assume {:verifier.code 0} true;
    out_$i40 := $trunc.i32.i16(out_$i39);
    goto corral_source_split_11866;

  corral_source_split_11864:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i16.i32($u21);
    goto corral_source_split_11865;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2119} out_$p38 := ldv_xmalloc(1);
    goto corral_source_split_11864;

  corral_source_split_11862:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume out_$i29 == 1;
    goto corral_source_split_11862;

  corral_source_split_11860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i24, 5);
    goto corral_source_split_11860;

  $bb25:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2122} ldv_io_instance_callback_3_20($u23, in_$p4);
    goto corral_source_split_11880;

  corral_source_split_11878:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume out_$i30 == 1;
    goto corral_source_split_11878;

  corral_source_split_11876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i24, 6);
    goto corral_source_split_11876;

  $bb29:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2123} ldv_io_instance_callback_3_19($u24, in_$p4, in_$p6);
    goto corral_source_split_11886;

  corral_source_split_11884:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i31 == 1;
    goto corral_source_split_11884;

  corral_source_split_11882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i24, 7);
    goto corral_source_split_11882;

  $bb33:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2124} ldv_io_instance_callback_3_18($u24, in_$p4, in_$p6);
    goto corral_source_split_11892;

  corral_source_split_11890:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume out_$i32 == 1;
    goto corral_source_split_11890;

  corral_source_split_11888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i24, 8);
    goto corral_source_split_11888;

  $bb37:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  SeqInstr_1683:
    goto corral_source_split_11898;

  SeqInstr_1682:
    assume assertsPassed;
    goto SeqInstr_1683;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2125} ldv_io_instance_callback_3_17($u23, in_$p4);
    goto SeqInstr_1682;

  corral_source_split_11896:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb44:
    assume out_$i33 == 1;
    goto corral_source_split_11896;

  corral_source_split_11894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i24, 9);
    goto corral_source_split_11894;

  $bb41:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_1686:
    goto corral_source_split_11904;

  SeqInstr_1685:
    assume assertsPassed;
    goto SeqInstr_1686;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2126} ldv_io_instance_callback_3_4($u23, in_$p4);
    goto SeqInstr_1685;

  corral_source_split_11902:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb48:
    assume out_$i34 == 1;
    goto corral_source_split_11902;

  corral_source_split_11900:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i24;
    assume true;
    goto $bb48;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i24, 10);
    goto corral_source_split_11900;

  $bb45:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb57_dummy:
    call {:si_unique_call 1} out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46 := ldv_struct_hc_driver_io_instance_3_loop_$bb7(in_$p2, in_$p4, in_$p6, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46);
    return;

  exit:
    return;
}



procedure ldv_struct_hc_driver_io_instance_3_loop_$bb7(in_$p2: ref, in_$p4: ref, in_$p6: ref, in_$i24: i32, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i32, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i16, in_$i41: i32, in_$i42: i16, in_$i43: i32, in_$i44: i16, in_$i45: i32, in_$i46: i16) returns (out_$i24: i32, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i32, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i16, out_$i41: i32, out_$i42: i16, out_$i43: i32, out_$i44: i16, out_$i45: i32, out_$i46: i16);
  modifies $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.1, $M.15, $CurrAddr, assertsPassed, $M.12, $M.13, $M.16, $M.43, $M.41;



implementation ldv_struct_hc_driver_io_instance_3_loop_$bb4(in_$p2: ref, in_$p4: ref, in_$p6: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$i15: i1, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i24: i32, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i16, in_$i41: i32, in_$i42: i16, in_$i43: i32, in_$i44: i16, in_$i45: i32, in_$i46: i16, in_$p47: ref, in_$p48: ref) returns (out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$i15: i1, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i24: i32, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i16, out_$i41: i32, out_$i42: i16, out_$i43: i32, out_$i44: i16, out_$i45: i32, out_$i46: i16, out_$p47: ref, out_$p48: ref)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48 := in_$p9, in_$p10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$p37, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$p47, in_$p48;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref($u17, $mul.ref(0, 352)), $mul.ref(48, 1));
    goto corral_source_split_11811;

  $bb9:
    assume {:verifier.code 0} true;
    assume out_$i20 == 1;
    goto $bb9_dummy;

  corral_source_split_11832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_11831:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_11832;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2111} out_$i19 := ldv_undef_int();
    call {:si_unique_call 2112} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_11831;

  corral_source_split_11826:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_11912:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_11911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2127} ldv_io_instance_release_3_2(out_$p48, in_$p4);
    goto corral_source_split_11912;

  corral_source_split_11910:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.116, out_$p47);
    goto corral_source_split_11911;

  $bb54:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref($u17, $mul.ref(0, 352)), $mul.ref(72, 1));
    goto corral_source_split_11910;

  corral_source_split_11908:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb52:
    assume out_$i36 == 1;
    goto corral_source_split_11908;

  corral_source_split_11906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52;

  $bb51:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i35, 11);
    goto corral_source_split_11906;

  $bb49:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_11900:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i24;
    assume true;
    goto $bb48, $bb49;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i24, 10);
    goto corral_source_split_11900;

  $bb45:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_11894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i24, 9);
    goto corral_source_split_11894;

  $bb41:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_11888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i24, 8);
    goto corral_source_split_11888;

  $bb37:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_11882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i24, 7);
    goto corral_source_split_11882;

  $bb33:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_11876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i24, 6);
    goto corral_source_split_11876;

  $bb29:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_11860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i24, 5);
    goto corral_source_split_11860;

  $bb25:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_11852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i24, 4);
    goto corral_source_split_11852;

  $bb21:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_11846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i24, 3);
    goto corral_source_split_11846;

  $bb17:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_11840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i24, 2);
    goto corral_source_split_11840;

  $bb13:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_11829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_11828:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, 1);
    goto corral_source_split_11829;

  $bb7:
    call out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46 := ldv_struct_hc_driver_io_instance_3_loop_$bb7(in_$p2, in_$p4, in_$p6, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46);
    goto $bb7_last;

  $bb7_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2109} out_$i24 := ldv_undef_int();
    call {:si_unique_call 2110} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_11828;

  corral_source_split_11821:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb57:
    assume {:verifier.code 0} true;
    assume false;
    return;

  corral_source_split_11904:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_11898:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_11892:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_11886:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_11880:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_11874:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_11858:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_11850:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_11844:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_11838:
    assume {:verifier.code 0} true;
    goto $bb57;

  SeqInstr_1671:
    goto corral_source_split_11838;

  SeqInstr_1670:
    assume assertsPassed;
    goto SeqInstr_1671;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2113} ldv_io_instance_callback_3_31($u18, in_$p4, in_$p2, $u10);
    goto SeqInstr_1670;

  corral_source_split_11836:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume out_$i25 == 1;
    goto corral_source_split_11836;

  SeqInstr_1674:
    goto corral_source_split_11844;

  SeqInstr_1673:
    assume assertsPassed;
    goto SeqInstr_1674;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2114} ldv_io_instance_callback_3_28($u18, in_$p4, in_$p2, $u10);
    goto SeqInstr_1673;

  corral_source_split_11842:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume out_$i26 == 1;
    goto corral_source_split_11842;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2115} ldv_io_instance_callback_3_27($u19, in_$p4);
    goto corral_source_split_11850;

  corral_source_split_11848:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume out_$i27 == 1;
    goto corral_source_split_11848;

  corral_source_split_11857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2118} ldv_free(out_$p37);
    goto corral_source_split_11858;

  SeqInstr_1677:
    goto corral_source_split_11857;

  SeqInstr_1676:
    assume assertsPassed;
    goto SeqInstr_1677;

  corral_source_split_11856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2117} ldv_io_instance_callback_3_24($u20, in_$p4, out_$p37);
    goto SeqInstr_1676;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2116} out_$p37 := ldv_xmalloc(1);
    goto corral_source_split_11856;

  corral_source_split_11854:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb24:
    assume out_$i28 == 1;
    goto corral_source_split_11854;

  corral_source_split_11873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2121} ldv_free(out_$p38);
    goto corral_source_split_11874;

  SeqInstr_1680:
    goto corral_source_split_11873;

  SeqInstr_1679:
    assume assertsPassed;
    goto SeqInstr_1680;

  corral_source_split_11872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2120} ldv_io_instance_callback_3_21($u22, in_$p4, out_$i40, out_$i42, out_$i44, out_$p38, out_$i46);
    goto SeqInstr_1679;

  corral_source_split_11871:
    assume {:verifier.code 0} true;
    out_$i46 := $trunc.i32.i16(out_$i45);
    goto corral_source_split_11872;

  corral_source_split_11870:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i16.i32($u21);
    goto corral_source_split_11871;

  corral_source_split_11869:
    assume {:verifier.code 0} true;
    out_$i44 := $trunc.i32.i16(out_$i43);
    goto corral_source_split_11870;

  corral_source_split_11868:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i16.i32($u21);
    goto corral_source_split_11869;

  corral_source_split_11867:
    assume {:verifier.code 0} true;
    out_$i42 := $trunc.i32.i16(out_$i41);
    goto corral_source_split_11868;

  corral_source_split_11866:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i16.i32($u21);
    goto corral_source_split_11867;

  corral_source_split_11865:
    assume {:verifier.code 0} true;
    out_$i40 := $trunc.i32.i16(out_$i39);
    goto corral_source_split_11866;

  corral_source_split_11864:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i16.i32($u21);
    goto corral_source_split_11865;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2119} out_$p38 := ldv_xmalloc(1);
    goto corral_source_split_11864;

  corral_source_split_11862:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume out_$i29 == 1;
    goto corral_source_split_11862;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2122} ldv_io_instance_callback_3_20($u23, in_$p4);
    goto corral_source_split_11880;

  corral_source_split_11878:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume out_$i30 == 1;
    goto corral_source_split_11878;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2123} ldv_io_instance_callback_3_19($u24, in_$p4, in_$p6);
    goto corral_source_split_11886;

  corral_source_split_11884:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i31 == 1;
    goto corral_source_split_11884;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2124} ldv_io_instance_callback_3_18($u24, in_$p4, in_$p6);
    goto corral_source_split_11892;

  corral_source_split_11890:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume out_$i32 == 1;
    goto corral_source_split_11890;

  SeqInstr_1683:
    goto corral_source_split_11898;

  SeqInstr_1682:
    assume assertsPassed;
    goto SeqInstr_1683;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2125} ldv_io_instance_callback_3_17($u23, in_$p4);
    goto SeqInstr_1682;

  corral_source_split_11896:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb44:
    assume out_$i33 == 1;
    goto corral_source_split_11896;

  SeqInstr_1686:
    goto corral_source_split_11904;

  SeqInstr_1685:
    assume assertsPassed;
    goto SeqInstr_1686;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2126} ldv_io_instance_callback_3_4($u23, in_$p4);
    goto SeqInstr_1685;

  corral_source_split_11902:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb48:
    assume out_$i34 == 1;
    goto corral_source_split_11902;

  corral_source_split_11820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2107} ldv_assume(out_$i16);
    goto corral_source_split_11821;

  corral_source_split_11819:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i1.i32(out_$i15);
    goto corral_source_split_11820;

  corral_source_split_11818:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i12, 0);
    goto corral_source_split_11819;

  $bb5:
    assume out_$i14 == 1;
    goto corral_source_split_11818;

  corral_source_split_11816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_11815:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i32(out_$i13, 0);
    goto corral_source_split_11816;

  corral_source_split_11814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2105} out_$i13 := ldv_undef_int();
    call {:si_unique_call 2106} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_11815;

  corral_source_split_11813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2103} out_$i12 := ldv_filter_err_code(out_$i11);
    call {:si_unique_call 2104} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_11814;

  corral_source_split_11812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2101} out_$i11 := ldv_io_instance_probe_3_11(out_$p10, in_$p4);
    call {:si_unique_call 2102} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_11813;

  corral_source_split_11811:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.115, out_$p9);
    goto corral_source_split_11812;

  corral_source_split_11825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2108} ldv_assume(out_$i18);
    goto corral_source_split_11826;

  corral_source_split_11824:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i1.i32(out_$i17);
    goto corral_source_split_11825;

  corral_source_split_11823:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i12, 0);
    goto corral_source_split_11824;

  $bb6:
    assume !(out_$i14 == 1);
    goto corral_source_split_11823;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48 := ldv_struct_hc_driver_io_instance_3_loop_$bb4(in_$p2, in_$p4, in_$p6, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48);
    return;

  exit:
    return;
}



procedure ldv_struct_hc_driver_io_instance_3_loop_$bb4(in_$p2: ref, in_$p4: ref, in_$p6: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$i15: i1, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i24: i32, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i16, in_$i41: i32, in_$i42: i16, in_$i43: i32, in_$i44: i16, in_$i45: i32, in_$i46: i16, in_$p47: ref, in_$p48: ref) returns (out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$i15: i1, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i24: i32, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i16, out_$i41: i32, out_$i42: i16, out_$i43: i32, out_$i44: i16, out_$i45: i32, out_$i46: i16, out_$p47: ref, out_$p48: ref);
  modifies $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.1, $M.15, $CurrAddr, assertsPassed, $M.12, $M.13, $M.16, $M.43, $M.41;



implementation ldv_struct_oz_app_if_io_instance_4_loop_$bb10(in_$p2: ref, in_$p4: ref, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i32, in_$i33: i8, in_$i34: i32, in_$i35: i8, in_$i36: i32, in_$i37: i1) returns (out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i32, out_$i33: i8, out_$i34: i32, out_$i35: i8, out_$i36: i32, out_$i37: i1)
{

  entry:
    out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37 := in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2167} out_$p25 := ldv_xmalloc(1);
    goto corral_source_split_12006;

  $bb39:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb39_dummy;

  corral_source_split_12053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_12052:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_12053;

  corral_source_split_12051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2179} out_$i36 := ldv_undef_int();
    call {:si_unique_call 2180} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_12052;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2178} ldv_free(out_$p25);
    goto corral_source_split_12051;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_12047:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_12037:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_12031:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_12025:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_12019:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2172} ldv_io_instance_callback_4_24($u26);
    goto corral_source_split_12019;

  corral_source_split_12017:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i27 == 1;
    goto corral_source_split_12017;

  corral_source_split_12008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_12007:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i26, 1);
    goto corral_source_split_12008;

  corral_source_split_12006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2168} out_$i26 := ldv_undef_int();
    call {:si_unique_call 2169} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_12007;

  SeqInstr_1716:
    goto corral_source_split_12025;

  SeqInstr_1715:
    assume assertsPassed;
    goto SeqInstr_1716;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2173} ldv_io_instance_callback_4_23($u27, in_$p4, in_$p2);
    goto SeqInstr_1715;

  corral_source_split_12023:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i28 == 1;
    goto corral_source_split_12023;

  corral_source_split_12021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i26, 2);
    goto corral_source_split_12021;

  $bb16:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_1719:
    goto corral_source_split_12031;

  SeqInstr_1718:
    assume assertsPassed;
    goto SeqInstr_1719;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2174} ldv_io_instance_callback_4_22($u28);
    goto SeqInstr_1718;

  corral_source_split_12029:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume out_$i29 == 1;
    goto corral_source_split_12029;

  corral_source_split_12027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i26, 3);
    goto corral_source_split_12027;

  $bb20:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_1722:
    goto corral_source_split_12037;

  SeqInstr_1721:
    assume assertsPassed;
    goto SeqInstr_1722;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2175} ldv_io_instance_callback_4_21($u29, in_$p4);
    goto SeqInstr_1721;

  corral_source_split_12035:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume out_$i30 == 1;
    goto corral_source_split_12035;

  corral_source_split_12033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i26, 4);
    goto corral_source_split_12033;

  $bb24:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_1725:
    goto corral_source_split_12047;

  SeqInstr_1724:
    assume assertsPassed;
    goto SeqInstr_1725;

  corral_source_split_12046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2176} ldv_io_instance_callback_4_4($u31, in_$p4, out_$i33, out_$p25, out_$i35);
    goto SeqInstr_1724;

  corral_source_split_12045:
    assume {:verifier.code 0} true;
    out_$i35 := $trunc.i32.i8(out_$i34);
    goto corral_source_split_12046;

  corral_source_split_12044:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i8.i32($u30);
    goto corral_source_split_12045;

  corral_source_split_12043:
    assume {:verifier.code 0} true;
    out_$i33 := $trunc.i32.i8(out_$i32);
    goto corral_source_split_12044;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i8.i32($u30);
    goto corral_source_split_12043;

  corral_source_split_12041:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume out_$i31 == 1;
    goto corral_source_split_12041;

  corral_source_split_12039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i26, 5);
    goto corral_source_split_12039;

  $bb28:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_12049:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2177} ldv_stop();
    goto corral_source_split_12049;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb32:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb39_dummy:
    call {:si_unique_call 1} out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37 := ldv_struct_oz_app_if_io_instance_4_loop_$bb10(in_$p2, in_$p4, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37);
    return;

  exit:
    return;
}



procedure ldv_struct_oz_app_if_io_instance_4_loop_$bb10(in_$p2: ref, in_$p4: ref, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i32, in_$i33: i8, in_$i34: i32, in_$i35: i8, in_$i36: i32, in_$i37: i1) returns (out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i32, out_$i33: i8, out_$i34: i32, out_$i35: i8, out_$i36: i32, out_$i37: i1);
  modifies $CurrAddr, $M.1, $M.2, $M.16, assertsPassed, $M.15, $M.9, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.40, $M.13, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.14, $M.46, $M.12, $M.48, $M.96, $M.97, $M.44, $M.95, $M.45, $M.103, $M.17, $M.104, $M.105, $M.18, $M.19, $M.20, $M.21, $M.22, $M.41, $M.106, $M.107, $M.42, $M.39;



implementation ldv_struct_oz_app_if_io_instance_4_loop_$bb4(in_$p2: ref, in_$p4: ref, in_$p7: ref, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$i13: i1, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$i17: i1, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i32, in_$i33: i8, in_$i34: i32, in_$i35: i8, in_$i36: i32, in_$i37: i1) returns (out_$p7: ref, out_$p8: ref, out_$i9: i32, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$i13: i1, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$i17: i1, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i32, out_$i33: i8, out_$i34: i32, out_$i35: i8, out_$i36: i32, out_$i37: i1)
{

  entry:
    out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37 := in_$p7, in_$p8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$p23, in_$p24, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref($u25, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_11981;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i20 == 1;
    goto $bb12_dummy;

  corral_source_split_12011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_12010:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_12011;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2170} out_$i19 := ldv_undef_int();
    call {:si_unique_call 2171} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_12010;

  corral_source_split_11998:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_12002:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_1713:
    goto corral_source_split_12002;

  SeqInstr_1712:
    assume assertsPassed;
    goto SeqInstr_1713;

  corral_source_split_12001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2166} ldv_io_instance_release_4_2(out_$p24, in_$p4, $u10);
    goto SeqInstr_1712;

  corral_source_split_12000:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.118, out_$p23);
    goto corral_source_split_12001;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($u25, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_12000;

  corral_source_split_12015:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb7:
    assume {:verifier.code 0} true;
    assume out_$i16 == 1;
    goto $bb8;

  corral_source_split_11993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  corral_source_split_11992:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i32(out_$i15, 0);
    goto corral_source_split_11993;

  corral_source_split_11991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2163} out_$i15 := ldv_undef_int();
    call {:si_unique_call 2164} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_11992;

  corral_source_split_11990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2162} ldv_assume(out_$i14);
    goto corral_source_split_11991;

  corral_source_split_11989:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i1.i32(out_$i13);
    goto corral_source_split_11990;

  corral_source_split_11988:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i10, 0);
    goto corral_source_split_11989;

  $bb5:
    assume out_$i12 == 1;
    goto corral_source_split_11988;

  corral_source_split_11986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_11985:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i32(out_$i11, 0);
    goto corral_source_split_11986;

  corral_source_split_11984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2160} out_$i11 := ldv_undef_int();
    call {:si_unique_call 2161} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_11985;

  corral_source_split_11983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2158} out_$i10 := ldv_filter_err_code(out_$i9);
    call {:si_unique_call 2159} {:cexpr "ldv_4_ret_default"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_11984;

  SeqInstr_1710:
    call {:si_unique_call 2157} {:cexpr "ldv_4_ret_default"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_11983;

  SeqInstr_1709:
    assume assertsPassed;
    goto SeqInstr_1710;

  corral_source_split_11982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2156} out_$i9 := ldv_io_instance_probe_4_11(out_$p8, in_$p4, $u10);
    goto SeqInstr_1709;

  corral_source_split_11981:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.117, out_$p7);
    goto corral_source_split_11982;

  $bb14:
    assume out_$i37 == 1;
    goto corral_source_split_12015;

  corral_source_split_12053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb39;

  corral_source_split_12052:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_12053;

  corral_source_split_12051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2179} out_$i36 := ldv_undef_int();
    call {:si_unique_call 2180} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_12052;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2178} ldv_free(out_$p25);
    goto corral_source_split_12051;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_12047:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_12037:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_12031:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_12025:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_12019:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2172} ldv_io_instance_callback_4_24($u26);
    goto corral_source_split_12019;

  corral_source_split_12017:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i27 == 1;
    goto corral_source_split_12017;

  corral_source_split_12008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_12007:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i26, 1);
    goto corral_source_split_12008;

  corral_source_split_12006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2168} out_$i26 := ldv_undef_int();
    call {:si_unique_call 2169} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_12007;

  $bb10:
    call out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37 := ldv_struct_oz_app_if_io_instance_4_loop_$bb10(in_$p2, in_$p4, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2167} out_$p25 := ldv_xmalloc(1);
    goto corral_source_split_12006;

  corral_source_split_12004:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb39:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    assume false;
    return;

  $bb9:
    assume !(out_$i16 == 1);
    goto corral_source_split_12004;

  SeqInstr_1716:
    goto corral_source_split_12025;

  SeqInstr_1715:
    assume assertsPassed;
    goto SeqInstr_1716;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2173} ldv_io_instance_callback_4_23($u27, in_$p4, in_$p2);
    goto SeqInstr_1715;

  corral_source_split_12023:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i28 == 1;
    goto corral_source_split_12023;

  corral_source_split_12021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i26, 2);
    goto corral_source_split_12021;

  $bb16:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_1719:
    goto corral_source_split_12031;

  SeqInstr_1718:
    assume assertsPassed;
    goto SeqInstr_1719;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2174} ldv_io_instance_callback_4_22($u28);
    goto SeqInstr_1718;

  corral_source_split_12029:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume out_$i29 == 1;
    goto corral_source_split_12029;

  corral_source_split_12027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i26, 3);
    goto corral_source_split_12027;

  $bb20:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_1722:
    goto corral_source_split_12037;

  SeqInstr_1721:
    assume assertsPassed;
    goto SeqInstr_1722;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2175} ldv_io_instance_callback_4_21($u29, in_$p4);
    goto SeqInstr_1721;

  corral_source_split_12035:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume out_$i30 == 1;
    goto corral_source_split_12035;

  corral_source_split_12033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i26, 4);
    goto corral_source_split_12033;

  $bb24:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_1725:
    goto corral_source_split_12047;

  SeqInstr_1724:
    assume assertsPassed;
    goto SeqInstr_1725;

  corral_source_split_12046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2176} ldv_io_instance_callback_4_4($u31, in_$p4, out_$i33, out_$p25, out_$i35);
    goto SeqInstr_1724;

  corral_source_split_12045:
    assume {:verifier.code 0} true;
    out_$i35 := $trunc.i32.i8(out_$i34);
    goto corral_source_split_12046;

  corral_source_split_12044:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i8.i32($u30);
    goto corral_source_split_12045;

  corral_source_split_12043:
    assume {:verifier.code 0} true;
    out_$i33 := $trunc.i32.i8(out_$i32);
    goto corral_source_split_12044;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i8.i32($u30);
    goto corral_source_split_12043;

  corral_source_split_12041:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume out_$i31 == 1;
    goto corral_source_split_12041;

  corral_source_split_12039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i26, 5);
    goto corral_source_split_12039;

  $bb28:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_12049:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2177} ldv_stop();
    goto corral_source_split_12049;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb32:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_11997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2165} ldv_assume(out_$i18);
    goto corral_source_split_11998;

  corral_source_split_11996:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i1.i32(out_$i17);
    goto corral_source_split_11997;

  corral_source_split_11995:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i10, 0);
    goto corral_source_split_11996;

  $bb6:
    assume !(out_$i12 == 1);
    goto corral_source_split_11995;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37 := ldv_struct_oz_app_if_io_instance_4_loop_$bb4(in_$p2, in_$p4, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37);
    return;

  exit:
    return;
}



procedure ldv_struct_oz_app_if_io_instance_4_loop_$bb4(in_$p2: ref, in_$p4: ref, in_$p7: ref, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$i13: i1, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$i17: i1, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i32, in_$i33: i8, in_$i34: i32, in_$i35: i8, in_$i36: i32, in_$i37: i1) returns (out_$p7: ref, out_$p8: ref, out_$i9: i32, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$i13: i1, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$i17: i1, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i32, out_$i33: i8, out_$i34: i32, out_$i35: i8, out_$i36: i32, out_$i37: i1);
  modifies $M.1, $CurrAddr, $M.2, $M.16, assertsPassed, $M.43, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.40, $M.9, $M.45, $M.15, $M.30, $M.31, $M.32, $M.13, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.14, $M.46, $M.12, $M.48, $M.96, $M.97, $M.44, $M.95, $M.103, $M.17, $M.104, $M.105, $M.18, $M.19, $M.20, $M.21, $M.22, $M.41, $M.106, $M.107, $M.42, $M.39;


