var $M.0: [ref]bv8;

var $M.1: [ref]bv8;

var $M.2: [ref]bv32;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]ref;

var $M.6: [ref]ref;

var $M.7: ref;

var $M.8: bv32;

var $M.9: bv16;

var $M.10: bv16;

var $M.11: bv16;

var $M.12: ref;

var $M.13: ref;

var $M.14: ref;

var $M.15: ref;

var $M.16: bv32;

var $M.17: [ref]bv8;

var $M.18: [ref]bv32;

var $M.19: [ref]ref;

var $M.20: [ref]bv32;

var $M.21: [ref]ref;

var $M.22: [ref]ref;

var $M.23: [ref]bv8;

var $M.24: bv32;

var $M.25: bv32;

var $M.26: ref;

var $M.27: ref;

var $M.28: [ref]bv8;

var $M.29: ref;

var $M.30: bv32;

var $M.31: bv32;

var $M.32: bv32;

var $M.33: bv32;

var $M.34: bv32;

var $M.35: bv32;

var $M.36: bv32;

var $M.37: bv32;

var $M.38: bv32;

var $M.39: bv32;

var $M.41: [ref]bv8;

var $M.88: [ref]bv8;

var $M.89: [ref]bv8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = bv64;

type float;

const $0: bv32;

axiom $0 == 0bv32;

const $1: bv32;

axiom $1 == 1bv32;

const $0.ref: ref;

axiom $0.ref == 0bv64;

const $1.ref: ref;

axiom $1.ref == 1bv64;

const $2.ref: ref;

axiom $2.ref == 2bv64;

const $3.ref: ref;

axiom $3.ref == 3bv64;

const $4.ref: ref;

axiom $4.ref == 4bv64;

const $5.ref: ref;

axiom $5.ref == 5bv64;

const $6.ref: ref;

axiom $6.ref == 6bv64;

const $7.ref: ref;

axiom $7.ref == 7bv64;

const $8.ref: ref;

axiom $8.ref == 8bv64;

const $9.ref: ref;

axiom $9.ref == 9bv64;

const $10.ref: ref;

axiom $10.ref == 10bv64;

const $11.ref: ref;

axiom $11.ref == 11bv64;

const $12.ref: ref;

axiom $12.ref == 12bv64;

const $13.ref: ref;

axiom $13.ref == 13bv64;

const $14.ref: ref;

axiom $14.ref == 14bv64;

const $1024.ref: ref;

axiom $1024.ref == 1024bv64;

axiom $GLOBALS_BOTTOM == $sub.ref(0bv64, 320960bv64);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0bv64, 32800bv64));

axiom $MALLOC_TOP == 9223372036854775807bv64;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2uint.64(i: bv64) : i64;

function {:inline} $bv2int.64(i: bv64) : i64
{
  (if $slt.bv64.bool(i, 0bv64) then $sub.i64($bv2uint.64(i), 18446744073709551616) else $bv2uint.64(i))
}

function {:inline} $load.bytes.ref(M: [ref]bv8, p: ref) : ref
{
  $i2p.bv64.ref($load.bytes.bv64(M, p))
}

function {:inline} $store.bytes.ref(M: [ref]bv8, p: ref, v: ref) : [ref]bv8
{
  $store.bytes.bv64(M, p, $p2i.ref.bv64(v))
}

function {:inline} $p2i.ref.bv8(p: ref) : bv8
{
  $trunc.bv64.bv8(p)
}

function {:inline} $i2p.bv8.ref(i: bv8) : ref
{
  $zext.bv8.bv64(i)
}

function {:inline} $p2i.ref.bv16(p: ref) : bv16
{
  $trunc.bv64.bv16(p)
}

function {:inline} $i2p.bv16.ref(i: bv16) : ref
{
  $zext.bv16.bv64(i)
}

function {:inline} $p2i.ref.bv32(p: ref) : bv32
{
  $trunc.bv64.bv32(p)
}

function {:inline} $i2p.bv32.ref(i: bv32) : ref
{
  $zext.bv32.bv64(i)
}

function {:inline} $p2i.ref.bv64(p: ref) : bv64
{
  p
}

function {:inline} $i2p.bv64.ref(i: bv64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : bv1
{
  (if $eq.bv64.bool(p1, p2) then 1bv1 else 0bv1)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.bv64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : bv1
{
  (if $ne.bv64.bool(p1, p2) then 1bv1 else 0bv1)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.bv64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : bv1
{
  (if $ugt.bv64.bool(p1, p2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.bv64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : bv1
{
  (if $uge.bv64.bool(p1, p2) then 1bv1 else 0bv1)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.bv64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : bv1
{
  (if $ult.bv64.bool(p1, p2) then 1bv1 else 0bv1)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.bv64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : bv1
{
  (if $ule.bv64.bool(p1, p2) then 1bv1 else 0bv1)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.bv64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : bv1
{
  (if $sgt.bv64.bool(p1, p2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.bv64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : bv1
{
  (if $sge.bv64.bool(p1, p2) then 1bv1 else 0bv1)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.bv64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : bv1
{
  (if $slt.bv64.bool(p1, p2) then 1bv1 else 0bv1)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.bv64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : bv1
{
  (if $sle.bv64.bool(p1, p2) then 1bv1 else 0bv1)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.bv64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.bv64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.bv64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.bv64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0bv64, 1028bv64);

const printer_driver_group0: ref;

axiom printer_driver_group0 == $sub.ref(0bv64, 2060bv64);

const printer_io_operations_group1: ref;

axiom printer_io_operations_group1 == $sub.ref(0bv64, 3092bv64);

const printer_io_operations_group2: ref;

axiom printer_io_operations_group2 == $sub.ref(0bv64, 4124bv64);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0bv64, 5152bv64);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0bv64, 6180bv64);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0bv64, 7208bv64);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0bv64, 8236bv64);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0bv64, 9264bv64);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0bv64, 10292bv64);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0bv64, 11320bv64);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0bv64, 12348bv64);

const ldv_usb_gadget_class: ref;

axiom ldv_usb_gadget_class == $sub.ref(0bv64, 13376bv64);

const ldv_usb_gadget_chrdev: ref;

axiom ldv_usb_gadget_chrdev == $sub.ref(0bv64, 14404bv64);

const ldv_usb_gadget: ref;

axiom ldv_usb_gadget == $sub.ref(0bv64, 15432bv64);

const printer_mutex: ref;

axiom printer_mutex == $sub.ref(0bv64, 16608bv64);

const {:count 8} shortname: ref;

axiom shortname == $sub.ref(0bv64, 17640bv64);

const printer_driver: ref;

axiom printer_driver == $sub.ref(0bv64, 18832bv64);

const {:count 4} strings: ref;

axiom strings == $sub.ref(0bv64, 19920bv64);

const stringtab: ref;

axiom stringtab == $sub.ref(0bv64, 20960bv64);

const {:count 11} fs_printer_function: ref;

axiom fs_printer_function == $sub.ref(0bv64, 22072bv64);

const intf_desc: ref;

axiom intf_desc == $sub.ref(0bv64, 23105bv64);

const {:count 11} hs_printer_function: ref;

axiom hs_printer_function == $sub.ref(0bv64, 24217bv64);

const {:count 15} driver_desc: ref;

axiom driver_desc == $sub.ref(0bv64, 25256bv64);

const qlen: ref;

axiom qlen == $sub.ref(0bv64, 26284bv64);

const config_desc: ref;

axiom config_desc == $sub.ref(0bv64, 27318bv64);

const otg_desc: ref;

axiom otg_desc == $sub.ref(0bv64, 28345bv64);

const hs_ep_out_desc: ref;

axiom hs_ep_out_desc == $sub.ref(0bv64, 29379bv64);

const hs_ep_in_desc: ref;

axiom hs_ep_in_desc == $sub.ref(0bv64, 30413bv64);

const dev_qualifier: ref;

axiom dev_qualifier == $sub.ref(0bv64, 31447bv64);

const fs_ep_out_desc: ref;

axiom fs_ep_out_desc == $sub.ref(0bv64, 32481bv64);

const fs_ep_in_desc: ref;

axiom fs_ep_in_desc == $sub.ref(0bv64, 33515bv64);

const {:count 1024} pnp_string: ref;

axiom pnp_string == $sub.ref(0bv64, 35563bv64);

const iPNPstring: ref;

axiom iPNPstring == $sub.ref(0bv64, 36595bv64);

const {:count 40} serial_num: ref;

axiom serial_num == $sub.ref(0bv64, 37659bv64);

const iSerialNum: ref;

axiom iSerialNum == $sub.ref(0bv64, 38691bv64);

const {:count 40} product_desc: ref;

axiom product_desc == $sub.ref(0bv64, 39755bv64);

const iProduct: ref;

axiom iProduct == $sub.ref(0bv64, 40787bv64);

const iManufacturer: ref;

axiom iManufacturer == $sub.ref(0bv64, 41819bv64);

const bcdDevice: ref;

axiom bcdDevice == $sub.ref(0bv64, 42845bv64);

const idProduct: ref;

axiom idProduct == $sub.ref(0bv64, 43871bv64);

const idVendor: ref;

axiom idVendor == $sub.ref(0bv64, 44897bv64);

const {:count 50} manufacturer: ref;

axiom manufacturer == $sub.ref(0bv64, 45971bv64);

const device_desc: ref;

axiom device_desc == $sub.ref(0bv64, 47013bv64);

const printer_io_operations: ref;

axiom printer_io_operations == $sub.ref(0bv64, 48237bv64);

const usb_printer_gadget: ref;

axiom usb_printer_gadget == $sub.ref(0bv64, 50085bv64);

const g_printer_devno: ref;

axiom g_printer_devno == $sub.ref(0bv64, 51113bv64);

const usb_gadget_class: ref;

axiom usb_gadget_class == $sub.ref(0bv64, 52145bv64);

const epnum: ref;

axiom epnum == $sub.ref(0bv64, 53173bv64);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0bv64, 32776bv64));

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0bv64, 32784bv64));

const {:count 22} .str.44: ref;

axiom .str.44 == $sub.ref(0bv64, 54219bv64);

const {:count 15} .str.1: ref;

axiom .str.1 == $sub.ref(0bv64, 55258bv64);

const {:count 33} .str.51: ref;

axiom .str.51 == $sub.ref(0bv64, 56315bv64);

const {:count 44} .str.54: ref;

axiom .str.54 == $sub.ref(0bv64, 57383bv64);

const {:count 61} .str.55: ref;

axiom .str.55 == $sub.ref(0bv64, 58468bv64);

const {:count 25} .str.47: ref;

axiom .str.47 == $sub.ref(0bv64, 59517bv64);

const {:count 33} .str.48: ref;

axiom .str.48 == $sub.ref(0bv64, 60574bv64);

const {:count 20} .str.49: ref;

axiom .str.49 == $sub.ref(0bv64, 61618bv64);

const {:count 21} .str.50: ref;

axiom .str.50 == $sub.ref(0bv64, 62663bv64);

const {:count 46} .str.40: ref;

axiom .str.40 == $sub.ref(0bv64, 63733bv64);

const {:count 36} .str.41: ref;

axiom .str.41 == $sub.ref(0bv64, 64793bv64);

const {:count 169} .str.42: ref;

axiom .str.42 == $sub.ref(0bv64, 65986bv64);

const {:count 27} .str.43: ref;

axiom .str.43 == $sub.ref(0bv64, 67037bv64);

const {:count 45} .str.45: ref;

axiom .str.45 == $sub.ref(0bv64, 68106bv64);

const {:count 39} .str.46: ref;

axiom .str.46 == $sub.ref(0bv64, 69169bv64);

const .str: ref;

axiom .str == $sub.ref(0bv64, 70204bv64);

const {:count 19} .str.2: ref;

axiom .str.2 == $sub.ref(0bv64, 71247bv64);

const {:count 24} .str.3: ref;

axiom .str.3 == $sub.ref(0bv64, 72295bv64);

const {:count 42} .str.19: ref;

axiom .str.19 == $sub.ref(0bv64, 73361bv64);

const {:count 22} .str.20: ref;

axiom .str.20 == $sub.ref(0bv64, 74407bv64);

const {:count 40} .str.21: ref;

axiom .str.21 == $sub.ref(0bv64, 75471bv64);

const {:count 31} .str.22: ref;

axiom .str.22 == $sub.ref(0bv64, 76526bv64);

const {:count 24} .str.23: ref;

axiom .str.23 == $sub.ref(0bv64, 77574bv64);

const {:count 39} .str.30: ref;

axiom .str.30 == $sub.ref(0bv64, 78637bv64);

const {:count 36} .str.31: ref;

axiom .str.31 == $sub.ref(0bv64, 79697bv64);

const {:count 37} .str.32: ref;

axiom .str.32 == $sub.ref(0bv64, 80758bv64);

const {:count 35} .str.33: ref;

axiom .str.33 == $sub.ref(0bv64, 81817bv64);

const {:count 36} .str.34: ref;

axiom .str.34 == $sub.ref(0bv64, 82877bv64);

const {:count 27} .str.28: ref;

axiom .str.28 == $sub.ref(0bv64, 83928bv64);

const {:count 25} .str.29: ref;

axiom .str.29 == $sub.ref(0bv64, 84977bv64);

const {:count 5} .str.24: ref;

axiom .str.24 == $sub.ref(0bv64, 86006bv64);

const {:count 5} .str.25: ref;

axiom .str.25 == $sub.ref(0bv64, 87035bv64);

const {:count 2} .str.26: ref;

axiom .str.26 == $sub.ref(0bv64, 88061bv64);

const {:count 39} .str.27: ref;

axiom .str.27 == $sub.ref(0bv64, 89124bv64);

const {:count 37} .str.18: ref;

axiom .str.18 == $sub.ref(0bv64, 90185bv64);

const {:count 15} .str.4: ref;

axiom .str.4 == $sub.ref(0bv64, 91224bv64);

const {:count 276} .str.5: ref;

axiom .str.5 == $sub.ref(0bv64, 92524bv64);

const {:count 10} .str.6: ref;

axiom .str.6 == $sub.ref(0bv64, 93558bv64);

const {:count 43} .str.7: ref;

axiom .str.7 == $sub.ref(0bv64, 94625bv64);

const {:count 35} .str.8: ref;

axiom .str.8 == $sub.ref(0bv64, 95684bv64);

const {:count 32} .str.9: ref;

axiom .str.9 == $sub.ref(0bv64, 96740bv64);

const {:count 14} .str.10: ref;

axiom .str.10 == $sub.ref(0bv64, 97778bv64);

const {:count 27} .str.11: ref;

axiom .str.11 == $sub.ref(0bv64, 98829bv64);

const {:count 27} .str.12: ref;

axiom .str.12 == $sub.ref(0bv64, 99880bv64);

const {:count 21} .str.13: ref;

axiom .str.13 == $sub.ref(0bv64, 100925bv64);

const {:count 22} .str.14: ref;

axiom .str.14 == $sub.ref(0bv64, 101971bv64);

const {:count 33} .str.15: ref;

axiom .str.15 == $sub.ref(0bv64, 103028bv64);

const {:count 31} .str.16: ref;

axiom .str.16 == $sub.ref(0bv64, 104083bv64);

const _ctype: ref;

axiom _ctype == $add.ref($GLOBALS_BOTTOM, $sub.ref(0bv64, 32792bv64));

const init_uts_ns: ref;

axiom init_uts_ns == $add.ref($GLOBALS_BOTTOM, $sub.ref(0bv64, 32800bv64));

const {:count 13} .str.17: ref;

axiom .str.17 == $sub.ref(0bv64, 105120bv64);

const {:count 24} .str.52: ref;

axiom .str.52 == $sub.ref(0bv64, 106168bv64);

const {:count 14} .str.53: ref;

axiom .str.53 == $sub.ref(0bv64, 107206bv64);

const {:count 45} .str.36: ref;

axiom .str.36 == $sub.ref(0bv64, 108275bv64);

const {:count 19} .str.37: ref;

axiom .str.37 == $sub.ref(0bv64, 109318bv64);

const {:count 31} .str.38: ref;

axiom .str.38 == $sub.ref(0bv64, 110373bv64);

const {:count 38} .str.39: ref;

axiom .str.39 == $sub.ref(0bv64, 111435bv64);

const {:count 40} .str.35: ref;

axiom .str.35 == $sub.ref(0bv64, 112499bv64);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0bv64, 113531bv64);

const {:count 3} .str.1.120: ref;

axiom .str.1.120 == $sub.ref(0bv64, 114558bv64);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0bv64, 115596bv64);

const errno_global: ref;

axiom errno_global == $sub.ref(0bv64, 116624bv64);

const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0bv64, 117656bv64);

procedure __kmalloc($i0: bv64, $i1: bv32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: bv64, $i1: bv32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "__kmalloc:arg:size"} boogie_si_record_bv64($i0);
    call {:si_unique_call 1} {:cexpr "__kmalloc:arg:t"} boogie_si_record_bv32($i1);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p2 := ldv_malloc($i0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0bv64, 118688bv64);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0bv64, 119720bv64);

procedure ldv_malloc($i0: bv64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: bv64) returns ($r: ref)
{
  var $i1: bv32;
  var $i2: bv1;
  var $p4: ref;
  var $i5: bv64;
  var $i6: bv1;
  var $i7: bv32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_bv64($i0);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 5} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i1);
    call {:si_unique_call 6} {:cexpr "tmp___0"} boogie_si_record_bv32($i1);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i2 := $ne.bv32($i1, 0bv32);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1bv1);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p4 := malloc($i0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.bv64($p4);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 1} true;
    $i6 := $ne.bv64($i5, 0bv64);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 1} true;
    $i7 := $zext.bv1.bv32($i6);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 1} true;
    call {:si_unique_call 8} __VERIFIER_assume($i7);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1bv1;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0bv64, 120752bv64);

procedure malloc($i0: bv64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: bv64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 9} $r := $malloc($i0);
    return;
}



const printer_read: ref;

axiom printer_read == $sub.ref(0bv64, 121784bv64);

procedure printer_read($p0: ref, $p1: ref, $i2: bv64, $p3: ref) returns ($r: bv64);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation printer_read($p0: ref, $p1: ref, $i2: bv64, $p3: ref) returns ($r: bv64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: bv1;
  var $i10: bv32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: bv64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: bv64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: bv1;
  var $p27: ref;
  var $i28: bv32;
  var $i29: bv1;
  var $i30: bv32;
  var $i31: bv64;
  var $i32: bv64;
  var $i33: bv1;
  var $p34: ref;
  var $p35: ref;
  var $i36: bv32;
  var $i37: bv32;
  var $i38: bv1;
  var $p39: ref;
  var $p40: ref;
  var $i41: bv32;
  var $i42: bv1;
  var $i43: bv32;
  var $i44: bv64;
  var $i45: bv64;
  var $i46: bv1;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: bv32;
  var $i61: bv1;
  var $i62: bv32;
  var $i63: bv64;
  var $i64: bv64;
  var $i65: bv1;
  var $p66: ref;
  var $i67: bv32;
  var $i68: bv1;
  var $i69: bv32;
  var $i70: bv1;
  var $i71: bv32;
  var $i72: bv64;
  var $i73: bv64;
  var $i74: bv1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: bv64;
  var $i79: bv64;
  var $i80: bv64;
  var $i88: bv1;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: bv32;
  var $i97: bv1;
  var $p98: ref;
  var $p99: ref;
  var $i100: bv64;
  var $i101: bv1;
  var $p102: ref;
  var $p103: ref;
  var $i104: bv32;
  var $i105: bv64;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: bv64;
  var $p112: ref;
  var $p113: ref;
  var $i114: bv1;
  var $i115: bv64;
  var $i116: bv32;
  var $i117: bv32;
  var $i118: bv64;
  var $i119: bv64;
  var $i120: bv64;
  var $i121: bv64;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: bv64;
  var $p126: ref;
  var $i127: bv8;
  var $i128: bv32;
  var $i129: bv1;
  var $p130: ref;
  var $i131: bv64;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $i136: bv1;
  var $i137: bv64;
  var $p138: ref;
  var $p142: ref;
  var $p143: ref;
  var $p139: ref;
  var $i140: bv64;
  var $p141: ref;
  var $p81: ref;
  var $i82: bv64;
  var $i83: bv64;
  var $i84: bv64;
  var $p85: ref;
  var $i86: bv64;
  var $p87: ref;
  var $i144: bv1;
  var $p145: ref;
  var $i146: bv32;
  var $i147: bv1;
  var $i148: bv32;
  var $i149: bv64;
  var $i150: bv64;
  var $i151: bv1;
  var $i157: bv1;
  var $p158: ref;
  var $i159: bv64;
  var $i160: bv64;
  var $i161: bv64;
  var $p162: ref;
  var $p152: ref;
  var $i153: bv64;
  var $i154: bv64;
  var $i155: bv64;
  var $p156: ref;
  var $p163: ref;
  var $i164: bv64;
  var $i165: bv64;
  var $i166: bv64;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $i173: bv32;
  var $i175: bv1;
  var $i9: bv64;
  var vslice_dummy_var_21: bv32;
  var vslice_dummy_var_22: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $p4 := $alloc($mul.ref(40bv64, $zext.bv32.bv64(1bv32)));
    call {:si_unique_call 11} {:cexpr "printer_read:arg:len"} boogie_si_record_bv64($i2);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0bv64, 320bv64)), $mul.ref(280bv64, 1bv64));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p6 := $load.bytes.ref($M.0, $p5);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i8 := $eq.bv64($i2, 0bv64);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $trunc.bv64.bv32($i2);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} vslice_dummy_var_21 := printk.ref.ref.bv32(.str.45, .str.1, $i10);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64));
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} mutex_lock_nested($p12, 0bv32);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $p14 := spinlock_check($p13);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $i15 := _raw_spin_lock_irqsave($p14);
    call {:si_unique_call 16} {:cexpr "flags"} boogie_si_record_bv64($i15);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(617bv64, 1bv64));
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p16, 0bv8);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} setup_rx_reqs($p7);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(592bv64, 1bv64));
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $p18 := $load.bytes.ref($M.0, $p17);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(600bv64, 1bv64));
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i20 := $load.bytes.bv64($M.0, $p19);
    call {:si_unique_call 18} {:cexpr "current_rx_bytes"} boogie_si_record_bv64($i20);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(608bv64, 1bv64));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p22 := $load.bytes.ref($M.0, $p21);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(592bv64, 1bv64));
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p23, $0.ref);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(600bv64, 1bv64));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv64($M.0, $p24, 0bv64);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(608bv64, 1bv64));
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p25, $0.ref);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i26 := $eq.bv64($i20, 0bv64);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1bv1);
    assume {:verifier.code 0} true;
    $i80 := $i15;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $p81, $i82, $i83, $i84, $p85, $i86, $p87 := $p18, 0bv64, $i80, $i20, $p22, $i2, $p1;
    goto $bb29;

  $bb29:
    call $i88, $p90, $p91, $p92, $p93, $p94, $p95, $i96, $i97, $p98, $p99, $i100, $i101, $p102, $p103, $i104, $i105, $p106, $p107, $p108, $p109, $p110, $i111, $p112, $p113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $p122, $p123, $p124, $i125, $p126, $i127, $i128, $i129, $p130, $i131, $i136, $i137, $p138, $p142, $p143, $p139, $i140, $p141, $p81, $i82, $i83, $i84, $p85, $i86, $p87, $i144, $p145, $i146, $i147, $i148, $i149, $i150, $i151, $i157, $p158, $i159, $i160, $i161, $p162, $p152, $i153, $i154, $i155, $p156 := printer_read_loop_$bb29($p7, $i88, $p90, $p91, $p92, $p93, $p94, $p95, $i96, $i97, $p98, $p99, $i100, $i101, $p102, $p103, $i104, $i105, $p106, $p107, $p108, $p109, $p110, $i111, $p112, $p113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $p122, $p123, $p124, $i125, $p126, $i127, $i128, $i129, $p130, $i131, $i136, $i137, $p138, $p142, $p143, $p139, $i140, $p141, $p81, $i82, $i83, $i84, $p85, $i86, $p87, $i144, $p145, $i146, $i147, $i148, $i149, $i150, $i151, $i157, $p158, $i159, $i160, $i161, $p162, $p152, $i153, $i154, $i155, $p156);
    goto $bb29_last;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    call $i88, $p90, $p91, $p92, $p93, $p94, $p95, $i96, $i97, $p98, $p99, $i100, $i101, $p102, $p108, $p109, $i144, $p145, $i146, $i147, $i148, $i149, $i150, $i151, $i157, $p158, $i159, $i160, $i161, $p162, $p152, $i153, $i154, $i155, $p156 := printer_read_loop_$bb39($p7, $i88, $p90, $p91, $p92, $p93, $p94, $p95, $i96, $i97, $p98, $p99, $i100, $i101, $p102, $p108, $p109, $p81, $i82, $i83, $i84, $p85, $i86, $i144, $p145, $i146, $i147, $i148, $i149, $i150, $i151, $i157, $p158, $i159, $i160, $i161, $p162, $p152, $i153, $i154, $i155, $p156);
    goto $bb39_last;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i144 == 1bv1);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(304bv64, 1bv64));
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $i146 := list_empty($p145);
    call {:si_unique_call 66} {:cexpr "tmp___12"} boogie_si_record_bv32($i146);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i147 := $eq.bv32($i146, 0bv32);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i148 := $zext.bv1.bv32($i147);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i149 := $sext.bv32.bv64($i148);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} $i150 := ldv__builtin_expect($i149, 1bv64);
    call {:si_unique_call 68} {:cexpr "tmp___13"} boogie_si_record_bv64($i150);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i151 := $ne.bv64($i150, 0bv64);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p152, $i153, $i154, $i155, $p156 := $p81, $i82, $i83, $i84, $p85;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i151 == 1bv1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p163, $i164, $i165, $i166, $p167 := $p152, $i153, $i154, $i155, $p156;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(592bv64, 1bv64));
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p168, $p163);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(600bv64, 1bv64));
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv64($M.0, $p169, $i166);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(608bv64, 1bv64));
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p170, $p167);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} spin_unlock_irqrestore($p171, $i165);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64));
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} mutex_unlock($p172);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i173 := $trunc.bv64.bv32($i164);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} vslice_dummy_var_22 := printk.ref.ref.bv32(.str.46, .str.1, $i173);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i175 := $ne.bv64($i164, 0bv64);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i175 == 1bv1);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $i9 := $sub.bv64(0bv64, 11bv64);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb58:
    assume $i175 == 1bv1;
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i9 := $i164;
    goto $bb3;

  $bb53:
    assume $i151 == 1bv1;
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i157 := $ne.bv64($i86, 0bv64);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $p158, $i159, $i160, $i161, $p162 := $p81, $i82, $i83, $i84, $p85;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i157 == 1bv1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p163, $i164, $i165, $i166, $p167 := $p158, $i159, $i160, $i161, $p162;
    goto $bb57;

  $bb55:
    assume $i157 == 1bv1;
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i88 := $eq.bv64($i84, 0bv64);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i88 == 1bv1);
    assume {:verifier.code 0} true;
    $p110, $i111, $p112 := $p81, $i84, $p85;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} spin_unlock_irqrestore($p113, $i83);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i114 := $ugt.bv64($i86, $i111);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i114 == 1bv1);
    assume {:verifier.code 0} true;
    $i115 := $i86;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i116 := $trunc.bv64.bv32($i115);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} $i117 := copy_to_user($p87, $p112, $i116);
    call {:si_unique_call 53} {:cexpr "tmp___10"} boogie_si_record_bv32($i117);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i118 := $sext.bv32.bv64($i117);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i119 := $sub.bv64($i115, $i118);
    call {:si_unique_call 54} {:cexpr "size"} boogie_si_record_bv64($i119);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i120 := $add.bv64($i82, $i119);
    call {:si_unique_call 55} {:cexpr "bytes_copied"} boogie_si_record_bv64($i120);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i121 := $sub.bv64($i86, $i119);
    call {:si_unique_call 56} {:cexpr "len"} boogie_si_record_bv64($i121);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($p87, $mul.ref($i119, 1bv64));
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $p124 := spinlock_check($p123);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} $i125 := _raw_spin_lock_irqsave($p124);
    call {:si_unique_call 59} {:cexpr "flags"} boogie_si_record_bv64($i125);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(617bv64, 1bv64));
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i127 := $load.bytes.bv8($M.0, $p126);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i128 := $zext.bv8.bv32($i127);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i129 := $ne.bv32($i128, 0bv32);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p130, $i131 := $p110, $i125;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i129 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i136 := $ult.bv64($i119, $i111);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i136 == 1bv1);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p110, $mul.ref(0bv64, 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(272bv64, 1bv64));
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} list_add($p142, $p143);
    assume {:verifier.code 0} true;
    $p139, $i140, $p141 := $0.ref, 0bv64, $0.ref;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p81, $i82, $i83, $i84, $p85, $i86, $p87 := $p139, $i120, $i125, $i140, $p141, $i121, $p122;
    goto corral_source_split_213_dummy;

  $bb47:
    assume $i136 == 1bv1;
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i137 := $sub.bv64($i111, $i119);
    call {:si_unique_call 63} {:cexpr "current_rx_bytes"} boogie_si_record_bv64($i137);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($p112, $mul.ref($i119, 1bv64));
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p139, $i140, $p141 := $p110, $i137, $p138;
    goto $bb49;

  $bb44:
    assume $i129 == 1bv1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p130, $mul.ref(0bv64, 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(272bv64, 1bv64));
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} list_add($p132, $p133);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} spin_unlock_irqrestore($p134, $i131);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64));
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} mutex_unlock($p135);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i9 := $sub.bv64(0bv64, 11bv64);
    goto $bb3;

  $bb41:
    assume $i114 == 1bv1;
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i115 := $i111;
    goto $bb43;

  $bb31:
    assume $i88 == 1bv1;
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(304bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p91 := $load.bytes.ref($M.0, $p90);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p92, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p92, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} list_del_init($p94);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p92, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(68bv64, 1bv64));
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i96 := $load.bytes.bv32($M.0, $p95);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i97 := $ne.bv32($i96, 0bv32);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i97 == 1bv1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p92, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(272bv64, 1bv64));
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} list_add($p108, $p109);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    goto corral_source_split_160_dummy;

  $bb33:
    assume $i97 == 1bv1;
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p92, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p99 := $load.bytes.ref($M.0, $p98);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.bv64($p99);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i101 := $ne.bv64($i100, 0bv64);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p102 := $p93;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i101 == 1bv1);
    goto $bb35;

  $bb36:
    assume $i101 == 1bv1;
    assume {:verifier.code 0} true;
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p102, $mul.ref(0bv64, 72bv64)), $mul.ref(68bv64, 1bv64));
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i104 := $load.bytes.bv32($M.0, $p103);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i105 := $zext.bv32.bv64($i104);
    call {:si_unique_call 50} {:cexpr "current_rx_bytes"} boogie_si_record_bv64($i105);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p102, $mul.ref(0bv64, 72bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p107 := $load.bytes.ref($M.0, $p106);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p110, $i111, $p112 := $p102, $i105, $p107;
    goto $bb40;

  $bb50:
    assume $i144 == 1bv1;
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb5:
    assume $i26 == 1bv1;
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(304bv64, 1bv64));
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $i28 := list_empty($p27);
    call {:si_unique_call 20} {:cexpr "tmp___8"} boogie_si_record_bv32($i28);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i29 := $ne.bv32($i28, 0bv32);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i30 := $zext.bv1.bv32($i29);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i31 := $sext.bv32.bv64($i30);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $i32 := ldv__builtin_expect($i31, 1bv64);
    call {:si_unique_call 22} {:cexpr "tmp___9"} boogie_si_record_bv64($i32);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i33 := $ne.bv64($i32, 0bv64);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i33 == 1bv1);
    assume {:verifier.code 0} true;
    $i79 := $i15;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $i80 := $i79;
    goto $bb28;

  $bb7:
    assume $i33 == 1bv1;
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} spin_unlock_irqrestore($p34, $i15);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0bv64, 320bv64)), $mul.ref(120bv64, 1bv64));
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i36 := $load.bytes.bv32($M.0, $p35);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i37 := $and.bv32($i36, 2048bv32);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i38 := $ne.bv32($i37, 0bv32);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i38 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(304bv64, 1bv64));
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $i41 := list_empty($p40);
    call {:si_unique_call 26} {:cexpr "tmp___5"} boogie_si_record_bv32($i41);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i42 := $eq.bv32($i41, 0bv32);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i43 := $zext.bv1.bv32($i42);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i44 := $sext.bv32.bv64($i43);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $i45 := ldv__builtin_expect($i44, 1bv64);
    call {:si_unique_call 28} {:cexpr "tmp___6"} boogie_si_record_bv64($i45);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i46 := $eq.bv64($i45, 0bv64);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i46 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} $p77 := spinlock_check($p76);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $i78 := _raw_spin_lock_irqsave($p77);
    call {:si_unique_call 47} {:cexpr "flags"} boogie_si_record_bv64($i78);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i79 := $i78;
    goto $bb27;

  $bb12:
    assume $i46 == 1bv1;
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $p47 := get_current();
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0bv64, 40bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $M.2 := $store.bv32($M.2, $p48, 0bv32);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0bv64, 40bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p50, $p47);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0bv64, 40bv64)), $mul.ref(16bv64, 1bv64));
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p51, autoremove_wake_function);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0bv64, 40bv64)), $mul.ref(24bv64, 1bv64));
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p4, $mul.ref(0bv64, 40bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p54, $p52);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0bv64, 40bv64)), $mul.ref(24bv64, 1bv64));
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p4, $mul.ref(0bv64, 40bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p57, $p55);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(320bv64, 1bv64));
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} prepare_to_wait($p58, $p4, 1bv32);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(304bv64, 1bv64));
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $i60 := list_empty($p59);
    call {:si_unique_call 32} {:cexpr "tmp___1"} boogie_si_record_bv32($i60);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i61 := $eq.bv32($i60, 0bv32);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i62 := $zext.bv1.bv32($i61);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i63 := $sext.bv32.bv64($i62);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $i64 := ldv__builtin_expect($i63, 1bv64);
    call {:si_unique_call 34} {:cexpr "tmp___2"} boogie_si_record_bv64($i64);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i65 := $ne.bv64($i64, 0bv64);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i65 == 1bv1);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    call $p66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74 := printer_read_loop_$bb17($p4, $p58, $p59, $p66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74);
    goto $bb17_last;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $p66 := get_current();
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $i67 := signal_pending($p66);
    call {:si_unique_call 38} {:cexpr "tmp___4"} boogie_si_record_bv32($i67);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $i68 := $eq.bv32($i67, 0bv32);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i68 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(320bv64, 1bv64));
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} finish_wait($p75, $p4);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i68 == 1bv1;
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} schedule();
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} prepare_to_wait($p58, $p4, 1bv32);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $i69 := list_empty($p59);
    call {:si_unique_call 42} {:cexpr "tmp___1"} boogie_si_record_bv32($i69);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i70 := $eq.bv32($i69, 0bv32);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i71 := $zext.bv1.bv32($i70);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i72 := $sext.bv32.bv64($i71);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $i73 := ldv__builtin_expect($i72, 1bv64);
    call {:si_unique_call 44} {:cexpr "tmp___2"} boogie_si_record_bv64($i73);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i74 := $ne.bv64($i73, 0bv64);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i74 == 1bv1);
    goto $bb25_dummy;

  $bb18:
    assume $i74 == 1bv1;
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i65 == 1bv1;
    goto $bb15;

  $bb9:
    assume $i38 == 1bv1;
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64));
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} mutex_unlock($p39);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i9 := $sub.bv64(0bv64, 11bv64);
    goto $bb3;

  $bb1:
    assume $i8 == 1bv1;
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i9 := $sub.bv64(0bv64, 22bv64);
    goto $bb3;

  corral_source_split_160_dummy:
    assume false;
    return;

  $bb39_last:
    assume {:verifier.code 0} true;
    $i144 := $ne.bv64($i84, 0bv64);
    goto corral_source_split_169;

  corral_source_split_213_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_137;

  $bb25_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto $bb20;
}



const printer_write: ref;

axiom printer_write == $sub.ref(0bv64, 122816bv64);

procedure printer_write($p0: ref, $p1: ref, $i2: bv64, $p3: ref) returns ($r: bv64);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation printer_write($p0: ref, $p1: ref, $i2: bv64, $p3: ref) returns ($r: bv64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: bv32;
  var $i10: bv1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: bv64;
  var $p16: ref;
  var $p17: ref;
  var $i18: bv32;
  var $i19: bv1;
  var $i20: bv32;
  var $i21: bv64;
  var $i22: bv64;
  var $i23: bv1;
  var $p24: ref;
  var $p25: ref;
  var $i26: bv32;
  var $i27: bv32;
  var $i28: bv1;
  var $p29: ref;
  var $p30: ref;
  var $i31: bv32;
  var $i32: bv1;
  var $i33: bv32;
  var $i34: bv64;
  var $i35: bv64;
  var $i36: bv1;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: bv32;
  var $i51: bv1;
  var $i52: bv32;
  var $i53: bv64;
  var $i54: bv64;
  var $i55: bv1;
  var $p56: ref;
  var $i57: bv32;
  var $i58: bv1;
  var $i59: bv32;
  var $i60: bv1;
  var $i61: bv32;
  var $i62: bv64;
  var $i63: bv64;
  var $i64: bv1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: bv64;
  var $i69: bv64;
  var $p70: ref;
  var $i71: bv32;
  var $i72: bv1;
  var $i73: bv32;
  var $i74: bv64;
  var $i75: bv64;
  var $i76: bv1;
  var $i83: bv1;
  var $i84: bv64;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: bv32;
  var $p93: ref;
  var $i94: bv1;
  var $p95: ref;
  var $i96: bv8;
  var $i97: bv8;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: bv16;
  var $i102: bv64;
  var $i103: bv64;
  var $i104: bv1;
  var $i105: bv32;
  var $i106: bv8;
  var $p107: ref;
  var $i108: bv8;
  var $i109: bv8;
  var $i110: bv8;
  var $i111: bv8;
  var $i112: bv8;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: bv64;
  var $i117: bv1;
  var $i118: bv64;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: bv64;
  var $i124: bv64;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: bv64;
  var $p129: ref;
  var $i130: bv8;
  var $i131: bv32;
  var $i132: bv1;
  var $p133: ref;
  var $i134: bv64;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $i141: bv32;
  var $i142: bv1;
  var $p143: ref;
  var $i144: bv64;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: bv32;
  var $i152: bv1;
  var $i153: bv32;
  var $i154: bv64;
  var $i155: bv64;
  var $i156: bv1;
  var $p79: ref;
  var $i80: bv64;
  var $i81: bv64;
  var $i82: bv64;
  var $i159: bv1;
  var $i160: bv64;
  var $i161: bv64;
  var $i157: bv64;
  var $i158: bv64;
  var $i77: bv64;
  var $i78: bv64;
  var $p162: ref;
  var $p163: ref;
  var $i164: bv32;
  var $i166: bv1;
  var $i11: bv64;
  var vslice_dummy_var_23: bv32;
  var vslice_dummy_var_24: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $p4 := $alloc($mul.ref(40bv64, $zext.bv32.bv64(1bv32)));
    call {:si_unique_call 73} {:cexpr "printer_write:arg:len"} boogie_si_record_bv64($i2);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0bv64, 320bv64)), $mul.ref(280bv64, 1bv64));
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p6 := $load.bytes.ref($M.0, $p5);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $i8 := $trunc.bv64.bv32($i2);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} vslice_dummy_var_23 := printk.ref.ref.bv32(.str.40, .str.1, $i8);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i10 := $eq.bv64($i2, 0bv64);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64));
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} mutex_lock_nested($p12, 0bv32);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $p14 := spinlock_check($p13);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $i15 := _raw_spin_lock_irqsave($p14);
    call {:si_unique_call 78} {:cexpr "flags"} boogie_si_record_bv64($i15);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(617bv64, 1bv64));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p16, 0bv8);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(400bv64, 1bv64));
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} $i18 := list_empty($p17);
    call {:si_unique_call 80} {:cexpr "tmp___8"} boogie_si_record_bv32($i18);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $i19 := $ne.bv32($i18, 0bv32);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $i20 := $zext.bv1.bv32($i19);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i21 := $sext.bv32.bv64($i20);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} $i22 := ldv__builtin_expect($i21, 1bv64);
    call {:si_unique_call 82} {:cexpr "tmp___9"} boogie_si_record_bv64($i22);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i23 := $ne.bv64($i22, 0bv64);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1bv1);
    assume {:verifier.code 0} true;
    $i69 := $i15;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(400bv64, 1bv64));
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} $i71 := list_empty($p70);
    call {:si_unique_call 109} {:cexpr "tmp___13"} boogie_si_record_bv32($i71);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i72 := $eq.bv32($i71, 0bv32);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $i73 := $zext.bv1.bv32($i72);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i74 := $sext.bv32.bv64($i73);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} $i75 := ldv__builtin_expect($i74, 1bv64);
    call {:si_unique_call 111} {:cexpr "tmp___14"} boogie_si_record_bv64($i75);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $i76 := $ne.bv64($i75, 0bv64);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $i77, $i78 := $i69, 0bv64;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i76 == 1bv1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} spin_unlock_irqrestore($p162, $i77);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64));
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} mutex_unlock($p163);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i164 := $trunc.bv64.bv32($i78);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} vslice_dummy_var_24 := printk.ref.ref.bv32(.str.41, .str.1, $i164);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i166 := $ne.bv64($i78, 0bv64);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    assume {:branchcond $i166} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i166 == 1bv1);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i11 := $sub.bv64(0bv64, 11bv64);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb51:
    assume $i166 == 1bv1;
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i11 := $i78;
    goto $bb3;

  $bb26:
    assume $i76 == 1bv1;
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p79, $i80, $i81, $i82 := $p1, $i2, 0bv64, $i69;
    goto $bb29;

  $bb29:
    call $i83, $i84, $p86, $p87, $p88, $p89, $p90, $p91, $i92, $p93, $i94, $p95, $i96, $i97, $p98, $p99, $p100, $i101, $i102, $i103, $i104, $i105, $i106, $p107, $i108, $i109, $i110, $i111, $i112, $p113, $p114, $p115, $i116, $i117, $i118, $p119, $i123, $i124, $p125, $p126, $p127, $i128, $p129, $i130, $i131, $i132, $p133, $i134, $p139, $p140, $i141, $i142, $p143, $i144, $p149, $p150, $i151, $i152, $i153, $i154, $i155, $i156, $p79, $i80, $i81, $i82, $i159, $i160, $i161, $i157, $i158 := printer_write_loop_$bb29($p7, $p70, $i83, $i84, $p86, $p87, $p88, $p89, $p90, $p91, $i92, $p93, $i94, $p95, $i96, $i97, $p98, $p99, $p100, $i101, $i102, $i103, $i104, $i105, $i106, $p107, $i108, $i109, $i110, $i111, $i112, $p113, $p114, $p115, $i116, $i117, $i118, $p119, $i123, $i124, $p125, $p126, $p127, $i128, $p129, $i130, $i131, $i132, $p133, $i134, $p139, $p140, $i141, $i142, $p143, $i144, $p149, $p150, $i151, $i152, $i153, $i154, $i155, $i156, $p79, $i80, $i81, $i82, $i159, $i160, $i161, $i157, $i158);
    goto $bb29_last;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i159 := $ne.bv64($i80, 0bv64);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i160, $i161 := $i82, $i81;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i159 == 1bv1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i77, $i78 := $i160, $i161;
    goto $bb28;

  $bb48:
    assume $i159 == 1bv1;
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i83 := $ugt.bv64($i80, 8192bv64);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i83 == 1bv1);
    assume {:verifier.code 0} true;
    $i84 := $i80;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(400bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p87 := $load.bytes.ref($M.0, $p86);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p88, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64));
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p88, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} list_del_init($p90);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p88, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(32bv64, 1bv64));
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p91, tx_complete);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i92 := $trunc.bv64.bv32($i84);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p88, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv32($M.0, $p93, $i92);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i94 := $ugt.bv64($i80, $i84);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i94 == 1bv1);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(240bv64, 1bv64));
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p99 := $load.bytes.ref($M.0, $p98);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0bv64, 48bv64)), $mul.ref(40bv64, 1bv64));
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i101 := $load.bytes.bv16($M.0, $p100);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i102 := $zext.bv16.bv64($i101);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $i103 := $urem.bv64($i80, $i102);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $i104 := $eq.bv64($i103, 0bv64);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i105 := $zext.bv1.bv32($i104);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i106 := $trunc.bv32.bv8($i105);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p88, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(24bv64, 1bv64));
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i108 := $load.bytes.bv8($M.0, $p107);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $i109 := $and.bv8($i106, 1bv8);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $i110 := $shl.bv8($i109, 1bv8);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i111 := $and.bv8($i108, $sub.bv8(0bv8, 3bv8));
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $i112 := $or.bv8($i111, $i110);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p107, $i112);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} spin_unlock_irqrestore($p113, $i82);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p88, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p115 := $load.bytes.ref($M.0, $p114);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $i116 := copy_from_user($p115, $p79, $i84);
    call {:si_unique_call 115} {:cexpr "tmp___10"} boogie_si_record_bv64($i116);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i117 := $ne.bv64($i116, 0bv64);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i118, $p119 := $i81, $p89;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i117 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i123 := $add.bv64($i81, $i84);
    call {:si_unique_call 118} {:cexpr "bytes_copied"} boogie_si_record_bv64($i123);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i124 := $sub.bv64($i80, $i84);
    call {:si_unique_call 119} {:cexpr "len"} boogie_si_record_bv64($i124);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($p79, $mul.ref($i84, 1bv64));
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} $p127 := spinlock_check($p126);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} $i128 := _raw_spin_lock_irqsave($p127);
    call {:si_unique_call 122} {:cexpr "flags"} boogie_si_record_bv64($i128);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(617bv64, 1bv64));
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i130 := $load.bytes.bv8($M.0, $p129);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i131 := $zext.bv8.bv32($i130);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $i132 := $ne.bv32($i131, 0bv32);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p133, $i134 := $p89, $i128;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i132 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(240bv64, 1bv64));
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $p140 := $load.bytes.ref($M.0, $p139);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $i141 := usb_ep_queue($p140, $p89, 32bv32);
    call {:si_unique_call 127} {:cexpr "tmp___12"} boogie_si_record_bv32($i141);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i142 := $ne.bv32($i141, 0bv32);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p143, $i144 := $p89, $i128;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i142 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p88, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(416bv64, 1bv64));
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} list_add($p149, $p150);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} $i151 := list_empty($p70);
    call {:si_unique_call 133} {:cexpr "tmp___13"} boogie_si_record_bv32($i151);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i152 := $eq.bv32($i151, 0bv32);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i153 := $zext.bv1.bv32($i152);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i154 := $sext.bv32.bv64($i153);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} $i155 := ldv__builtin_expect($i154, 1bv64);
    call {:si_unique_call 135} {:cexpr "tmp___14"} boogie_si_record_bv64($i155);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $i156 := $ne.bv64($i155, 0bv64);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i157, $i158 := $i128, $i123;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i156 == 1bv1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i77, $i78 := $i157, $i158;
    goto $bb28;

  $bb46:
    assume $i156 == 1bv1;
    assume {:verifier.code 0} true;
    $p79, $i80, $i81, $i82 := $p125, $i124, $i123, $i128;
    goto $bb46_dummy;

  $bb43:
    assume $i142 == 1bv1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p143, $mul.ref(0bv64, 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(400bv64, 1bv64));
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} list_add($p145, $p146);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} spin_unlock_irqrestore($p147, $i144);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64));
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} mutex_unlock($p148);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i11 := $sub.bv64(0bv64, 11bv64);
    goto $bb3;

  $bb40:
    assume $i132 == 1bv1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p133, $mul.ref(0bv64, 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(400bv64, 1bv64));
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} list_add($p135, $p136);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} spin_unlock_irqrestore($p137, $i134);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64));
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} mutex_unlock($p138);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i11 := $sub.bv64(0bv64, 11bv64);
    goto $bb3;

  $bb37:
    assume $i117 == 1bv1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p119, $mul.ref(0bv64, 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(400bv64, 1bv64));
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} list_add($p120, $p121);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} mutex_unlock($p122);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i11 := $i118;
    goto $bb3;

  $bb34:
    assume $i94 == 1bv1;
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p88, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(24bv64, 1bv64));
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i96 := $load.bytes.bv8($M.0, $p95);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $i97 := $and.bv8($i96, $sub.bv8(0bv8, 3bv8));
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p95, $i97);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i83 == 1bv1;
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i84 := 8192bv64;
    goto $bb33;

  $bb5:
    assume $i23 == 1bv1;
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} spin_unlock_irqrestore($p24, $i15);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0bv64, 320bv64)), $mul.ref(120bv64, 1bv64));
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i26 := $load.bytes.bv32($M.0, $p25);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i27 := $and.bv32($i26, 2048bv32);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i28 := $ne.bv32($i27, 0bv32);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(400bv64, 1bv64));
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $i31 := list_empty($p30);
    call {:si_unique_call 86} {:cexpr "tmp___5"} boogie_si_record_bv32($i31);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $i32 := $eq.bv32($i31, 0bv32);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i33 := $zext.bv1.bv32($i32);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i34 := $sext.bv32.bv64($i33);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $i35 := ldv__builtin_expect($i34, 1bv64);
    call {:si_unique_call 88} {:cexpr "tmp___6"} boogie_si_record_bv64($i35);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $i36 := $eq.bv64($i35, 0bv64);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i36 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} $p67 := spinlock_check($p66);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} $i68 := _raw_spin_lock_irqsave($p67);
    call {:si_unique_call 107} {:cexpr "flags"} boogie_si_record_bv64($i68);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $i69 := $i68;
    goto $bb25;

  $bb10:
    assume $i36 == 1bv1;
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $p37 := get_current();
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0bv64, 40bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $M.2 := $store.bv32($M.2, $p38, 0bv32);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0bv64, 40bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p40, $p37);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0bv64, 40bv64)), $mul.ref(16bv64, 1bv64));
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p41, autoremove_wake_function);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0bv64, 40bv64)), $mul.ref(24bv64, 1bv64));
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p4, $mul.ref(0bv64, 40bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p44, $p42);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0bv64, 40bv64)), $mul.ref(24bv64, 1bv64));
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p4, $mul.ref(0bv64, 40bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p47, $p45);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(432bv64, 1bv64));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} prepare_to_wait($p48, $p4, 1bv32);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(400bv64, 1bv64));
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} $i50 := list_empty($p49);
    call {:si_unique_call 92} {:cexpr "tmp___1"} boogie_si_record_bv32($i50);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $i51 := $eq.bv32($i50, 0bv32);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i52 := $zext.bv1.bv32($i51);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $i53 := $sext.bv32.bv64($i52);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} $i54 := ldv__builtin_expect($i53, 1bv64);
    call {:si_unique_call 94} {:cexpr "tmp___2"} boogie_si_record_bv64($i54);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i55 := $ne.bv64($i54, 0bv64);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i55 == 1bv1);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    call $p56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64 := printer_write_loop_$bb15($p4, $p48, $p49, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64);
    goto $bb15_last;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $p56 := get_current();
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} $i57 := signal_pending($p56);
    call {:si_unique_call 98} {:cexpr "tmp___4"} boogie_si_record_bv32($i57);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i58 := $eq.bv32($i57, 0bv32);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i58 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(432bv64, 1bv64));
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} finish_wait($p65, $p4);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i58 == 1bv1;
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} schedule();
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} prepare_to_wait($p48, $p4, 1bv32);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} $i59 := list_empty($p49);
    call {:si_unique_call 102} {:cexpr "tmp___1"} boogie_si_record_bv32($i59);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $i60 := $eq.bv32($i59, 0bv32);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i61 := $zext.bv1.bv32($i60);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $i62 := $sext.bv32.bv64($i61);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} $i63 := ldv__builtin_expect($i62, 1bv64);
    call {:si_unique_call 104} {:cexpr "tmp___2"} boogie_si_record_bv64($i63);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i64 := $ne.bv64($i63, 0bv64);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i64 == 1bv1);
    goto $bb23_dummy;

  $bb16:
    assume $i64 == 1bv1;
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i55 == 1bv1;
    goto $bb13;

  $bb7:
    assume $i28 == 1bv1;
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p7, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64));
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} mutex_unlock($p29);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i11 := $sub.bv64(0bv64, 11bv64);
    goto $bb3;

  $bb1:
    assume $i10 == 1bv1;
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $i11 := $sub.bv64(0bv64, 22bv64);
    goto $bb3;

  $bb46_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_364;

  $bb23_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto $bb18;
}



const printer_poll: ref;

axiom printer_poll == $sub.ref(0bv64, 123848bv64);

procedure printer_poll($p0: ref, $p1: ref) returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.0;



implementation printer_poll($p0: ref, $p1: ref) returns ($r: bv32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: bv64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: bv64;
  var $p16: ref;
  var $i17: bv32;
  var $i18: bv1;
  var $i19: bv32;
  var $i20: bv64;
  var $i21: bv64;
  var $i22: bv1;
  var $i23: bv32;
  var $i24: bv32;
  var $p25: ref;
  var $i26: bv64;
  var $i27: bv1;
  var $i28: bv32;
  var $i29: bv64;
  var $i30: bv64;
  var $i31: bv1;
  var $i32: bv32;
  var $p34: ref;
  var $i35: bv32;
  var $i36: bv1;
  var $i37: bv32;
  var $i38: bv64;
  var $i39: bv64;
  var $i40: bv1;
  var $i41: bv32;
  var $i42: bv32;
  var $i33: bv32;
  var $p43: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0bv64, 320bv64)), $mul.ref(280bv64, 1bv64));
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $p3 := $load.bytes.ref($M.0, $p2);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64));
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} mutex_lock_nested($p5, 0bv32);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} $p7 := spinlock_check($p6);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $i8 := _raw_spin_lock_irqsave($p7);
    call {:si_unique_call 142} {:cexpr "flags"} boogie_si_record_bv64($i8);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} setup_rx_reqs($p4);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} spin_unlock_irqrestore($p9, $i8);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64));
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} mutex_unlock($p10);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0bv64, 824bv64)), $mul.ref(320bv64, 1bv64));
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} poll_wait($p0, $p11, $p1);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0bv64, 824bv64)), $mul.ref(432bv64, 1bv64));
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} poll_wait($p0, $p12, $p1);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $p14 := spinlock_check($p13);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} $i15 := _raw_spin_lock_irqsave($p14);
    call {:si_unique_call 150} {:cexpr "flags"} boogie_si_record_bv64($i15);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0bv64, 824bv64)), $mul.ref(400bv64, 1bv64));
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} $i17 := list_empty($p16);
    call {:si_unique_call 152} {:cexpr "tmp___1"} boogie_si_record_bv32($i17);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $i18 := $eq.bv32($i17, 0bv32);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i19 := $zext.bv1.bv32($i18);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $i20 := $sext.bv32.bv64($i19);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} $i21 := ldv__builtin_expect($i20, 1bv64);
    call {:si_unique_call 154} {:cexpr "tmp___2"} boogie_si_record_bv64($i21);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i22 := $ne.bv64($i21, 0bv64);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1bv1);
    assume {:verifier.code 0} true;
    $i24 := 0bv32;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0bv64, 824bv64)), $mul.ref(600bv64, 1bv64));
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $i26 := $load.bytes.bv64($M.0, $p25);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i27 := $ne.bv64($i26, 0bv64);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i28 := $zext.bv1.bv32($i27);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i29 := $sext.bv32.bv64($i28);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $i30 := ldv__builtin_expect($i29, 1bv64);
    call {:si_unique_call 157} {:cexpr "tmp___3"} boogie_si_record_bv64($i30);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $i31 := $ne.bv64($i30, 0bv64);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i31 == 1bv1);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0bv64, 824bv64)), $mul.ref(304bv64, 1bv64));
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $i35 := list_empty($p34);
    call {:si_unique_call 160} {:cexpr "tmp___4"} boogie_si_record_bv32($i35);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i36 := $eq.bv32($i35, 0bv32);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i37 := $zext.bv1.bv32($i36);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i38 := $sext.bv32.bv64($i37);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $i39 := ldv__builtin_expect($i38, 1bv64);
    call {:si_unique_call 162} {:cexpr "tmp___5"} boogie_si_record_bv64($i39);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i40 := $ne.bv64($i39, 0bv64);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i40 == 1bv1);
    assume {:verifier.code 0} true;
    $i42 := $i24;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i33 := $i42;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} spin_unlock_irqrestore($p43, $i15);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb7:
    assume $i40 == 1bv1;
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i41 := $or.bv32($i24, 65bv32);
    call {:si_unique_call 164} {:cexpr "status"} boogie_si_record_bv32($i41);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i42 := $i41;
    goto $bb9;

  $bb4:
    assume $i31 == 1bv1;
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i32 := $or.bv32($i24, 65bv32);
    call {:si_unique_call 158} {:cexpr "status"} boogie_si_record_bv32($i32);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb6;

  $bb1:
    assume $i22 == 1bv1;
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $i23 := $or.bv32(0bv32, 260bv32);
    call {:si_unique_call 155} {:cexpr "status"} boogie_si_record_bv32($i23);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb3;
}



const printer_ioctl: ref;

axiom printer_ioctl == $sub.ref(0bv64, 124880bv64);

procedure printer_ioctl($p0: ref, $i1: bv32, $i2: bv64) returns ($r: bv64);
  free requires assertsPassed;
  modifies $M.0;



implementation printer_ioctl($p0: ref, $i1: bv32, $i2: bv64) returns ($r: bv64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: bv64;
  var $i10: bv1;
  var $i11: bv1;
  var $i12: bv1;
  var $p13: ref;
  var $i14: bv8;
  var $i15: bv32;
  var $i17: bv8;
  var $p18: ref;
  var $i16: bv32;
  var $p20: ref;
  var $i21: bv64;
  var vslice_dummy_var_25: bv32;
  var vslice_dummy_var_26: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} {:cexpr "printer_ioctl:arg:code"} boogie_si_record_bv32($i1);
    call {:si_unique_call 166} {:cexpr "printer_ioctl:arg:arg"} boogie_si_record_bv64($i2);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0bv64, 320bv64)), $mul.ref(280bv64, 1bv64));
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $p4 := $load.bytes.ref($M.0, $p3);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} vslice_dummy_var_25 := printk.ref.ref.bv32.bv64(.str.54, .str.1, $i1, $i2);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $p8 := spinlock_check($p7);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $i9 := _raw_spin_lock_irqsave($p8);
    call {:si_unique_call 170} {:cexpr "flags"} boogie_si_record_bv64($i9);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i10 := $slt.bv32($i1, $sub.bv32(0bv32, 1073649886bv32));
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i10 == 1bv1);
    assume {:verifier.code 0} true;
    $i11 := $eq.bv32($i1, $sub.bv32(0bv32, 1073649886bv32));
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1bv1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} vslice_dummy_var_26 := printk.ref.ref.bv32(.str.55, .str.1, $i1);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i16 := $sub.bv32(0bv32, 25bv32);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} spin_unlock_irqrestore($p20, $i9);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i21 := $sext.bv32.bv64($i16);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb4:
    assume $i11 == 1bv1;
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i17 := $trunc.bv64.bv8($i2);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0bv64, 824bv64)), $mul.ref(616bv64, 1bv64));
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p18, $i17);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i16 := 0bv32;
    goto $bb9;

  $bb2:
    assume $i10 == 1bv1;
    assume {:verifier.code 0} true;
    $i12 := $eq.bv32($i1, $sub.bv32(0bv32, 2147391711bv32));
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i12 == 1bv1);
    goto $bb6;

  $bb7:
    assume $i12 == 1bv1;
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0bv64, 824bv64)), $mul.ref(616bv64, 1bv64));
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $i14 := $load.bytes.bv8($M.0, $p13);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $i15 := $zext.bv8.bv32($i14);
    call {:si_unique_call 171} {:cexpr "status"} boogie_si_record_bv32($i15);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb9;
}



const printer_open: ref;

axiom printer_open == $sub.ref(0bv64, 125912bv64);

procedure printer_open($p0: ref, $p1: ref) returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.0;



implementation printer_open($p0: ref, $p1: ref) returns ($r: bv32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: bv64;
  var $p10: ref;
  var $i11: bv8;
  var $i12: bv32;
  var $i13: bv1;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: bv8;
  var $i19: bv32;
  var $i20: bv32;
  var $i21: bv8;
  var $p22: ref;
  var $i23: bv32;
  var $p24: ref;
  var vslice_dummy_var_27: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} mutex_lock_nested(printer_mutex, 0bv32);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0bv64, 1000bv64)), $mul.ref(920bv64, 1bv64));
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p4 := $load.bytes.ref($M.0, $p3);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0bv64, 624bv64), 824bv64));
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0bv64, 624bv64), 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $p8 := spinlock_check($p7);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} $i9 := _raw_spin_lock_irqsave($p8);
    call {:si_unique_call 177} {:cexpr "flags"} boogie_si_record_bv64($i9);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0bv64, 624bv64), 824bv64)), $mul.ref(736bv64, 1bv64));
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i11 := $load.bytes.bv8($M.0, $p10);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i12 := $zext.bv8.bv32($i11);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i13 := $eq.bv32($i12, 0bv32);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1bv1);
    assume {:verifier.code 0} true;
    $i23 := $sub.bv32(0bv32, 16bv32);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0bv64, 624bv64), 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} spin_unlock_irqrestore($p24, $i9);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} vslice_dummy_var_27 := printk.ref.ref.bv32(.str.51, .str.1, $i23);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} mutex_unlock(printer_mutex);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb1:
    assume $i13 == 1bv1;
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0bv64, 624bv64), 824bv64)), $mul.ref(736bv64, 1bv64));
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p14, 1bv8);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0bv64, 320bv64)), $mul.ref(280bv64, 1bv64));
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p16, $p6);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0bv64, 624bv64), 824bv64)), $mul.ref(616bv64, 1bv64));
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $i18 := $load.bytes.bv8($M.0, $p17);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $i19 := $zext.bv8.bv32($i18);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i20 := $or.bv32($i19, 16bv32);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i21 := $trunc.bv32.bv8($i20);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0bv64, 624bv64), 824bv64)), $mul.ref(616bv64, 1bv64));
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p22, $i21);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $i23 := 0bv32;
    goto $bb3;
}



const printer_close: ref;

axiom printer_close == $sub.ref(0bv64, 126944bv64);

procedure printer_close($p0: ref, $p1: ref) returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.0;



implementation printer_close($p0: ref, $p1: ref) returns ($r: bv32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: bv64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: bv8;
  var $i12: bv32;
  var $i13: bv32;
  var $i14: bv8;
  var $p15: ref;
  var $p16: ref;
  var vslice_dummy_var_28: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0bv64, 320bv64)), $mul.ref(280bv64, 1bv64));
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p3 := $load.bytes.ref($M.0, $p2);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} $p6 := spinlock_check($p5);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} $i7 := _raw_spin_lock_irqsave($p6);
    call {:si_unique_call 183} {:cexpr "flags"} boogie_si_record_bv64($i7);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0bv64, 824bv64)), $mul.ref(736bv64, 1bv64));
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p8, 0bv8);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0bv64, 320bv64)), $mul.ref(280bv64, 1bv64));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p9, $0.ref);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0bv64, 824bv64)), $mul.ref(616bv64, 1bv64));
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i11 := $load.bytes.bv8($M.0, $p10);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i12 := $zext.bv8.bv32($i11);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i13 := $and.bv32($i12, 239bv32);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i14 := $trunc.bv32.bv8($i13);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0bv64, 824bv64)), $mul.ref(616bv64, 1bv64));
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p15, $i14);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} spin_unlock_irqrestore($p16, $i7);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} vslice_dummy_var_28 := printk.ref.ref(.str.44, .str.1);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $r := 0bv32;
    return;
}



const printer_fsync: ref;

axiom printer_fsync == $sub.ref(0bv64, 127976bv64);

procedure printer_fsync($p0: ref, $i1: bv32) returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation printer_fsync($p0: ref, $i1: bv32) returns ($r: bv32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: bv64;
  var $p9: ref;
  var $i10: bv32;
  var $i11: bv1;
  var $i12: bv32;
  var $i13: bv64;
  var $i14: bv64;
  var $i15: bv32;
  var $p16: ref;
  var $i17: bv1;
  var $p18: ref;
  var $i19: bv32;
  var $i20: bv1;
  var $i21: bv32;
  var $i22: bv64;
  var $i23: bv64;
  var $i24: bv1;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: bv32;
  var $i39: bv1;
  var $i40: bv32;
  var $i41: bv64;
  var $i42: bv64;
  var $i43: bv1;
  var $p44: ref;
  var $i45: bv32;
  var $i46: bv1;
  var $i47: bv32;
  var $i48: bv1;
  var $i49: bv32;
  var $i50: bv64;
  var $i51: bv64;
  var $i52: bv1;
  var $p53: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} $p2 := $alloc($mul.ref(40bv64, $zext.bv32.bv64(1bv32)));
    call {:si_unique_call 187} {:cexpr "printer_fsync:arg:datasync"} boogie_si_record_bv32($i1);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0bv64, 320bv64)), $mul.ref(280bv64, 1bv64));
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $p4 := $load.bytes.ref($M.0, $p3);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $p7 := spinlock_check($p6);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} $i8 := _raw_spin_lock_irqsave($p7);
    call {:si_unique_call 190} {:cexpr "flags"} boogie_si_record_bv64($i8);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0bv64, 824bv64)), $mul.ref(400bv64, 1bv64));
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $i10 := list_empty($p9);
    call {:si_unique_call 192} {:cexpr "tmp___0"} boogie_si_record_bv32($i10);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i11 := $ne.bv32($i10, 0bv32);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i12 := $zext.bv1.bv32($i11);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i13 := $sext.bv32.bv64($i12);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $i14 := ldv__builtin_expect($i13, 1bv64);
    call {:si_unique_call 194} {:cexpr "tmp___1"} boogie_si_record_bv64($i14);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $i15 := $trunc.bv64.bv32($i14);
    call {:si_unique_call 195} {:cexpr "tx_list_empty"} boogie_si_record_bv32($i15);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} spin_unlock_irqrestore($p16, $i8);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i17 := $eq.bv32($i15, 0bv32);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $r := 0bv32;
    return;

  $bb1:
    assume $i17 == 1bv1;
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0bv64, 824bv64)), $mul.ref(416bv64, 1bv64));
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} $i19 := list_empty($p18);
    call {:si_unique_call 198} {:cexpr "tmp___7"} boogie_si_record_bv32($i19);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i20 := $ne.bv32($i19, 0bv32);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i21 := $zext.bv1.bv32($i20);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $i22 := $sext.bv32.bv64($i21);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $i23 := ldv__builtin_expect($i22, 1bv64);
    call {:si_unique_call 200} {:cexpr "tmp___8"} boogie_si_record_bv64($i23);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $i24 := $eq.bv64($i23, 0bv64);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i24 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb3:
    assume $i24 == 1bv1;
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $p25 := get_current();
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0bv64, 40bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $M.2 := $store.bv32($M.2, $p26, 0bv32);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0bv64, 40bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p28, $p25);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0bv64, 40bv64)), $mul.ref(16bv64, 1bv64));
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p29, autoremove_wake_function);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0bv64, 40bv64)), $mul.ref(24bv64, 1bv64));
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p2, $mul.ref(0bv64, 40bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p32, $p30);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0bv64, 40bv64)), $mul.ref(24bv64, 1bv64));
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p2, $mul.ref(0bv64, 40bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p35, $p33);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0bv64, 824bv64)), $mul.ref(512bv64, 1bv64));
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} prepare_to_wait($p36, $p2, 1bv32);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0bv64, 824bv64)), $mul.ref(416bv64, 1bv64));
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $i38 := list_empty($p37);
    call {:si_unique_call 204} {:cexpr "tmp___3"} boogie_si_record_bv32($i38);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i39 := $ne.bv32($i38, 0bv32);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i40 := $zext.bv1.bv32($i39);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i41 := $sext.bv32.bv64($i40);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} $i42 := ldv__builtin_expect($i41, 1bv64);
    call {:si_unique_call 206} {:cexpr "tmp___4"} boogie_si_record_bv64($i42);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i43 := $ne.bv64($i42, 0bv64);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i43 == 1bv1);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    call $p44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52 := printer_fsync_loop_$bb8($p2, $p36, $p37, $p44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52);
    goto $bb8_last;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} $p44 := get_current();
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $i45 := signal_pending($p44);
    call {:si_unique_call 210} {:cexpr "tmp___6"} boogie_si_record_bv32($i45);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i46 := $eq.bv32($i45, 0bv32);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i46 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p5, $mul.ref(0bv64, 824bv64)), $mul.ref(512bv64, 1bv64));
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} finish_wait($p53, $p2);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i46 == 1bv1;
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} schedule();
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} prepare_to_wait($p36, $p2, 1bv32);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $i47 := list_empty($p37);
    call {:si_unique_call 214} {:cexpr "tmp___3"} boogie_si_record_bv32($i47);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i48 := $ne.bv32($i47, 0bv32);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $i49 := $zext.bv1.bv32($i48);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $i50 := $sext.bv32.bv64($i49);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} $i51 := ldv__builtin_expect($i50, 1bv64);
    call {:si_unique_call 216} {:cexpr "tmp___4"} boogie_si_record_bv64($i51);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i52 := $ne.bv64($i51, 0bv64);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i52 == 1bv1);
    goto $bb16_dummy;

  $bb9:
    assume $i52 == 1bv1;
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i43 == 1bv1;
    goto $bb6;

  $bb16_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0bv64, 129008bv64);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0bv64, 64bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0bv64, 130040bv64);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: bv64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: bv64)
{
  var $i1: bv64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 1} true;
    call {:si_unique_call 217} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 218} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_bv64($i1);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0bv64, 131072bv64);

procedure list_empty($p0: ref) returns ($r: bv32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: bv32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: bv64;
  var $i4: bv64;
  var $i5: bv1;
  var $i6: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0bv64, 16bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $p2 := $load.bytes.ref($M.0, $p1);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.bv64($p2);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.bv64($p0);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i5 := $eq.bv64($i3, $i4);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i6 := $zext.bv1.bv32($i5);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0bv64, 132104bv64);

procedure ldv__builtin_expect($i0: bv64, $i1: bv64) returns ($r: bv64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: bv64, $i1: bv64) returns ($r: bv64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_bv64($i0);
    call {:si_unique_call 220} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_bv64($i1);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0bv64, 133136bv64);

procedure spin_unlock_irqrestore($p0: ref, $i1: bv64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: bv64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_bv64($i1);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0bv64, 64bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0bv64, 134168bv64);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} $p0 := devirtbounce(0bv64, current_task);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const autoremove_wake_function: ref;

axiom autoremove_wake_function == $sub.ref(0bv64, 135200bv64);

procedure autoremove_wake_function($p0: ref, $i1: bv32, $i2: bv32, $p3: ref) returns ($r: bv32);



const prepare_to_wait: ref;

axiom prepare_to_wait == $sub.ref(0bv64, 136232bv64);

procedure prepare_to_wait($p0: ref, $p1: ref, $i2: bv32);
  free requires assertsPassed;



implementation prepare_to_wait($p0: ref, $p1: ref, $i2: bv32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} {:cexpr "prepare_to_wait:arg:arg2"} boogie_si_record_bv32($i2);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    return;
}



const signal_pending: ref;

axiom signal_pending == $sub.ref(0bv64, 137264bv64);

procedure signal_pending($p0: ref) returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation signal_pending($p0: ref) returns ($r: bv32)
{
  var $i1: bv32;
  var $i2: bv1;
  var $i3: bv32;
  var $i4: bv64;
  var $i5: bv64;
  var $i6: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} $i1 := test_tsk_thread_flag($p0, 2bv32);
    call {:si_unique_call 226} {:cexpr "tmp"} boogie_si_record_bv32($i1);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i2 := $ne.bv32($i1, 0bv32);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i3 := $zext.bv1.bv32($i2);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i4 := $sext.bv32.bv64($i3);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $i5 := ldv__builtin_expect($i4, 0bv64);
    call {:si_unique_call 228} {:cexpr "tmp___0"} boogie_si_record_bv64($i5);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $i6 := $trunc.bv64.bv32($i5);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const schedule: ref;

axiom schedule == $sub.ref(0bv64, 138296bv64);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    return;
}



const finish_wait: ref;

axiom finish_wait == $sub.ref(0bv64, 139328bv64);

procedure finish_wait($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation finish_wait($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    return;
}



const test_tsk_thread_flag: ref;

axiom test_tsk_thread_flag == $sub.ref(0bv64, 140360bv64);

procedure test_tsk_thread_flag($p0: ref, $i1: bv32) returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation test_tsk_thread_flag($p0: ref, $i1: bv32) returns ($r: bv32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} {:cexpr "test_tsk_thread_flag:arg:flag"} boogie_si_record_bv32($i1);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0bv64, 9672bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $p3 := $load.bytes.ref($M.1, $p2);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $i5 := test_ti_thread_flag($p4, $i1);
    call {:si_unique_call 231} {:cexpr "tmp"} boogie_si_record_bv32($i5);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const test_ti_thread_flag: ref;

axiom test_ti_thread_flag == $sub.ref(0bv64, 141392bv64);

procedure test_ti_thread_flag($p0: ref, $i1: bv32) returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation test_ti_thread_flag($p0: ref, $i1: bv32) returns ($r: bv32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} {:cexpr "test_ti_thread_flag:arg:flag"} boogie_si_record_bv32($i1);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0bv64, 104bv64)), $mul.ref(16bv64, 1bv64));
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} $i4 := variable_test_bit($i1, $p3);
    call {:si_unique_call 234} {:cexpr "tmp"} boogie_si_record_bv32($i4);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0bv64, 142424bv64);

procedure variable_test_bit($i0: bv32, $p1: ref) returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation variable_test_bit($i0: bv32, $p1: ref) returns ($r: bv32)
{
  var $i2: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_bv32($i0);
    call {:si_unique_call 236} $i2 := devirtbounce.1(0bv64, $p1, $i0);
    call {:si_unique_call 237} {:cexpr "oldbit"} boogie_si_record_bv32($i2);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0bv64, 143456bv64);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: bv64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: bv64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_bv64($i1);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0bv64, 144488bv64);

procedure printk.ref.ref.bv32($p0: ref, p.1: ref, p.2: bv32) returns ($r: bv32);
  free requires assertsPassed;



implementation printk.ref.ref.bv32($p0: ref, p.1: ref, p.2: bv32) returns ($r: bv32)
{
  var $i1: bv32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 1} true;
    call {:si_unique_call 239} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 240} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i1);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: ref) returns ($r: bv32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: ref) returns ($r: bv32)
{
  var $i1: bv32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 1} true;
    call {:si_unique_call 241} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 242} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i1);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: bv32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: bv32)
{
  var $i1: bv32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 1} true;
    call {:si_unique_call 243} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 244} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i1);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: bv32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: bv32)
{
  var $i1: bv32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 1} true;
    call {:si_unique_call 245} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 246} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i1);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.bv32.bv32.bv32($p0: ref, p.1: ref, p.2: bv32, p.3: bv32, p.4: bv32) returns ($r: bv32);
  free requires assertsPassed;



implementation printk.ref.ref.bv32.bv32.bv32($p0: ref, p.1: ref, p.2: bv32, p.3: bv32, p.4: bv32) returns ($r: bv32)
{
  var $i1: bv32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 1} true;
    call {:si_unique_call 247} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 248} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i1);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.bv32.bv32.ref($p0: ref, p.1: ref, p.2: ref, p.3: bv32, p.4: bv32, p.5: ref) returns ($r: bv32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.bv32.bv32.ref($p0: ref, p.1: ref, p.2: ref, p.3: bv32, p.4: bv32, p.5: ref) returns ($r: bv32)
{
  var $i1: bv32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 1} true;
    call {:si_unique_call 249} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 250} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i1);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.bv32($p0: ref, p.1: ref, p.2: ref, p.3: bv32) returns ($r: bv32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.bv32($p0: ref, p.1: ref, p.2: ref, p.3: bv32) returns ($r: bv32)
{
  var $i1: bv32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 1} true;
    call {:si_unique_call 251} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 252} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i1);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.bv32.ref($p0: ref, p.1: ref, p.2: bv32, p.3: ref) returns ($r: bv32);
  free requires assertsPassed;



implementation printk.ref.ref.bv32.ref($p0: ref, p.1: ref, p.2: bv32, p.3: ref) returns ($r: bv32)
{
  var $i1: bv32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 1} true;
    call {:si_unique_call 253} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 254} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i1);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.bv32.bv32.bv32.bv32.bv32($p0: ref, p.1: ref, p.2: bv32, p.3: bv32, p.4: bv32, p.5: bv32, p.6: bv32) returns ($r: bv32);
  free requires assertsPassed;



implementation printk.ref.ref.bv32.bv32.bv32.bv32.bv32($p0: ref, p.1: ref, p.2: bv32, p.3: bv32, p.4: bv32, p.5: bv32, p.6: bv32) returns ($r: bv32)
{
  var $i1: bv32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 1} true;
    call {:si_unique_call 255} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 256} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i1);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.bv32.bv64($p0: ref, p.1: ref, p.2: bv32, p.3: bv64) returns ($r: bv32);
  free requires assertsPassed;



implementation printk.ref.ref.bv32.bv64($p0: ref, p.1: ref, p.2: bv32, p.3: bv64) returns ($r: bv32)
{
  var $i1: bv32;

  $bb9:
    assume {:verifier.code 1} true;
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 1} true;
    call {:si_unique_call 257} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 258} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i1);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0bv64, 145520bv64);

procedure mutex_lock_nested($p0: ref, $i1: bv32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: bv32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_bv32($i1);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0bv64, 146552bv64);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    return;
}



const setup_rx_reqs: ref;

axiom setup_rx_reqs == $sub.ref(0bv64, 147584bv64);

procedure setup_rx_reqs($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation setup_rx_reqs($p0: ref)
{
  var $p1: ref;
  var $i2: bv32;
  var $i3: bv1;
  var $i4: bv32;
  var $i5: bv64;
  var $i6: bv64;
  var $i7: bv1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: bv32;
  var $i19: bv1;
  var $p20: ref;
  var $i21: bv32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: bv32;
  var $i28: bv1;
  var $i29: bv32;
  var $i30: bv64;
  var $i31: bv64;
  var $i32: bv1;
  var vslice_dummy_var_29: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(272bv64, 1bv64));
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $i2 := list_empty($p1);
    call {:si_unique_call 261} {:cexpr "tmp"} boogie_si_record_bv32($i2);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i3 := $eq.bv32($i2, 0bv32);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i4 := $zext.bv1.bv32($i3);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $i5 := $sext.bv32.bv64($i4);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $i6 := ldv__builtin_expect($i5, 1bv64);
    call {:si_unique_call 263} {:cexpr "tmp___0"} boogie_si_record_bv64($i6);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $i7 := $ne.bv64($i6, 0bv64);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1bv1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1bv1;
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p9, $p10, $p11, $p12, $p13, $p14, $p15, $p16, $p17, $i18, $i19, $p20, $i21, $p25, $p26, $i27, $i28, $i29, $i30, $i31, $i32 := setup_rx_reqs_loop_$bb4($p0, $p1, $p9, $p10, $p11, $p12, $p13, $p14, $p15, $p16, $p17, $i18, $i19, $p20, $i21, $p25, $p26, $i27, $i28, $i29, $i30, $i31, $i32);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(272bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $p10 := $load.bytes.ref($M.0, $p9);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64));
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p11, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} list_del_init($p13);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv32($M.0, $p14, 8192bv32);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p11, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(32bv64, 1bv64));
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p15, rx_complete);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(248bv64, 1bv64));
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $p17 := $load.bytes.ref($M.0, $p16);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $i18 := usb_ep_queue($p17, $p12, 32bv32);
    call {:si_unique_call 266} {:cexpr "error"} boogie_si_record_bv32($i18);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i19 := $ne.bv32($i18, 0bv32);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $p20, $i21 := $p12, $i18;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1bv1);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p11, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(288bv64, 1bv64));
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} list_add($p25, $p26);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $i27 := list_empty($p1);
    call {:si_unique_call 271} {:cexpr "tmp"} boogie_si_record_bv32($i27);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i28 := $eq.bv32($i27, 0bv32);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i29 := $zext.bv1.bv32($i28);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i30 := $sext.bv32.bv64($i29);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $i31 := ldv__builtin_expect($i30, 1bv64);
    call {:si_unique_call 273} {:cexpr "tmp___0"} boogie_si_record_bv64($i31);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i32 := $ne.bv64($i31, 0bv64);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1bv1);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i32 == 1bv1;
    goto $bb10_dummy;

  $bb6:
    assume $i19 == 1bv1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} vslice_dummy_var_29 := printk.ref.ref.bv32(.str.47, .str.1, $i21);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p20, $mul.ref(0bv64, 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(272bv64, 1bv64));
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} list_add($p23, $p24);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const poll_wait: ref;

axiom poll_wait == $sub.ref(0bv64, 148616bv64);

procedure poll_wait($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation poll_wait($p0: ref, $p1: ref, $p2: ref)
{
  var $i3: bv64;
  var $i4: bv1;
  var $i5: bv64;
  var $i6: bv1;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.bv64($p2);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i4 := $ne.bv64($i3, 0bv64);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1bv1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1bv1;
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.bv64($p1);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i6 := $ne.bv64($i5, 0bv64);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1bv1);
    goto $bb3;

  $bb4:
    assume $i6 == 1bv1;
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0bv64, 16bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p8 := $load.bytes.ref($M.0, $p7);
    call {:si_unique_call 274} devirtbounce.2($p8, $p0, $p1, $p2);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const list_del_init: ref;

axiom list_del_init == $sub.ref(0bv64, 149648bv64);

procedure list_del_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation list_del_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0bv64, 16bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $p2 := $load.bytes.ref($M.0, $p1);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0bv64, 16bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $p4 := $load.bytes.ref($M.0, $p3);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} __list_del($p2, $p4);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} INIT_LIST_HEAD($p0);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    return;
}



const rx_complete: ref;

axiom rx_complete == $sub.ref(0bv64, 150680bv64);

procedure rx_complete($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation rx_complete($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: bv32;
  var $p7: ref;
  var $p8: ref;
  var $i9: bv64;
  var $p10: ref;
  var $i11: bv1;
  var $i12: bv1;
  var $i13: bv1;
  var $i14: bv1;
  var $i15: bv1;
  var $i16: bv1;
  var $i17: bv1;
  var $i18: bv1;
  var $p19: ref;
  var $i20: bv32;
  var $i21: bv1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: bv32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var vslice_dummy_var_30: bv32;
  var vslice_dummy_var_31: bv32;
  var vslice_dummy_var_32: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0bv64, 48bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p3 := $load.bytes.ref($M.0, $p2);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0bv64, 72bv64)), $mul.ref(64bv64, 1bv64));
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i6 := $load.bytes.bv32($M.0, $p5);
    call {:si_unique_call 277} {:cexpr "status"} boogie_si_record_bv32($i6);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $p8 := spinlock_check($p7);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} $i9 := _raw_spin_lock_irqsave($p8);
    call {:si_unique_call 280} {:cexpr "flags"} boogie_si_record_bv64($i9);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0bv64, 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} list_del_init($p10);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i11 := $slt.bv32($i6, $sub.bv32(0bv32, 103bv32));
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i11 == 1bv1);
    assume {:verifier.code 0} true;
    $i12 := $slt.bv32($i6, $sub.bv32(0bv32, 75bv32));
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1bv1);
    assume {:verifier.code 0} true;
    $i13 := $slt.bv32($i6, 0bv32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1bv1);
    assume {:verifier.code 0} true;
    $i14 := $eq.bv32($i6, 0bv32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i14 == 1bv1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} vslice_dummy_var_32 := printk.ref.ref.bv32(.str.50, .str.1, $i6);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0bv64, 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0bv64, 824bv64)), $mul.ref(272bv64, 1bv64));
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} list_add($p37, $p38);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0bv64, 824bv64)), $mul.ref(320bv64, 1bv64));
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} __wake_up($p39, 1bv32, 1bv32, $0.ref);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} spin_unlock_irqrestore($p40, $i9);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i14 == 1bv1;
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0bv64, 72bv64)), $mul.ref(68bv64, 1bv64));
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i20 := $load.bytes.bv32($M.0, $p19);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i21 := $ne.bv32($i20, 0bv32);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i21 == 1bv1);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0bv64, 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0bv64, 824bv64)), $mul.ref(272bv64, 1bv64));
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} list_add($p27, $p28);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i21 == 1bv1;
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0bv64, 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0bv64, 824bv64)), $mul.ref(304bv64, 1bv64));
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} list_add_tail($p22, $p23);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0bv64, 72bv64)), $mul.ref(68bv64, 1bv64));
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i25 := $load.bytes.bv32($M.0, $p24);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} vslice_dummy_var_31 := printk.ref.ref.bv32(.str.48, .str.1, $i25);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb6:
    assume $i13 == 1bv1;
    assume {:verifier.code 0} true;
    $i15 := $eq.bv32($i6, $sub.bv32(0bv32, 75bv32));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i15 == 1bv1);
    goto $bb10;

  $bb11:
    assume $i15 == 1bv1;
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb4:
    assume $i12 == 1bv1;
    assume {:verifier.code 0} true;
    $i16 := $eq.bv32($i6, $sub.bv32(0bv32, 103bv32));
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i16 == 1bv1);
    goto $bb10;

  $bb13:
    assume $i16 == 1bv1;
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0bv64, 48bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $p32 := $load.bytes.ref($M.0, $p31);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} vslice_dummy_var_30 := printk.ref.ref.ref(.str.49, .str.1, $p32);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0bv64, 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0bv64, 824bv64)), $mul.ref(272bv64, 1bv64));
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} list_add($p34, $p35);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb2:
    assume $i11 == 1bv1;
    assume {:verifier.code 0} true;
    $i17 := $slt.bv32($i6, $sub.bv32(0bv32, 104bv32));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i17 == 1bv1);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0bv64, 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0bv64, 824bv64)), $mul.ref(272bv64, 1bv64));
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} list_add($p29, $p30);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb15:
    assume $i17 == 1bv1;
    assume {:verifier.code 0} true;
    $i18 := $eq.bv32($i6, $sub.bv32(0bv32, 108bv32));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i18 == 1bv1);
    goto $bb10;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i18 == 1bv1;
    goto $bb18;
}



const usb_ep_queue: ref;

axiom usb_ep_queue == $sub.ref(0bv64, 151712bv64);

procedure usb_ep_queue($p0: ref, $p1: ref, $i2: bv32) returns ($r: bv32);
  free requires assertsPassed;



implementation usb_ep_queue($p0: ref, $p1: ref, $i2: bv32) returns ($r: bv32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} {:cexpr "usb_ep_queue:arg:gfp_flags"} boogie_si_record_bv32($i2);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0bv64, 48bv64)), $mul.ref(16bv64, 1bv64));
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p4 := $load.bytes.ref($M.0, $p3);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0bv64, 80bv64)), $mul.ref(32bv64, 1bv64));
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $p6 := $load.bytes.ref($M.0, $p5);
    call {:si_unique_call 293} $i7 := devirtbounce.3($p6, $p0, $p1, $i2);
    call {:si_unique_call 294} {:cexpr "tmp"} boogie_si_record_bv32($i7);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const list_add: ref;

axiom list_add == $sub.ref(0bv64, 152744bv64);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0bv64, 16bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p3 := $load.bytes.ref($M.0, $p2);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} __list_add($p0, $p1, $p3);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0bv64, 153776bv64);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0bv64, 154808bv64);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0bv64, 16bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p3 := $load.bytes.ref($M.0, $p2);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} __list_add($p0, $p3, $p1);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0bv64, 155840bv64);

procedure __wake_up($p0: ref, $i1: bv32, $i2: bv32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: bv32, $i2: bv32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_bv32($i1);
    call {:si_unique_call 298} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_bv32($i2);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    return;
}



const __list_del: ref;

axiom __list_del == $sub.ref(0bv64, 156872bv64);

procedure __list_del($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __list_del($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0bv64, 16bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p2, $p0);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0bv64, 16bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p3, $p1);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0bv64, 157904bv64);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0bv64, 16bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p1, $p0);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0bv64, 16bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p2, $p0);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    return;
}



const tx_complete: ref;

axiom tx_complete == $sub.ref(0bv64, 158936bv64);

procedure tx_complete($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation tx_complete($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: bv32;
  var $i7: bv1;
  var $i8: bv1;
  var $i9: bv1;
  var $i10: bv1;
  var $i11: bv1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: bv32;
  var $i19: bv1;
  var $i20: bv32;
  var $i21: bv64;
  var $i22: bv64;
  var $i23: bv1;
  var $p24: ref;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0bv64, 48bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p3 := $load.bytes.ref($M.0, $p2);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0bv64, 72bv64)), $mul.ref(64bv64, 1bv64));
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $i6 := $load.bytes.bv32($M.0, $p5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $slt.bv32($i6, $sub.bv32(0bv32, 104bv32));
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1bv1);
    assume {:verifier.code 0} true;
    $i8 := $slt.bv32($i6, 0bv32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1bv1);
    assume {:verifier.code 0} true;
    $i9 := $eq.bv32($i6, 0bv32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i9 == 1bv1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} spin_lock($p12);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0bv64, 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} list_del_init($p13);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0bv64, 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0bv64, 824bv64)), $mul.ref(400bv64, 1bv64));
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} list_add($p14, $p15);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0bv64, 824bv64)), $mul.ref(432bv64, 1bv64));
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} __wake_up($p16, 1bv32, 1bv32, $0.ref);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0bv64, 824bv64)), $mul.ref(416bv64, 1bv64));
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} $i18 := list_empty($p17);
    call {:si_unique_call 304} {:cexpr "tmp"} boogie_si_record_bv32($i18);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i19 := $ne.bv32($i18, 0bv32);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i20 := $zext.bv1.bv32($i19);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i21 := $sext.bv32.bv64($i20);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $i22 := ldv__builtin_expect($i21, 1bv64);
    call {:si_unique_call 306} {:cexpr "tmp___0"} boogie_si_record_bv64($i22);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i23 := $ne.bv64($i22, 0bv64);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i23 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} spin_unlock($p25);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i23 == 1bv1;
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0bv64, 824bv64)), $mul.ref(512bv64, 1bv64));
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} __wake_up($p24, 1bv32, 1bv32, $0.ref);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb6:
    assume $i9 == 1bv1;
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb4:
    assume $i8 == 1bv1;
    assume {:verifier.code 0} true;
    $i10 := $eq.bv32($i6, $sub.bv32(0bv32, 104bv32));
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb9, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i10 == 1bv1);
    goto $bb8;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i10 == 1bv1;
    goto $bb10;

  $bb2:
    assume $i7 == 1bv1;
    assume {:verifier.code 0} true;
    $i11 := $eq.bv32($i6, $sub.bv32(0bv32, 108bv32));
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb12, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i11 == 1bv1);
    goto $bb8;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i11 == 1bv1;
    goto $bb13;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0bv64, 159968bv64);

procedure copy_from_user($p0: ref, $p1: ref, $i2: bv64) returns ($r: bv64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: bv64) returns ($r: bv64)
{
  var $i3: bv32;
  var $i4: bv64;
  var $i5: bv32;
  var $i6: bv1;
  var $i8: bv64;
  var $i9: bv1;
  var $i7: bv1;
  var $i10: bv32;
  var $i11: bv64;
  var $i12: bv64;
  var $i13: bv1;
  var $i14: bv32;
  var $i15: bv64;
  var $i17: bv1;
  var $i18: bv32;
  var $i19: bv64;
  var $i20: bv64;
  var $i21: bv1;
  var $i22: bv1;
  var $i23: bv32;
  var $i24: bv64;
  var $i16: bv64;
  var vslice_dummy_var_33: bv64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} {:cexpr "copy_from_user:arg:n"} boogie_si_record_bv64($i2);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $i3 := __builtinx_object_size.ref.bv32($p0, 0bv32);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i4 := $sext.bv32.bv64($i3);
    call {:si_unique_call 311} {:cexpr "tmp"} boogie_si_record_bv64($i4);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $i5 := $trunc.bv64.bv32($i4);
    call {:si_unique_call 312} {:cexpr "sz"} boogie_si_record_bv32($i5);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} might_fault();
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i6 := $eq.bv32($i5, $sub.bv32(0bv32, 1bv32));
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i7 := 1bv1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1bv1);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i8 := $sext.bv32.bv64($i5);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i9 := $uge.bv64($i8, $i2);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i10 := $zext.bv1.bv32($i7);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i11 := $sext.bv32.bv64($i10);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} $i12 := ldv__builtin_expect($i11, 1bv64);
    call {:si_unique_call 315} {:cexpr "tmp___1"} boogie_si_record_bv64($i12);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i13 := $ne.bv64($i12, 0bv64);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1bv1);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i17 := $ne.bv32(1bv32, 0bv32);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i18 := $zext.bv1.bv32($i17);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i19 := $sext.bv32.bv64($i18);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $i20 := ldv__builtin_expect($i19, 0bv64);
    call {:si_unique_call 319} {:cexpr "tmp___0"} boogie_si_record_bv64($i20);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $i21 := $ne.bv64($i20, 0bv64);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i21 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i22 := $ne.bv32(1bv32, 0bv32);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i23 := $zext.bv1.bv32($i22);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i24 := $sext.bv32.bv64($i23);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} vslice_dummy_var_33 := ldv__builtin_expect($i24, 0bv64);
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb7:
    assume $i21 == 1bv1;
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} warn_slowpath_fmt.ref.bv32.ref(.str.42, 58bv32, .str.43);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i13 == 1bv1;
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i14 := $trunc.bv64.bv32($i2);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $i15 := _copy_from_user($p0, $p1, $i14);
    call {:si_unique_call 317} {:cexpr "n"} boogie_si_record_bv64($i15);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1bv1;
    goto $bb2;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0bv64, 161000bv64);

procedure __builtinx_object_size() returns ($r: bv32);



procedure __builtinx_object_size.ref.bv32(p.0: ref, p.1: bv32) returns ($r: bv32);



const might_fault: ref;

axiom might_fault == $sub.ref(0bv64, 162032bv64);

procedure might_fault();
  free requires assertsPassed;



implementation might_fault()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    return;
}



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0bv64, 163064bv64);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: bv32) returns ($r: bv64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: bv32) returns ($r: bv64)
{
  var $i3: bv64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 322} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_bv32($i2);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 1} true;
    call {:si_unique_call 323} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 324} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_bv64($i3);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const warn_slowpath_fmt: ref;

axiom warn_slowpath_fmt == $sub.ref(0bv64, 164096bv64);

procedure warn_slowpath_fmt.ref.bv32.ref($p0: ref, $i1: bv32, $p2: ref);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.bv32.ref($p0: ref, $i1: bv32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_bv32($i1);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0bv64, 165128bv64);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0bv64, 64bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} _raw_spin_lock($p2);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0bv64, 166160bv64);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0bv64, 64bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} _raw_spin_unlock($p2);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0bv64, 167192bv64);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0bv64, 168224bv64);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    return;
}



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0bv64, 169256bv64);

procedure copy_to_user($p0: ref, $p1: ref, $i2: bv32) returns ($r: bv32);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: bv32) returns ($r: bv32)
{
  var $i3: bv64;
  var $i4: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} {:cexpr "copy_to_user:arg:size"} boogie_si_record_bv32($i2);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} might_fault();
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} $i3 := _copy_to_user($p0, $p1, $i2);
    call {:si_unique_call 331} {:cexpr "tmp"} boogie_si_record_bv64($i3);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i4 := $trunc.bv64.bv32($i3);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0bv64, 170288bv64);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: bv32) returns ($r: bv64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: bv32) returns ($r: bv64)
{
  var $i3: bv64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 332} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_bv32($i2);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 1} true;
    call {:si_unique_call 333} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 334} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_bv64($i3);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const printer_bind: ref;

axiom printer_bind == $sub.ref(0bv64, 171320bv64);

procedure printer_bind($p0: ref) returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.25, $CurrAddr, $M.26, $M.27, $M.2, $M.3, $M.4, $M.5, $M.6;



implementation printer_bind($p0: ref) returns ($r: bv32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: bv32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: bv64;
  var $i14: bv1;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: bv32;
  var $i22: bv32;
  var $i23: bv1;
  var $i25: bv32;
  var $i26: bv1;
  var $i27: bv16;
  var $i28: bv32;
  var $i29: bv32;
  var $i30: bv16;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i44: bv16;
  var $i45: bv32;
  var $i46: bv1;
  var $i47: bv16;
  var $i48: bv32;
  var $i49: bv1;
  var $p50: ref;
  var $i53: bv16;
  var $i54: bv16;
  var $i55: bv16;
  var $i56: bv32;
  var $i57: bv1;
  var $i58: bv16;
  var $p59: ref;
  var $i60: bv64;
  var $i61: bv1;
  var $p62: ref;
  var $p64: ref;
  var $i65: bv64;
  var $i66: bv1;
  var $p67: ref;
  var $p69: ref;
  var $i70: bv64;
  var $i71: bv1;
  var $p72: ref;
  var $p74: ref;
  var $i75: bv64;
  var $i76: bv1;
  var $p77: ref;
  var $i79: bv64;
  var $i80: bv64;
  var $i81: bv8;
  var $i82: bv8;
  var $p83: ref;
  var $i84: bv64;
  var $i85: bv1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: bv64;
  var $i94: bv1;
  var $p96: ref;
  var $i97: bv8;
  var $i98: bv8;
  var $i99: bv8;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: bv16;
  var $i104: bv8;
  var $p106: ref;
  var $p107: ref;
  var $i108: bv8;
  var $i109: bv32;
  var $i110: bv1;
  var $i111: bv8;
  var $i112: bv32;
  var $i113: bv32;
  var $i114: bv8;
  var $i115: bv8;
  var $i116: bv32;
  var $i117: bv32;
  var $i118: bv8;
  var $p119: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $i148: bv64;
  var $i149: bv1;
  var $i150: bv32;
  var $i151: bv1;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $i156: bv64;
  var $i157: bv1;
  var $p158: ref;
  var $i159: bv32;
  var $i160: bv1;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $i169: bv32;
  var $i170: bv1;
  var $p171: ref;
  var $p172: ref;
  var $i173: bv32;
  var $i174: bv32;
  var $i175: bv1;
  var $i152: bv32;
  var $i176: bv32;
  var $i177: bv1;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $i182: bv64;
  var $i183: bv1;
  var $p184: ref;
  var $i185: bv32;
  var $i186: bv1;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $i195: bv32;
  var $i196: bv1;
  var $p197: ref;
  var $p198: ref;
  var $i199: bv32;
  var $i200: bv32;
  var $i201: bv1;
  var $i178: bv32;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $i16: bv32;
  var $i52: bv32;
  var vslice_dummy_var_34: bv32;
  var vslice_dummy_var_35: bv32;
  var vslice_dummy_var_36: bv32;
  var vslice_dummy_var_37: bv32;
  var vslice_dummy_var_38: bv32;
  var vslice_dummy_var_39: bv64;
  var vslice_dummy_var_40: bv64;
  var vslice_dummy_var_41: bv64;
  var vslice_dummy_var_42: bv64;
  var vslice_dummy_var_43: bv32;
  var vslice_dummy_var_44: bv32;
  var vslice_dummy_var_45: ref;
  var vslice_dummy_var_46: bv32;
  var vslice_dummy_var_47: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $p1 := $alloc($mul.ref(8bv64, $zext.bv32.bv64(1bv32)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $p2 := $alloc($mul.ref(8bv64, $zext.bv32.bv64(1bv32)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} $p3 := $alloc($mul.ref(8bv64, $zext.bv32.bv64(1bv32)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} $p4 := $alloc($mul.ref(8bv64, $zext.bv32.bv64(1bv32)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} $p5 := $alloc($mul.ref(8bv64, $zext.bv32.bv64(1bv32)));
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $p6 := $M.7;
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i7 := $M.8;
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $p8 := device_create.ref.ref.bv32.ref.ref($p6, $0.ref, $i7, $0.ref, .str.6);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(728bv64, 1bv64));
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p9, $p8);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(728bv64, 1bv64));
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $p11 := $load.bytes.ref($M.0, $p10);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $i13 := IS_ERR($p12);
    call {:si_unique_call 342} {:cexpr "tmp"} boogie_si_record_bv64($i13);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i14 := $ne.bv64($i13, 0bv64);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(624bv64, 1bv64));
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} ldv_cdev_init_8($p17, printer_io_operations);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(624bv64, 1bv64)), $mul.ref(64bv64, 1bv64));
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p19, __this_module);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(624bv64, 1bv64));
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i21 := $M.8;
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $i22 := cdev_add($p20, $i21, 1bv32);
    call {:si_unique_call 347} {:cexpr "status"} boogie_si_record_bv32($i22);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i23 := $ne.bv32($i22, 0bv32);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $i25 := usb_gadget_controller_number($p0);
    call {:si_unique_call 350} {:cexpr "gcnum"} boogie_si_record_bv32($i25);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i26 := $sge.bv32($i25, 0bv32);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1bv1);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0bv64, 1072bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0bv64, 1072bv64)), $mul.ref(40bv64, 1bv64));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $p33 := $load.bytes.ref($M.0, $p32);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} vslice_dummy_var_36 := dev_warn.ref.ref.ref($p31, .str.9, $p33);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv16($M.0, $add.ref($add.ref(device_desc, $mul.ref(0bv64, 18bv64)), $mul.ref(12bv64, 1bv64)), $sub.bv16(0bv16, 1bv16));
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} $p35 := init_utsname();
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} $p36 := init_utsname();
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0bv64, 390bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p35, $mul.ref(0bv64, 390bv64)), $mul.ref(130bv64, 1bv64));
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0bv64, 1072bv64)), $mul.ref(40bv64, 1bv64));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $p42 := $load.bytes.ref($M.0, $p41);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} vslice_dummy_var_37 := snprintf.ref.bv64.ref.ref.ref.ref(manufacturer, 50bv64, .str.10, $p38, $p40, $p42);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv16($M.0, $add.ref($add.ref(device_desc, $mul.ref(0bv64, 18bv64)), $mul.ref(8bv64, 1bv64)), 1317bv16);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv16($M.0, $add.ref($add.ref(device_desc, $mul.ref(0bv64, 18bv64)), $mul.ref(10bv64, 1bv64)), $sub.bv16(0bv16, 23384bv16));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i44 := $M.9;
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i45 := $zext.bv16.bv32($i44);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i46 := $ne.bv32($i45, 0bv32);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i46 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p59 := $M.12;
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.bv64($p59);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i61 := $ne.bv64($i60, 0bv64);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i61 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p64 := $M.13;
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.bv64($p64);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i66 := $ne.bv64($i65, 0bv64);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i66 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p69 := $M.14;
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.bv64($p69);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i71 := $ne.bv64($i70, 0bv64);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i71 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p74 := $M.15;
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.bv64($p74);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i76 := $ne.bv64($i75, 0bv64);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i76 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} $i79 := strlen(pnp_string);
    call {:si_unique_call 361} {:cexpr "len"} boogie_si_record_bv64($i79);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i80 := $lshr.bv64($i79, 8bv64);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i81 := $trunc.bv64.bv8($i80);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, pnp_string, $i81);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i82 := $trunc.bv64.bv8($i79);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(1bv64, 1bv64)), $i82);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} usb_ep_autoconfig_reset($p0);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} $p83 := usb_ep_autoconfig($p0, fs_ep_in_desc);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.bv64($p83);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i85 := $eq.bv64($i84, 0bv64);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i85 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p83, $mul.ref(0bv64, 48bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p91, $p83);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $p92 := usb_ep_autoconfig($p0, fs_ep_out_desc);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.bv64($p92);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i94 := $eq.bv64($i93, 0bv64);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i94 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p92, $mul.ref(0bv64, 48bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p96, $p92);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i97 := $load.bytes.bv8($M.0, $add.ref($add.ref(device_desc, $mul.ref(0bv64, 18bv64)), $mul.ref(7bv64, 1bv64)));
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(dev_qualifier, $mul.ref(0bv64, 10bv64)), $mul.ref(7bv64, 1bv64)), $i97);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i98 := $load.bytes.bv8($M.0, $add.ref($add.ref(fs_ep_in_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(2bv64, 1bv64)));
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(hs_ep_in_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(2bv64, 1bv64)), $i98);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i99 := $load.bytes.bv8($M.0, $add.ref($add.ref(fs_ep_out_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(2bv64, 1bv64)));
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(hs_ep_out_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(2bv64, 1bv64)), $i99);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0bv64, 1072bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p101 := $load.bytes.ref($M.0, $p100);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p101, $mul.ref(0bv64, 48bv64)), $mul.ref(40bv64, 1bv64));
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i103 := $load.bytes.bv16($M.0, $p102);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i104 := $trunc.bv16.bv8($i103);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(device_desc, $mul.ref(0bv64, 18bv64)), $mul.ref(7bv64, 1bv64)), $i104);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} vslice_dummy_var_44 := usb_gadget_set_selfpowered($p0);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p0);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p106, $mul.ref(36bv64, 1bv64));
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i108 := $load.bytes.bv8($M.0, $p107);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i109 := $zext.bv8.bv32($i108);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i110 := $ne.bv32($i109, 0bv32);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i110 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} vslice_dummy_var_45 := spinlock_check($p119);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p122);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} __raw_spin_lock_init($p123, .str.13, $p1);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64));
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} __mutex_init($p124, .str.14, $p2);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(400bv64, 1bv64));
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} INIT_LIST_HEAD($p125);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(416bv64, 1bv64));
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} INIT_LIST_HEAD($p126);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(272bv64, 1bv64));
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} INIT_LIST_HEAD($p127);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(288bv64, 1bv64));
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} INIT_LIST_HEAD($p128);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(304bv64, 1bv64));
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} INIT_LIST_HEAD($p129);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(320bv64, 1bv64));
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} __init_waitqueue_head($p130, $p3);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(432bv64, 1bv64));
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} __init_waitqueue_head($p131, $p4);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(512bv64, 1bv64));
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} __init_waitqueue_head($p132, $p5);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(232bv64, 1bv64));
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p133, 0bv8);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(233bv64, 1bv64));
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p134, $sub.bv8(0bv8, 1bv8));
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(736bv64, 1bv64));
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p135, 0bv8);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(616bv64, 1bv64));
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p136, 8bv8);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(592bv64, 1bv64));
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p137, $0.ref);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(600bv64, 1bv64));
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv64($M.0, $p138, 0bv64);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(608bv64, 1bv64));
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p139, $0.ref);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(240bv64, 1bv64));
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p140, $p83);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(248bv64, 1bv64));
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p141, $p92);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0bv64, 1072bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p143 := $load.bytes.ref($M.0, $p142);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $p144 := printer_req_alloc($p143, 256bv32, 208bv32);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(224bv64, 1bv64));
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p145, $p144);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(224bv64, 1bv64));
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p147 := $load.bytes.ref($M.0, $p146);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i148 := $p2i.ref.bv64($p147);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i149 := $eq.bv64($i148, 0bv64);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i149 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i150 := $M.16;
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i151 := $ult.bv32(0bv32, $i150);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i151 == 1bv1);
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i176 := $M.16;
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $i177 := $ult.bv32(0bv32, $i176);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i177 == 1bv1);
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(224bv64, 1bv64));
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $p203 := $load.bytes.ref($M.0, $p202);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p203, $mul.ref(0bv64, 72bv64)), $mul.ref(32bv64, 1bv64));
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p204, printer_setup_complete);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(216bv64, 1bv64));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p205, $p0);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p206 := $bitcast.ref.ref(usb_printer_gadget);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} set_gadget_data($p0, $p206);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p0, $mul.ref(0bv64, 1072bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $p209 := $load.bytes.ref($M.0, $p208);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p209, $mul.ref(0bv64, 48bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p210, usb_printer_gadget);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} vslice_dummy_var_46 := printk.ref.ref.ref(.str.15, .str.1, driver_desc);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p0, $mul.ref(0bv64, 1072bv64)), $mul.ref(40bv64, 1bv64));
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p213 := $load.bytes.ref($M.0, $p212);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p92, $mul.ref(0bv64, 48bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $p215 := $load.bytes.ref($M.0, $p214);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p83, $mul.ref(0bv64, 48bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $p217 := $load.bytes.ref($M.0, $p216);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} vslice_dummy_var_47 := printk.ref.ref.ref.ref.ref(.str.16, .str.1, $p213, $p215, $p217);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i52 := 0bv32;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $r := $i52;
    return;

  $bb65:
    assume $i177 == 1bv1;
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $i178 := 0bv32;
    goto $bb68;

  $bb68:
    call $p179, $p180, $p181, $i182, $i183, $p197, $p198, $i199, $i200, $i201, $i178 := printer_bind_loop_$bb68($p179, $p180, $p181, $i182, $i183, $p197, $p198, $i199, $i200, $i201, $i178);
    goto $bb68_last;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(248bv64, 1bv64));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p180 := $load.bytes.ref($M.0, $p179);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} $p181 := printer_req_alloc($p180, 8192bv32, 208bv32);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i182 := $p2i.ref.bv64($p181);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i183 := $eq.bv64($i182, 0bv64);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i183 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p181, $mul.ref(0bv64, 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(272bv64, 1bv64));
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} list_add($p197, $p198);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i199 := $add.bv32($i178, 1bv32);
    call {:si_unique_call 396} {:cexpr "i"} boogie_si_record_bv32($i199);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i200 := $M.16;
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i201 := $ult.bv32($i199, $i200);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i201 == 1bv1);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb81:
    assume $i201 == 1bv1;
    assume {:verifier.code 0} true;
    $i178 := $i199;
    goto $bb81_dummy;

  $bb70:
    assume $i183 == 1bv1;
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(272bv64, 1bv64));
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $i185 := list_empty($p184);
    call {:si_unique_call 390} {:cexpr "tmp___3"} boogie_si_record_bv32($i185);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i186 := $eq.bv32($i185, 0bv32);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i186} true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i186 == 1bv1);
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i52 := $sub.bv32(0bv32, 12bv32);
    goto $bb15;

  $bb72:
    assume $i186 == 1bv1;
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    call $p188, $p189, $p190, $p191, $p192, $p193, $p194, $i195, $i196 := printer_bind_loop_$bb75($p184, $p188, $p189, $p190, $p191, $p192, $p193, $p194, $i195, $i196);
    goto $bb75_last;

  $bb76:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(272bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $p189 := $load.bytes.ref($M.0, $p188);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p190 := $bitcast.ref.ref($p189);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($p190, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64));
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p190, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} list_del($p192);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(248bv64, 1bv64));
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $p194 := $load.bytes.ref($M.0, $p193);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} printer_req_free($p194, $p191);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} $i195 := list_empty($p184);
    call {:si_unique_call 394} {:cexpr "tmp___3"} boogie_si_record_bv32($i195);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i196 := $eq.bv32($i195, 0bv32);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i196 == 1bv1);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb77:
    assume {:verifier.code 0} true;
    assume $i196 == 1bv1;
    goto $bb77_dummy;

  $bb46:
    assume $i151 == 1bv1;
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i152 := 0bv32;
    goto $bb49;

  $bb49:
    call $p153, $p154, $p155, $i156, $i157, $p171, $p172, $i173, $i174, $i175, $i152 := printer_bind_loop_$bb49($p153, $p154, $p155, $i156, $i157, $p171, $p172, $i173, $i174, $i175, $i152);
    goto $bb49_last;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(240bv64, 1bv64));
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $p154 := $load.bytes.ref($M.0, $p153);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} $p155 := printer_req_alloc($p154, 8192bv32, 208bv32);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i156 := $p2i.ref.bv64($p155);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i157 := $eq.bv64($i156, 0bv64);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i157 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p155, $mul.ref(0bv64, 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(400bv64, 1bv64));
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} list_add($p171, $p172);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i173 := $add.bv32($i152, 1bv32);
    call {:si_unique_call 387} {:cexpr "i"} boogie_si_record_bv32($i173);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i174 := $M.16;
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i175 := $ult.bv32($i173, $i174);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i175 == 1bv1);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb62:
    assume $i175 == 1bv1;
    assume {:verifier.code 0} true;
    $i152 := $i173;
    goto $bb62_dummy;

  $bb51:
    assume $i157 == 1bv1;
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(400bv64, 1bv64));
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $i159 := list_empty($p158);
    call {:si_unique_call 381} {:cexpr "tmp___2"} boogie_si_record_bv32($i159);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i160 := $eq.bv32($i159, 0bv32);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i160 == 1bv1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i52 := $sub.bv32(0bv32, 12bv32);
    goto $bb15;

  $bb53:
    assume $i160 == 1bv1;
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    call $p162, $p163, $p164, $p165, $p166, $p167, $p168, $i169, $i170 := printer_bind_loop_$bb56($p158, $p162, $p163, $p164, $p165, $p166, $p167, $p168, $i169, $i170);
    goto $bb56_last;

  $bb57:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(400bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $p163 := $load.bytes.ref($M.0, $p162);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p164 := $bitcast.ref.ref($p163);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($p164, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64));
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p164, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} list_del($p166);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(240bv64, 1bv64));
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $p168 := $load.bytes.ref($M.0, $p167);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} printer_req_free($p168, $p165);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $i169 := list_empty($p158);
    call {:si_unique_call 385} {:cexpr "tmp___2"} boogie_si_record_bv32($i169);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i170 := $eq.bv32($i169, 0bv32);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i170 == 1bv1);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i170 == 1bv1;
    goto $bb58_dummy;

  $bb43:
    assume $i149 == 1bv1;
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i16 := $sub.bv32(0bv32, 12bv32);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} printer_unbind($p0);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i52 := $i16;
    goto $bb15;

  $bb40:
    assume $i110 == 1bv1;
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i111 := $load.bytes.bv8($M.0, $add.ref($add.ref(otg_desc, $mul.ref(0bv64, 3bv64)), $mul.ref(2bv64, 1bv64)));
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i112 := $zext.bv8.bv32($i111);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i113 := $or.bv32($i112, 2bv32);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i114 := $trunc.bv32.bv8($i113);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(otg_desc, $mul.ref(0bv64, 3bv64)), $mul.ref(2bv64, 1bv64)), $i114);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i115 := $load.bytes.bv8($M.0, $add.ref($add.ref(config_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(7bv64, 1bv64)));
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i116 := $zext.bv8.bv32($i115);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i117 := $or.bv32($i116, 32bv32);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i118 := $trunc.bv32.bv8($i117);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(config_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(7bv64, 1bv64)), $i118);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i94 == 1bv1;
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0bv64, 1072bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0bv64, 1072bv64)), $mul.ref(40bv64, 1bv64));
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p88 := $load.bytes.ref($M.0, $p87);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} vslice_dummy_var_43 := dev_err.ref.ref.ref($p86, .str.12, $p88);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i52 := $sub.bv32(0bv32, 19bv32);
    goto $bb15;

  $bb33:
    assume $i85 == 1bv1;
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume $i76 == 1bv1;
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $p77 := $M.15;
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} vslice_dummy_var_42 := strlcpy($add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(2bv64, 1bv64)), $p77, 1022bv64);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i71 == 1bv1;
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p72 := $M.14;
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} vslice_dummy_var_41 := strlcpy(serial_num, $p72, 40bv64);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i66 == 1bv1;
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $p67 := $M.13;
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} vslice_dummy_var_40 := strlcpy(product_desc, $p67, 40bv64);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i61 == 1bv1;
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p62 := $M.12;
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} vslice_dummy_var_39 := strlcpy(manufacturer, $p62, 50bv64);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb11:
    assume $i46 == 1bv1;
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i47 := $M.10;
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i48 := $zext.bv16.bv32($i47);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i49 := $eq.bv32($i48, 0bv32);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i49 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i53 := $M.9;
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv16($M.0, $add.ref($add.ref(device_desc, $mul.ref(0bv64, 18bv64)), $mul.ref(8bv64, 1bv64)), $i53);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $i54 := $M.10;
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv16($M.0, $add.ref($add.ref(device_desc, $mul.ref(0bv64, 18bv64)), $mul.ref(10bv64, 1bv64)), $i54);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i55 := $M.11;
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i56 := $zext.bv16.bv32($i55);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i57 := $ne.bv32($i56, 0bv32);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i57 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume $i57 == 1bv1;
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $i58 := $M.11;
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv16($M.0, $add.ref($add.ref(device_desc, $mul.ref(0bv64, 18bv64)), $mul.ref(12bv64, 1bv64)), $i58);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i49 == 1bv1;
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0bv64, 1072bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} vslice_dummy_var_38 := dev_err.ref.ref($p50, .str.11);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $i52 := $sub.bv32(0bv32, 19bv32);
    goto $bb15;

  $bb8:
    assume $i26 == 1bv1;
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i27 := $trunc.bv32.bv16($i25);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i28 := $zext.bv16.bv32($i27);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i29 := $add.bv32($i28, 512bv32);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i30 := $trunc.bv32.bv16($i29);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv16($M.0, $add.ref($add.ref(device_desc, $mul.ref(0bv64, 18bv64)), $mul.ref(12bv64, 1bv64)), $i30);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i23 == 1bv1;
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} vslice_dummy_var_35 := printk.ref.ref(.str.8, .str.1);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i16 := $i22;
    goto $bb3;

  $bb1:
    assume $i14 == 1bv1;
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} vslice_dummy_var_34 := printk.ref.ref(.str.7, .str.1);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i16 := $sub.bv32(0bv32, 12bv32);
    goto $bb3;

  $bb77_dummy:
    assume false;
    return;

  $bb75_last:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb81_dummy:
    assume false;
    return;

  $bb68_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1314;

  $bb58_dummy:
    assume false;
    return;

  $bb56_last:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb62_dummy:
    assume false;
    return;

  $bb49_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1271;
}



const printer_unbind: ref;

axiom printer_unbind == $sub.ref(0bv64, 172352bv64);

procedure printer_unbind($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.24;



implementation printer_unbind($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: bv32;
  var $p6: ref;
  var $p7: ref;
  var $i8: bv32;
  var $i9: bv1;
  var $i10: bv32;
  var $i11: bv1;
  var $i12: bv32;
  var $i13: bv64;
  var $i14: bv64;
  var $i15: bv1;
  var $i16: bv1;
  var $i17: bv32;
  var $i18: bv64;
  var $p20: ref;
  var $i21: bv32;
  var $i22: bv1;
  var $i23: bv32;
  var $i24: bv1;
  var $i25: bv32;
  var $i26: bv64;
  var $i27: bv64;
  var $i28: bv1;
  var $i29: bv1;
  var $i30: bv32;
  var $i31: bv64;
  var $p33: ref;
  var $i34: bv32;
  var $i35: bv1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: bv32;
  var $i45: bv1;
  var $p46: ref;
  var $p47: ref;
  var $i48: bv64;
  var $i49: bv1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: bv32;
  var $i56: bv1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: bv32;
  var $i66: bv1;
  var $p67: ref;
  var $i68: bv32;
  var $i69: bv1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: bv32;
  var $i79: bv1;
  var $p80: ref;
  var $p81: ref;
  var $i82: bv64;
  var $i83: bv1;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var vslice_dummy_var_48: bv32;
  var vslice_dummy_var_49: bv64;
  var vslice_dummy_var_50: bv64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $p1 := get_gadget_data($p0);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} vslice_dummy_var_48 := printk.ref.ref.ref(.str, .str.1, .str.4);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p4 := $M.7;
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i5 := $M.8;
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} device_destroy($p4, $i5);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0bv64, 824bv64)), $mul.ref(624bv64, 1bv64));
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} ldv_cdev_del_7($p6);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0bv64, 824bv64)), $mul.ref(416bv64, 1bv64));
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $i8 := list_empty($p7);
    call {:si_unique_call 405} {:cexpr "tmp___0"} boogie_si_record_bv32($i8);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i9 := $eq.bv32($i8, 0bv32);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i10 := $zext.bv1.bv32($i9);
    call {:si_unique_call 406} {:cexpr "__ret_warn_on"} boogie_si_record_bv32($i10);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i11 := $ne.bv32($i10, 0bv32);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i12 := $zext.bv1.bv32($i11);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i13 := $sext.bv32.bv64($i12);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $i14 := ldv__builtin_expect($i13, 0bv64);
    call {:si_unique_call 408} {:cexpr "tmp___1"} boogie_si_record_bv64($i14);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i15 := $ne.bv64($i14, 0bv64);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i16 := $ne.bv32($i10, 0bv32);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $i17 := $zext.bv1.bv32($i16);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $i18 := $sext.bv32.bv64($i17);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} vslice_dummy_var_49 := ldv__builtin_expect($i18, 0bv64);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0bv64, 824bv64)), $mul.ref(288bv64, 1bv64));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $i21 := list_empty($p20);
    call {:si_unique_call 412} {:cexpr "tmp___2"} boogie_si_record_bv32($i21);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i22 := $eq.bv32($i21, 0bv32);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $i23 := $zext.bv1.bv32($i22);
    call {:si_unique_call 413} {:cexpr "__ret_warn_on___0"} boogie_si_record_bv32($i23);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i24 := $ne.bv32($i23, 0bv32);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i25 := $zext.bv1.bv32($i24);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i26 := $sext.bv32.bv64($i25);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $i27 := ldv__builtin_expect($i26, 0bv64);
    call {:si_unique_call 415} {:cexpr "tmp___3"} boogie_si_record_bv64($i27);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i28 := $ne.bv64($i27, 0bv64);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i29 := $ne.bv32($i23, 0bv32);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i30 := $zext.bv1.bv32($i29);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i31 := $sext.bv32.bv64($i30);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} vslice_dummy_var_50 := ldv__builtin_expect($i31, 0bv64);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0bv64, 824bv64)), $mul.ref(400bv64, 1bv64));
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} $i34 := list_empty($p33);
    call {:si_unique_call 419} {:cexpr "tmp___4"} boogie_si_record_bv32($i34);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $i35 := $eq.bv32($i34, 0bv32);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i35 == 1bv1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0bv64, 824bv64)), $mul.ref(592bv64, 1bv64));
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $p47 := $load.bytes.ref($M.0, $p46);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.bv64($p47);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i49 := $ne.bv64($i48, 0bv64);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i49 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0bv64, 824bv64)), $mul.ref(272bv64, 1bv64));
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $i55 := list_empty($p54);
    call {:si_unique_call 426} {:cexpr "tmp___5"} boogie_si_record_bv32($i55);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i56 := $eq.bv32($i55, 0bv32);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i56 == 1bv1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0bv64, 824bv64)), $mul.ref(304bv64, 1bv64));
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $i68 := list_empty($p67);
    call {:si_unique_call 432} {:cexpr "tmp___6"} boogie_si_record_bv32($i68);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i69 := $eq.bv32($i68, 0bv32);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i69 == 1bv1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p2, $mul.ref(0bv64, 824bv64)), $mul.ref(224bv64, 1bv64));
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p81 := $load.bytes.ref($M.0, $p80);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.bv64($p81);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $i83 := $ne.bv64($i82, 0bv64);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i83 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} set_gadget_data($p0, $0.ref);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    return;

  $bb34:
    assume $i83 == 1bv1;
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0bv64, 1072bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $p85 := $load.bytes.ref($M.0, $p84);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p2, $mul.ref(0bv64, 824bv64)), $mul.ref(224bv64, 1bv64));
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $p87 := $load.bytes.ref($M.0, $p86);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} printer_req_free($p85, $p87);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p2, $mul.ref(0bv64, 824bv64)), $mul.ref(224bv64, 1bv64));
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p88, $0.ref);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb26:
    assume $i69 == 1bv1;
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    call $p71, $p72, $p73, $p74, $p75, $p76, $p77, $i78, $i79 := printer_unbind_loop_$bb29($p2, $p67, $p71, $p72, $p73, $p74, $p75, $p76, $p77, $i78, $i79);
    goto $bb29_last;

  $bb30:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p2, $mul.ref(0bv64, 824bv64)), $mul.ref(304bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $p72 := $load.bytes.ref($M.0, $p71);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p73, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64));
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p73, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} list_del($p75);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p2, $mul.ref(0bv64, 824bv64)), $mul.ref(248bv64, 1bv64));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $p77 := $load.bytes.ref($M.0, $p76);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} printer_req_free($p77, $p74);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $i78 := list_empty($p67);
    call {:si_unique_call 436} {:cexpr "tmp___6"} boogie_si_record_bv32($i78);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i79 := $eq.bv32($i78, 0bv32);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i79 == 1bv1);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i79 == 1bv1;
    goto $bb31_dummy;

  $bb18:
    assume $i56 == 1bv1;
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    call $p58, $p59, $p60, $p61, $p62, $p63, $p64, $i65, $i66 := printer_unbind_loop_$bb21($p2, $p54, $p58, $p59, $p60, $p61, $p62, $p63, $p64, $i65, $i66);
    goto $bb21_last;

  $bb22:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p2, $mul.ref(0bv64, 824bv64)), $mul.ref(272bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $p59 := $load.bytes.ref($M.0, $p58);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p60, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64));
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p60, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} list_del($p62);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p2, $mul.ref(0bv64, 824bv64)), $mul.ref(248bv64, 1bv64));
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $p64 := $load.bytes.ref($M.0, $p63);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} printer_req_free($p64, $p61);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} $i65 := list_empty($p54);
    call {:si_unique_call 430} {:cexpr "tmp___5"} boogie_si_record_bv32($i65);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i66 := $eq.bv32($i65, 0bv32);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i66 == 1bv1);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i66 == 1bv1;
    goto $bb23_dummy;

  $bb15:
    assume $i49 == 1bv1;
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0bv64, 824bv64)), $mul.ref(248bv64, 1bv64));
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p51 := $load.bytes.ref($M.0, $p50);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0bv64, 824bv64)), $mul.ref(592bv64, 1bv64));
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $p53 := $load.bytes.ref($M.0, $p52);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} printer_req_free($p51, $p53);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb7:
    assume $i35 == 1bv1;
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $p37, $p38, $p39, $p40, $p41, $p42, $p43, $i44, $i45 := printer_unbind_loop_$bb10($p2, $p33, $p37, $p38, $p39, $p40, $p41, $p42, $p43, $i44, $i45);
    goto $bb10_last;

  $bb11:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p2, $mul.ref(0bv64, 824bv64)), $mul.ref(400bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $p38 := $load.bytes.ref($M.0, $p37);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p39, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64));
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p39, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} list_del($p41);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0bv64, 824bv64)), $mul.ref(240bv64, 1bv64));
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p43 := $load.bytes.ref($M.0, $p42);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} printer_req_free($p43, $p40);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} $i44 := list_empty($p33);
    call {:si_unique_call 423} {:cexpr "tmp___4"} boogie_si_record_bv32($i44);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i45 := $eq.bv32($i44, 0bv32);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i45 == 1bv1);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i45 == 1bv1;
    goto $bb12_dummy;

  $bb4:
    assume $i28 == 1bv1;
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} warn_slowpath_null(.str.5, 1315bv32);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i15 == 1bv1;
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} warn_slowpath_null(.str.5, 1314bv32);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb31_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb23_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb12_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const printer_setup: ref;

axiom printer_setup == $sub.ref(0bv64, 173384bv64);

procedure printer_setup($p0: ref, $p1: ref) returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.24, $M.25, $CurrAddr, $M.26, $M.27;



implementation printer_setup($p0: ref, $p1: ref) returns ($r: bv32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: bv16;
  var $p8: ref;
  var $i9: bv16;
  var $p10: ref;
  var $i11: bv16;
  var $p12: ref;
  var $i13: bv8;
  var $i14: bv32;
  var $p15: ref;
  var $i16: bv8;
  var $i17: bv32;
  var $i18: bv32;
  var $i19: bv32;
  var $i20: bv32;
  var $p22: ref;
  var $p23: ref;
  var $i24: bv8;
  var $i25: bv32;
  var $i26: bv32;
  var $i27: bv1;
  var $i28: bv1;
  var $i29: bv1;
  var $p30: ref;
  var $i31: bv8;
  var $i32: bv32;
  var $i33: bv1;
  var $i34: bv1;
  var $i35: bv1;
  var $i36: bv1;
  var $i37: bv1;
  var $i38: bv1;
  var $p39: ref;
  var $i40: bv8;
  var $i41: bv32;
  var $i42: bv1;
  var $i44: bv32;
  var $i45: bv32;
  var $i46: bv1;
  var $i47: bv1;
  var $i48: bv1;
  var $i49: bv1;
  var $i50: bv1;
  var $i51: bv1;
  var $i52: bv1;
  var $i53: bv32;
  var $i54: bv32;
  var $i55: bv1;
  var $i56: bv32;
  var $i58: bv32;
  var $i57: bv32;
  var $i59: bv64;
  var $p60: ref;
  var $p61: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: bv8;
  var $i66: bv32;
  var $i67: bv1;
  var $i68: bv32;
  var $i69: bv32;
  var $i70: bv1;
  var $i71: bv32;
  var $i73: bv32;
  var $i72: bv32;
  var $i74: bv64;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: bv8;
  var $i80: bv32;
  var $i81: bv1;
  var $p82: ref;
  var $i83: bv32;
  var $p84: ref;
  var $p85: ref;
  var $i86: bv32;
  var $i87: bv32;
  var $i88: bv8;
  var $i89: bv32;
  var $i90: bv8;
  var $i91: bv32;
  var $i92: bv32;
  var $p93: ref;
  var $i94: bv8;
  var $i95: bv8;
  var $i96: bv8;
  var $i97: bv32;
  var $i98: bv32;
  var $i99: bv1;
  var $i100: bv16;
  var $i101: bv32;
  var $i102: bv32;
  var $i103: bv1;
  var $i104: bv32;
  var $i106: bv32;
  var $i105: bv32;
  var $i107: bv32;
  var $i108: bv32;
  var $i109: bv32;
  var $p110: ref;
  var $p111: ref;
  var $i112: bv32;
  var $i113: bv1;
  var $i114: bv16;
  var $i115: bv32;
  var $i116: bv32;
  var $i117: bv1;
  var $i118: bv32;
  var $i120: bv32;
  var $i119: bv32;
  var $i121: bv32;
  var $i62: bv32;
  var $p122: ref;
  var $i123: bv8;
  var $i124: bv32;
  var $i125: bv1;
  var $p126: ref;
  var $p127: ref;
  var $i128: bv8;
  var $i129: bv32;
  var $i130: bv1;
  var $p132: ref;
  var $p133: ref;
  var $i134: bv8;
  var $i135: bv32;
  var $i136: bv1;
  var $i138: bv32;
  var $i139: bv32;
  var $p140: ref;
  var $i141: bv8;
  var $i142: bv32;
  var $i143: bv1;
  var $p144: ref;
  var $i145: bv8;
  var $p146: ref;
  var $p147: ref;
  var $i148: bv32;
  var $i149: bv32;
  var $i150: bv1;
  var $i151: bv32;
  var $i153: bv32;
  var $i152: bv32;
  var $p154: ref;
  var $i155: bv8;
  var $i156: bv32;
  var $i157: bv1;
  var $p158: ref;
  var $i159: bv8;
  var $i160: bv32;
  var $i161: bv1;
  var $i162: bv32;
  var $p163: ref;
  var $i164: bv8;
  var $i165: bv32;
  var $i166: bv1;
  var $p167: ref;
  var $i168: bv8;
  var $i169: bv32;
  var $i170: bv1;
  var $p171: ref;
  var $i172: bv8;
  var $p173: ref;
  var $p174: ref;
  var $i175: bv32;
  var $i176: bv32;
  var $i177: bv1;
  var $i178: bv32;
  var $i180: bv32;
  var $i179: bv32;
  var $i43: bv32;
  var $p182: ref;
  var $i183: bv8;
  var $i184: bv32;
  var $i185: bv1;
  var $i186: bv1;
  var $i187: bv1;
  var $i188: bv1;
  var $i189: bv32;
  var $i190: bv32;
  var $i191: bv1;
  var $i193: bv8;
  var $i194: bv32;
  var $i195: bv32;
  var $i196: bv8;
  var $i197: bv32;
  var $i198: bv32;
  var $i199: bv64;
  var $p200: ref;
  var $p201: ref;
  var $i203: bv32;
  var $i204: bv1;
  var $p205: ref;
  var $i206: bv8;
  var $p207: ref;
  var $p208: ref;
  var $i209: bv32;
  var $i210: bv32;
  var $i211: bv1;
  var $i212: bv32;
  var $i214: bv32;
  var $i213: bv32;
  var $i215: bv32;
  var $i216: bv1;
  var $i192: bv32;
  var $i181: bv32;
  var $i217: bv1;
  var $p218: ref;
  var $i219: bv32;
  var $i220: bv1;
  var $i221: bv32;
  var $i222: bv8;
  var $p223: ref;
  var $i224: bv8;
  var $i225: bv8;
  var $i226: bv8;
  var $i227: bv8;
  var $i228: bv8;
  var $p229: ref;
  var $p230: ref;
  var $i231: bv32;
  var $i232: bv1;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $i237: bv32;
  var cmdloc_dummy_var_0: [ref]bv8;
  var cmdloc_dummy_var_1: [ref]bv8;
  var cmdloc_dummy_var_2: [ref]bv8;
  var cmdloc_dummy_var_3: [ref]bv8;
  var cmdloc_dummy_var_4: [ref]bv8;
  var cmdloc_dummy_var_5: [ref]bv8;
  var cmdloc_dummy_var_6: [ref]bv8;
  var cmdloc_dummy_var_7: [ref]bv8;
  var cmdloc_dummy_var_8: [ref]bv8;
  var vslice_dummy_var_51: bv32;
  var vslice_dummy_var_52: bv32;
  var vslice_dummy_var_53: bv32;
  var vslice_dummy_var_54: bv32;
  var vslice_dummy_var_55: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} $p2 := get_gadget_data($p0);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0bv64, 824bv64)), $mul.ref(224bv64, 1bv64));
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $p5 := $load.bytes.ref($M.0, $p4);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0bv64, 8bv64)), $mul.ref(4bv64, 1bv64));
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i7 := $load.bytes.bv16($M.0, $p6);
    call {:si_unique_call 440} {:cexpr "wIndex"} boogie_si_record_bv16($i7);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0bv64, 8bv64)), $mul.ref(2bv64, 1bv64));
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i9 := $load.bytes.bv16($M.0, $p8);
    call {:si_unique_call 441} {:cexpr "wValue"} boogie_si_record_bv16($i9);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0bv64, 8bv64)), $mul.ref(6bv64, 1bv64));
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i11 := $load.bytes.bv16($M.0, $p10);
    call {:si_unique_call 442} {:cexpr "wLength"} boogie_si_record_bv16($i11);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0bv64, 8bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i13 := $load.bytes.bv8($M.0, $p12);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i14 := $zext.bv8.bv32($i13);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0bv64, 8bv64)), $mul.ref(1bv64, 1bv64));
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $i16 := $load.bytes.bv8($M.0, $p15);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i17 := $zext.bv8.bv32($i16);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i18 := $zext.bv16.bv32($i9);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i19 := $zext.bv16.bv32($i7);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i20 := $zext.bv16.bv32($i11);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} vslice_dummy_var_51 := printk.ref.ref.bv32.bv32.bv32.bv32.bv32(.str.19, .str.1, $i14, $i17, $i18, $i19, $i20);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0bv64, 72bv64)), $mul.ref(32bv64, 1bv64));
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p22, printer_setup_complete);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0bv64, 8bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i24 := $load.bytes.bv8($M.0, $p23);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i25 := $zext.bv8.bv32($i24);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i26 := $and.bv32($i25, 96bv32);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i27 := $slt.bv32($i26, 32bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i27 == 1bv1);
    assume {:verifier.code 0} true;
    $i28 := $eq.bv32($i26, 32bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i28 == 1bv1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $i181 := $sub.bv32(0bv32, 95bv32);
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i217 := $sge.bv32($i181, 0bv32);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    assume {:branchcond $i217} true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i217 == 1bv1);
    assume {:verifier.code 0} true;
    $i237 := $i181;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $r := $i237;
    return;

  $bb128:
    assume $i217 == 1bv1;
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p5, $mul.ref(0bv64, 72bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv32($M.0, $p218, $i181);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i219 := $zext.bv16.bv32($i11);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i220 := $sgt.bv32($i219, $i181);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i221 := $zext.bv1.bv32($i220);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i222 := $trunc.bv32.bv8($i221);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p5, $mul.ref(0bv64, 72bv64)), $mul.ref(24bv64, 1bv64));
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i224 := $load.bytes.bv8($M.0, $p223);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i225 := $and.bv8($i222, 1bv8);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i226 := $shl.bv8($i225, 1bv8);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i227 := $and.bv8($i224, $sub.bv8(0bv8, 3bv8));
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i228 := $or.bv8($i227, $i226);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p223, $i228);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p0, $mul.ref(0bv64, 1072bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $p230 := $load.bytes.ref($M.0, $p229);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $i231 := usb_ep_queue($p230, $p5, 32bv32);
    call {:si_unique_call 466} {:cexpr "value"} boogie_si_record_bv32($i231);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $i232 := $slt.bv32($i231, 0bv32);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    assume {:branchcond $i232} true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i232 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $i237 := $i231;
    goto $bb133;

  $bb130:
    assume $i232 == 1bv1;
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} vslice_dummy_var_55 := printk.ref.ref.bv32(.str.23, .str.1, $i231);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p5, $mul.ref(0bv64, 72bv64)), $mul.ref(64bv64, 1bv64));
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv32($M.0, $p234, 0bv32);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p0, $mul.ref(0bv64, 1072bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p236 := $load.bytes.ref($M.0, $p235);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} printer_setup_complete($p236, $p5);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb4:
    assume $i28 == 1bv1;
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p1, $mul.ref(0bv64, 8bv64)), $mul.ref(1bv64, 1bv64));
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i183 := $load.bytes.bv8($M.0, $p182);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $i184 := $zext.bv8.bv32($i183);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $i185 := $slt.bv32($i184, 1bv32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i185 == 1bv1);
    assume {:verifier.code 0} true;
    $i186 := $slt.bv32($i184, 2bv32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i186} true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i186 == 1bv1);
    assume {:verifier.code 0} true;
    $i187 := $eq.bv32($i184, 2bv32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i187} true;
    goto $bb108, $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    assume !($i187 == 1bv1);
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb108:
    assume $i187 == 1bv1;
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i215 := $zext.bv16.bv32($i7);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i216 := $ne.bv32($i215, 0bv32);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    assume {:branchcond $i216} true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i216 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} printer_soft_reset($p3);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i192 := 0bv32;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i181 := $i192;
    goto $bb102;

  $bb123:
    assume $i216 == 1bv1;
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i192 := $sub.bv32(0bv32, 95bv32);
    goto $bb115;

  $bb106:
    assume $i186 == 1bv1;
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i203 := $zext.bv16.bv32($i7);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i204 := $ne.bv32($i203, 0bv32);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    assume {:branchcond $i204} true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i204 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p3, $mul.ref(0bv64, 824bv64)), $mul.ref(616bv64, 1bv64));
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i206 := $load.bytes.bv8($M.0, $p205);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p5, $mul.ref(0bv64, 72bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p208 := $load.bytes.ref($M.0, $p207);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p208, $i206);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i209 := $zext.bv16.bv32($i11);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i210 := $zext.bv16.bv32(1bv16);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i211 := $slt.bv32($i209, $i210);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    assume {:branchcond $i211} true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i211 == 1bv1);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i214 := $zext.bv16.bv32(1bv16);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i213 := $i214;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i192 := $i213;
    goto $bb115;

  $bb120:
    assume $i211 == 1bv1;
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i212 := $zext.bv16.bv32($i11);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i213 := $i212;
    goto $bb122;

  $bb117:
    assume $i204 == 1bv1;
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i192 := $sub.bv32(0bv32, 95bv32);
    goto $bb115;

  $bb104:
    assume $i185 == 1bv1;
    assume {:verifier.code 0} true;
    $i188 := $eq.bv32($i184, 0bv32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb111, $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    assume !($i188 == 1bv1);
    goto $bb110;

  $bb111:
    assume $i188 == 1bv1;
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i189 := $zext.bv16.bv32($i7);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i190 := $ashr.bv32($i189, 8bv32);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i191 := $ne.bv32($i190, 0bv32);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    assume {:branchcond $i191} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i191 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $i193 := $load.bytes.bv8($M.0, pnp_string);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i194 := $sext.bv8.bv32($i193);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i195 := $shl.bv32($i194, 8bv32);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i196 := $load.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(1bv64, 1bv64)));
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i197 := $sext.bv8.bv32($i196);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i198 := $or.bv32($i195, $i197);
    call {:si_unique_call 460} {:cexpr "value"} boogie_si_record_bv32($i198);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i199 := $sext.bv32.bv64($i198);
    call {:si_unique_call 461} {:cexpr "__len___1"} boogie_si_record_bv64($i199);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p5, $mul.ref(0bv64, 72bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $p201 := $load.bytes.ref($M.0, $p200);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 462} cmdloc_dummy_var_8 := $memcpy.bv8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p201, pnp_string, $i199, $zext.bv32.bv64(1bv32), 0bv1 == 1bv1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} vslice_dummy_var_54 := printk.ref.ref.bv32.ref(.str.22, .str.1, $i198, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(2bv64, 1bv64)));
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i192 := $i198;
    goto $bb115;

  $bb113:
    assume $i191 == 1bv1;
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i192 := $sub.bv32(0bv32, 95bv32);
    goto $bb115;

  $bb2:
    assume $i27 == 1bv1;
    assume {:verifier.code 0} true;
    $i29 := $eq.bv32($i26, 0bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i29 == 1bv1);
    goto $bb6;

  $bb7:
    assume $i29 == 1bv1;
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0bv64, 8bv64)), $mul.ref(1bv64, 1bv64));
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i31 := $load.bytes.bv8($M.0, $p30);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i32 := $zext.bv8.bv32($i31);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i33 := $slt.bv32($i32, 9bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i33 == 1bv1);
    assume {:verifier.code 0} true;
    $i34 := $slt.bv32($i32, 10bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i34 == 1bv1);
    assume {:verifier.code 0} true;
    $i35 := $slt.bv32($i32, 11bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1bv1);
    assume {:verifier.code 0} true;
    $i36 := $eq.bv32($i32, 11bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i36 == 1bv1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb16:
    assume $i36 == 1bv1;
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p1, $mul.ref(0bv64, 8bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i155 := $load.bytes.bv8($M.0, $p154);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i156 := $zext.bv8.bv32($i155);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i157 := $ne.bv32($i156, 1bv32);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb87;

  $bb87:
    assume !($i157 == 1bv1);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p3, $mul.ref(0bv64, 824bv64)), $mul.ref(232bv64, 1bv64));
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $i159 := $load.bytes.bv8($M.0, $p158);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i160 := $zext.bv8.bv32($i159);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i161 := $eq.bv32($i160, 0bv32);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i161 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $i162 := set_interface($p3, 0bv32);
    call {:si_unique_call 459} {:cexpr "value"} boogie_si_record_bv32($i162);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i43 := $i162;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i181 := $i43;
    goto $bb102;

  $bb88:
    assume {:verifier.code 0} true;
    assume $i161 == 1bv1;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i43 := $sub.bv32(0bv32, 95bv32);
    goto $bb25;

  $bb85:
    assume {:verifier.code 0} true;
    assume $i157 == 1bv1;
    goto $bb86;

  $bb14:
    assume $i35 == 1bv1;
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p1, $mul.ref(0bv64, 8bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i164 := $load.bytes.bv8($M.0, $p163);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i165 := $zext.bv8.bv32($i164);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i166 := $ne.bv32($i165, 129bv32);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    assume {:branchcond $i166} true;
    goto $bb91, $bb93;

  $bb93:
    assume !($i166 == 1bv1);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p3, $mul.ref(0bv64, 824bv64)), $mul.ref(232bv64, 1bv64));
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i168 := $load.bytes.bv8($M.0, $p167);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i169 := $zext.bv8.bv32($i168);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i170 := $eq.bv32($i169, 0bv32);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i170 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p3, $mul.ref(0bv64, 824bv64)), $mul.ref(233bv64, 1bv64));
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i172 := $load.bytes.bv8($M.0, $p171);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p5, $mul.ref(0bv64, 72bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p174 := $load.bytes.ref($M.0, $p173);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p174, $i172);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i175 := $zext.bv16.bv32($i11);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i176 := $zext.bv16.bv32(1bv16);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i177 := $slt.bv32($i175, $i176);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i177 == 1bv1);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i180 := $zext.bv16.bv32(1bv16);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $i179 := $i180;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i43 := $i179;
    goto $bb25;

  $bb97:
    assume $i177 == 1bv1;
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i178 := $zext.bv16.bv32($i11);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i179 := $i178;
    goto $bb99;

  $bb94:
    assume {:verifier.code 0} true;
    assume $i170 == 1bv1;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i43 := $sub.bv32(0bv32, 95bv32);
    goto $bb25;

  $bb91:
    assume {:verifier.code 0} true;
    assume $i166 == 1bv1;
    goto $bb92;

  $bb12:
    assume $i34 == 1bv1;
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p1, $mul.ref(0bv64, 8bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i123 := $load.bytes.bv8($M.0, $p122);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i124 := $zext.bv8.bv32($i123);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i125 := $ne.bv32($i124, 0bv32);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i125 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p0);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p126, $mul.ref(36bv64, 1bv64));
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i128 := $load.bytes.bv8($M.0, $p127);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i129 := $zext.bv8.bv32($i128);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i130 := $ne.bv32($i129, 0bv32);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i130 == 1bv1);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p0);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($p132, $mul.ref(36bv64, 1bv64));
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i134 := $load.bytes.bv8($M.0, $p133);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i135 := $zext.bv8.bv32($i134);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i136 := $ne.bv32($i135, 0bv32);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i136 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i138 := $zext.bv16.bv32($i9);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} $i139 := printer_set_config($p3, $i138);
    call {:si_unique_call 456} {:cexpr "value"} boogie_si_record_bv32($i139);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i43 := $i139;
    goto $bb25;

  $bb76:
    assume $i136 == 1bv1;
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} vslice_dummy_var_53 := printk.ref.ref(.str.21, .str.1);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb73:
    assume $i130 == 1bv1;
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} vslice_dummy_var_52 := printk.ref.ref(.str.20, .str.1);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb70:
    assume $i125 == 1bv1;
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i43 := $sub.bv32(0bv32, 95bv32);
    goto $bb25;

  $bb10:
    assume $i33 == 1bv1;
    assume {:verifier.code 0} true;
    $i37 := $slt.bv32($i32, 8bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i37 == 1bv1);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p1, $mul.ref(0bv64, 8bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i141 := $load.bytes.bv8($M.0, $p140);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i142 := $zext.bv8.bv32($i141);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i143 := $ne.bv32($i142, 128bv32);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i143 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p3, $mul.ref(0bv64, 824bv64)), $mul.ref(232bv64, 1bv64));
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i145 := $load.bytes.bv8($M.0, $p144);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p5, $mul.ref(0bv64, 72bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $p147 := $load.bytes.ref($M.0, $p146);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p147, $i145);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $i148 := $zext.bv16.bv32($i11);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $i149 := $zext.bv16.bv32(1bv16);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i150 := $slt.bv32($i148, $i149);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    assume {:branchcond $i150} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i150 == 1bv1);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i153 := $zext.bv16.bv32(1bv16);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $i152 := $i153;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i43 := $i152;
    goto $bb25;

  $bb82:
    assume $i150 == 1bv1;
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i151 := $zext.bv16.bv32($i11);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i152 := $i151;
    goto $bb84;

  $bb79:
    assume $i143 == 1bv1;
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i43 := $sub.bv32(0bv32, 95bv32);
    goto $bb25;

  $bb19:
    assume $i37 == 1bv1;
    assume {:verifier.code 0} true;
    $i38 := $eq.bv32($i32, 6bv32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i38 == 1bv1);
    goto $bb18;

  $bb21:
    assume $i38 == 1bv1;
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0bv64, 8bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i40 := $load.bytes.bv8($M.0, $p39);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i41 := $zext.bv8.bv32($i40);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i42 := $ne.bv32($i41, 128bv32);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i42 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i44 := $zext.bv16.bv32($i9);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i45 := $ashr.bv32($i44, 8bv32);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i46 := $slt.bv32($i45, 3bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i46 == 1bv1);
    assume {:verifier.code 0} true;
    $i47 := $slt.bv32($i45, 6bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i47 == 1bv1);
    assume {:verifier.code 0} true;
    $i48 := $slt.bv32($i45, 7bv32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i48 == 1bv1);
    assume {:verifier.code 0} true;
    $i49 := $eq.bv32($i45, 7bv32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i49 == 1bv1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $i62 := $sub.bv32(0bv32, 95bv32);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i43 := $i62;
    goto $bb25;

  $bb34:
    assume $i49 == 1bv1;
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p0);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p77, $mul.ref(36bv64, 1bv64));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i79 := $load.bytes.bv8($M.0, $p78);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $i80 := $zext.bv8.bv32($i79);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i81 := $eq.bv32($i80, 0bv32);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i81 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0bv64, 1072bv64)), $mul.ref(32bv64, 1bv64));
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i83 := $load.bytes.bv32($M.0, $p82);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p5, $mul.ref(0bv64, 72bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p85 := $load.bytes.ref($M.0, $p84);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i86 := $zext.bv16.bv32($i9);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i87 := $ashr.bv32($i86, 8bv32);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i88 := $trunc.bv32.bv8($i87);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i89 := $zext.bv8.bv32($i88);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i90 := $trunc.bv32.bv8($i89);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i91 := $zext.bv16.bv32($i9);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i92 := $and.bv32($i91, 255bv32);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0bv64, 1072bv64)), $mul.ref(36bv64, 1bv64));
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i94 := $load.bytes.bv8($M.0, $p93);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i95 := $lshr.bv8($i94, 1bv8);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i96 := $and.bv8($i95, 1bv8);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i97 := $zext.bv8.bv32($i96);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $i98 := config_buf($i83, $p85, $i90, $i92, $i97);
    call {:si_unique_call 447} {:cexpr "value"} boogie_si_record_bv32($i98);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i99 := $sge.bv32($i98, 0bv32);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i99 == 1bv1);
    assume {:verifier.code 0} true;
    $i107 := $i98;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i62 := $i107;
    goto $bb47;

  $bb57:
    assume $i99 == 1bv1;
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i100 := $trunc.bv32.bv16($i98);
    call {:si_unique_call 452} {:cexpr "_min2___1"} boogie_si_record_bv16($i100);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i101 := $zext.bv16.bv32($i11);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i102 := $zext.bv16.bv32($i100);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i103 := $slt.bv32($i101, $i102);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i103 == 1bv1);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i106 := $zext.bv16.bv32($i100);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i105 := $i106;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i107 := $i105;
    goto $bb62;

  $bb59:
    assume $i103 == 1bv1;
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i104 := $zext.bv16.bv32($i11);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i105 := $i104;
    goto $bb61;

  $bb54:
    assume $i81 == 1bv1;
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i62 := $sub.bv32(0bv32, 95bv32);
    goto $bb47;

  $bb32:
    assume $i48 == 1bv1;
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p0);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p63, $mul.ref(36bv64, 1bv64));
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i65 := $load.bytes.bv8($M.0, $p64);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i66 := $zext.bv8.bv32($i65);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i67 := $eq.bv32($i66, 0bv32);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i67 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i68 := $zext.bv16.bv32($i11);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i69 := $zext.bv16.bv32(10bv16);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i70 := $slt.bv32($i68, $i69);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i70 == 1bv1);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i73 := $zext.bv16.bv32(10bv16);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i72 := $i73;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i74 := $sext.bv32.bv64($i72);
    call {:si_unique_call 450} {:cexpr "__len___0"} boogie_si_record_bv64($i74);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p5, $mul.ref(0bv64, 72bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $p76 := $load.bytes.ref($M.0, $p75);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 451} cmdloc_dummy_var_5 := $memcpy.bv8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p76, dev_qualifier, $i74, $zext.bv32.bv64(1bv32), 0bv1 == 1bv1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i62 := $i72;
    goto $bb47;

  $bb51:
    assume $i70 == 1bv1;
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i71 := $zext.bv16.bv32($i11);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i72 := $i71;
    goto $bb53;

  $bb48:
    assume $i67 == 1bv1;
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i62 := $sub.bv32(0bv32, 95bv32);
    goto $bb47;

  $bb30:
    assume $i47 == 1bv1;
    assume {:verifier.code 0} true;
    $i50 := $eq.bv32($i45, 3bv32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i50 == 1bv1);
    goto $bb36;

  $bb37:
    assume $i50 == 1bv1;
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i108 := $zext.bv16.bv32($i9);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i109 := $and.bv32($i108, 255bv32);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p5, $mul.ref(0bv64, 72bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p111 := $load.bytes.ref($M.0, $p110);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $i112 := usb_gadget_get_string(stringtab, $i109, $p111);
    call {:si_unique_call 445} {:cexpr "value"} boogie_si_record_bv32($i112);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i113 := $sge.bv32($i112, 0bv32);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i113 == 1bv1);
    assume {:verifier.code 0} true;
    $i121 := $i112;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i62 := $i121;
    goto $bb47;

  $bb63:
    assume $i113 == 1bv1;
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i114 := $trunc.bv32.bv16($i112);
    call {:si_unique_call 453} {:cexpr "_min2___2"} boogie_si_record_bv16($i114);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $i115 := $zext.bv16.bv32($i11);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i116 := $zext.bv16.bv32($i114);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i117 := $slt.bv32($i115, $i116);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i117 == 1bv1);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i120 := $zext.bv16.bv32($i114);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i119 := $i120;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i121 := $i119;
    goto $bb68;

  $bb65:
    assume $i117 == 1bv1;
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i118 := $zext.bv16.bv32($i11);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i119 := $i118;
    goto $bb67;

  $bb28:
    assume $i46 == 1bv1;
    assume {:verifier.code 0} true;
    $i51 := $slt.bv32($i45, 2bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i51 == 1bv1);
    goto $bb41;

  $bb39:
    assume $i51 == 1bv1;
    assume {:verifier.code 0} true;
    $i52 := $eq.bv32($i45, 1bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i52 == 1bv1);
    goto $bb36;

  $bb42:
    assume $i52 == 1bv1;
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i53 := $zext.bv16.bv32($i11);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i54 := $zext.bv16.bv32(18bv16);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i55 := $slt.bv32($i53, $i54);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i55 == 1bv1);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i58 := $zext.bv16.bv32(18bv16);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i57 := $i58;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i59 := $sext.bv32.bv64($i57);
    call {:si_unique_call 448} {:cexpr "__len"} boogie_si_record_bv64($i59);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p5, $mul.ref(0bv64, 72bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $p61 := $load.bytes.ref($M.0, $p60);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 449} cmdloc_dummy_var_2 := $memcpy.bv8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p61, device_desc, $i59, $zext.bv32.bv64(1bv32), 0bv1 == 1bv1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i62 := $i57;
    goto $bb47;

  $bb44:
    assume $i55 == 1bv1;
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i56 := $zext.bv16.bv32($i11);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i57 := $i56;
    goto $bb46;

  $bb23:
    assume $i42 == 1bv1;
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i43 := $sub.bv32(0bv32, 95bv32);
    goto $bb25;
}



const printer_disconnect: ref;

axiom printer_disconnect == $sub.ref(0bv64, 174416bv64);

procedure printer_disconnect($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.25, $CurrAddr, $M.26, $M.27, $M.2, $M.3, $M.4, $M.5, $M.6;



implementation printer_disconnect($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: bv64;
  var $p7: ref;
  var vslice_dummy_var_56: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} $p1 := get_gadget_data($p0);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} vslice_dummy_var_56 := printk.ref.ref.ref(.str, .str.1, .str.2);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $p5 := spinlock_check($p4);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 473} {:cexpr "flags"} boogie_si_record_bv64($i6);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} printer_reset_interface($p2);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} spin_unlock_irqrestore($p7, $i6);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    return;
}



const get_gadget_data: ref;

axiom get_gadget_data == $sub.ref(0bv64, 175448bv64);

procedure get_gadget_data($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_gadget_data($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0bv64, 1072bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const printer_reset_interface: ref;

axiom printer_reset_interface == $sub.ref(0bv64, 176480bv64);

procedure printer_reset_interface($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.25, $CurrAddr, $M.26, $M.27, $M.2, $M.3, $M.4, $M.5, $M.6;



implementation printer_reset_interface($p0: ref)
{
  var $p1: ref;
  var $i2: bv8;
  var $i3: bv32;
  var $i4: bv1;
  var $p6: ref;
  var $p7: ref;
  var $i8: bv64;
  var $i9: bv1;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: bv64;
  var $i16: bv1;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var vslice_dummy_var_57: bv32;
  var vslice_dummy_var_58: bv32;
  var vslice_dummy_var_59: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(233bv64, 1bv64));
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i2 := $load.bytes.bv8($M.0, $p1);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i3 := $sext.bv8.bv32($i2);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i4 := $slt.bv32($i3, 0bv32);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} vslice_dummy_var_57 := printk.ref.ref.ref(.str, .str.1, .str.3);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(256bv64, 1bv64));
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $p7 := $load.bytes.ref($M.0, $p6);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.bv64($p7);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i9 := $ne.bv64($i8, 0bv64);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(264bv64, 1bv64));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $p14 := $load.bytes.ref($M.0, $p13);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.bv64($p14);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i16 := $ne.bv64($i15, 0bv64);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(233bv64, 1bv64));
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p20, $sub.bv8(0bv8, 1bv8));
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i16 == 1bv1;
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(248bv64, 1bv64));
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p18 := $load.bytes.ref($M.0, $p17);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} vslice_dummy_var_59 := usb_ep_disable($p18);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i9 == 1bv1;
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(240bv64, 1bv64));
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $p11 := $load.bytes.ref($M.0, $p10);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} vslice_dummy_var_58 := usb_ep_disable($p11);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1bv1;
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_ep_disable: ref;

axiom usb_ep_disable == $sub.ref(0bv64, 177512bv64);

procedure usb_ep_disable($p0: ref) returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.25, $CurrAddr, $M.26, $M.27, $M.2, $M.3, $M.4, $M.5, $M.6;



implementation usb_ep_disable($p0: ref) returns ($r: bv32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0bv64, 48bv64)), $mul.ref(16bv64, 1bv64));
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p2 := $load.bytes.ref($M.0, $p1);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0bv64, 80bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $p4 := $load.bytes.ref($M.0, $p3);
    call {:si_unique_call 480} $i5 := devirtbounce.4($p4, $p0);
    call {:si_unique_call 481} {:cexpr "tmp"} boogie_si_record_bv32($i5);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0bv64, 178544bv64);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $p1 := external_alloc();
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0bv64, 179576bv64);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 1} true;
    call {:si_unique_call 483} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 484} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const printer_setup_complete: ref;

axiom printer_setup_complete == $sub.ref(0bv64, 180608bv64);

procedure printer_setup_complete($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation printer_setup_complete($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: bv32;
  var $i4: bv1;
  var $p5: ref;
  var $i6: bv32;
  var $p7: ref;
  var $i8: bv32;
  var $i9: bv1;
  var $p10: ref;
  var $i11: bv32;
  var $p12: ref;
  var $i13: bv32;
  var $p14: ref;
  var $i15: bv32;
  var vslice_dummy_var_60: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0bv64, 72bv64)), $mul.ref(64bv64, 1bv64));
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i3 := $load.bytes.bv32($M.0, $p2);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i4 := $ne.bv32($i3, 0bv32);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1bv1);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0bv64, 72bv64)), $mul.ref(68bv64, 1bv64));
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i6 := $load.bytes.bv32($M.0, $p5);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0bv64, 72bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i8 := $load.bytes.bv32($M.0, $p7);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i9 := $ne.bv32($i6, $i8);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i9 == 1bv1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0bv64, 72bv64)), $mul.ref(64bv64, 1bv64));
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i11 := $load.bytes.bv32($M.0, $p10);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0bv64, 72bv64)), $mul.ref(68bv64, 1bv64));
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i13 := $load.bytes.bv32($M.0, $p12);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0bv64, 72bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i15 := $load.bytes.bv32($M.0, $p14);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} vslice_dummy_var_60 := printk.ref.ref.bv32.bv32.bv32(.str.18, .str.1, $i11, $i13, $i15);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1bv1;
    goto $bb2;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0bv64, 181640bv64);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: bv64, $i3: bv32, $i4: bv1);



const config_buf: ref;

axiom config_buf == $sub.ref(0bv64, 182672bv64);

procedure config_buf($i0: bv32, $p1: ref, $i2: bv8, $i3: bv32, $i4: bv32) returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.0;



implementation config_buf($i0: bv32, $p1: ref, $i2: bv8, $i3: bv32, $i4: bv32) returns ($r: bv32)
{
  var $i5: bv1;
  var $i6: bv32;
  var $i7: bv32;
  var $i8: bv1;
  var $i9: bv1;
  var $i10: bv32;
  var $i11: bv32;
  var $i12: bv1;
  var $p13: ref;
  var $i14: bv8;
  var $i15: bv32;
  var $i16: bv1;
  var $i18: bv1;
  var $p19: ref;
  var $p20: ref;
  var $i21: bv32;
  var $i22: bv1;
  var $p23: ref;
  var $p24: ref;
  var $i17: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} {:cexpr "config_buf:arg:speed"} boogie_si_record_bv32($i0);
    call {:si_unique_call 487} {:cexpr "config_buf:arg:type"} boogie_si_record_bv8($i2);
    call {:si_unique_call 488} {:cexpr "config_buf:arg:index"} boogie_si_record_bv32($i3);
    call {:si_unique_call 489} {:cexpr "config_buf:arg:is_otg"} boogie_si_record_bv32($i4);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i5 := $eq.bv32($i0, 3bv32);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i6 := $zext.bv1.bv32($i5);
    call {:si_unique_call 490} {:cexpr "hs"} boogie_si_record_bv32($i6);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i7 := $zext.bv8.bv32($i2);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i8 := $eq.bv32($i7, 7bv32);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1bv1);
    assume {:verifier.code 0} true;
    $i11 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i12 := $ne.bv32($i11, 0bv32);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1bv1);
    assume {:verifier.code 0} true;
    $p13 := fs_printer_function;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i14 := $load.bytes.bv8($M.0, $add.ref($add.ref(device_desc, $mul.ref(0bv64, 18bv64)), $mul.ref(17bv64, 1bv64)));
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i15 := $zext.bv8.bv32($i14);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i16 := $ule.bv32($i15, $i3);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i18 := $eq.bv32($i4, 0bv32);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1bv1);
    assume {:verifier.code 0} true;
    $p20 := $p13;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $i21 := usb_gadget_config_buf(config_desc, $p1, 256bv32, $p20);
    call {:si_unique_call 493} {:cexpr "len"} boogie_si_record_bv32($i21);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i22 := $slt.bv32($i21, 0bv32);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i22 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p1);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0bv64, 10bv64)), $mul.ref(1bv64, 1bv64));
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p24, $i2);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i17 := $i21;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb14:
    assume $i22 == 1bv1;
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i17 := $i21;
    goto $bb9;

  $bb11:
    assume $i18 == 1bv1;
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p13, $mul.ref(1bv64, 8bv64));
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $p20 := $p19;
    goto $bb13;

  $bb7:
    assume $i16 == 1bv1;
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i17 := $sub.bv32(0bv32, 22bv32);
    goto $bb9;

  $bb4:
    assume $i12 == 1bv1;
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p13 := hs_printer_function;
    goto $bb6;

  $bb1:
    assume $i8 == 1bv1;
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i9 := $eq.bv32($i6, 0bv32);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $i10 := $zext.bv1.bv32($i9);
    call {:si_unique_call 491} {:cexpr "hs"} boogie_si_record_bv32($i10);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const usb_gadget_get_string: ref;

axiom usb_gadget_get_string == $sub.ref(0bv64, 183704bv64);

procedure usb_gadget_get_string($p0: ref, $i1: bv32, $p2: ref) returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_gadget_get_string($p0: ref, $i1: bv32, $p2: ref) returns ($r: bv32)
{
  var $i3: bv1;
  var $p4: ref;
  var $p5: ref;
  var $i6: bv16;
  var $i7: bv8;
  var $p8: ref;
  var $p9: ref;
  var $i10: bv16;
  var $i11: bv32;
  var $i12: bv32;
  var $i13: bv8;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: bv64;
  var $i19: bv1;
  var $p22: ref;
  var $i23: bv8;
  var $i24: bv32;
  var $i25: bv1;
  var $p26: ref;
  var $p28: ref;
  var $i29: bv64;
  var $i30: bv1;
  var $p21: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: bv64;
  var $i35: bv1;
  var $p36: ref;
  var $p31: ref;
  var $p20: ref;
  var $p27: ref;
  var $i37: bv64;
  var $i38: bv1;
  var $p39: ref;
  var $p40: ref;
  var $i41: bv64;
  var $i42: bv1;
  var $p43: ref;
  var $p44: ref;
  var $i45: bv64;
  var $i46: bv1;
  var $i47: bv64;
  var $i48: bv32;
  var $p49: ref;
  var $i50: bv32;
  var $i51: bv64;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: bv32;
  var $i57: bv1;
  var $i58: bv32;
  var $i59: bv8;
  var $i60: bv32;
  var $i61: bv32;
  var $i62: bv8;
  var $p63: ref;
  var $i64: bv8;
  var $i65: bv32;
  var $i15: bv32;
  var cmdloc_dummy_var_9: [ref]bv8;
  var cmdloc_dummy_var_10: [ref]bv8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} {:cexpr "usb_gadget_get_string:arg:id"} boogie_si_record_bv32($i1);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i3 := $eq.bv32($i1, 0bv32);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0bv64, 16bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $p17 := $load.bytes.ref($M.0, $p16);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.bv64($p17);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i19 := $ne.bv64($i18, 0bv64);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $p20 := $p17;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i19 == 1bv1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p27 := $p20;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.bv64($p27);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i38 := $eq.bv64($i37, 0bv64);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i38 == 1bv1);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p27, $mul.ref(0bv64, 16bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p40 := $load.bytes.ref($M.0, $p39);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.bv64($p40);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i42 := $eq.bv64($i41, 0bv64);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i42 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p27, $mul.ref(0bv64, 16bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $p44 := $load.bytes.ref($M.0, $p43);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} $i45 := strlen($p44);
    call {:si_unique_call 496} {:cexpr "tmp"} boogie_si_record_bv64($i45);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i46 := $ult.bv64(126bv64, $i45);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i46 == 1bv1);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i47 := $i45;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i48 := $trunc.bv64.bv32($i47);
    call {:si_unique_call 497} {:cexpr "len"} boogie_si_record_bv32($i48);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p2, $mul.ref(2bv64, 1bv64));
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i50 := $mul.bv32($i48, 2bv32);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i51 := $sext.bv32.bv64($i50);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 498} cmdloc_dummy_var_10 := $memset.bv8(cmdloc_dummy_var_9, $p49, 0bv8, $i51, $zext.bv32.bv64(1bv32), 0bv1 == 1bv1);
    $M.0 := cmdloc_dummy_var_10;
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p27, $mul.ref(0bv64, 16bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p53 := $load.bytes.ref($M.0, $p52);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p2);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p54, $mul.ref(2bv64, 2bv64));
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $i56 := utf8_to_utf16le($p53, $p55, $i48);
    call {:si_unique_call 500} {:cexpr "len"} boogie_si_record_bv32($i56);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i57 := $slt.bv32($i56, 0bv32);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i57 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i58 := $add.bv32($i56, 1bv32);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $i59 := $trunc.bv32.bv8($i58);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i60 := $zext.bv8.bv32($i59);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i61 := $mul.bv32($i60, 2bv32);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i62 := $trunc.bv32.bv8($i61);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p2, $i62);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p2, $mul.ref(1bv64, 1bv64));
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p63, 3bv8);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i64 := $load.bytes.bv8($M.0, $p2);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i65 := $zext.bv8.bv32($i64);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i15 := $i65;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb28:
    assume $i57 == 1bv1;
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i15 := $sub.bv32(0bv32, 22bv32);
    goto $bb3;

  $bb25:
    assume $i46 == 1bv1;
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i47 := 126bv64;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i42 == 1bv1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i15 := $sub.bv32(0bv32, 22bv32);
    goto $bb3;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i38 == 1bv1;
    goto $bb20;

  $bb5:
    assume $i19 == 1bv1;
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $p21 := $p17;
    goto $bb8;

  $bb8:
    call $p22, $i23, $i24, $i25, $p26, $p28, $i29, $i30, $p21, $p32, $p33, $i34, $i35, $p36, $p31 := usb_gadget_get_string_loop_$bb8($i1, $p22, $i23, $i24, $i25, $p26, $p28, $i29, $i30, $p21, $p32, $p33, $i34, $i35, $p36, $p31);
    goto $bb8_last;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p21, $mul.ref(0bv64, 16bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $p33 := $load.bytes.ref($M.0, $p32);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.bv64($p33);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i35 := $ne.bv64($i34, 0bv64);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $p36 := $p21;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i35 == 1bv1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $p20 := $p36;
    goto $bb7;

  $bb16:
    assume $i35 == 1bv1;
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0bv64, 16bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i23 := $load.bytes.bv8($M.0, $p22);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i24 := $zext.bv8.bv32($i23);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i25 := $eq.bv32($i24, $i1);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p26 := $p21;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p21, $mul.ref(1bv64, 16bv64));
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.bv64($p28);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i30 := $ne.bv64($i29, 0bv64);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $p31 := $p28;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1bv1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $p20 := $p31;
    goto $bb7;

  $bb14:
    assume $i30 == 1bv1;
    assume {:verifier.code 0} true;
    $p21 := $p28;
    goto $bb14_dummy;

  $bb10:
    assume $i25 == 1bv1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p27 := $p26;
    goto $bb12;

  $bb1:
    assume $i3 == 1bv1;
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p2, 4bv8);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p2, $mul.ref(1bv64, 1bv64));
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p4, 3bv8);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0bv64, 16bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i6 := $load.bytes.bv16($M.0, $p5);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i7 := $trunc.bv16.bv8($i6);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p2, $mul.ref(2bv64, 1bv64));
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p8, $i7);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0bv64, 16bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i10 := $load.bytes.bv16($M.0, $p9);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i11 := $zext.bv16.bv32($i10);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i12 := $ashr.bv32($i11, 8bv32);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i13 := $trunc.bv32.bv8($i12);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p2, $mul.ref(3bv64, 1bv64));
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p14, $i13);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i15 := 4bv32;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1993;
}



const printer_set_config: ref;

axiom printer_set_config == $sub.ref(0bv64, 184736bv64);

procedure printer_set_config($p0: ref, $i1: bv32) returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation printer_set_config($p0: ref, $i1: bv32) returns ($r: bv32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: bv1;
  var $i5: bv1;
  var $i6: bv1;
  var $i7: bv32;
  var $i8: bv32;
  var $i9: bv1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: bv8;
  var $i17: bv32;
  var $i18: bv1;
  var $i19: bv32;
  var $i21: bv8;
  var $i22: bv32;
  var $i23: bv32;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $i28: bv32;
  var $i29: bv1;
  var $i30: bv1;
  var $i31: bv1;
  var $p32: ref;
  var $i33: bv8;
  var $p34: ref;
  var vslice_dummy_var_61: bv32;
  var vslice_dummy_var_62: bv32;
  var vslice_dummy_var_63: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} {:cexpr "printer_set_config:arg:number"} boogie_si_record_bv32($i1);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(216bv64, 1bv64));
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p3 := $load.bytes.ref($M.0, $p2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $slt.bv32($i1, 1bv32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1bv1);
    assume {:verifier.code 0} true;
    $i5 := $eq.bv32($i1, 1bv32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1bv1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i7 := $sub.bv32(0bv32, 22bv32);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $i9 := $ne.bv32($i8, 0bv32);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i9 == 1bv1);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i21 := $load.bytes.bv8($M.0, $add.ref($add.ref(config_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(8bv64, 1bv64)));
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i22 := $zext.bv8.bv32($i21);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i23 := $mul.bv32($i22, 2bv32);
    call {:si_unique_call 503} {:cexpr "power"} boogie_si_record_bv32($i23);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(216bv64, 1bv64));
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p25 := $load.bytes.ref($M.0, $p24);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} vslice_dummy_var_62 := usb_gadget_vbus_draw($p25, $i23);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0bv64, 1072bv64)), $mul.ref(32bv64, 1bv64));
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i28 := $load.bv32($M.18, $p27);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i29 := $slt.bv32($i28, 3bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i29 == 1bv1);
    assume {:verifier.code 0} true;
    $i30 := $eq.bv32($i28, 3bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i30 == 1bv1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p32 := .str.26;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i33 := $trunc.bv32.bv8($i1);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(232bv64, 1bv64));
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p34, $i33);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} vslice_dummy_var_63 := printk.ref.ref.ref.bv32.bv32.ref(.str.27, .str.1, $p32, $i1, $i23, driver_desc);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb18:
    assume $i30 == 1bv1;
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $p32 := .str.25;
    goto $bb23;

  $bb16:
    assume $i29 == 1bv1;
    assume {:verifier.code 0} true;
    $i31 := $eq.bv32($i28, 2bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i31 == 1bv1);
    goto $bb20;

  $bb21:
    assume $i31 == 1bv1;
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $p32 := .str.24;
    goto $bb23;

  $bb12:
    assume $i9 == 1bv1;
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(216bv64, 1bv64));
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p11 := $load.bytes.ref($M.0, $p10);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(216bv64, 1bv64));
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $p13 := $load.bytes.ref($M.0, $p12);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(36bv64, 1bv64));
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i16 := $load.bytes.bv8($M.17, $p15);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i17 := $zext.bv8.bv32($i16);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i18 := $ne.bv32($i17, 0bv32);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i19 := (if $i18 == 1bv1 then 8bv32 else 100bv32);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} vslice_dummy_var_61 := usb_gadget_vbus_draw($p11, $i19);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb4:
    assume $i5 == 1bv1;
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i8 := 0bv32;
    goto $bb10;

  $bb2:
    assume $i4 == 1bv1;
    assume {:verifier.code 0} true;
    $i6 := $eq.bv32($i1, 0bv32);
    assume {:verifier.code 0} true;
    $i7 := 0bv32;
    assume {:branchcond $i6} true;
    goto $bb7, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i6 == 1bv1);
    goto $bb6;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i6 == 1bv1;
    goto $bb8;
}



const set_interface: ref;

axiom set_interface == $sub.ref(0bv64, 185768bv64);

procedure set_interface($p0: ref, $i1: bv32) returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.25, $CurrAddr, $M.26, $M.27, $M.2, $M.3, $M.4, $M.5, $M.6;



implementation set_interface($p0: ref, $i1: bv32) returns ($r: bv32)
{
  var $p2: ref;
  var $i3: bv8;
  var $i4: bv32;
  var $i5: bv1;
  var $i6: bv1;
  var $i7: bv32;
  var $i8: bv1;
  var $p9: ref;
  var $i10: bv32;
  var $i11: bv1;
  var vslice_dummy_var_64: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} {:cexpr "set_interface:arg:number"} boogie_si_record_bv32($i1);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(233bv64, 1bv64));
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $i3 := $load.bytes.bv8($M.0, $p2);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i4 := $sext.bv8.bv32($i3);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $eq.bv32($i4, 0bv32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i6 := $eq.bv32($i1, 0bv32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i6 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i10 := $sub.bv32(0bv32, 22bv32);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i11 := $eq.bv32($i10, 0bv32);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i11 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb15:
    assume $i11 == 1bv1;
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} vslice_dummy_var_64 := printk.ref.ref.bv32(.str.28, .str.1, $i1);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb7:
    assume $i6 == 1bv1;
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $i7 := set_printer_interface($p0);
    call {:si_unique_call 509} {:cexpr "result"} boogie_si_record_bv32($i7);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i8 := $ne.bv32($i7, 0bv32);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i8 == 1bv1);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(233bv64, 1bv64));
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p9, 0bv8);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i10 := $i7;
    goto $bb12;

  $bb9:
    assume $i8 == 1bv1;
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} printer_reset_interface($p0);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb2:
    assume $i5 == 1bv1;
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} printer_reset_interface($p0);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    goto $bb4;
}



const printer_soft_reset: ref;

axiom printer_soft_reset == $sub.ref(0bv64, 186800bv64);

procedure printer_soft_reset($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.25, $CurrAddr, $M.26, $M.27, $M.2, $M.3, $M.4, $M.5, $M.6;



implementation printer_soft_reset($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: bv32;
  var $i5: bv1;
  var $p7: ref;
  var $p8: ref;
  var $i9: bv32;
  var $i10: bv1;
  var $p12: ref;
  var $p13: ref;
  var $i14: bv64;
  var $i15: bv1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: bv32;
  var $i26: bv1;
  var $i27: bv32;
  var $i28: bv64;
  var $i29: bv64;
  var $i30: bv1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: bv32;
  var $i40: bv1;
  var $i41: bv32;
  var $i42: bv64;
  var $i43: bv64;
  var $i44: bv1;
  var $p45: ref;
  var $i46: bv32;
  var $i47: bv1;
  var $i48: bv32;
  var $i49: bv64;
  var $i50: bv64;
  var $i51: bv1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: bv32;
  var $i61: bv1;
  var $i62: bv32;
  var $i63: bv64;
  var $i64: bv64;
  var $i65: bv1;
  var $p66: ref;
  var $i67: bv32;
  var $i68: bv1;
  var $i69: bv32;
  var $i70: bv64;
  var $i71: bv64;
  var $i72: bv1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: bv32;
  var $i82: bv1;
  var $i83: bv32;
  var $i84: bv64;
  var $i85: bv64;
  var $i86: bv1;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: bv32;
  var $i92: bv1;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: bv32;
  var $i99: bv1;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var vslice_dummy_var_65: bv32;
  var vslice_dummy_var_66: bv32;
  var vslice_dummy_var_67: bv32;
  var vslice_dummy_var_68: bv32;
  var vslice_dummy_var_69: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} vslice_dummy_var_65 := printk.ref.ref(.str.30, .str.1);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(240bv64, 1bv64));
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $p3 := $load.bytes.ref($M.0, $p2);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} $i4 := usb_ep_disable($p3);
    call {:si_unique_call 514} {:cexpr "tmp"} boogie_si_record_bv32($i4);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i5 := $ne.bv32($i4, 0bv32);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(248bv64, 1bv64));
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p8 := $load.bytes.ref($M.0, $p7);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $i9 := usb_ep_disable($p8);
    call {:si_unique_call 517} {:cexpr "tmp___0"} boogie_si_record_bv32($i9);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i10 := $ne.bv32($i9, 0bv32);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(592bv64, 1bv64));
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $p13 := $load.bytes.ref($M.0, $p12);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.bv64($p13);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i15 := $ne.bv64($i14, 0bv64);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(600bv64, 1bv64));
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv64($M.0, $p21, 0bv64);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(608bv64, 1bv64));
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p22, $0.ref);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(617bv64, 1bv64));
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p23, 1bv8);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(304bv64, 1bv64));
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $i25 := list_empty($p24);
    call {:si_unique_call 521} {:cexpr "tmp___1"} boogie_si_record_bv32($i25);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i26 := $eq.bv32($i25, 0bv32);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i27 := $zext.bv1.bv32($i26);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i28 := $sext.bv32.bv64($i27);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $i29 := ldv__builtin_expect($i28, 1bv64);
    call {:si_unique_call 523} {:cexpr "tmp___2"} boogie_si_record_bv64($i29);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i30 := $ne.bv64($i29, 0bv64);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i30 == 1bv1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(288bv64, 1bv64));
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} $i46 := list_empty($p45);
    call {:si_unique_call 531} {:cexpr "tmp___3"} boogie_si_record_bv32($i46);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i47 := $eq.bv32($i46, 0bv32);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i48 := $zext.bv1.bv32($i47);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i49 := $sext.bv32.bv64($i48);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $i50 := ldv__builtin_expect($i49, 1bv64);
    call {:si_unique_call 533} {:cexpr "tmp___4"} boogie_si_record_bv64($i50);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i51 := $ne.bv64($i50, 0bv64);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i51 == 1bv1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(416bv64, 1bv64));
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $i67 := list_empty($p66);
    call {:si_unique_call 541} {:cexpr "tmp___5"} boogie_si_record_bv32($i67);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i68 := $eq.bv32($i67, 0bv32);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i69 := $zext.bv1.bv32($i68);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i70 := $sext.bv32.bv64($i69);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $i71 := ldv__builtin_expect($i70, 1bv64);
    call {:si_unique_call 543} {:cexpr "tmp___6"} boogie_si_record_bv64($i71);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i72 := $ne.bv64($i71, 0bv64);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i72 == 1bv1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(240bv64, 1bv64));
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $p88 := $load.bytes.ref($M.0, $p87);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(256bv64, 1bv64));
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $p90 := $load.bytes.ref($M.0, $p89);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $i91 := usb_ep_enable($p88, $p90);
    call {:si_unique_call 551} {:cexpr "tmp___7"} boogie_si_record_bv32($i91);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i92 := $ne.bv32($i91, 0bv32);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i92 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(248bv64, 1bv64));
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p95 := $load.bytes.ref($M.0, $p94);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(264bv64, 1bv64));
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p97 := $load.bytes.ref($M.0, $p96);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} $i98 := usb_ep_enable($p95, $p97);
    call {:si_unique_call 554} {:cexpr "tmp___8"} boogie_si_record_bv32($i98);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $i99 := $ne.bv32($i98, 0bv32);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i99 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(320bv64, 1bv64));
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} __wake_up($p101, 1bv32, 1bv32, $0.ref);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(432bv64, 1bv64));
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} __wake_up($p102, 1bv32, 1bv32, $0.ref);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(512bv64, 1bv64));
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} __wake_up($p103, 1bv32, 1bv32, $0.ref);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    return;

  $bb37:
    assume $i99 == 1bv1;
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} vslice_dummy_var_69 := printk.ref.ref(.str.34, .str.1);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i92 == 1bv1;
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} vslice_dummy_var_68 := printk.ref.ref(.str.33, .str.1);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb26:
    assume $i72 == 1bv1;
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    call $p74, $p75, $p76, $p78, $p79, $p80, $i81, $i82, $i83, $i84, $i85, $i86 := printer_soft_reset_loop_$bb29($p0, $p66, $p74, $p75, $p76, $p78, $p79, $p80, $i81, $i82, $i83, $i84, $i85, $i86);
    goto $bb29_last;

  $bb30:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(416bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $p75 := $load.bytes.ref($M.0, $p74);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p76, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} list_del_init($p78);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p76, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(400bv64, 1bv64));
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} list_add($p79, $p80);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $i81 := list_empty($p66);
    call {:si_unique_call 547} {:cexpr "tmp___5"} boogie_si_record_bv32($i81);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i82 := $eq.bv32($i81, 0bv32);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $i83 := $zext.bv1.bv32($i82);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i84 := $sext.bv32.bv64($i83);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} $i85 := ldv__builtin_expect($i84, 1bv64);
    call {:si_unique_call 549} {:cexpr "tmp___6"} boogie_si_record_bv64($i85);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i86 := $ne.bv64($i85, 0bv64);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i86 == 1bv1);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i86 == 1bv1;
    goto $bb31_dummy;

  $bb18:
    assume $i51 == 1bv1;
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    call $p53, $p54, $p55, $p57, $p58, $p59, $i60, $i61, $i62, $i63, $i64, $i65 := printer_soft_reset_loop_$bb21($p0, $p45, $p53, $p54, $p55, $p57, $p58, $p59, $i60, $i61, $i62, $i63, $i64, $i65);
    goto $bb21_last;

  $bb22:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(304bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p54 := $load.bytes.ref($M.0, $p53);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p55, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} list_del_init($p57);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p55, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(272bv64, 1bv64));
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} list_add($p58, $p59);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $i60 := list_empty($p45);
    call {:si_unique_call 537} {:cexpr "tmp___3"} boogie_si_record_bv32($i60);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i61 := $eq.bv32($i60, 0bv32);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i62 := $zext.bv1.bv32($i61);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i63 := $sext.bv32.bv64($i62);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} $i64 := ldv__builtin_expect($i63, 1bv64);
    call {:si_unique_call 539} {:cexpr "tmp___4"} boogie_si_record_bv64($i64);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i65 := $ne.bv64($i64, 0bv64);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i65 == 1bv1);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i65 == 1bv1;
    goto $bb23_dummy;

  $bb10:
    assume $i30 == 1bv1;
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    call $p32, $p33, $p34, $p36, $p37, $p38, $i39, $i40, $i41, $i42, $i43, $i44 := printer_soft_reset_loop_$bb13($p0, $p24, $p32, $p33, $p34, $p36, $p37, $p38, $i39, $i40, $i41, $i42, $i43, $i44);
    goto $bb13_last;

  $bb14:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(304bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p33 := $load.bytes.ref($M.0, $p32);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p34, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} list_del_init($p36);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p34, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(272bv64, 1bv64));
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} list_add($p37, $p38);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} $i39 := list_empty($p24);
    call {:si_unique_call 527} {:cexpr "tmp___1"} boogie_si_record_bv32($i39);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i40 := $eq.bv32($i39, 0bv32);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i41 := $zext.bv1.bv32($i40);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i42 := $sext.bv32.bv64($i41);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $i43 := ldv__builtin_expect($i42, 1bv64);
    call {:si_unique_call 529} {:cexpr "tmp___2"} boogie_si_record_bv64($i43);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i44 := $ne.bv64($i43, 0bv64);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i44 == 1bv1);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i44 == 1bv1;
    goto $bb15_dummy;

  $bb7:
    assume $i15 == 1bv1;
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(592bv64, 1bv64));
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $p17 := $load.bytes.ref($M.0, $p16);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0bv64, 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(272bv64, 1bv64));
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} list_add($p18, $p19);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(592bv64, 1bv64));
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p20, $0.ref);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i10 == 1bv1;
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} vslice_dummy_var_67 := printk.ref.ref(.str.32, .str.1);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1bv1;
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} vslice_dummy_var_66 := printk.ref.ref(.str.31, .str.1);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb31_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb23_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb15_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto $bb14;
}



const usb_ep_enable: ref;

axiom usb_ep_enable == $sub.ref(0bv64, 187832bv64);

procedure usb_ep_enable($p0: ref, $p1: ref) returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.24, $M.25, $CurrAddr, $M.26, $M.27;



implementation usb_ep_enable($p0: ref, $p1: ref) returns ($r: bv32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0bv64, 48bv64)), $mul.ref(16bv64, 1bv64));
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p3 := $load.bytes.ref($M.0, $p2);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0bv64, 80bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.19, $p4);
    call {:si_unique_call 559} $i6 := devirtbounce.5($p5, $p0, $p1);
    call {:si_unique_call 560} {:cexpr "tmp"} boogie_si_record_bv32($i6);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const set_printer_interface: ref;

axiom set_printer_interface == $sub.ref(0bv64, 188864bv64);

procedure set_printer_interface($p0: ref) returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.25, $CurrAddr, $M.26, $M.27, $M.2, $M.3, $M.4, $M.5, $M.6;



implementation set_printer_interface($p0: ref) returns ($r: bv32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: bv32;
  var $i5: bv1;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: bv32;
  var $i16: bv1;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: bv32;
  var $i28: bv1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: bv32;
  var $i40: bv1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i34: bv32;
  var $i46: bv1;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $p53: ref;
  var $p54: ref;
  var vslice_dummy_var_70: bv32;
  var vslice_dummy_var_71: bv32;
  var vslice_dummy_var_72: bv32;
  var vslice_dummy_var_73: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(216bv64, 1bv64));
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $p2 := $load.bytes.ref($M.0, $p1);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0bv64, 1072bv64)), $mul.ref(32bv64, 1bv64));
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i4 := $load.bv32($M.20, $p3);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i5 := $eq.bv32($i4, 3bv32);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p6 := (if $i5 == 1bv1 then hs_ep_in_desc else fs_ep_in_desc);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(256bv64, 1bv64));
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p7, $p6);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(240bv64, 1bv64));
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $p10 := $load.bytes.ref($M.0, $p9);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0bv64, 48bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p11, $p0);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(216bv64, 1bv64));
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p13 := $load.bytes.ref($M.0, $p12);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0bv64, 1072bv64)), $mul.ref(32bv64, 1bv64));
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i15 := $load.bv32($M.20, $p14);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i16 := $eq.bv32($i15, 3bv32);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $p17 := (if $i16 == 1bv1 then hs_ep_out_desc else fs_ep_out_desc);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(264bv64, 1bv64));
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p18, $p17);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(248bv64, 1bv64));
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $p21 := $load.bytes.ref($M.0, $p20);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0bv64, 48bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p22, $p0);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(240bv64, 1bv64));
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p24 := $load.bytes.ref($M.0, $p23);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(256bv64, 1bv64));
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $p26 := $load.bytes.ref($M.0, $p25);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} $i27 := usb_ep_enable($p24, $p26);
    call {:si_unique_call 562} {:cexpr "result"} boogie_si_record_bv32($i27);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i28 := $ne.bv32($i27, 0bv32);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i28 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(248bv64, 1bv64));
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $p36 := $load.bytes.ref($M.0, $p35);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(264bv64, 1bv64));
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $p38 := $load.bytes.ref($M.0, $p37);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} $i39 := usb_ep_enable($p36, $p38);
    call {:si_unique_call 565} {:cexpr "result"} boogie_si_record_bv32($i39);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $i40 := $ne.bv32($i39, 0bv32);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i40 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i34 := $i39;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i46 := $ne.bv32($i34, 0bv32);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i46 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb8:
    assume $i46 == 1bv1;
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(240bv64, 1bv64));
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $p48 := $load.bytes.ref($M.0, $p47);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} vslice_dummy_var_72 := usb_ep_disable($p48);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(248bv64, 1bv64));
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $p51 := $load.bytes.ref($M.0, $p50);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} vslice_dummy_var_73 := usb_ep_disable($p51);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(256bv64, 1bv64));
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p53, $0.ref);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(264bv64, 1bv64));
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p54, $0.ref);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i40 == 1bv1;
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(240bv64, 1bv64));
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $p42 := $load.bytes.ref($M.0, $p41);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0bv64, 48bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p44 := $load.bytes.ref($M.0, $p43);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} vslice_dummy_var_71 := printk.ref.ref.ref.bv32(.str.29, .str.1, $p44, $i39);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i34 := $i39;
    goto $bb3;

  $bb1:
    assume $i28 == 1bv1;
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0bv64, 824bv64)), $mul.ref(240bv64, 1bv64));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p30 := $load.bytes.ref($M.0, $p29);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0bv64, 48bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $p32 := $load.bytes.ref($M.0, $p31);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} vslice_dummy_var_70 := printk.ref.ref.ref.bv32(.str.29, .str.1, $p32, $i27);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i34 := $i27;
    goto $bb3;
}



const usb_gadget_vbus_draw: ref;

axiom usb_gadget_vbus_draw == $sub.ref(0bv64, 189896bv64);

procedure usb_gadget_vbus_draw($p0: ref, $i1: bv32) returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation usb_gadget_vbus_draw($p0: ref, $i1: bv32) returns ($r: bv32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: bv64;
  var $i7: bv1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: bv32;
  var $i8: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} {:cexpr "usb_gadget_vbus_draw:arg:mA"} boogie_si_record_bv32($i1);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0bv64, 1072bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.21, $p2);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0bv64, 56bv64)), $mul.ref(32bv64, 1bv64));
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.22, $p4);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.bv64($p5);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i7 := $eq.bv64($i6, 0bv64);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0bv64, 1072bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.21, $p9);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0bv64, 56bv64)), $mul.ref(32bv64, 1bv64));
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.22, $p11);
    call {:si_unique_call 570} $i13 := devirtbounce.6($p12, $p0, $i1);
    call {:si_unique_call 571} {:cexpr "tmp"} boogie_si_record_bv32($i13);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i8 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1bv1;
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i8 := $sub.bv32(0bv32, 95bv32);
    goto $bb3;
}



const strlen: ref;

axiom strlen == $sub.ref(0bv64, 190928bv64);

procedure strlen($p0: ref) returns ($r: bv64);



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0bv64, 191960bv64);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: bv8, $i2: bv64, $i3: bv32, $i4: bv1);



const utf8_to_utf16le: ref;

axiom utf8_to_utf16le == $sub.ref(0bv64, 192992bv64);

procedure utf8_to_utf16le($p0: ref, $p1: ref, $i2: bv32) returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.0;



implementation utf8_to_utf16le($p0: ref, $p1: ref, $i2: bv32) returns ($r: bv32)
{
  var $i3: bv1;
  var $i9: bv32;
  var $i11: bv1;
  var $i12: bv32;
  var $i13: bv64;
  var $i14: bv64;
  var $i15: bv1;
  var $i16: bv32;
  var $i17: bv32;
  var $i18: bv1;
  var $i19: bv16;
  var $i20: bv32;
  var $i21: bv32;
  var $i22: bv32;
  var $i23: bv16;
  var $i24: bv64;
  var $p25: ref;
  var $i26: bv8;
  var $i28: bv32;
  var $i29: bv32;
  var $i30: bv1;
  var $i31: bv32;
  var $i32: bv32;
  var $i33: bv8;
  var $i34: bv16;
  var $i35: bv32;
  var $i36: bv32;
  var $i37: bv32;
  var $i38: bv16;
  var $i41: bv32;
  var $i42: bv32;
  var $i43: bv1;
  var $i44: bv32;
  var $i45: bv32;
  var $i46: bv16;
  var $i47: bv64;
  var $p48: ref;
  var $i49: bv8;
  var $i50: bv32;
  var $i51: bv32;
  var $i52: bv1;
  var $i53: bv32;
  var $i54: bv32;
  var $i55: bv8;
  var $i56: bv32;
  var $i57: bv32;
  var $i58: bv16;
  var $i59: bv32;
  var $i60: bv32;
  var $i61: bv32;
  var $i62: bv16;
  var $i63: bv64;
  var $p64: ref;
  var $i65: bv8;
  var $i66: bv32;
  var $i67: bv32;
  var $i68: bv1;
  var $i69: bv32;
  var $i70: bv32;
  var $i71: bv8;
  var $i72: bv16;
  var $i73: bv32;
  var $i74: bv32;
  var $i75: bv32;
  var $i76: bv16;
  var $i77: bv32;
  var $i78: bv1;
  var $i79: bv32;
  var $i80: bv1;
  var $i39: bv16;
  var $p40: ref;
  var $i83: bv16;
  var $i81: bv16;
  var $p82: ref;
  var $p84: ref;
  var $i85: bv32;
  var $i86: bv16;
  var $p87: ref;
  var $i88: bv32;
  var $i89: bv32;
  var $i90: bv1;
  var $p5: ref;
  var $p6: ref;
  var $i7: bv32;
  var $i8: bv32;
  var $p27: ref;
  var $i10: bv8;
  var $i92: bv32;
  var $i93: bv1;
  var $i94: bv32;
  var $i91: bv32;
  var $i4: bv32;
  var $i95: bv32;
  var $i96: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} {:cexpr "utf8_to_utf16le:arg:len"} boogie_si_record_bv32($i2);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i3 := $ne.bv32($i2, 0bv32);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i4 := 0bv32;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1bv1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i95 := $i4;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $i96 := $i95;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $r := $i96;
    return;

  $bb1:
    assume $i3 == 1bv1;
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $p5, $p6, $i7, $i8 := $p0, $p1, $i2, 0bv32;
    goto $bb4;

  $bb4:
    call $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $p25, $i26, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $p48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $p64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i39, $p40, $i83, $i81, $p82, $p84, $i85, $i86, $p87, $i88, $i89, $i90, $p5, $p6, $i7, $i8, $p27, $i10, $i92, $i93, $i94, $i91 := utf8_to_utf16le_loop_$bb4($i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $p25, $i26, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $p48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $p64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i39, $p40, $i83, $i81, $p82, $p84, $i85, $i86, $p87, $i88, $i89, $i90, $p5, $p6, $i7, $i8, $p27, $i10, $i92, $i93, $i94, $i91);
    goto $bb4_last;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p5, $mul.ref(1bv64, 1bv64));
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $i10 := $load.bytes.bv8($M.0, $p5);
    call {:si_unique_call 573} {:cexpr "c"} boogie_si_record_bv8($i10);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $i92 := $zext.bv8.bv32($i10);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i93 := $ne.bv32($i92, 0bv32);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i94 := $i8;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i93 == 1bv1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i95 := $i94;
    goto $bb35;

  $bb33:
    assume $i93 == 1bv1;
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i9 := $sext.bv8.bv32($i10);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i11 := $slt.bv32($i9, 0bv32);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i12 := $zext.bv1.bv32($i11);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i13 := $sext.bv32.bv64($i12);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $i14 := ldv__builtin_expect($i13, 0bv64);
    call {:si_unique_call 575} {:cexpr "tmp___2"} boogie_si_record_bv64($i14);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i15 := $ne.bv64($i14, 0bv64);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1bv1);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i83 := $zext.bv8.bv16($i10);
    call {:si_unique_call 576} {:cexpr "uchar"} boogie_si_record_bv16($i83);
    assume {:verifier.code 0} true;
    $i81, $p82 := $i83, $p27;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p6, $mul.ref(1bv64, 2bv64));
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i85 := $zext.bv16.bv32($i81);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $i86 := $trunc.bv32.bv16($i85);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p6);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} put_unaligned_le16($i86, $p87);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i88 := $add.bv32($i8, 1bv32);
    call {:si_unique_call 589} {:cexpr "count"} boogie_si_record_bv32($i88);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i89 := $sub.bv32($i7, 1bv32);
    call {:si_unique_call 590} {:cexpr "len"} boogie_si_record_bv32($i89);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i90 := $ne.bv32($i89, 0bv32);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i91 := $i88;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i90 == 1bv1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i4 := $i91;
    goto $bb3;

  $bb31:
    assume $i90 == 1bv1;
    assume {:verifier.code 0} true;
    $p5, $p6, $i7, $i8 := $p82, $p84, $i89, $i88;
    goto $bb31_dummy;

  $bb6:
    assume $i15 == 1bv1;
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i16 := $zext.bv8.bv32($i10);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i17 := $and.bv32($i16, 224bv32);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $i18 := $eq.bv32($i17, 192bv32);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1bv1);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i41 := $zext.bv8.bv32($i10);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $i42 := $and.bv32($i41, 240bv32);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i43 := $eq.bv32($i42, 224bv32);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i43 == 1bv1);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i96 := $sub.bv32(0bv32, 1bv32);
    goto $bb37;

  $bb15:
    assume $i43 == 1bv1;
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i44 := $zext.bv8.bv32($i10);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $i45 := $shl.bv32($i44, 12bv32);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i46 := $trunc.bv32.bv16($i45);
    call {:si_unique_call 581} {:cexpr "uchar"} boogie_si_record_bv16($i46);
    $i47 := $add.bv64(1bv64, 1bv64);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p5, $mul.ref($i47, 1bv64));
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i49 := $load.bytes.bv8($M.0, $p27);
    call {:si_unique_call 582} {:cexpr "c"} boogie_si_record_bv8($i49);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i50 := $zext.bv8.bv32($i49);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i51 := $and.bv32($i50, 192bv32);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i52 := $ne.bv32($i51, 128bv32);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i52 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i53 := $zext.bv8.bv32($i49);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i54 := $and.bv32($i53, 63bv32);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i55 := $trunc.bv32.bv8($i54);
    call {:si_unique_call 583} {:cexpr "c"} boogie_si_record_bv8($i55);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i56 := $zext.bv8.bv32($i55);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i57 := $shl.bv32($i56, 6bv32);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $i58 := $trunc.bv32.bv16($i57);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $i59 := $sext.bv16.bv32($i58);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i60 := $sext.bv16.bv32($i46);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i61 := $or.bv32($i59, $i60);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i62 := $trunc.bv32.bv16($i61);
    call {:si_unique_call 584} {:cexpr "uchar"} boogie_si_record_bv16($i62);
    $i63 := $add.bv64($i47, 1bv64);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p5, $mul.ref($i63, 1bv64));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i65 := $load.bytes.bv8($M.0, $p48);
    call {:si_unique_call 585} {:cexpr "c"} boogie_si_record_bv8($i65);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i66 := $zext.bv8.bv32($i65);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i67 := $and.bv32($i66, 192bv32);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i68 := $ne.bv32($i67, 128bv32);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i68 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i69 := $zext.bv8.bv32($i65);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i70 := $and.bv32($i69, 63bv32);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i71 := $trunc.bv32.bv8($i70);
    call {:si_unique_call 586} {:cexpr "c"} boogie_si_record_bv8($i71);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i72 := $zext.bv8.bv16($i71);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $i73 := $zext.bv16.bv32($i72);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i74 := $zext.bv16.bv32($i62);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i75 := $or.bv32($i73, $i74);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i76 := $trunc.bv32.bv16($i75);
    call {:si_unique_call 587} {:cexpr "uchar"} boogie_si_record_bv16($i76);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i77 := $zext.bv16.bv32($i76);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $i78 := $ugt.bv32($i77, 55295bv32);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i78 == 1bv1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i39, $p40 := $i76, $p64;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $i81, $p82 := $i39, $p40;
    goto $bb30;

  $bb23:
    assume $i78 == 1bv1;
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i79 := $zext.bv16.bv32($i76);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i80 := $ule.bv32($i79, 57343bv32);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i80 == 1bv1);
    goto $bb25;

  $bb26:
    assume $i80 == 1bv1;
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb20:
    assume $i68 == 1bv1;
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb17:
    assume $i52 == 1bv1;
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb8:
    assume $i18 == 1bv1;
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i19 := $zext.bv8.bv16($i10);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i20 := $zext.bv16.bv32($i19);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i21 := $and.bv32($i20, 31bv32);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i22 := $shl.bv32($i21, 6bv32);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i23 := $trunc.bv32.bv16($i22);
    call {:si_unique_call 577} {:cexpr "uchar"} boogie_si_record_bv16($i23);
    $i24 := $add.bv64(1bv64, 1bv64);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p5, $mul.ref($i24, 1bv64));
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $i26 := $load.bytes.bv8($M.0, $p27);
    call {:si_unique_call 578} {:cexpr "c"} boogie_si_record_bv8($i26);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i28 := $zext.bv8.bv32($i26);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i29 := $and.bv32($i28, 192bv32);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i30 := $ne.bv32($i29, 128bv32);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i30 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i31 := $zext.bv8.bv32($i26);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i32 := $and.bv32($i31, 63bv32);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i33 := $trunc.bv32.bv8($i32);
    call {:si_unique_call 579} {:cexpr "c"} boogie_si_record_bv8($i33);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i34 := $zext.bv8.bv16($i33);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i35 := $zext.bv16.bv32($i34);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i36 := $zext.bv16.bv32($i23);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i37 := $or.bv32($i35, $i36);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i38 := $trunc.bv32.bv16($i37);
    call {:si_unique_call 580} {:cexpr "uchar"} boogie_si_record_bv16($i38);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i39, $p40 := $i38, $p25;
    goto $bb14;

  $bb10:
    assume $i30 == 1bv1;
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb31_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2372;
}



const put_unaligned_le16: ref;

axiom put_unaligned_le16 == $sub.ref(0bv64, 194024bv64);

procedure put_unaligned_le16($i0: bv16, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation put_unaligned_le16($i0: bv16, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} {:cexpr "put_unaligned_le16:arg:val"} boogie_si_record_bv16($i0);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv16($M.0, $p2, $i0);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    return;
}



const usb_gadget_config_buf: ref;

axiom usb_gadget_config_buf == $sub.ref(0bv64, 195056bv64);

procedure usb_gadget_config_buf($p0: ref, $p1: ref, $i2: bv32, $p3: ref) returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_gadget_config_buf($p0: ref, $p1: ref, $i2: bv32, $p3: ref) returns ($r: bv32)
{
  var $p4: ref;
  var $i5: bv1;
  var $i6: bv64;
  var $i7: bv1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: bv32;
  var $i13: bv32;
  var $i14: bv1;
  var $i15: bv32;
  var $i16: bv1;
  var $p17: ref;
  var $p18: ref;
  var $i19: bv16;
  var $p20: ref;
  var $p21: ref;
  var $i22: bv8;
  var $i23: bv32;
  var $i24: bv32;
  var $i25: bv8;
  var $p26: ref;
  var $i8: bv32;
  var cmdloc_dummy_var_11: [ref]bv8;
  var cmdloc_dummy_var_12: [ref]bv8;
  var cmdloc_dummy_var_13: [ref]bv8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} {:cexpr "usb_gadget_config_buf:arg:length"} boogie_si_record_bv32($i2);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i5 := $ule.bv32($i2, 8bv32);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1bv1);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.bv64($p3);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $i7 := $eq.bv64($i6, 0bv64);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p4);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p0);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.0;
    cmdloc_dummy_var_12 := $M.0;
    call {:si_unique_call 593} cmdloc_dummy_var_13 := $memcpy.bv8(cmdloc_dummy_var_11, cmdloc_dummy_var_12, $p9, $p10, 10bv64, $zext.bv32.bv64(2bv32), 0bv1 == 1bv1);
    $M.0 := cmdloc_dummy_var_13;
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p1, $mul.ref(9bv64, 1bv64));
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i12 := $sub.bv32($i2, 9bv32);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} $i13 := usb_descriptor_fillbuf($p11, $i12, $p3);
    call {:si_unique_call 595} {:cexpr "len"} boogie_si_record_bv32($i13);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i14 := $slt.bv32($i13, 0bv32);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i15 := $add.bv32($i13, 9bv32);
    call {:si_unique_call 596} {:cexpr "len"} boogie_si_record_bv32($i15);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i16 := $sgt.bv32($i15, 65535bv32);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i16 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0bv64, 10bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p17, 9bv8);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0bv64, 10bv64)), $mul.ref(1bv64, 1bv64));
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p18, 2bv8);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i19 := $trunc.bv32.bv16($i15);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0bv64, 10bv64)), $mul.ref(2bv64, 1bv64));
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv16($M.0, $p20, $i19);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0bv64, 10bv64)), $mul.ref(7bv64, 1bv64));
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $i22 := $load.bytes.bv8($M.0, $p21);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i23 := $zext.bv8.bv32($i22);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i24 := $or.bv32($i23, 128bv32);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i25 := $trunc.bv32.bv8($i24);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0bv64, 10bv64)), $mul.ref(7bv64, 1bv64));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p26, $i25);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i8 := $i15;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb11:
    assume $i16 == 1bv1;
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i8 := $sub.bv32(0bv32, 22bv32);
    goto $bb6;

  $bb8:
    assume $i14 == 1bv1;
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $i8 := $i13;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1bv1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i8 := $sub.bv32(0bv32, 22bv32);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1bv1;
    goto $bb2;
}



const usb_descriptor_fillbuf: ref;

axiom usb_descriptor_fillbuf == $sub.ref(0bv64, 196088bv64);

procedure usb_descriptor_fillbuf($p0: ref, $i1: bv32, $p2: ref) returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_descriptor_fillbuf($p0: ref, $i1: bv32, $p2: ref) returns ($r: bv32)
{
  var $i3: bv64;
  var $i4: bv1;
  var $p6: ref;
  var $i7: bv64;
  var $i8: bv1;
  var $p13: ref;
  var $p14: ref;
  var $i15: bv8;
  var $i16: bv32;
  var $i17: bv1;
  var $i18: bv64;
  var $p19: ref;
  var $p20: ref;
  var $i21: bv32;
  var $i22: bv64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: bv64;
  var $i27: bv1;
  var $p10: ref;
  var $i11: bv32;
  var $p12: ref;
  var $p28: ref;
  var $p9: ref;
  var $i29: bv64;
  var $i30: bv32;
  var $i31: bv64;
  var $i32: bv32;
  var $i33: bv32;
  var $i5: bv32;
  var cmdloc_dummy_var_14: [ref]bv8;
  var cmdloc_dummy_var_15: [ref]bv8;
  var cmdloc_dummy_var_16: [ref]bv8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} {:cexpr "usb_descriptor_fillbuf:arg:buflen"} boogie_si_record_bv32($i1);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.bv64($p2);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i4 := $eq.bv64($i3, 0bv64);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $load.bytes.ref($M.23, $p2);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.bv64($p6);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i8 := $ne.bv64($i7, 0bv64);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p9 := $p0;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i8 == 1bv1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.bv64($p9);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i30 := $trunc.bv64.bv32($i29);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.bv64($p0);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i32 := $trunc.bv64.bv32($i31);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i33 := $sub.bv32($i30, $i32);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $i5 := $i33;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i8 == 1bv1;
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p10, $i11, $p12 := $p0, $i1, $p2;
    goto $bb8;

  $bb8:
    call $p13, $p14, $i15, $i16, $i17, $i18, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $i26, $i27, $p10, $i11, $p12, $p28, cmdloc_dummy_var_14, cmdloc_dummy_var_15, cmdloc_dummy_var_16 := usb_descriptor_fillbuf_loop_$bb8($p13, $p14, $i15, $i16, $i17, $i18, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $i26, $i27, $p10, $i11, $p12, $p28, cmdloc_dummy_var_14, cmdloc_dummy_var_15, cmdloc_dummy_var_16);
    goto $bb8_last;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p13 := $load.bytes.ref($M.23, $p12);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0bv64, 2bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i15 := $load.bytes.bv8($M.0, $p14);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i16 := $zext.bv8.bv32($i15);
    call {:si_unique_call 598} {:cexpr "len"} boogie_si_record_bv32($i16);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $i17 := $ugt.bv32($i16, $i11);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i18 := $zext.bv32.bv64($i16);
    call {:si_unique_call 599} {:cexpr "__len"} boogie_si_record_bv64($i18);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p19 := $load.bytes.ref($M.23, $p12);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.0;
    cmdloc_dummy_var_15 := $M.0;
    call {:si_unique_call 600} cmdloc_dummy_var_16 := $memcpy.bv8(cmdloc_dummy_var_14, cmdloc_dummy_var_15, $p10, $p20, $i18, $zext.bv32.bv64(1bv32), 0bv1 == 1bv1);
    $M.0 := cmdloc_dummy_var_16;
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i21 := $sub.bv32($i11, $i16);
    call {:si_unique_call 601} {:cexpr "buflen"} boogie_si_record_bv32($i21);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i22 := $zext.bv32.bv64($i16);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p10, $mul.ref($i22, 1bv64));
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p12, $mul.ref(1bv64, 8bv64));
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p25 := $load.bytes.ref($M.23, $p24);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.bv64($p25);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i27 := $ne.bv64($i26, 0bv64);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $p28 := $p23;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i27 == 1bv1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $p9 := $p28;
    goto $bb7;

  $bb13:
    assume $i27 == 1bv1;
    assume {:verifier.code 0} true;
    $p10, $i11, $p12 := $p23, $i21, $p24;
    goto $bb13_dummy;

  $bb10:
    assume $i17 == 1bv1;
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i5 := $sub.bv32(0bv32, 22bv32);
    goto $bb3;

  $bb1:
    assume $i4 == 1bv1;
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i5 := $sub.bv32(0bv32, 22bv32);
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2549;
}



const device_destroy: ref;

axiom device_destroy == $sub.ref(0bv64, 197120bv64);

procedure device_destroy($p0: ref, $i1: bv32);
  free requires assertsPassed;



implementation device_destroy($p0: ref, $i1: bv32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} {:cexpr "device_destroy:arg:arg1"} boogie_si_record_bv32($i1);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    return;
}



const ldv_cdev_del_7: ref;

axiom ldv_cdev_del_7 == $sub.ref(0bv64, 198152bv64);

procedure ldv_cdev_del_7($p0: ref);
  free requires assertsPassed;
  modifies $M.24;



implementation ldv_cdev_del_7($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} cdev_del($p0);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $M.24 := 0bv32;
    call {:si_unique_call 604} {:cexpr "ldv_state_variable_2"} boogie_si_record_bv32(0bv32);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0bv64, 199184bv64);

procedure warn_slowpath_null($p0: ref, $i1: bv32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: bv32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_bv32($i1);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0bv64, 200216bv64);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    return;
}



const printer_req_free: ref;

axiom printer_req_free == $sub.ref(0bv64, 201248bv64);

procedure printer_req_free($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation printer_req_free($p0: ref, $p1: ref)
{
  var $i2: bv64;
  var $i3: bv1;
  var $i4: bv64;
  var $i5: bv1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.bv64($p0);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i3 := $ne.bv64($i2, 0bv64);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1bv1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1bv1;
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.bv64($p1);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i5 := $ne.bv64($i4, 0bv64);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1bv1);
    goto $bb3;

  $bb4:
    assume $i5 == 1bv1;
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0bv64, 72bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p7 := $load.bytes.ref($M.0, $p6);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} kfree($p7);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} usb_ep_free_request($p0, $p1);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const set_gadget_data: ref;

axiom set_gadget_data == $sub.ref(0bv64, 202280bv64);

procedure set_gadget_data($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation set_gadget_data($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0bv64, 1072bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} dev_set_drvdata($p2, $p1);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0bv64, 203312bv64);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0bv64, 204344bv64);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} free_($p0);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    return;
}



const usb_ep_free_request: ref;

axiom usb_ep_free_request == $sub.ref(0bv64, 205376bv64);

procedure usb_ep_free_request($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_ep_free_request($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0bv64, 48bv64)), $mul.ref(16bv64, 1bv64));
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $p3 := $load.bytes.ref($M.0, $p2);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0bv64, 80bv64)), $mul.ref(24bv64, 1bv64));
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $p5 := $load.bytes.ref($M.0, $p4);
    call {:si_unique_call 610} devirtbounce.7($p5, $p0, $p1);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0bv64, 206408bv64);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 611} $free($p0);
    return;
}



const cdev_del: ref;

axiom cdev_del == $sub.ref(0bv64, 207440bv64);

procedure cdev_del($p0: ref);
  free requires assertsPassed;



implementation cdev_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    return;
}



const device_create: ref;

axiom device_create == $sub.ref(0bv64, 208472bv64);

procedure device_create.ref.ref.bv32.ref.ref($p0: ref, $p1: ref, $i2: bv32, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation device_create.ref.ref.bv32.ref.ref($p0: ref, $p1: ref, $i2: bv32, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} {:cexpr "device_create:arg:arg2"} boogie_si_record_bv32($i2);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $p5 := external_alloc();
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0bv64, 209504bv64);

procedure IS_ERR($p0: ref) returns ($r: bv64);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: bv64)
{
  var $i1: bv1;
  var $i2: bv8;
  var $i3: bv1;
  var $i4: bv64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} $i1 := ldv_is_err($p0);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i2 := $zext.bv1.bv8($i1);
    call {:si_unique_call 615} {:cexpr "tmp"} boogie_si_record_bv8($i2);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i3 := $trunc.bv8.bv1($i2);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i4 := $zext.bv1.bv64($i3);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_cdev_init_8: ref;

axiom ldv_cdev_init_8 == $sub.ref(0bv64, 210536bv64);

procedure ldv_cdev_init_8($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.24, $M.26, $M.27, $M.0, $CurrAddr;



implementation ldv_cdev_init_8($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} cdev_init($p0, $p1);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $M.24 := 1bv32;
    call {:si_unique_call 617} {:cexpr "ldv_state_variable_2"} boogie_si_record_bv32(1bv32);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} ldv_file_operations_2();
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    return;
}



const cdev_add: ref;

axiom cdev_add == $sub.ref(0bv64, 211568bv64);

procedure cdev_add($p0: ref, $i1: bv32, $i2: bv32) returns ($r: bv32);
  free requires assertsPassed;



implementation cdev_add($p0: ref, $i1: bv32, $i2: bv32) returns ($r: bv32)
{
  var $i3: bv32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 619} {:cexpr "cdev_add:arg:arg1"} boogie_si_record_bv32($i1);
    call {:si_unique_call 620} {:cexpr "cdev_add:arg:arg2"} boogie_si_record_bv32($i2);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 1} true;
    call {:si_unique_call 621} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 622} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i3);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_gadget_controller_number: ref;

axiom usb_gadget_controller_number == $sub.ref(0bv64, 212600bv64);

procedure usb_gadget_controller_number($p0: ref) returns ($r: bv32);
  free requires assertsPassed;



implementation usb_gadget_controller_number($p0: ref) returns ($r: bv32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: bv32;
  var $i4: bv1;
  var $i5: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0bv64, 1072bv64)), $mul.ref(40bv64, 1bv64));
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $p2 := $load.bytes.ref($M.0, $p1);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} $i3 := strcmp(.str.17, $p2);
    call {:si_unique_call 624} {:cexpr "tmp"} boogie_si_record_bv32($i3);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i4 := $eq.bv32($i3, 0bv32);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $sub.bv32(0bv32, 2bv32);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1bv1;
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $i5 := 37bv32;
    goto $bb3;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0bv64, 213632bv64);

procedure dev_warn.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: bv32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: bv32)
{
  var $i2: bv32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 1} true;
    call {:si_unique_call 625} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 626} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i2);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const init_utsname: ref;

axiom init_utsname == $sub.ref(0bv64, 214664bv64);

procedure init_utsname() returns ($r: ref);
  free requires assertsPassed;



implementation init_utsname() returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $r := $add.ref($add.ref(init_uts_ns, $mul.ref(0bv64, 396bv64)), $mul.ref(4bv64, 1bv64));
    return;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0bv64, 215696bv64);

procedure snprintf.ref.bv64.ref.ref.ref.ref($p0: ref, $i1: bv64, $p2: ref, p.3: ref, p.4: ref, p.5: ref) returns ($r: bv32);



const dev_err: ref;

axiom dev_err == $sub.ref(0bv64, 216728bv64);

procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: bv32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: bv32)
{
  var $i2: bv32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 1} true;
    call {:si_unique_call 627} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 628} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i2);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: bv32);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: bv32)
{
  var $i2: bv32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 1} true;
    call {:si_unique_call 629} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 630} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i2);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const strlcpy: ref;

axiom strlcpy == $sub.ref(0bv64, 217760bv64);

procedure strlcpy($p0: ref, $p1: ref, $i2: bv64) returns ($r: bv64);
  free requires assertsPassed;



implementation strlcpy($p0: ref, $p1: ref, $i2: bv64) returns ($r: bv64)
{
  var $i3: bv64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 631} {:cexpr "strlcpy:arg:arg2"} boogie_si_record_bv64($i2);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 1} true;
    call {:si_unique_call 632} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 633} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_bv64($i3);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_ep_autoconfig_reset: ref;

axiom usb_ep_autoconfig_reset == $sub.ref(0bv64, 218792bv64);

procedure usb_ep_autoconfig_reset($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.25;



implementation usb_ep_autoconfig_reset($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: bv64;
  var $p12: ref;
  var $i13: bv64;
  var $i14: bv1;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: bv64;
  var $i28: bv1;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0bv64, 1072bv64)), $mul.ref(16bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $p3 := $load.bytes.ref($M.0, $p2);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0bv64, 24bv64), 48bv64));
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p4, $mul.ref($sub.ref(0bv64, 24bv64), 48bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $p8 := $load.bytes.ref($M.0, $p7);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} llvm.prefetch($p9, 0bv32, 3bv32, 1bv32);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0bv64, 24bv64), 48bv64)), $mul.ref(24bv64, 1bv64));
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.bv64($p10);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0bv64, 1072bv64)), $mul.ref(16bv64, 1bv64));
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.bv64($p12);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i14 := $ne.bv64($i11, $i13);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1bv1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $M.25 := 0bv32;
    call {:si_unique_call 636} {:cexpr "epnum"} boogie_si_record_bv32(0bv32);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i14 == 1bv1;
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $p15 := $p5;
    goto $bb4;

  $bb4:
    call $p16, $p18, $p19, $p20, $p21, $p23, $p24, $p25, $p26, $i27, $i28, $p15 := usb_ep_autoconfig_reset_loop_$bb4($i13, $p16, $p18, $p19, $p20, $p21, $p23, $p24, $p25, $p26, $i27, $i28, $p15);
    goto $bb4_last;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0bv64, 48bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p16, $0.ref);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p15, $mul.ref(0bv64, 48bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $p19 := $load.bytes.ref($M.0, $p18);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref($sub.ref(0bv64, 24bv64), 48bv64));
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p20, $mul.ref($sub.ref(0bv64, 24bv64), 48bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $p24 := $load.bytes.ref($M.0, $p23);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} llvm.prefetch($p25, 0bv32, 3bv32, 1bv32);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p20, $mul.ref($sub.ref(0bv64, 24bv64), 48bv64)), $mul.ref(24bv64, 1bv64));
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.bv64($p26);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i28 := $ne.bv64($i27, $i13);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i28 == 1bv1);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i28 == 1bv1;
    assume {:verifier.code 0} true;
    $p15 := $p21;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2679;
}



const usb_ep_autoconfig: ref;

axiom usb_ep_autoconfig == $sub.ref(0bv64, 219824bv64);

procedure usb_ep_autoconfig($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.25;



implementation usb_ep_autoconfig($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: bv64;
  var $p13: ref;
  var $i14: bv64;
  var $i15: bv1;
  var $i17: bv32;
  var $i18: bv1;
  var $p19: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: bv64;
  var $i32: bv1;
  var $p16: ref;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0bv64, 1072bv64)), $mul.ref(16bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p4 := $load.bytes.ref($M.0, $p3);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0bv64, 24bv64), 48bv64));
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p5, $mul.ref($sub.ref(0bv64, 24bv64), 48bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p9 := $load.bytes.ref($M.0, $p8);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} llvm.prefetch($p10, 0bv32, 3bv32, 1bv32);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0bv64, 24bv64), 48bv64)), $mul.ref(24bv64, 1bv64));
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.bv64($p11);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0bv64, 1072bv64)), $mul.ref(16bv64, 1bv64));
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.bv64($p13);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i15 := $ne.bv64($i12, $i14);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i15 == 1bv1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p20 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $r := $p20;
    return;

  $bb1:
    assume $i15 == 1bv1;
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $p16 := $p6;
    goto $bb4;

  $bb4:
    call $i17, $i18, $p19, $p22, $p23, $p24, $p25, $p27, $p28, $p29, $p30, $i31, $i32, $p16 := usb_ep_autoconfig_loop_$bb4($p0, $p1, $i14, $i17, $i18, $p19, $p22, $p23, $p24, $p25, $p27, $p28, $p29, $p30, $i31, $i32, $p16);
    goto $bb4_last;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} $i17 := ep_matches($p0, $p16, $p1);
    call {:si_unique_call 639} {:cexpr "tmp___3"} boogie_si_record_bv32($i17);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i18 := $ne.bv32($i17, 0bv32);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p19 := $p16;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p16, $mul.ref(0bv64, 48bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p23 := $load.bytes.ref($M.0, $p22);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref($sub.ref(0bv64, 24bv64), 48bv64));
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p24, $mul.ref($sub.ref(0bv64, 24bv64), 48bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $p28 := $load.bytes.ref($M.0, $p27);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} llvm.prefetch($p29, 0bv32, 3bv32, 1bv32);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p24, $mul.ref($sub.ref(0bv64, 24bv64), 48bv64)), $mul.ref(24bv64, 1bv64));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.bv64($p30);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i32 := $ne.bv64($i31, $i14);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1bv1);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i32 == 1bv1;
    assume {:verifier.code 0} true;
    $p16 := $p25;
    goto $bb10_dummy;

  $bb6:
    assume $i18 == 1bv1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $p20 := $p19;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2716;
}



const usb_gadget_set_selfpowered: ref;

axiom usb_gadget_set_selfpowered == $sub.ref(0bv64, 220856bv64);

procedure usb_gadget_set_selfpowered($p0: ref) returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation usb_gadget_set_selfpowered($p0: ref) returns ($r: bv32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: bv64;
  var $i6: bv1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: bv32;
  var $i7: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0bv64, 1072bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $p2 := $load.bytes.ref($M.0, $p1);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0bv64, 56bv64)), $mul.ref(16bv64, 1bv64));
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $p4 := $load.bytes.ref($M.0, $p3);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.bv64($p4);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i6 := $eq.bv64($i5, 0bv64);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0bv64, 1072bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p9 := $load.bytes.ref($M.0, $p8);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0bv64, 56bv64)), $mul.ref(16bv64, 1bv64));
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $p11 := $load.bytes.ref($M.0, $p10);
    call {:si_unique_call 641} $i12 := devirtbounce.6($p11, $p0, 1bv32);
    call {:si_unique_call 642} {:cexpr "tmp"} boogie_si_record_bv32($i12);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i7 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1bv1;
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i7 := $sub.bv32(0bv32, 95bv32);
    goto $bb3;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0bv64, 221888bv64);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0bv64, 222920bv64);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0bv64, 223952bv64);

procedure __init_waitqueue_head($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    return;
}



const printer_req_alloc: ref;

axiom printer_req_alloc == $sub.ref(0bv64, 224984bv64);

procedure printer_req_alloc($p0: ref, $i1: bv32, $i2: bv32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation printer_req_alloc($p0: ref, $i1: bv32, $i2: bv32) returns ($r: ref)
{
  var $p3: ref;
  var $i4: bv64;
  var $i5: bv1;
  var $p6: ref;
  var $i7: bv64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: bv64;
  var $i13: bv1;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} {:cexpr "printer_req_alloc:arg:len"} boogie_si_record_bv32($i1);
    call {:si_unique_call 644} {:cexpr "printer_req_alloc:arg:gfp_flags"} boogie_si_record_bv32($i2);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $p3 := usb_ep_alloc_request($p0, $i2);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.bv64($p3);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i5 := $ne.bv64($i4, 0bv64);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $p3;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;

  $bb1:
    assume $i5 == 1bv1;
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0bv64, 72bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv32($M.0, $p6, $i1);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i7 := $zext.bv32.bv64($i1);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $p8 := kmalloc($i7, $i2);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0bv64, 72bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, $p9, $p8);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0bv64, 72bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $p11 := $load.bytes.ref($M.0, $p10);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.bv64($p11);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i13 := $eq.bv64($i12, 0bv64);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i13 == 1bv1;
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} usb_ep_free_request($p0, $p3);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $p14 := $0.ref;
    goto $bb5;
}



const usb_ep_alloc_request: ref;

axiom usb_ep_alloc_request == $sub.ref(0bv64, 226016bv64);

procedure usb_ep_alloc_request($p0: ref, $i1: bv32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_ep_alloc_request($p0: ref, $i1: bv32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} {:cexpr "usb_ep_alloc_request:arg:gfp_flags"} boogie_si_record_bv32($i1);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0bv64, 48bv64)), $mul.ref(16bv64, 1bv64));
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $p3 := $load.bytes.ref($M.0, $p2);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0bv64, 80bv64)), $mul.ref(16bv64, 1bv64));
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p5 := $load.bytes.ref($M.0, $p4);
    call {:si_unique_call 649} $p6 := devirtbounce.8($p5, $p0, $i1);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0bv64, 227048bv64);

procedure kmalloc($i0: bv64, $i1: bv32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: bv64, $i1: bv32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} {:cexpr "kmalloc:arg:size"} boogie_si_record_bv64($i0);
    call {:si_unique_call 651} {:cexpr "kmalloc:arg:flags"} boogie_si_record_bv32($i1);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ep_matches: ref;

axiom ep_matches == $sub.ref(0bv64, 228080bv64);

procedure ep_matches($p0: ref, $p1: ref, $p2: ref) returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.0, $M.25;



implementation ep_matches($p0: ref, $p1: ref, $p2: ref) returns ($r: bv32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: bv64;
  var $i6: bv1;
  var $p8: ref;
  var $i9: bv8;
  var $i10: bv32;
  var $i11: bv32;
  var $i12: bv8;
  var $i13: bv32;
  var $i14: bv1;
  var $p15: ref;
  var $p16: ref;
  var $i17: bv8;
  var $i18: bv32;
  var $i19: bv1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: bv8;
  var $i24: bv32;
  var $i25: bv1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: bv64;
  var $i30: bv1;
  var $i31: bv32;
  var $i32: bv1;
  var $i33: bv1;
  var $i34: bv1;
  var $i35: bv1;
  var $p36: ref;
  var $i37: bv8;
  var $i38: bv32;
  var $i39: bv1;
  var $p40: ref;
  var $i41: bv8;
  var $i42: bv32;
  var $i43: bv1;
  var $p44: ref;
  var $i45: bv8;
  var $i46: bv32;
  var $i47: bv1;
  var $p49: ref;
  var $p50: ref;
  var $i51: bv64;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p48: ref;
  var $p55: ref;
  var $i56: bv8;
  var $i57: bv32;
  var $i58: bv64;
  var $p59: ref;
  var $i60: bv8;
  var $i61: bv32;
  var $i62: bv32;
  var $i63: bv1;
  var $p64: ref;
  var $i65: bv8;
  var $i66: bv32;
  var $i67: bv1;
  var $i68: bv8;
  var $i69: bv32;
  var $i70: bv1;
  var $i71: bv8;
  var $i72: bv32;
  var $i73: bv1;
  var $p74: ref;
  var $i75: bv16;
  var $i76: bv32;
  var $i77: bv32;
  var $i78: bv16;
  var $i79: bv32;
  var $i80: bv1;
  var $i81: bv1;
  var $i82: bv1;
  var $p83: ref;
  var $p84: ref;
  var $i85: bv8;
  var $i86: bv32;
  var $i87: bv1;
  var $i88: bv32;
  var $i89: bv1;
  var $p90: ref;
  var $i91: bv16;
  var $i92: bv32;
  var $i93: bv32;
  var $i94: bv1;
  var $p95: ref;
  var $p96: ref;
  var $i97: bv8;
  var $i98: bv32;
  var $i99: bv1;
  var $i100: bv32;
  var $i101: bv1;
  var $p102: ref;
  var $i103: bv16;
  var $i104: bv32;
  var $i105: bv32;
  var $i106: bv1;
  var $p107: ref;
  var $p108: ref;
  var $i109: bv8;
  var $i110: bv32;
  var $i111: bv1;
  var $p112: ref;
  var $i113: bv8;
  var $i114: bv32;
  var $i115: bv32;
  var $i116: bv8;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: bv8;
  var $i122: bv32;
  var $i123: bv64;
  var $p124: ref;
  var $i125: bv8;
  var $i126: bv32;
  var $i127: bv32;
  var $i128: bv1;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: bv64;
  var $i133: bv8;
  var $p134: ref;
  var $i135: bv8;
  var $i136: bv32;
  var $i137: bv32;
  var $i138: bv32;
  var $i139: bv8;
  var $p140: ref;
  var $i141: bv32;
  var $i142: bv32;
  var $i143: bv32;
  var $i144: bv1;
  var $p145: ref;
  var $i146: bv8;
  var $i147: bv32;
  var $i148: bv32;
  var $i149: bv8;
  var $i150: bv32;
  var $i151: bv32;
  var $i152: bv8;
  var $p153: ref;
  var $i154: bv32;
  var $i155: bv1;
  var $p156: ref;
  var $i157: bv16;
  var $i158: bv32;
  var $i159: bv1;
  var $i160: bv32;
  var $i161: bv16;
  var $p162: ref;
  var $i7: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0bv64, 48bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $p4 := $load.bytes.ref($M.0, $p3);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.bv64($p4);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i6 := $ne.bv64($i5, 0bv64);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0bv64, 10bv64)), $mul.ref(3bv64, 1bv64));
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i9 := $load.bytes.bv8($M.0, $p8);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i10 := $zext.bv8.bv32($i9);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i11 := $and.bv32($i10, 3bv32);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $i12 := $trunc.bv32.bv8($i11);
    call {:si_unique_call 653} {:cexpr "type"} boogie_si_record_bv8($i12);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i13 := $zext.bv8.bv32($i12);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i14 := $eq.bv32($i13, 0bv32);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0bv64, 48bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $p16 := $load.bytes.ref($M.0, $p15);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i17 := $load.bytes.bv8($M.0, $p16);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i18 := $sext.bv8.bv32($i17);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i19 := $ne.bv32($i18, 101bv32);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0bv64, 48bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p21 := $load.bytes.ref($M.0, $p20);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref(2bv64, 1bv64));
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i23 := $load.bytes.bv8($M.0, $p22);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i24 := $sext.bv8.bv32($i23);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i25 := $ne.bv32($i24, 45bv32);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0bv64, 10bv64)), $mul.ref(4bv64, 1bv64));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i75 := $load.bytes.bv16($M.0, $p74);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i76 := $zext.bv16.bv32($i75);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i77 := $and.bv32($i76, 2047bv32);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i78 := $trunc.bv32.bv16($i77);
    call {:si_unique_call 657} {:cexpr "max"} boogie_si_record_bv16($i78);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i79 := $zext.bv8.bv32($i12);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i80 := $slt.bv32($i79, 3bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i80 == 1bv1);
    assume {:verifier.code 0} true;
    $i81 := $eq.bv32($i79, 3bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i81 == 1bv1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p2, $mul.ref(0bv64, 10bv64)), $mul.ref(2bv64, 1bv64));
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i113 := $load.bytes.bv8($M.0, $p112);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i114 := $zext.bv8.bv32($i113);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i115 := $and.bv32($i114, 128bv32);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i116 := $trunc.bv32.bv8($i115);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p2, $mul.ref(0bv64, 10bv64)), $mul.ref(2bv64, 1bv64));
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p117, $i116);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p1, $mul.ref(0bv64, 48bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $p119 := $load.bytes.ref($M.0, $p118);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($p119, $mul.ref(2bv64, 1bv64));
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i121 := $load.bytes.bv8($M.0, $p120);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i122 := $zext.bv8.bv32($i121);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i123 := $sext.bv32.bv64($i122);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref(_ctype, $mul.ref(0bv64, 0bv64)), $mul.ref($i123, 1bv64));
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i125 := $load.bytes.bv8($M.0, $p124);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $i126 := $zext.bv8.bv32($i125);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i127 := $and.bv32($i126, 4bv32);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i128 := $ne.bv32($i127, 0bv32);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i128 == 1bv1);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i141 := $M.25;
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i142 := $add.bv32($i141, 1bv32);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $M.25 := $i142;
    call {:si_unique_call 661} {:cexpr "epnum"} boogie_si_record_bv32($i142);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i143 := $M.25;
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i144 := $ugt.bv32($i143, 15bv32);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i144 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p2, $mul.ref(0bv64, 10bv64)), $mul.ref(2bv64, 1bv64));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $i146 := $load.bytes.bv8($M.0, $p145);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i147 := $zext.bv8.bv32($i146);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i148 := $M.25;
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i149 := $trunc.bv32.bv8($i148);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i150 := $zext.bv8.bv32($i149);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i151 := $or.bv32($i147, $i150);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i152 := $trunc.bv32.bv8($i151);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p2, $mul.ref(0bv64, 10bv64)), $mul.ref(2bv64, 1bv64));
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p153, $i152);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $i154 := $zext.bv8.bv32($i12);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i155 := $eq.bv32($i154, 2bv32);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i155 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i7 := 1bv32;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb88:
    assume $i155 == 1bv1;
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p1, $mul.ref(0bv64, 48bv64)), $mul.ref(40bv64, 1bv64));
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i157 := $load.bytes.bv16($M.0, $p156);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i158 := $zext.bv16.bv32($i157);
    call {:si_unique_call 662} {:cexpr "size"} boogie_si_record_bv32($i158);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i159 := $sgt.bv32($i158, 64bv32);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i159 == 1bv1);
    assume {:verifier.code 0} true;
    $i160 := $i158;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $i161 := $trunc.bv32.bv16($i160);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p2, $mul.ref(0bv64, 10bv64)), $mul.ref(4bv64, 1bv64));
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv16($M.0, $p162, $i161);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb90:
    assume $i159 == 1bv1;
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $i160 := 64bv32;
    goto $bb92;

  $bb85:
    assume $i144 == 1bv1;
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i7 := 0bv32;
    goto $bb3;

  $bb82:
    assume $i128 == 1bv1;
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p1, $mul.ref(0bv64, 48bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $p130 := $load.bytes.ref($M.0, $p129);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($p130, $mul.ref(2bv64, 1bv64));
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} $i132 := simple_strtoul($p131, $0.ref, 10bv32);
    call {:si_unique_call 659} {:cexpr "tmp___2"} boogie_si_record_bv64($i132);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i133 := $trunc.bv64.bv8($i132);
    call {:si_unique_call 660} {:cexpr "num"} boogie_si_record_bv8($i133);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p2, $mul.ref(0bv64, 10bv64)), $mul.ref(2bv64, 1bv64));
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $i135 := $load.bytes.bv8($M.0, $p134);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i136 := $zext.bv8.bv32($i135);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i137 := $zext.bv8.bv32($i133);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i138 := $or.bv32($i136, $i137);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i139 := $trunc.bv32.bv8($i138);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p2, $mul.ref(0bv64, 10bv64)), $mul.ref(2bv64, 1bv64));
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, $p140, $i139);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb53:
    assume $i81 == 1bv1;
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p0);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p83, $mul.ref(36bv64, 1bv64));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i85 := $load.bytes.bv8($M.0, $p84);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i86 := $zext.bv8.bv32($i85);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i87 := $eq.bv32($i86, 0bv32);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i87 == 1bv1);
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p1, $mul.ref(0bv64, 48bv64)), $mul.ref(40bv64, 1bv64));
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i91 := $load.bytes.bv16($M.0, $p90);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i92 := $zext.bv16.bv32($i91);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i93 := $zext.bv16.bv32($i78);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i94 := $slt.bv32($i92, $i93);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i94 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p0);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p95, $mul.ref(36bv64, 1bv64));
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i97 := $load.bytes.bv8($M.0, $p96);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i98 := $zext.bv8.bv32($i97);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i99 := $eq.bv32($i98, 0bv32);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i99 == 1bv1);
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p2, $mul.ref(0bv64, 10bv64)), $mul.ref(4bv64, 1bv64));
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i103 := $load.bytes.bv16($M.0, $p102);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i104 := $zext.bv16.bv32($i103);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i105 := $and.bv32($i104, 6144bv32);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i106 := $ne.bv32($i105, 0bv32);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i106 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb74:
    assume $i106 == 1bv1;
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p0);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($p107, $mul.ref(36bv64, 1bv64));
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i109 := $load.bytes.bv8($M.0, $p108);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i110 := $zext.bv8.bv32($i109);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i111 := $eq.bv32($i110, 0bv32);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i111 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb76:
    assume $i111 == 1bv1;
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i7 := 0bv32;
    goto $bb3;

  $bb68:
    assume $i99 == 1bv1;
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i100 := $zext.bv16.bv32($i78);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i101 := $ugt.bv32($i100, 1023bv32);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i101 == 1bv1);
    goto $bb70;

  $bb71:
    assume $i101 == 1bv1;
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i7 := 0bv32;
    goto $bb3;

  $bb65:
    assume $i94 == 1bv1;
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i7 := 0bv32;
    goto $bb3;

  $bb59:
    assume $i87 == 1bv1;
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i88 := $zext.bv16.bv32($i78);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i89 := $ugt.bv32($i88, 64bv32);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i89 == 1bv1);
    goto $bb61;

  $bb62:
    assume $i89 == 1bv1;
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i7 := 0bv32;
    goto $bb3;

  $bb51:
    assume $i80 == 1bv1;
    assume {:verifier.code 0} true;
    $i82 := $eq.bv32($i79, 1bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i82 == 1bv1);
    goto $bb55;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i82 == 1bv1;
    goto $bb57;

  $bb11:
    assume $i25 == 1bv1;
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0bv64, 48bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $p27 := $load.bytes.ref($M.0, $p26);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $p28 := strrchr($p27, 45bv32);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.bv64($p28);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i30 := $ne.bv64($i29, 0bv64);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1bv1);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0bv64, 48bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $p50 := $load.bytes.ref($M.0, $p49);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} $i51 := strlen($p50);
    call {:si_unique_call 656} {:cexpr "tmp___1"} boogie_si_record_bv64($i51);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0bv64, 48bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $p53 := $load.bytes.ref($M.0, $p52);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p53, $mul.ref($i51, 1bv64));
    assume {:verifier.code 0} true;
    $p48 := $p54;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p48, $mul.ref($sub.ref(0bv64, 1bv64), 1bv64));
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i56 := $load.bytes.bv8($M.0, $p55);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i57 := $zext.bv8.bv32($i56);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i58 := $sext.bv32.bv64($i57);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref(_ctype, $mul.ref(0bv64, 0bv64)), $mul.ref($i58, 1bv64));
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i60 := $load.bytes.bv8($M.0, $p59);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i61 := $zext.bv8.bv32($i60);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i62 := $and.bv32($i61, 4bv32);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i63 := $eq.bv32($i62, 0bv32);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i63 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb37:
    assume $i63 == 1bv1;
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0bv64, 10bv64)), $mul.ref(2bv64, 1bv64));
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i65 := $load.bytes.bv8($M.0, $p64);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i66 := $sext.bv8.bv32($i65);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i67 := $slt.bv32($i66, 0bv32);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i67 == 1bv1);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i71 := $load.bytes.bv8($M.0, $p55);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i72 := $sext.bv8.bv32($i71);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i73 := $ne.bv32($i72, 116bv32);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i73 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb45:
    assume $i73 == 1bv1;
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i7 := 0bv32;
    goto $bb3;

  $bb39:
    assume $i67 == 1bv1;
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i68 := $load.bytes.bv8($M.0, $p55);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i69 := $sext.bv8.bv32($i68);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i70 := $ne.bv32($i69, 110bv32);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i70 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume $i70 == 1bv1;
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i7 := 0bv32;
    goto $bb3;

  $bb13:
    assume $i30 == 1bv1;
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i31 := $zext.bv8.bv32($i12);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i32 := $slt.bv32($i31, 2bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i32 == 1bv1);
    assume {:verifier.code 0} true;
    $i33 := $slt.bv32($i31, 3bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i33 == 1bv1);
    assume {:verifier.code 0} true;
    $i34 := $eq.bv32($i31, 3bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i34 == 1bv1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p48 := $p28;
    goto $bb36;

  $bb20:
    assume $i34 == 1bv1;
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p28, $mul.ref(2bv64, 1bv64));
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i37 := $load.bytes.bv8($M.0, $p36);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i38 := $sext.bv8.bv32($i37);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i39 := $eq.bv32($i38, 115bv32);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i39 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i39 == 1bv1;
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i7 := 0bv32;
    goto $bb3;

  $bb18:
    assume $i33 == 1bv1;
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p28, $mul.ref(1bv64, 1bv64));
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i41 := $load.bytes.bv8($M.0, $p40);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i42 := $sext.bv8.bv32($i41);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i43 := $ne.bv32($i42, 98bv32);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i43 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb29:
    assume $i43 == 1bv1;
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i7 := 0bv32;
    goto $bb3;

  $bb16:
    assume $i32 == 1bv1;
    assume {:verifier.code 0} true;
    $i35 := $eq.bv32($i31, 1bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i35 == 1bv1);
    goto $bb22;

  $bb23:
    assume $i35 == 1bv1;
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p28, $mul.ref(2bv64, 1bv64));
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i45 := $load.bytes.bv8($M.0, $p44);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i46 := $sext.bv8.bv32($i45);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i47 := $ne.bv32($i46, 115bv32);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i47 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb32:
    assume $i47 == 1bv1;
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i7 := 0bv32;
    goto $bb3;

  $bb8:
    assume $i19 == 1bv1;
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i7 := 0bv32;
    goto $bb3;

  $bb5:
    assume $i14 == 1bv1;
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i7 := 0bv32;
    goto $bb3;

  $bb1:
    assume $i6 == 1bv1;
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i7 := 0bv32;
    goto $bb3;
}



const llvm.prefetch: ref;

axiom llvm.prefetch == $sub.ref(0bv64, 229112bv64);

procedure llvm.prefetch($p0: ref, $i1: bv32, $i2: bv32, $i3: bv32);



const strrchr: ref;

axiom strrchr == $sub.ref(0bv64, 230144bv64);

procedure strrchr($p0: ref, $i1: bv32) returns ($r: ref);



const simple_strtoul: ref;

axiom simple_strtoul == $sub.ref(0bv64, 231176bv64);

procedure simple_strtoul($p0: ref, $p1: ref, $i2: bv32) returns ($r: bv64);
  free requires assertsPassed;



implementation simple_strtoul($p0: ref, $p1: ref, $i2: bv32) returns ($r: bv64)
{
  var $i3: bv64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 663} {:cexpr "simple_strtoul:arg:arg2"} boogie_si_record_bv32($i2);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 1} true;
    call {:si_unique_call 664} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 665} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_bv64($i3);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const strcmp: ref;

axiom strcmp == $sub.ref(0bv64, 232208bv64);

procedure strcmp($p0: ref, $p1: ref) returns ($r: bv32);



const cdev_init: ref;

axiom cdev_init == $sub.ref(0bv64, 233240bv64);

procedure cdev_init($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation cdev_init($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_2: ref;

axiom ldv_file_operations_2 == $sub.ref(0bv64, 234272bv64);

procedure ldv_file_operations_2();
  free requires assertsPassed;
  modifies $M.26, $M.27, $M.0, $CurrAddr;



implementation ldv_file_operations_2()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $p0 := ldv_init_zalloc(1000bv64);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $M.26 := $p0;
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $p2 := ldv_init_zalloc(320bv64);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $M.27 := $p2;
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0bv64, 235304bv64);

procedure ldv_init_zalloc($i0: bv64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: bv64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: bv64;
  var $i3: bv1;
  var $i4: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_bv64($i0);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} $p1 := calloc(1bv64, $i0);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.bv64($p1);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 1} true;
    $i3 := $ne.bv64($i2, 0bv64);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 1} true;
    $i4 := $zext.bv1.bv32($i3);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 1} true;
    call {:si_unique_call 670} __VERIFIER_assume($i4);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0bv64, 236336bv64);

procedure ldv_is_err($p0: ref) returns ($r: bv1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: bv1)
{
  var $i1: bv64;
  var $i2: bv1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.bv64($p0);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i2 := $ugt.bv64($i1, 2012bv64);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0bv64, 237368bv64);

procedure ldv_memset($p0: ref, $i1: bv32, $i2: bv64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.28;



implementation ldv_memset($p0: ref, $i1: bv32, $i2: bv64) returns ($r: ref)
{
  var $i3: bv8;
  var cmdloc_dummy_var_17: [ref]bv8;
  var cmdloc_dummy_var_18: [ref]bv8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} {:cexpr "ldv_memset:arg:c"} boogie_si_record_bv32($i1);
    call {:si_unique_call 672} {:cexpr "ldv_memset:arg:n"} boogie_si_record_bv64($i2);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i3 := $trunc.bv32.bv8($i1);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.28;
    call {:si_unique_call 673} cmdloc_dummy_var_18 := $memset.bv8(cmdloc_dummy_var_17, $p0, $i3, $i2, $zext.bv32.bv64(1bv32), 0bv1 == 1bv1);
    $M.28 := cmdloc_dummy_var_18;
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0bv64, 238400bv64);

procedure ldv_undef_int() returns ($r: bv32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: bv32)
{
  var $i0: bv32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 1} true;
    call {:si_unique_call 674} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 675} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i0);
    call {:si_unique_call 676} {:cexpr "tmp"} boogie_si_record_bv32($i0);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0bv64, 239432bv64);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 1} true;
    call {:si_unique_call 677} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 678} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_initialize_usb_gadget_driver_1: ref;

axiom ldv_initialize_usb_gadget_driver_1 == $sub.ref(0bv64, 240464bv64);

procedure ldv_initialize_usb_gadget_driver_1();
  free requires assertsPassed;
  modifies $M.29, $M.0, $CurrAddr;



implementation ldv_initialize_usb_gadget_driver_1()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} $p0 := ldv_init_zalloc(1072bv64);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $M.29 := $p0;
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0bv64, 241496bv64);

procedure main() returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.28, $M.30, $M.31, $M.32, $M.24, $M.0, $M.33, $M.34, $M.35, $M.29, $M.2, $M.3, $M.4, $M.5, $M.6, $M.36, $M.26, $M.27, $M.37, $M.38, $M.39, $M.41, $M.23, $M.16, $M.15, $M.14, $M.13, $M.12, $M.11, $M.10, $M.9, $M.8, $M.7, $M.25, $M.88, $M.89, $CurrAddr, assertsPassed;



implementation main() returns ($r: bv32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $i25: bv32;
  var $i26: bv1;
  var $i27: bv1;
  var $i28: bv1;
  var $i29: bv1;
  var $i30: bv32;
  var $i31: bv1;
  var $i32: bv32;
  var $i33: bv1;
  var $i34: bv1;
  var $i35: bv1;
  var $i36: bv1;
  var $i37: bv1;
  var $i38: bv32;
  var $i39: bv1;
  var $p40: ref;
  var $i41: bv32;
  var $i42: bv1;
  var $p43: ref;
  var $i44: bv32;
  var $i45: bv32;
  var $i46: bv32;
  var $i47: bv1;
  var $p48: ref;
  var $i49: bv32;
  var $i50: bv32;
  var $i51: bv1;
  var $i52: bv32;
  var $i53: bv32;
  var $i54: bv32;
  var $i55: bv1;
  var $p56: ref;
  var $i57: bv32;
  var $i58: bv32;
  var $i59: bv1;
  var $i60: bv32;
  var $i61: bv1;
  var $i62: bv32;
  var $i63: bv1;
  var $i64: bv1;
  var $i65: bv1;
  var $i66: bv32;
  var $i67: bv1;
  var $i68: bv32;
  var $i69: bv1;
  var $i70: bv32;
  var $i71: bv1;
  var $i72: bv32;
  var $i73: bv32;
  var $i74: bv1;
  var $i75: bv32;
  var $i76: bv1;
  var $i77: bv32;
  var $i78: bv1;
  var $i79: bv32;
  var $i80: bv1;
  var $i81: bv1;
  var $i82: bv1;
  var $i83: bv1;
  var $i84: bv1;
  var $i85: bv1;
  var $i86: bv1;
  var $i87: bv1;
  var $i88: bv32;
  var $i89: bv1;
  var $p90: ref;
  var $i91: bv64;
  var $i93: bv32;
  var $i94: bv1;
  var $p95: ref;
  var $i96: bv64;
  var $i98: bv32;
  var $i99: bv1;
  var $p100: ref;
  var $p101: ref;
  var $i103: bv32;
  var $i104: bv32;
  var $i105: bv32;
  var $i106: bv1;
  var $p107: ref;
  var $i108: bv64;
  var $i110: bv32;
  var $i111: bv1;
  var $p112: ref;
  var $i113: bv32;
  var $i115: bv32;
  var $i116: bv1;
  var $p117: ref;
  var $i118: bv32;
  var $i120: bv32;
  var $i121: bv1;
  var $p122: ref;
  var $i124: bv32;
  var $i125: bv1;
  var $p126: ref;
  var $i128: bv32;
  var $i129: bv1;
  var $p130: ref;
  var $p131: ref;
  var $i132: bv32;
  var $i133: bv32;
  var $i134: bv1;
  var $i135: bv32;
  var $i136: bv32;
  var $i137: bv32;
  var $i138: bv1;
  var $p139: ref;
  var $i140: bv32;
  var $i141: bv64;
  var vslice_dummy_var_74: ref;
  var vslice_dummy_var_75: ref;
  var vslice_dummy_var_76: ref;
  var vslice_dummy_var_77: ref;
  var vslice_dummy_var_78: ref;
  var vslice_dummy_var_79: bv64;
  var vslice_dummy_var_80: bv64;
  var vslice_dummy_var_81: bv32;
  var vslice_dummy_var_82: bv64;
  var vslice_dummy_var_83: bv32;
  var vslice_dummy_var_84: bv32;
  var vslice_dummy_var_85: bv32;
  var vslice_dummy_var_86: bv32;
  var vslice_dummy_var_87: bv64;

  $bb0:
    call {:si_unique_call 680} $initialize();
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $p0 := $alloc($mul.ref(8bv64, $zext.bv32.bv64(1bv32)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} $p1 := $alloc($mul.ref(8bv64, $zext.bv32.bv64(1bv32)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $p2 := $alloc($mul.ref(4bv64, $zext.bv32.bv64(1bv32)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $p3 := $alloc($mul.ref(8bv64, $zext.bv32.bv64(1bv32)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $p4 := $alloc($mul.ref(4bv64, $zext.bv32.bv64(1bv32)));
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $p5 := ldv_init_zalloc(8bv64);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} $p7 := ldv_init_zalloc(1bv64);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} $p8 := ldv_init_zalloc(16bv64);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} $p10 := ldv_init_zalloc(8bv64);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $p12 := ldv_init_zalloc(8bv64);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} $p14 := ldv_init_zalloc(1bv64);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} ldv_initialize();
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p0);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} vslice_dummy_var_74 := ldv_memset($p15, 0bv32, 8bv64);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p1);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} vslice_dummy_var_75 := ldv_memset($p17, 0bv32, 8bv64);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p2);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} vslice_dummy_var_76 := ldv_memset($p19, 0bv32, 4bv64);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p3);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} vslice_dummy_var_77 := ldv_memset($p21, 0bv32, 8bv64);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p4);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} vslice_dummy_var_78 := ldv_memset($p23, 0bv32, 4bv64);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $M.30 := 0bv32;
    call {:si_unique_call 699} {:cexpr "ldv_state_variable_1"} boogie_si_record_bv32(0bv32);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $M.31 := 0bv32;
    call {:si_unique_call 700} {:cexpr "ref_cnt"} boogie_si_record_bv32(0bv32);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $M.32 := 1bv32;
    call {:si_unique_call 701} {:cexpr "ldv_state_variable_0"} boogie_si_record_bv32(1bv32);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $M.24 := 0bv32;
    call {:si_unique_call 702} {:cexpr "ldv_state_variable_2"} boogie_si_record_bv32(0bv32);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $p40, $i41, $i42, $p43, $i44, $i45, $i46, $i47, $p48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $p90, $i91, $i93, $i94, $p95, $i96, $i98, $i99, $p100, $p101, $i103, $i104, $i105, $i106, $p107, $i108, $i110, $i111, $p112, $i113, $i115, $i116, $p117, $i118, $i120, $i121, $p122, $i124, $i125, $p126, $i128, $i129, $p130, $p131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $p139, $i140, $i141, vslice_dummy_var_79, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p6, $p7, $p9, $p11, $p13, $p14, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $p40, $i41, $i42, $p43, $i44, $i45, $i46, $i47, $p48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $p90, $i91, $i93, $i94, $p95, $i96, $i98, $i99, $p100, $p101, $i103, $i104, $i105, $i106, $p107, $i108, $i110, $i111, $p112, $i113, $i115, $i116, $p117, $i118, $i120, $i121, $p122, $i124, $i125, $p126, $i128, $i129, $p130, $p131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $p139, $i140, $i141, vslice_dummy_var_79, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i26 := $slt.bv32($i25, 1bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i26 == 1bv1);
    assume {:verifier.code 0} true;
    $i27 := $slt.bv32($i25, 2bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i27 == 1bv1);
    assume {:verifier.code 0} true;
    $i28 := $eq.bv32($i25, 2bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i28 == 1bv1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} ldv_stop();
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb48_dummy;

  $bb7:
    assume $i28 == 1bv1;
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i77 := $M.24;
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i78 := $ne.bv32($i77, 0bv32);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i78 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb79:
    assume $i78 == 1bv1;
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 1} true;
    call {:si_unique_call 735} $i79 := __VERIFIER_nondet_int();
    call {:si_unique_call 736} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i79);
    call {:si_unique_call 737} {:cexpr "tmp___8"} boogie_si_record_bv32($i79);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $i80 := $slt.bv32($i79, 3bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i80 == 1bv1);
    assume {:verifier.code 0} true;
    $i81 := $slt.bv32($i79, 5bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i81 == 1bv1);
    assume {:verifier.code 0} true;
    $i82 := $slt.bv32($i79, 6bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i82 == 1bv1);
    assume {:verifier.code 0} true;
    $i83 := $eq.bv32($i79, 6bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    assume !($i83 == 1bv1);
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} ldv_stop();
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb88:
    assume $i83 == 1bv1;
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i137 := $M.24;
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i138 := $eq.bv32($i137, 2bv32);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i138 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb130:
    assume $i138 == 1bv1;
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $p139 := $M.27;
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $i140 := $load.bytes.bv32($M.28, $p4);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i141 := $load.bytes.bv64($M.28, $p1);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} vslice_dummy_var_87 := printer_ioctl($p139, $i140, $i141);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $M.24 := 2bv32;
    call {:si_unique_call 760} {:cexpr "ldv_state_variable_2"} boogie_si_record_bv32(2bv32);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb86:
    assume $i82 == 1bv1;
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i128 := $M.24;
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i129 := $eq.bv32($i128, 1bv32);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i129 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb124:
    assume $i129 == 1bv1;
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $p130 := $M.26;
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $p131 := $M.27;
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} $i132 := printer_open($p130, $p131);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $M.36 := $i132;
    call {:si_unique_call 756} {:cexpr "ldv_retval_3"} boogie_si_record_bv32($i132);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i133 := $M.36;
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i134 := $eq.bv32($i133, 0bv32);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i134 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb126:
    assume $i134 == 1bv1;
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $M.24 := 2bv32;
    call {:si_unique_call 757} {:cexpr "ldv_state_variable_2"} boogie_si_record_bv32(2bv32);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i135 := $M.31;
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i136 := $add.bv32($i135, 1bv32);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $M.31 := $i136;
    call {:si_unique_call 758} {:cexpr "ref_cnt"} boogie_si_record_bv32($i136);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb84:
    assume $i81 == 1bv1;
    assume {:verifier.code 0} true;
    $i84 := $slt.bv32($i79, 4bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i84 == 1bv1);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i120 := $M.24;
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i121 := $eq.bv32($i120, 1bv32);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i121 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $i124 := $M.24;
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i125 := $eq.bv32($i124, 2bv32);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i125 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb121:
    assume $i125 == 1bv1;
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $p126 := $M.27;
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} vslice_dummy_var_86 := printer_poll($p126, $p9);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $M.24 := 2bv32;
    call {:si_unique_call 754} {:cexpr "ldv_state_variable_2"} boogie_si_record_bv32(2bv32);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb118:
    assume $i121 == 1bv1;
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $p122 := $M.27;
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} vslice_dummy_var_85 := printer_poll($p122, $p9);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $M.24 := 1bv32;
    call {:si_unique_call 752} {:cexpr "ldv_state_variable_2"} boogie_si_record_bv32(1bv32);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb91:
    assume $i84 == 1bv1;
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i110 := $M.24;
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i111 := $eq.bv32($i110, 1bv32);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i111 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $i115 := $M.24;
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i116 := $eq.bv32($i115, 2bv32);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i116 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb115:
    assume $i116 == 1bv1;
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $p117 := $M.27;
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i118 := $load.bytes.bv32($M.28, $p2);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} vslice_dummy_var_84 := printer_fsync($p117, $i118);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $M.24 := 2bv32;
    call {:si_unique_call 750} {:cexpr "ldv_state_variable_2"} boogie_si_record_bv32(2bv32);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb112:
    assume $i111 == 1bv1;
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $p112 := $M.27;
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i113 := $load.bytes.bv32($M.28, $p2);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} vslice_dummy_var_83 := printer_fsync($p112, $i113);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $M.24 := 1bv32;
    call {:si_unique_call 748} {:cexpr "ldv_state_variable_2"} boogie_si_record_bv32(1bv32);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb82:
    assume $i80 == 1bv1;
    assume {:verifier.code 0} true;
    $i85 := $slt.bv32($i79, 1bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i85 == 1bv1);
    assume {:verifier.code 0} true;
    $i86 := $slt.bv32($i79, 2bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i86 == 1bv1);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i105 := $M.24;
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i106 := $eq.bv32($i105, 2bv32);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i106 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb109:
    assume $i106 == 1bv1;
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $p107 := $M.27;
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i108 := $load.bytes.bv64($M.28, $p0);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} vslice_dummy_var_82 := printer_read($p107, $p7, $i108, $p11);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $M.24 := 2bv32;
    call {:si_unique_call 746} {:cexpr "ldv_state_variable_2"} boogie_si_record_bv32(2bv32);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb95:
    assume $i86 == 1bv1;
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i98 := $M.24;
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i99 := $eq.bv32($i98, 2bv32);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i99 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb106:
    assume $i99 == 1bv1;
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $p100 := $M.26;
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $p101 := $M.27;
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} vslice_dummy_var_81 := printer_close($p100, $p101);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $M.24 := 1bv32;
    call {:si_unique_call 743} {:cexpr "ldv_state_variable_2"} boogie_si_record_bv32(1bv32);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i103 := $M.31;
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i104 := $sub.bv32($i103, 1bv32);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $M.31 := $i104;
    call {:si_unique_call 744} {:cexpr "ref_cnt"} boogie_si_record_bv32($i104);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb93:
    assume $i85 == 1bv1;
    assume {:verifier.code 0} true;
    $i87 := $eq.bv32($i79, 0bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    assume !($i87 == 1bv1);
    goto $bb90;

  $bb97:
    assume $i87 == 1bv1;
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i88 := $M.24;
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i89 := $eq.bv32($i88, 1bv32);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i89 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $i93 := $M.24;
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i94 := $eq.bv32($i93, 2bv32);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i94 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb102:
    assume $i94 == 1bv1;
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $p95 := $M.27;
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i96 := $load.bytes.bv64($M.28, $p3);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} vslice_dummy_var_80 := printer_write($p95, $p14, $i96, $p13);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $M.24 := 2bv32;
    call {:si_unique_call 741} {:cexpr "ldv_state_variable_2"} boogie_si_record_bv32(2bv32);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb99:
    assume $i89 == 1bv1;
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $p90 := $M.27;
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i91 := $load.bytes.bv64($M.28, $p3);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} vslice_dummy_var_79 := printer_write($p90, $p14, $i91, $p13);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $M.24 := 1bv32;
    call {:si_unique_call 739} {:cexpr "ldv_state_variable_2"} boogie_si_record_bv32(1bv32);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb5:
    assume $i27 == 1bv1;
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i60 := $M.32;
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i61 := $ne.bv32($i60, 0bv32);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i61 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb49:
    assume $i61 == 1bv1;
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 1} true;
    call {:si_unique_call 722} $i62 := __VERIFIER_nondet_int();
    call {:si_unique_call 723} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i62);
    call {:si_unique_call 724} {:cexpr "tmp___7"} boogie_si_record_bv32($i62);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i63 := $slt.bv32($i62, 1bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i63 == 1bv1);
    assume {:verifier.code 0} true;
    $i64 := $eq.bv32($i62, 1bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i64 == 1bv1);
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} ldv_stop();
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb54:
    assume $i64 == 1bv1;
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i70 := $M.32;
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i71 := $eq.bv32($i70, 1bv32);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i71 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb67:
    assume $i71 == 1bv1;
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} $i72 := init();
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $M.35 := $i72;
    call {:si_unique_call 729} {:cexpr "ldv_retval_2"} boogie_si_record_bv32($i72);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i73 := $M.35;
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i74 := $ne.bv32($i73, 0bv32);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i74 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i75 := $M.35;
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i76 := $eq.bv32($i75, 0bv32);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i76 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb72:
    assume $i76 == 1bv1;
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $M.32 := 2bv32;
    call {:si_unique_call 731} {:cexpr "ldv_state_variable_0"} boogie_si_record_bv32(2bv32);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $M.30 := 1bv32;
    call {:si_unique_call 732} {:cexpr "ldv_state_variable_1"} boogie_si_record_bv32(1bv32);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} ldv_initialize_usb_gadget_driver_1();
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb69:
    assume $i74 == 1bv1;
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $M.32 := 3bv32;
    call {:si_unique_call 730} {:cexpr "ldv_state_variable_0"} boogie_si_record_bv32(3bv32);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} ldv_check_final_state();
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $r := 0bv32;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb52:
    assume $i63 == 1bv1;
    assume {:verifier.code 0} true;
    $i65 := $eq.bv32($i62, 0bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i65 == 1bv1);
    goto $bb56;

  $bb57:
    assume $i65 == 1bv1;
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i66 := $M.32;
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i67 := $eq.bv32($i66, 2bv32);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i67 == 1bv1);
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb59:
    assume $i67 == 1bv1;
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i68 := $M.31;
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i69 := $eq.bv32($i68, 0bv32);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i69 == 1bv1);
    goto $bb61;

  $bb62:
    assume $i69 == 1bv1;
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} cleanup();
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $M.32 := 3bv32;
    call {:si_unique_call 726} {:cexpr "ldv_state_variable_0"} boogie_si_record_bv32(3bv32);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    goto $bb64;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i26 == 1bv1;
    assume {:verifier.code 0} true;
    $i29 := $eq.bv32($i25, 0bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i29 == 1bv1);
    goto $bb9;

  $bb10:
    assume $i29 == 1bv1;
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i30 := $M.30;
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i31 := $ne.bv32($i30, 0bv32);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i31 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb12:
    assume $i31 == 1bv1;
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 1} true;
    call {:si_unique_call 706} $i32 := __VERIFIER_nondet_int();
    call {:si_unique_call 707} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i32);
    call {:si_unique_call 708} {:cexpr "tmp___6"} boogie_si_record_bv32($i32);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i33 := $slt.bv32($i32, 2bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i33 == 1bv1);
    assume {:verifier.code 0} true;
    $i34 := $slt.bv32($i32, 3bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i34 == 1bv1);
    assume {:verifier.code 0} true;
    $i35 := $eq.bv32($i32, 3bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i35 == 1bv1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} ldv_stop();
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb19:
    assume $i35 == 1bv1;
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i54 := $M.30;
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i55 := $eq.bv32($i54, 2bv32);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i55 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb39:
    assume $i55 == 1bv1;
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p56 := $M.29;
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $i57 := printer_setup($p56, $p6);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $M.34 := $i57;
    call {:si_unique_call 719} {:cexpr "ldv_retval_0"} boogie_si_record_bv32($i57);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i58 := $M.34;
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $i59 := $eq.bv32($i58, 0bv32);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i59 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume $i59 == 1bv1;
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $M.30 := 3bv32;
    call {:si_unique_call 720} {:cexpr "ldv_state_variable_1"} boogie_si_record_bv32(3bv32);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb17:
    assume $i34 == 1bv1;
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i46 := $M.30;
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i47 := $eq.bv32($i46, 1bv32);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i47 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb33:
    assume $i47 == 1bv1;
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p48 := $M.29;
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} $i49 := printer_bind($p48);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $M.33 := $i49;
    call {:si_unique_call 715} {:cexpr "ldv_retval_1"} boogie_si_record_bv32($i49);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i50 := $M.33;
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i51 := $eq.bv32($i50, 0bv32);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i51 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb35:
    assume $i51 == 1bv1;
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $M.30 := 2bv32;
    call {:si_unique_call 716} {:cexpr "ldv_state_variable_1"} boogie_si_record_bv32(2bv32);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i52 := $M.31;
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i53 := $add.bv32($i52, 1bv32);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $M.31 := $i53;
    call {:si_unique_call 717} {:cexpr "ref_cnt"} boogie_si_record_bv32($i53);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb15:
    assume $i33 == 1bv1;
    assume {:verifier.code 0} true;
    $i36 := $slt.bv32($i32, 1bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i36 == 1bv1);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i41 := $M.30;
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i42 := $eq.bv32($i41, 2bv32);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i42 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb30:
    assume $i42 == 1bv1;
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p43 := $M.29;
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} printer_unbind($p43);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $M.30 := 1bv32;
    call {:si_unique_call 712} {:cexpr "ldv_state_variable_1"} boogie_si_record_bv32(1bv32);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i44 := $M.31;
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i45 := $sub.bv32($i44, 1bv32);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $M.31 := $i45;
    call {:si_unique_call 713} {:cexpr "ref_cnt"} boogie_si_record_bv32($i45);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb22:
    assume $i36 == 1bv1;
    assume {:verifier.code 0} true;
    $i37 := $eq.bv32($i32, 0bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i37 == 1bv1);
    goto $bb21;

  $bb24:
    assume $i37 == 1bv1;
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i38 := $M.30;
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $i39 := $eq.bv32($i38, 3bv32);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb26:
    assume $i39 == 1bv1;
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $p40 := $M.29;
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} printer_disconnect($p40);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $M.30 := 2bv32;
    call {:si_unique_call 710} {:cexpr "ldv_state_variable_1"} boogie_si_record_bv32(2bv32);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb48_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 703} $i25 := __VERIFIER_nondet_int();
    call {:si_unique_call 704} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i25);
    call {:si_unique_call 705} {:cexpr "tmp___5"} boogie_si_record_bv32($i25);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0bv64, 242528bv64);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0bv64, 243560bv64);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const cleanup: ref;

axiom cleanup == $sub.ref(0bv64, 244592bv64);

procedure cleanup();
  free requires assertsPassed;
  modifies $M.37, $M.38, assertsPassed, $M.39;



implementation cleanup()
{
  var $p0: ref;
  var $i1: bv32;
  var $i2: bv32;
  var $i3: bv1;
  var vslice_dummy_var_88: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} mutex_lock_nested($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64)), 0bv32);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $p0 := $M.7;
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} ldv_class_destroy_14($p0);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i1 := $M.8;
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} ldv_unregister_chrdev_region_15($i1, 2bv32);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $i2 := ldv_usb_gadget_unregister_driver_16(printer_driver);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    call {:si_unique_call 767} {:cexpr "status"} boogie_si_record_bv32($i2);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i3 := $ne.bv32($i2, 0bv32);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} mutex_unlock($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64)));
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1bv1;
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} vslice_dummy_var_88 := printk.ref.ref.bv32(.str.35, .str.1, $i2);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const init: ref;

axiom init == $sub.ref(0bv64, 245624bv64);

procedure init() returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.7, $M.37, assertsPassed, $M.38, $M.39;



implementation init() returns ($r: bv32)
{
  var $p0: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: bv64;
  var $i5: bv1;
  var $p6: ref;
  var $p7: ref;
  var $i8: bv64;
  var $i9: bv32;
  var $i12: bv32;
  var $i13: bv1;
  var $p15: ref;
  var $i16: bv32;
  var $i17: bv1;
  var $p18: ref;
  var $i19: bv32;
  var $i11: bv32;
  var vslice_dummy_var_89: bv32;
  var vslice_dummy_var_90: bv32;
  var vslice_dummy_var_91: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} $p0 := ldv_create_class();
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $M.7 := $p0;
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $p2 := $M.7;
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} $i4 := IS_ERR($p3);
    call {:si_unique_call 772} {:cexpr "tmp___1"} boogie_si_record_bv64($i4);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i5 := $ne.bv64($i4, 0bv64);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $i12 := ldv_alloc_chrdev_region_9(g_printer_devno, 0bv32, 1bv32, .str.37);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    call {:si_unique_call 778} {:cexpr "status"} boogie_si_record_bv32($i12);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $i13 := $ne.bv32($i12, 0bv32);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} $i16 := ldv_usb_gadget_register_driver_11(printer_driver);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 782} {:cexpr "status"} boogie_si_record_bv32($i16);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i17 := $ne.bv32($i16, 0bv32);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i11 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb8:
    assume $i17 == 1bv1;
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $p18 := $M.7;
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} ldv_class_destroy_12($p18);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $i19 := $M.8;
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} ldv_unregister_chrdev_region_13($i19, 1bv32);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} vslice_dummy_var_91 := printk.ref.ref.bv32(.str.39, .str.1, $i16);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i13 == 1bv1;
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} vslice_dummy_var_90 := printk.ref.ref.bv32(.str.38, .str.1, $i12);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $p15 := $M.7;
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} ldv_class_destroy_10($p15);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i11 := $i12;
    goto $bb3;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1bv1;
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $p6 := $M.7;
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} $i8 := PTR_ERR($p7);
    call {:si_unique_call 774} {:cexpr "tmp___0"} boogie_si_record_bv64($i8);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i9 := $trunc.bv64.bv32($i8);
    call {:si_unique_call 775} {:cexpr "status"} boogie_si_record_bv32($i9);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} vslice_dummy_var_89 := printk.ref.ref.bv32(.str.36, .str.1, $i9);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb3;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0bv64, 246656bv64);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: bv32;
  var $i1: bv1;
  var $i2: bv32;
  var $i3: bv1;
  var $i4: bv32;
  var $i5: bv1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i0 := $M.37;
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i1 := $ne.bv32($i0, 0bv32);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.38;
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i3 := $ne.bv32($i2, 0bv32);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.39;
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i5 := $ne.bv32($i4, 0bv32);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i5 == 1bv1;
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} ldv_error();
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1bv1;
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} ldv_error();
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1bv1;
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} ldv_error();
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0bv64, 247688bv64);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 789} __VERIFIER_error();
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;
}



const ldv_create_class: ref;

axiom ldv_create_class == $sub.ref(0bv64, 248720bv64);

procedure ldv_create_class() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.37, assertsPassed;



implementation ldv_create_class() returns ($r: ref)
{
  var $p0: ref;
  var $i1: bv64;
  var $i2: bv1;
  var $i3: bv32;
  var $i4: bv1;
  var $i5: bv32;
  var $i6: bv1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} $p0 := ldv_undef_ptr();
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.bv64($p0);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i2 := $ule.bv64($i1, 2012bv64);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;

  $bb1:
    assume $i2 == 1bv1;
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i3 := $M.39;
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i4 := $ne.bv32($i3, 0bv32);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $M.37;
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i6 := $ne.bv32($i5, 0bv32);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $M.37 := 1bv32;
    call {:si_unique_call 793} {:cexpr "ldv_usb_gadget_class"} boogie_si_record_bv32(1bv32);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i6 == 1bv1;
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} ldv_error();
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i4 == 1bv1;
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} ldv_error();
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0bv64, 249752bv64);

procedure PTR_ERR($p0: ref) returns ($r: bv64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: bv64)
{
  var $i1: bv64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 795} {:cexpr "tmp"} boogie_si_record_bv64($i1);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_alloc_chrdev_region_9: ref;

axiom ldv_alloc_chrdev_region_9 == $sub.ref(0bv64, 250784bv64);

procedure ldv_alloc_chrdev_region_9($p0: ref, $i1: bv32, $i2: bv32, $p3: ref) returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.38, assertsPassed;



implementation ldv_alloc_chrdev_region_9($p0: ref, $i1: bv32, $i2: bv32, $p3: ref) returns ($r: bv32)
{
  var $i4: bv32;
  var $i5: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} {:cexpr "ldv_alloc_chrdev_region_9:arg:ldv_func_arg2"} boogie_si_record_bv32($i1);
    call {:si_unique_call 797} {:cexpr "ldv_alloc_chrdev_region_9:arg:ldv_func_arg3"} boogie_si_record_bv32($i2);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} $i4 := alloc_chrdev_region($p0, $i1, $i2, $p3);
    call {:si_unique_call 799} {:cexpr "tmp"} boogie_si_record_bv32($i4);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} $i5 := ldv_register_chrdev_region();
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    call {:si_unique_call 801} {:cexpr "tmp___0"} boogie_si_record_bv32($i5);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const ldv_class_destroy_10: ref;

axiom ldv_class_destroy_10 == $sub.ref(0bv64, 251816bv64);

procedure ldv_class_destroy_10($p0: ref);
  free requires assertsPassed;
  modifies $M.37, assertsPassed;



implementation ldv_class_destroy_10($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} class_destroy($p0);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} ldv_unregister_class();
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const ldv_usb_gadget_register_driver_11: ref;

axiom ldv_usb_gadget_register_driver_11 == $sub.ref(0bv64, 252848bv64);

procedure ldv_usb_gadget_register_driver_11($p0: ref) returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_usb_gadget_register_driver_11($p0: ref) returns ($r: bv32)
{
  var $i1: bv32;
  var $i2: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $i1 := usb_gadget_register_driver($p0);
    call {:si_unique_call 805} {:cexpr "tmp"} boogie_si_record_bv32($i1);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $i2 := ldv_register_usb_gadget();
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 807} {:cexpr "tmp___0"} boogie_si_record_bv32($i2);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const ldv_class_destroy_12: ref;

axiom ldv_class_destroy_12 == $sub.ref(0bv64, 253880bv64);

procedure ldv_class_destroy_12($p0: ref);
  free requires assertsPassed;
  modifies $M.37, assertsPassed;



implementation ldv_class_destroy_12($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} class_destroy($p0);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} ldv_unregister_class();
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const ldv_unregister_chrdev_region_13: ref;

axiom ldv_unregister_chrdev_region_13 == $sub.ref(0bv64, 254912bv64);

procedure ldv_unregister_chrdev_region_13($i0: bv32, $i1: bv32);
  free requires assertsPassed;
  modifies $M.38, assertsPassed;



implementation ldv_unregister_chrdev_region_13($i0: bv32, $i1: bv32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} {:cexpr "ldv_unregister_chrdev_region_13:arg:ldv_func_arg1"} boogie_si_record_bv32($i0);
    call {:si_unique_call 811} {:cexpr "ldv_unregister_chrdev_region_13:arg:ldv_func_arg2"} boogie_si_record_bv32($i1);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} unregister_chrdev_region($i0, $i1);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} ldv_unregister_chrdev_region();
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const unregister_chrdev_region: ref;

axiom unregister_chrdev_region == $sub.ref(0bv64, 255944bv64);

procedure unregister_chrdev_region($i0: bv32, $i1: bv32);
  free requires assertsPassed;



implementation unregister_chrdev_region($i0: bv32, $i1: bv32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} {:cexpr "unregister_chrdev_region:arg:arg0"} boogie_si_record_bv32($i0);
    call {:si_unique_call 815} {:cexpr "unregister_chrdev_region:arg:arg1"} boogie_si_record_bv32($i1);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    return;
}



const ldv_unregister_chrdev_region: ref;

axiom ldv_unregister_chrdev_region == $sub.ref(0bv64, 256976bv64);

procedure ldv_unregister_chrdev_region();
  free requires assertsPassed;
  modifies $M.38, assertsPassed;



implementation ldv_unregister_chrdev_region()
{
  var $i0: bv32;
  var $i1: bv1;
  var $i2: bv32;
  var $i3: bv1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i0 := $M.39;
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i1 := $ne.bv32($i0, 0bv32);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.38;
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i3 := $ne.bv32($i2, 1bv32);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $M.38 := 0bv32;
    call {:si_unique_call 818} {:cexpr "ldv_usb_gadget_chrdev"} boogie_si_record_bv32(0bv32);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i3 == 1bv1;
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} ldv_error();
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1bv1;
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} ldv_error();
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_70:
    assume !assertsPassed;
    return;
}



const class_destroy: ref;

axiom class_destroy == $sub.ref(0bv64, 258008bv64);

procedure class_destroy($p0: ref);
  free requires assertsPassed;



implementation class_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    return;
}



const ldv_unregister_class: ref;

axiom ldv_unregister_class == $sub.ref(0bv64, 259040bv64);

procedure ldv_unregister_class();
  free requires assertsPassed;
  modifies $M.37, assertsPassed;



implementation ldv_unregister_class()
{
  var $i0: bv32;
  var $i1: bv1;
  var $i2: bv32;
  var $i3: bv1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i0 := $M.39;
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i1 := $ne.bv32($i0, 0bv32);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.37;
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i3 := $ne.bv32($i2, 1bv32);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $M.37 := 0bv32;
    call {:si_unique_call 821} {:cexpr "ldv_usb_gadget_class"} boogie_si_record_bv32(0bv32);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i3 == 1bv1;
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} ldv_error();
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1bv1;
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} ldv_error();
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const usb_gadget_register_driver: ref;

axiom usb_gadget_register_driver == $sub.ref(0bv64, 260072bv64);

procedure usb_gadget_register_driver($p0: ref) returns ($r: bv32);
  free requires assertsPassed;



implementation usb_gadget_register_driver($p0: ref) returns ($r: bv32)
{
  var $i1: bv32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 1} true;
    call {:si_unique_call 822} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 823} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i1);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_register_usb_gadget: ref;

axiom ldv_register_usb_gadget == $sub.ref(0bv64, 261104bv64);

procedure ldv_register_usb_gadget() returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_register_usb_gadget() returns ($r: bv32)
{
  var $i0: bv32;
  var $i1: bv1;
  var $i2: bv32;
  var $i3: bv1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $i0 := ldv_undef_int_nonpositive();
    call {:si_unique_call 825} {:cexpr "is_reg"} boogie_si_record_bv32($i0);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i1 := $eq.bv32($i0, 0bv32);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1bv1;
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i2 := $M.39;
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $i3 := $ne.bv32($i2, 0bv32);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i3 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $M.39 := 1bv32;
    call {:si_unique_call 827} {:cexpr "ldv_usb_gadget"} boogie_si_record_bv32(1bv32);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i3 == 1bv1;
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} ldv_error();
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_82:
    assume !assertsPassed;
    return;
}



const ldv_undef_int_nonpositive: ref;

axiom ldv_undef_int_nonpositive == $sub.ref(0bv64, 262136bv64);

procedure ldv_undef_int_nonpositive() returns ($r: bv32);
  free requires assertsPassed;



implementation ldv_undef_int_nonpositive() returns ($r: bv32)
{
  var $i0: bv32;
  var $i1: bv1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $i0 := ldv_undef_int();
    call {:si_unique_call 829} {:cexpr "tmp"} boogie_si_record_bv32($i0);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i1 := $sgt.bv32($i0, 0bv32);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1bv1;
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} ldv_stop();
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const alloc_chrdev_region: ref;

axiom alloc_chrdev_region == $sub.ref(0bv64, 263168bv64);

procedure alloc_chrdev_region($p0: ref, $i1: bv32, $i2: bv32, $p3: ref) returns ($r: bv32);
  free requires assertsPassed;



implementation alloc_chrdev_region($p0: ref, $i1: bv32, $i2: bv32, $p3: ref) returns ($r: bv32)
{
  var $i4: bv32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 831} {:cexpr "alloc_chrdev_region:arg:arg1"} boogie_si_record_bv32($i1);
    call {:si_unique_call 832} {:cexpr "alloc_chrdev_region:arg:arg2"} boogie_si_record_bv32($i2);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 1} true;
    call {:si_unique_call 833} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 834} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i4);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_register_chrdev_region: ref;

axiom ldv_register_chrdev_region == $sub.ref(0bv64, 264200bv64);

procedure ldv_register_chrdev_region() returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.38, assertsPassed;



implementation ldv_register_chrdev_region() returns ($r: bv32)
{
  var $i0: bv32;
  var $i1: bv1;
  var $i2: bv32;
  var $i3: bv1;
  var $i4: bv32;
  var $i5: bv1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $i0 := ldv_undef_int_nonpositive();
    call {:si_unique_call 836} {:cexpr "is_reg"} boogie_si_record_bv32($i0);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $i1 := $eq.bv32($i0, 0bv32);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1bv1;
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $i2 := $M.39;
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i3 := $ne.bv32($i2, 0bv32);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i3 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i4 := $M.38;
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i5 := $ne.bv32($i4, 0bv32);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $M.38 := 1bv32;
    call {:si_unique_call 839} {:cexpr "ldv_usb_gadget_chrdev"} boogie_si_record_bv32(1bv32);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i5 == 1bv1;
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} ldv_error();
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i3 == 1bv1;
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} ldv_error();
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_85:
    assume !assertsPassed;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0bv64, 265232bv64);

procedure ldv_ptr_err($p0: ref) returns ($r: bv64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: bv64)
{
  var $i1: bv64;
  var $i2: bv64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.bv64($p0);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $i2 := $sub.bv64(2012bv64, $i1);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_class_destroy_14: ref;

axiom ldv_class_destroy_14 == $sub.ref(0bv64, 266264bv64);

procedure ldv_class_destroy_14($p0: ref);
  free requires assertsPassed;
  modifies $M.37, assertsPassed;



implementation ldv_class_destroy_14($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} class_destroy($p0);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} ldv_unregister_class();
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;
}



const ldv_unregister_chrdev_region_15: ref;

axiom ldv_unregister_chrdev_region_15 == $sub.ref(0bv64, 267296bv64);

procedure ldv_unregister_chrdev_region_15($i0: bv32, $i1: bv32);
  free requires assertsPassed;
  modifies $M.38, assertsPassed;



implementation ldv_unregister_chrdev_region_15($i0: bv32, $i1: bv32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} {:cexpr "ldv_unregister_chrdev_region_15:arg:ldv_func_arg1"} boogie_si_record_bv32($i0);
    call {:si_unique_call 843} {:cexpr "ldv_unregister_chrdev_region_15:arg:ldv_func_arg2"} boogie_si_record_bv32($i1);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} unregister_chrdev_region($i0, $i1);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} ldv_unregister_chrdev_region();
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;
}



const ldv_usb_gadget_unregister_driver_16: ref;

axiom ldv_usb_gadget_unregister_driver_16 == $sub.ref(0bv64, 268328bv64);

procedure ldv_usb_gadget_unregister_driver_16($p0: ref) returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_usb_gadget_unregister_driver_16($p0: ref) returns ($r: bv32)
{
  var $i1: bv32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} $i1 := usb_gadget_unregister_driver($p0);
    call {:si_unique_call 847} {:cexpr "tmp"} boogie_si_record_bv32($i1);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} ldv_unregister_usb_gadget();
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;
}



const usb_gadget_unregister_driver: ref;

axiom usb_gadget_unregister_driver == $sub.ref(0bv64, 269360bv64);

procedure usb_gadget_unregister_driver($p0: ref) returns ($r: bv32);
  free requires assertsPassed;



implementation usb_gadget_unregister_driver($p0: ref) returns ($r: bv32)
{
  var $i1: bv32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 1} true;
    call {:si_unique_call 849} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 850} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i1);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_unregister_usb_gadget: ref;

axiom ldv_unregister_usb_gadget == $sub.ref(0bv64, 270392bv64);

procedure ldv_unregister_usb_gadget();
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_unregister_usb_gadget()
{
  var $i0: bv32;
  var $i1: bv1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $i0 := $M.39;
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i1 := $ne.bv32($i0, 1bv32);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.39 := 0bv32;
    call {:si_unique_call 852} {:cexpr "ldv_usb_gadget"} boogie_si_record_bv32(0bv32);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1bv1;
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} ldv_error();
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_100:
    assume !assertsPassed;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0bv64, 271424bv64);

procedure __VERIFIER_assume($i0: bv32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: bv32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 853} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_bv32($i0);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 1} true;
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0bv64, 272456bv64);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.bv32($p0: ref, p.1: bv32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0bv64, 273488bv64);

procedure __SMACK_dummy($i0: bv32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0bv64, 274520bv64);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0bv64, 275552bv64);

procedure __SMACK_check_overflow($i0: bv32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0bv64, 276584bv64);

procedure __SMACK_nondet_char() returns ($r: bv8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0bv64, 277616bv64);

procedure __SMACK_nondet_signed_char() returns ($r: bv8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0bv64, 278648bv64);

procedure __SMACK_nondet_unsigned_char() returns ($r: bv8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0bv64, 279680bv64);

procedure __SMACK_nondet_short() returns ($r: bv16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0bv64, 280712bv64);

procedure __SMACK_nondet_signed_short() returns ($r: bv16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0bv64, 281744bv64);

procedure __SMACK_nondet_signed_short_int() returns ($r: bv16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0bv64, 282776bv64);

procedure __SMACK_nondet_unsigned_short() returns ($r: bv16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0bv64, 283808bv64);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: bv16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0bv64, 284840bv64);

procedure __VERIFIER_nondet_int() returns ($r: bv32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: bv32)
{
  var $i0: bv32;
  var $i1: bv1;
  var $i3: bv1;
  var $i2: bv1;
  var $i4: bv32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 1} true;
    call {:si_unique_call 854} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 855} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_bv32($i0);
    call {:si_unique_call 856} {:cexpr "x"} boogie_si_record_bv32($i0);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $i1 := $sge.bv32($i0, $sub.bv32(0bv32, 2147483648bv32));
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i2 := 0bv1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1bv1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 1} true;
    $i4 := $zext.bv1.bv32($i2);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 1} true;
    call {:si_unique_call 857} __VERIFIER_assume($i4);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1bv1;
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 1} true;
    $i3 := $sle.bv32($i0, 2147483647bv32);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0bv64, 285872bv64);

procedure __SMACK_nondet_int() returns ($r: bv32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0bv64, 286904bv64);

procedure __SMACK_nondet_signed_int() returns ($r: bv32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0bv64, 287936bv64);

procedure __SMACK_nondet_unsigned() returns ($r: bv32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0bv64, 288968bv64);

procedure __SMACK_nondet_unsigned_int() returns ($r: bv32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0bv64, 290000bv64);

procedure __SMACK_nondet_long() returns ($r: bv64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0bv64, 291032bv64);

procedure __SMACK_nondet_long_int() returns ($r: bv64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0bv64, 292064bv64);

procedure __SMACK_nondet_signed_long() returns ($r: bv64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0bv64, 293096bv64);

procedure __SMACK_nondet_signed_long_int() returns ($r: bv64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0bv64, 294128bv64);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: bv64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: bv64)
{
  var $i0: bv64;
  var $i1: bv64;
  var $i2: bv64;
  var $i3: bv1;
  var $i5: bv1;
  var $i6: bv1;
  var $i4: bv1;
  var $i7: bv32;
  var $i8: bv1;
  var $i10: bv1;
  var $i9: bv1;
  var $i11: bv32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 1} true;
    call {:si_unique_call 858} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 859} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_bv64($i0);
    call {:si_unique_call 860} {:cexpr "x"} boogie_si_record_bv64($i0);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 1} true;
    call {:si_unique_call 861} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 862} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_bv64($i1);
    call {:si_unique_call 863} {:cexpr "min"} boogie_si_record_bv64($i1);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 1} true;
    call {:si_unique_call 864} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 865} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_bv64($i2);
    call {:si_unique_call 866} {:cexpr "max"} boogie_si_record_bv64($i2);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i3 := $eq.bv64($i1, 0bv64);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i4 := 0bv1;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1bv1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 1} true;
    $i7 := $zext.bv1.bv32($i4);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 1} true;
    call {:si_unique_call 867} __VERIFIER_assume($i7);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i8 := $uge.bv64($i0, $i1);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i9 := 0bv1;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1bv1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 1} true;
    $i11 := $zext.bv1.bv32($i9);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 1} true;
    call {:si_unique_call 868} __VERIFIER_assume($i11);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1bv1;
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 1} true;
    $i10 := $ule.bv64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1bv1;
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i5 := $uge.bv64($i2, 18446744073709551615bv64);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i4 := 0bv1;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1bv1);
    goto $bb3;

  $bb4:
    assume $i5 == 1bv1;
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 1} true;
    $i6 := $ule.bv64($i2, 18446744073709551615bv64);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0bv64, 295160bv64);

procedure __SMACK_nondet_unsigned_long() returns ($r: bv64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0bv64, 296192bv64);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: bv64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0bv64, 297224bv64);

procedure __SMACK_nondet_long_long() returns ($r: bv64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0bv64, 298256bv64);

procedure __SMACK_nondet_long_long_int() returns ($r: bv64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0bv64, 299288bv64);

procedure __SMACK_nondet_signed_long_long() returns ($r: bv64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0bv64, 300320bv64);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: bv64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0bv64, 301352bv64);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: bv64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0bv64, 302384bv64);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: bv64);



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0bv64, 303416bv64);

procedure __VERIFIER_nondet_ulong() returns ($r: bv64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: bv64)
{
  var $i0: bv64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 1} true;
    call {:si_unique_call 869} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 870} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_bv64($i0);
    call {:si_unique_call 871} {:cexpr "x"} boogie_si_record_bv64($i0);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0bv64, 304448bv64);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 1} true;
    call {:si_unique_call 872} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 873} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0bv64, 305480bv64);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0bv64, 306512bv64);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 874} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 875} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0bv64, 307544bv64);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0bv64, 308576bv64);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0bv64, 309608bv64);

procedure calloc($i0: bv64, $i1: bv64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: bv64, $i1: bv64) returns ($r: ref)
{
  var $i2: bv32;
  var $i3: bv1;
  var $i5: bv64;
  var $p6: ref;
  var $i7: bv64;
  var $p4: ref;
  var cmdloc_dummy_var_19: [ref]bv8;
  var cmdloc_dummy_var_20: [ref]bv8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 876} {:cexpr "calloc:arg:num"} boogie_si_record_bv64($i0);
    call {:si_unique_call 877} {:cexpr "calloc:arg:size"} boogie_si_record_bv64($i1);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 1} true;
    call {:si_unique_call 878} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 879} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i2);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i3 := $ne.bv32($i2, 0bv32);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1bv1);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $i5 := $mul.bv64($i0, $i1);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $p6 := malloc($i5);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i7 := $mul.bv64($i0, $i1);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_19 := $M.0;
    call {:si_unique_call 881} cmdloc_dummy_var_20 := $memset.bv8(cmdloc_dummy_var_19, $p6, 0bv8, $i7, $zext.bv32.bv64(1bv32), 0bv1 == 1bv1);
    $M.0 := cmdloc_dummy_var_20;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1bv1;
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0bv64, 310640bv64);

procedure llvm.dbg.value($p0: ref, $i1: bv64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0bv64, 311672bv64);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.29, $M.26, $M.27, $M.30, $M.31, $M.32, $M.24, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.0, $M.41, $M.23, $M.16, $M.15, $M.14, $M.13, $M.12, $M.11, $M.10, $M.9, $M.8, $M.7, $M.25, $M.88, $M.89;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 882} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_bv32(1bv32);
    $M.29 := $0.ref;
    $M.26 := $0.ref;
    $M.27 := $0.ref;
    $M.30 := 0bv32;
    call {:si_unique_call 883} {:cexpr "ldv_state_variable_1"} boogie_si_record_bv32(0bv32);
    $M.31 := 0bv32;
    call {:si_unique_call 884} {:cexpr "ref_cnt"} boogie_si_record_bv32(0bv32);
    $M.32 := 0bv32;
    call {:si_unique_call 885} {:cexpr "ldv_state_variable_0"} boogie_si_record_bv32(0bv32);
    $M.24 := 0bv32;
    call {:si_unique_call 886} {:cexpr "ldv_state_variable_2"} boogie_si_record_bv32(0bv32);
    $M.33 := 0bv32;
    call {:si_unique_call 887} {:cexpr "ldv_retval_1"} boogie_si_record_bv32(0bv32);
    $M.34 := 0bv32;
    call {:si_unique_call 888} {:cexpr "ldv_retval_0"} boogie_si_record_bv32(0bv32);
    $M.35 := 0bv32;
    call {:si_unique_call 889} {:cexpr "ldv_retval_2"} boogie_si_record_bv32(0bv32);
    $M.36 := 0bv32;
    call {:si_unique_call 890} {:cexpr "ldv_retval_3"} boogie_si_record_bv32(0bv32);
    $M.37 := 0bv32;
    call {:si_unique_call 891} {:cexpr "ldv_usb_gadget_class"} boogie_si_record_bv32(0bv32);
    $M.38 := 0bv32;
    call {:si_unique_call 892} {:cexpr "ldv_usb_gadget_chrdev"} boogie_si_record_bv32(0bv32);
    $M.39 := 0bv32;
    call {:si_unique_call 893} {:cexpr "ldv_usb_gadget"} boogie_si_record_bv32(0bv32);
    $M.0 := $store.bytes.bv32($M.0, printer_mutex, 1bv32);
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(printer_mutex, $mul.ref(0bv64, 152bv64)), $mul.ref(8bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), 0bv32);
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(printer_mutex, $mul.ref(0bv64, 152bv64)), $mul.ref(8bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(4bv64, 1bv64)), $sub.bv32(0bv32, 559067475bv32));
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(printer_mutex, $mul.ref(0bv64, 152bv64)), $mul.ref(8bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $sub.bv32(0bv32, 1bv32));
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(printer_mutex, $mul.ref(0bv64, 152bv64)), $mul.ref(8bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(16bv64, 1bv64)), $i2p.bv64.ref($sub.bv64(0bv64, 1bv64)));
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(printer_mutex, $mul.ref(0bv64, 152bv64)), $mul.ref(8bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(printer_mutex, $mul.ref(0bv64, 152bv64)), $mul.ref(8bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(printer_mutex, $mul.ref(0bv64, 152bv64)), $mul.ref(8bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(16bv64, 1bv64)), .str.52);
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(printer_mutex, $mul.ref(0bv64, 152bv64)), $mul.ref(8bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), 0bv32);
    $M.0 := $store.bytes.bv64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(printer_mutex, $mul.ref(0bv64, 152bv64)), $mul.ref(8bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(32bv64, 1bv64)), 0bv64);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref(printer_mutex, $mul.ref(0bv64, 152bv64)), $mul.ref(72bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $add.ref(printer_mutex, $mul.ref(72bv64, 1bv64)));
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref(printer_mutex, $mul.ref(0bv64, 152bv64)), $mul.ref(72bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $add.ref(printer_mutex, $mul.ref(72bv64, 1bv64)));
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(printer_mutex, $mul.ref(0bv64, 152bv64)), $mul.ref(88bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(printer_mutex, $mul.ref(0bv64, 152bv64)), $mul.ref(96bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(printer_mutex, $mul.ref(0bv64, 152bv64)), $mul.ref(104bv64, 1bv64)), printer_mutex);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref(printer_mutex, $mul.ref(0bv64, 152bv64)), $mul.ref(112bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref(printer_mutex, $mul.ref(0bv64, 152bv64)), $mul.ref(112bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref(printer_mutex, $mul.ref(0bv64, 152bv64)), $mul.ref(112bv64, 1bv64)), $mul.ref(16bv64, 1bv64)), .str.53);
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref(printer_mutex, $mul.ref(0bv64, 152bv64)), $mul.ref(112bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), 0bv32);
    $M.0 := $store.bytes.bv64($M.0, $add.ref($add.ref($add.ref(printer_mutex, $mul.ref(0bv64, 152bv64)), $mul.ref(112bv64, 1bv64)), $mul.ref(32bv64, 1bv64)), 0bv64);
    $M.41 := $store.bytes.bv8($M.41, shortname, 112bv8);
    $M.41 := $store.bytes.bv8($M.41, $add.ref($add.ref(shortname, $mul.ref(0bv64, 8bv64)), $mul.ref(1bv64, 1bv64)), 114bv8);
    $M.41 := $store.bytes.bv8($M.41, $add.ref($add.ref(shortname, $mul.ref(0bv64, 8bv64)), $mul.ref(2bv64, 1bv64)), 105bv8);
    $M.41 := $store.bytes.bv8($M.41, $add.ref($add.ref(shortname, $mul.ref(0bv64, 8bv64)), $mul.ref(3bv64, 1bv64)), 110bv8);
    $M.41 := $store.bytes.bv8($M.41, $add.ref($add.ref(shortname, $mul.ref(0bv64, 8bv64)), $mul.ref(4bv64, 1bv64)), 116bv8);
    $M.41 := $store.bytes.bv8($M.41, $add.ref($add.ref(shortname, $mul.ref(0bv64, 8bv64)), $mul.ref(5bv64, 1bv64)), 101bv8);
    $M.41 := $store.bytes.bv8($M.41, $add.ref($add.ref(shortname, $mul.ref(0bv64, 8bv64)), $mul.ref(6bv64, 1bv64)), 114bv8);
    $M.41 := $store.bytes.bv8($M.41, $add.ref($add.ref(shortname, $mul.ref(0bv64, 8bv64)), $mul.ref(7bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, strings, 1bv8);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref(strings, $mul.ref(0bv64, 64bv64)), $mul.ref(0bv64, 16bv64)), $mul.ref(8bv64, 1bv64)), manufacturer);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref($add.ref(strings, $mul.ref(0bv64, 64bv64)), $mul.ref(1bv64, 16bv64)), $mul.ref(0bv64, 1bv64)), 2bv8);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref(strings, $mul.ref(0bv64, 64bv64)), $mul.ref(1bv64, 16bv64)), $mul.ref(8bv64, 1bv64)), product_desc);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref($add.ref(strings, $mul.ref(0bv64, 64bv64)), $mul.ref(2bv64, 16bv64)), $mul.ref(0bv64, 1bv64)), 3bv8);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref(strings, $mul.ref(0bv64, 64bv64)), $mul.ref(2bv64, 16bv64)), $mul.ref(8bv64, 1bv64)), serial_num);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref($add.ref(strings, $mul.ref(0bv64, 64bv64)), $mul.ref(3bv64, 16bv64)), $mul.ref(0bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref(strings, $mul.ref(0bv64, 64bv64)), $mul.ref(3bv64, 16bv64)), $mul.ref(8bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.bv16($M.0, stringtab, 1033bv16);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(stringtab, $mul.ref(0bv64, 16bv64)), $mul.ref(8bv64, 1bv64)), strings);
    $M.23 := $store.bytes.ref($M.23, fs_printer_function, otg_desc);
    $M.23 := $store.bytes.ref($M.23, $add.ref($add.ref(fs_printer_function, $mul.ref(0bv64, 88bv64)), $mul.ref(1bv64, 8bv64)), intf_desc);
    $M.23 := $store.bytes.ref($M.23, $add.ref($add.ref(fs_printer_function, $mul.ref(0bv64, 88bv64)), $mul.ref(2bv64, 8bv64)), fs_ep_in_desc);
    $M.23 := $store.bytes.ref($M.23, $add.ref($add.ref(fs_printer_function, $mul.ref(0bv64, 88bv64)), $mul.ref(3bv64, 8bv64)), fs_ep_out_desc);
    $M.23 := $store.bytes.ref($M.23, $add.ref($add.ref(fs_printer_function, $mul.ref(0bv64, 88bv64)), $mul.ref(4bv64, 8bv64)), $0.ref);
    $M.23 := $store.bytes.ref($M.23, $add.ref($add.ref(fs_printer_function, $mul.ref(0bv64, 88bv64)), $mul.ref(5bv64, 8bv64)), $0.ref);
    $M.23 := $store.bytes.ref($M.23, $add.ref($add.ref(fs_printer_function, $mul.ref(0bv64, 88bv64)), $mul.ref(6bv64, 8bv64)), $0.ref);
    $M.23 := $store.bytes.ref($M.23, $add.ref($add.ref(fs_printer_function, $mul.ref(0bv64, 88bv64)), $mul.ref(7bv64, 8bv64)), $0.ref);
    $M.23 := $store.bytes.ref($M.23, $add.ref($add.ref(fs_printer_function, $mul.ref(0bv64, 88bv64)), $mul.ref(8bv64, 8bv64)), $0.ref);
    $M.23 := $store.bytes.ref($M.23, $add.ref($add.ref(fs_printer_function, $mul.ref(0bv64, 88bv64)), $mul.ref(9bv64, 8bv64)), $0.ref);
    $M.23 := $store.bytes.ref($M.23, $add.ref($add.ref(fs_printer_function, $mul.ref(0bv64, 88bv64)), $mul.ref(10bv64, 8bv64)), $0.ref);
    $M.0 := $store.bytes.bv8($M.0, intf_desc, 9bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(intf_desc, $mul.ref(0bv64, 9bv64)), $mul.ref(1bv64, 1bv64)), 4bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(intf_desc, $mul.ref(0bv64, 9bv64)), $mul.ref(2bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(intf_desc, $mul.ref(0bv64, 9bv64)), $mul.ref(3bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(intf_desc, $mul.ref(0bv64, 9bv64)), $mul.ref(4bv64, 1bv64)), 2bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(intf_desc, $mul.ref(0bv64, 9bv64)), $mul.ref(5bv64, 1bv64)), 7bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(intf_desc, $mul.ref(0bv64, 9bv64)), $mul.ref(6bv64, 1bv64)), 1bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(intf_desc, $mul.ref(0bv64, 9bv64)), $mul.ref(7bv64, 1bv64)), 2bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(intf_desc, $mul.ref(0bv64, 9bv64)), $mul.ref(8bv64, 1bv64)), 0bv8);
    $M.23 := $store.bytes.ref($M.23, hs_printer_function, otg_desc);
    $M.23 := $store.bytes.ref($M.23, $add.ref($add.ref(hs_printer_function, $mul.ref(0bv64, 88bv64)), $mul.ref(1bv64, 8bv64)), intf_desc);
    $M.23 := $store.bytes.ref($M.23, $add.ref($add.ref(hs_printer_function, $mul.ref(0bv64, 88bv64)), $mul.ref(2bv64, 8bv64)), hs_ep_in_desc);
    $M.23 := $store.bytes.ref($M.23, $add.ref($add.ref(hs_printer_function, $mul.ref(0bv64, 88bv64)), $mul.ref(3bv64, 8bv64)), hs_ep_out_desc);
    $M.23 := $store.bytes.ref($M.23, $add.ref($add.ref(hs_printer_function, $mul.ref(0bv64, 88bv64)), $mul.ref(4bv64, 8bv64)), $0.ref);
    $M.23 := $store.bytes.ref($M.23, $add.ref($add.ref(hs_printer_function, $mul.ref(0bv64, 88bv64)), $mul.ref(5bv64, 8bv64)), $0.ref);
    $M.23 := $store.bytes.ref($M.23, $add.ref($add.ref(hs_printer_function, $mul.ref(0bv64, 88bv64)), $mul.ref(6bv64, 8bv64)), $0.ref);
    $M.23 := $store.bytes.ref($M.23, $add.ref($add.ref(hs_printer_function, $mul.ref(0bv64, 88bv64)), $mul.ref(7bv64, 8bv64)), $0.ref);
    $M.23 := $store.bytes.ref($M.23, $add.ref($add.ref(hs_printer_function, $mul.ref(0bv64, 88bv64)), $mul.ref(8bv64, 8bv64)), $0.ref);
    $M.23 := $store.bytes.ref($M.23, $add.ref($add.ref(hs_printer_function, $mul.ref(0bv64, 88bv64)), $mul.ref(9bv64, 8bv64)), $0.ref);
    $M.23 := $store.bytes.ref($M.23, $add.ref($add.ref(hs_printer_function, $mul.ref(0bv64, 88bv64)), $mul.ref(10bv64, 8bv64)), $0.ref);
    $M.0 := $store.bytes.bv8($M.0, driver_desc, 80bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(driver_desc, $mul.ref(0bv64, 15bv64)), $mul.ref(1bv64, 1bv64)), 114bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(driver_desc, $mul.ref(0bv64, 15bv64)), $mul.ref(2bv64, 1bv64)), 105bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(driver_desc, $mul.ref(0bv64, 15bv64)), $mul.ref(3bv64, 1bv64)), 110bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(driver_desc, $mul.ref(0bv64, 15bv64)), $mul.ref(4bv64, 1bv64)), 116bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(driver_desc, $mul.ref(0bv64, 15bv64)), $mul.ref(5bv64, 1bv64)), 101bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(driver_desc, $mul.ref(0bv64, 15bv64)), $mul.ref(6bv64, 1bv64)), 114bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(driver_desc, $mul.ref(0bv64, 15bv64)), $mul.ref(7bv64, 1bv64)), 32bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(driver_desc, $mul.ref(0bv64, 15bv64)), $mul.ref(8bv64, 1bv64)), 71bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(driver_desc, $mul.ref(0bv64, 15bv64)), $mul.ref(9bv64, 1bv64)), 97bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(driver_desc, $mul.ref(0bv64, 15bv64)), $mul.ref(10bv64, 1bv64)), 100bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(driver_desc, $mul.ref(0bv64, 15bv64)), $mul.ref(11bv64, 1bv64)), 103bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(driver_desc, $mul.ref(0bv64, 15bv64)), $mul.ref(12bv64, 1bv64)), 101bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(driver_desc, $mul.ref(0bv64, 15bv64)), $mul.ref(13bv64, 1bv64)), 116bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(driver_desc, $mul.ref(0bv64, 15bv64)), $mul.ref(14bv64, 1bv64)), 0bv8);
    $M.16 := 10bv32;
    call {:si_unique_call 894} {:cexpr "qlen"} boogie_si_record_bv32(10bv32);
    $M.0 := $store.bytes.bv8($M.0, config_desc, 9bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(config_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(1bv64, 1bv64)), 2bv8);
    $M.0 := $store.bytes.bv16($M.0, $add.ref($add.ref(config_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(2bv64, 1bv64)), 0bv16);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(config_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(4bv64, 1bv64)), 1bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(config_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(5bv64, 1bv64)), 1bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(config_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(6bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(config_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(7bv64, 1bv64)), $sub.bv8(0bv8, 64bv8));
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(config_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(8bv64, 1bv64)), 1bv8);
    $M.0 := $store.bytes.bv8($M.0, otg_desc, 3bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(otg_desc, $mul.ref(0bv64, 3bv64)), $mul.ref(1bv64, 1bv64)), 9bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(otg_desc, $mul.ref(0bv64, 3bv64)), $mul.ref(2bv64, 1bv64)), 1bv8);
    $M.0 := $store.bytes.bv8($M.0, hs_ep_out_desc, 7bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(hs_ep_out_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(1bv64, 1bv64)), 5bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(hs_ep_out_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(2bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(hs_ep_out_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(3bv64, 1bv64)), 2bv8);
    $M.0 := $store.bytes.bv16($M.0, $add.ref($add.ref(hs_ep_out_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(4bv64, 1bv64)), 512bv16);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(hs_ep_out_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(6bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(hs_ep_out_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(7bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(hs_ep_out_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(8bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, hs_ep_in_desc, 7bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(hs_ep_in_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(1bv64, 1bv64)), 5bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(hs_ep_in_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(2bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(hs_ep_in_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(3bv64, 1bv64)), 2bv8);
    $M.0 := $store.bytes.bv16($M.0, $add.ref($add.ref(hs_ep_in_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(4bv64, 1bv64)), 512bv16);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(hs_ep_in_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(6bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(hs_ep_in_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(7bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(hs_ep_in_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(8bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, dev_qualifier, 10bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(dev_qualifier, $mul.ref(0bv64, 10bv64)), $mul.ref(1bv64, 1bv64)), 6bv8);
    $M.0 := $store.bytes.bv16($M.0, $add.ref($add.ref(dev_qualifier, $mul.ref(0bv64, 10bv64)), $mul.ref(2bv64, 1bv64)), 512bv16);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(dev_qualifier, $mul.ref(0bv64, 10bv64)), $mul.ref(4bv64, 1bv64)), 7bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(dev_qualifier, $mul.ref(0bv64, 10bv64)), $mul.ref(5bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(dev_qualifier, $mul.ref(0bv64, 10bv64)), $mul.ref(6bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(dev_qualifier, $mul.ref(0bv64, 10bv64)), $mul.ref(7bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(dev_qualifier, $mul.ref(0bv64, 10bv64)), $mul.ref(8bv64, 1bv64)), 1bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(dev_qualifier, $mul.ref(0bv64, 10bv64)), $mul.ref(9bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, fs_ep_out_desc, 7bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(fs_ep_out_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(1bv64, 1bv64)), 5bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(fs_ep_out_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(2bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(fs_ep_out_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(3bv64, 1bv64)), 2bv8);
    $M.0 := $store.bytes.bv16($M.0, $add.ref($add.ref(fs_ep_out_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(4bv64, 1bv64)), 0bv16);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(fs_ep_out_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(6bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(fs_ep_out_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(7bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(fs_ep_out_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(8bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, fs_ep_in_desc, 7bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(fs_ep_in_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(1bv64, 1bv64)), 5bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(fs_ep_in_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(2bv64, 1bv64)), $sub.bv8(0bv8, 128bv8));
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(fs_ep_in_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(3bv64, 1bv64)), 2bv8);
    $M.0 := $store.bytes.bv16($M.0, $add.ref($add.ref(fs_ep_in_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(4bv64, 1bv64)), 0bv16);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(fs_ep_in_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(6bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(fs_ep_in_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(7bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(fs_ep_in_desc, $mul.ref(0bv64, 10bv64)), $mul.ref(8bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, pnp_string, 88bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(1bv64, 1bv64)), 88bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(2bv64, 1bv64)), 77bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(3bv64, 1bv64)), 70bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(4bv64, 1bv64)), 71bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(5bv64, 1bv64)), 58bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(6bv64, 1bv64)), 108bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(7bv64, 1bv64)), 105bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(8bv64, 1bv64)), 110bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(9bv64, 1bv64)), 117bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(10bv64, 1bv64)), 120bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(11bv64, 1bv64)), 59bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(12bv64, 1bv64)), 77bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(13bv64, 1bv64)), 68bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(14bv64, 1bv64)), 76bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(15bv64, 1bv64)), 58bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(16bv64, 1bv64)), 103bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(17bv64, 1bv64)), 95bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(18bv64, 1bv64)), 112bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(19bv64, 1bv64)), 114bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(20bv64, 1bv64)), 105bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(21bv64, 1bv64)), 110bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(22bv64, 1bv64)), 116bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(23bv64, 1bv64)), 101bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(24bv64, 1bv64)), 114bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(25bv64, 1bv64)), 59bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(26bv64, 1bv64)), 67bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(27bv64, 1bv64)), 76bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(28bv64, 1bv64)), 83bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(29bv64, 1bv64)), 58bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(30bv64, 1bv64)), 80bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(31bv64, 1bv64)), 82bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(32bv64, 1bv64)), 73bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(33bv64, 1bv64)), 78bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(34bv64, 1bv64)), 84bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(35bv64, 1bv64)), 69bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(36bv64, 1bv64)), 82bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(37bv64, 1bv64)), 59bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(38bv64, 1bv64)), 83bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(39bv64, 1bv64)), 78bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(40bv64, 1bv64)), 58bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(41bv64, 1bv64)), 49bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(42bv64, 1bv64)), 59bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(43bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(44bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(45bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(46bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(47bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(48bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(49bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(50bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(51bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(52bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(53bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(54bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(55bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(56bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(57bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(58bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(59bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(60bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(61bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(62bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(63bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(64bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(65bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(66bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(67bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(68bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(69bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(70bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(71bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(72bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(73bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(74bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(75bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(76bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(77bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(78bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(79bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(80bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(81bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(82bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(83bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(84bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(85bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(86bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(87bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(88bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(89bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(90bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(91bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(92bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(93bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(94bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(95bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(96bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(97bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(98bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(99bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(100bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(101bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(102bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(103bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(104bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(105bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(106bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(107bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(108bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(109bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(110bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(111bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(112bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(113bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(114bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(115bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(116bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(117bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(118bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(119bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(120bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(121bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(122bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(123bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(124bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(125bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(126bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(127bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(128bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(129bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(130bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(131bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(132bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(133bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(134bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(135bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(136bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(137bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(138bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(139bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(140bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(141bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(142bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(143bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(144bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(145bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(146bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(147bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(148bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(149bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(150bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(151bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(152bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(153bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(154bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(155bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(156bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(157bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(158bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(159bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(160bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(161bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(162bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(163bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(164bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(165bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(166bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(167bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(168bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(169bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(170bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(171bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(172bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(173bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(174bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(175bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(176bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(177bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(178bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(179bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(180bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(181bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(182bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(183bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(184bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(185bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(186bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(187bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(188bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(189bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(190bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(191bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(192bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(193bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(194bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(195bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(196bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(197bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(198bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(199bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(200bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(201bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(202bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(203bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(204bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(205bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(206bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(207bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(208bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(209bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(210bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(211bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(212bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(213bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(214bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(215bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(216bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(217bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(218bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(219bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(220bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(221bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(222bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(223bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(224bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(225bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(226bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(227bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(228bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(229bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(230bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(231bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(232bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(233bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(234bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(235bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(236bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(237bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(238bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(239bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(240bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(241bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(242bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(243bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(244bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(245bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(246bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(247bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(248bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(249bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(250bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(251bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(252bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(253bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(254bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(255bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(256bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(257bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(258bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(259bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(260bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(261bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(262bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(263bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(264bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(265bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(266bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(267bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(268bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(269bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(270bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(271bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(272bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(273bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(274bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(275bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(276bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(277bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(278bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(279bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(280bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(281bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(282bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(283bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(284bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(285bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(286bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(287bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(288bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(289bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(290bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(291bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(292bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(293bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(294bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(295bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(296bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(297bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(298bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(299bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(300bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(301bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(302bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(303bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(304bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(305bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(306bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(307bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(308bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(309bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(310bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(311bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(312bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(313bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(314bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(315bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(316bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(317bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(318bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(319bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(320bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(321bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(322bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(323bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(324bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(325bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(326bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(327bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(328bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(329bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(330bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(331bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(332bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(333bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(334bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(335bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(336bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(337bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(338bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(339bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(340bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(341bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(342bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(343bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(344bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(345bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(346bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(347bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(348bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(349bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(350bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(351bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(352bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(353bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(354bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(355bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(356bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(357bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(358bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(359bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(360bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(361bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(362bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(363bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(364bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(365bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(366bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(367bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(368bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(369bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(370bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(371bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(372bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(373bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(374bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(375bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(376bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(377bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(378bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(379bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(380bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(381bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(382bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(383bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(384bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(385bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(386bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(387bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(388bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(389bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(390bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(391bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(392bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(393bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(394bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(395bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(396bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(397bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(398bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(399bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(400bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(401bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(402bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(403bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(404bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(405bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(406bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(407bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(408bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(409bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(410bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(411bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(412bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(413bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(414bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(415bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(416bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(417bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(418bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(419bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(420bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(421bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(422bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(423bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(424bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(425bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(426bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(427bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(428bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(429bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(430bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(431bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(432bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(433bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(434bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(435bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(436bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(437bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(438bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(439bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(440bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(441bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(442bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(443bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(444bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(445bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(446bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(447bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(448bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(449bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(450bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(451bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(452bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(453bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(454bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(455bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(456bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(457bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(458bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(459bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(460bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(461bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(462bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(463bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(464bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(465bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(466bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(467bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(468bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(469bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(470bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(471bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(472bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(473bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(474bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(475bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(476bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(477bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(478bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(479bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(480bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(481bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(482bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(483bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(484bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(485bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(486bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(487bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(488bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(489bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(490bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(491bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(492bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(493bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(494bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(495bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(496bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(497bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(498bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(499bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(500bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(501bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(502bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(503bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(504bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(505bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(506bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(507bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(508bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(509bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(510bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(511bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(512bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(513bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(514bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(515bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(516bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(517bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(518bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(519bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(520bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(521bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(522bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(523bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(524bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(525bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(526bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(527bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(528bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(529bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(530bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(531bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(532bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(533bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(534bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(535bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(536bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(537bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(538bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(539bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(540bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(541bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(542bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(543bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(544bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(545bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(546bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(547bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(548bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(549bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(550bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(551bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(552bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(553bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(554bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(555bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(556bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(557bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(558bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(559bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(560bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(561bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(562bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(563bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(564bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(565bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(566bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(567bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(568bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(569bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(570bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(571bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(572bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(573bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(574bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(575bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(576bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(577bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(578bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(579bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(580bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(581bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(582bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(583bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(584bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(585bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(586bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(587bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(588bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(589bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(590bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(591bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(592bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(593bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(594bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(595bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(596bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(597bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(598bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(599bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(600bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(601bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(602bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(603bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(604bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(605bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(606bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(607bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(608bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(609bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(610bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(611bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(612bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(613bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(614bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(615bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(616bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(617bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(618bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(619bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(620bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(621bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(622bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(623bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(624bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(625bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(626bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(627bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(628bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(629bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(630bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(631bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(632bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(633bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(634bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(635bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(636bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(637bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(638bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(639bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(640bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(641bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(642bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(643bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(644bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(645bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(646bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(647bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(648bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(649bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(650bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(651bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(652bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(653bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(654bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(655bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(656bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(657bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(658bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(659bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(660bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(661bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(662bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(663bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(664bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(665bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(666bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(667bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(668bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(669bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(670bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(671bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(672bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(673bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(674bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(675bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(676bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(677bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(678bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(679bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(680bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(681bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(682bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(683bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(684bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(685bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(686bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(687bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(688bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(689bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(690bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(691bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(692bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(693bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(694bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(695bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(696bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(697bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(698bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(699bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(700bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(701bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(702bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(703bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(704bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(705bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(706bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(707bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(708bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(709bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(710bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(711bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(712bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(713bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(714bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(715bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(716bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(717bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(718bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(719bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(720bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(721bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(722bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(723bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(724bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(725bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(726bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(727bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(728bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(729bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(730bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(731bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(732bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(733bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(734bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(735bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(736bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(737bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(738bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(739bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(740bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(741bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(742bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(743bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(744bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(745bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(746bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(747bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(748bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(749bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(750bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(751bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(752bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(753bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(754bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(755bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(756bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(757bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(758bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(759bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(760bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(761bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(762bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(763bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(764bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(765bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(766bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(767bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(768bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(769bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(770bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(771bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(772bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(773bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(774bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(775bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(776bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(777bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(778bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(779bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(780bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(781bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(782bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(783bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(784bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(785bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(786bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(787bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(788bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(789bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(790bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(791bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(792bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(793bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(794bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(795bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(796bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(797bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(798bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(799bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(800bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(801bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(802bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(803bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(804bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(805bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(806bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(807bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(808bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(809bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(810bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(811bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(812bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(813bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(814bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(815bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(816bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(817bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(818bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(819bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(820bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(821bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(822bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(823bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(824bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(825bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(826bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(827bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(828bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(829bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(830bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(831bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(832bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(833bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(834bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(835bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(836bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(837bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(838bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(839bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(840bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(841bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(842bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(843bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(844bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(845bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(846bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(847bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(848bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(849bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(850bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(851bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(852bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(853bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(854bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(855bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(856bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(857bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(858bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(859bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(860bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(861bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(862bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(863bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(864bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(865bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(866bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(867bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(868bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(869bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(870bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(871bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(872bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(873bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(874bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(875bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(876bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(877bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(878bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(879bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(880bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(881bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(882bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(883bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(884bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(885bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(886bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(887bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(888bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(889bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(890bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(891bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(892bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(893bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(894bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(895bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(896bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(897bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(898bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(899bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(900bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(901bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(902bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(903bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(904bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(905bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(906bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(907bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(908bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(909bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(910bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(911bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(912bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(913bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(914bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(915bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(916bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(917bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(918bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(919bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(920bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(921bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(922bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(923bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(924bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(925bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(926bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(927bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(928bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(929bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(930bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(931bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(932bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(933bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(934bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(935bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(936bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(937bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(938bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(939bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(940bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(941bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(942bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(943bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(944bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(945bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(946bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(947bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(948bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(949bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(950bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(951bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(952bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(953bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(954bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(955bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(956bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(957bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(958bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(959bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(960bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(961bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(962bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(963bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(964bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(965bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(966bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(967bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(968bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(969bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(970bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(971bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(972bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(973bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(974bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(975bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(976bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(977bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(978bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(979bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(980bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(981bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(982bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(983bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(984bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(985bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(986bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(987bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(988bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(989bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(990bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(991bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(992bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(993bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(994bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(995bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(996bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(997bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(998bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(999bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(1000bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(1001bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(1002bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(1003bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(1004bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(1005bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(1006bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(1007bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(1008bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(1009bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(1010bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(1011bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(1012bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(1013bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(1014bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(1015bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(1016bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(1017bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(1018bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(1019bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(1020bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(1021bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(1022bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(pnp_string, $mul.ref(0bv64, 1024bv64)), $mul.ref(1023bv64, 1bv64)), 0bv8);
    $M.15 := $0.ref;
    $M.0 := $store.bytes.bv8($M.0, serial_num, 49bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(1bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(2bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(3bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(4bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(5bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(6bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(7bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(8bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(9bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(10bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(11bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(12bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(13bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(14bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(15bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(16bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(17bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(18bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(19bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(20bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(21bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(22bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(23bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(24bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(25bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(26bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(27bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(28bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(29bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(30bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(31bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(32bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(33bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(34bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(35bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(36bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(37bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(38bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(serial_num, $mul.ref(0bv64, 40bv64)), $mul.ref(39bv64, 1bv64)), 0bv8);
    $M.14 := $0.ref;
    $M.0 := $store.bytes.bv8($M.0, product_desc, 80bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(1bv64, 1bv64)), 114bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(2bv64, 1bv64)), 105bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(3bv64, 1bv64)), 110bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(4bv64, 1bv64)), 116bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(5bv64, 1bv64)), 101bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(6bv64, 1bv64)), 114bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(7bv64, 1bv64)), 32bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(8bv64, 1bv64)), 71bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(9bv64, 1bv64)), 97bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(10bv64, 1bv64)), 100bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(11bv64, 1bv64)), 103bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(12bv64, 1bv64)), 101bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(13bv64, 1bv64)), 116bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(14bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(15bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(16bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(17bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(18bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(19bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(20bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(21bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(22bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(23bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(24bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(25bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(26bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(27bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(28bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(29bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(30bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(31bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(32bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(33bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(34bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(35bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(36bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(37bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(38bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(product_desc, $mul.ref(0bv64, 40bv64)), $mul.ref(39bv64, 1bv64)), 0bv8);
    $M.13 := $0.ref;
    $M.12 := $0.ref;
    $M.11 := 0bv16;
    call {:si_unique_call 895} {:cexpr "bcdDevice"} boogie_si_record_bv16(0bv16);
    $M.10 := 0bv16;
    call {:si_unique_call 896} {:cexpr "idProduct"} boogie_si_record_bv16(0bv16);
    $M.9 := 0bv16;
    call {:si_unique_call 897} {:cexpr "idVendor"} boogie_si_record_bv16(0bv16);
    $M.0 := $store.bytes.bv8($M.0, manufacturer, 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(1bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(2bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(3bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(4bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(5bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(6bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(7bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(8bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(9bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(10bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(11bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(12bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(13bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(14bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(15bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(16bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(17bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(18bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(19bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(20bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(21bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(22bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(23bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(24bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(25bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(26bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(27bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(28bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(29bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(30bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(31bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(32bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(33bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(34bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(35bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(36bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(37bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(38bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(39bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(40bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(41bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(42bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(43bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(44bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(45bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(46bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(47bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(48bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(manufacturer, $mul.ref(0bv64, 50bv64)), $mul.ref(49bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, device_desc, 18bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(device_desc, $mul.ref(0bv64, 18bv64)), $mul.ref(1bv64, 1bv64)), 1bv8);
    $M.0 := $store.bytes.bv16($M.0, $add.ref($add.ref(device_desc, $mul.ref(0bv64, 18bv64)), $mul.ref(2bv64, 1bv64)), 512bv16);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(device_desc, $mul.ref(0bv64, 18bv64)), $mul.ref(4bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(device_desc, $mul.ref(0bv64, 18bv64)), $mul.ref(5bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(device_desc, $mul.ref(0bv64, 18bv64)), $mul.ref(6bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(device_desc, $mul.ref(0bv64, 18bv64)), $mul.ref(7bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv16($M.0, $add.ref($add.ref(device_desc, $mul.ref(0bv64, 18bv64)), $mul.ref(8bv64, 1bv64)), 1317bv16);
    $M.0 := $store.bytes.bv16($M.0, $add.ref($add.ref(device_desc, $mul.ref(0bv64, 18bv64)), $mul.ref(10bv64, 1bv64)), $sub.bv16(0bv16, 23384bv16));
    $M.0 := $store.bytes.bv16($M.0, $add.ref($add.ref(device_desc, $mul.ref(0bv64, 18bv64)), $mul.ref(12bv64, 1bv64)), 0bv16);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(device_desc, $mul.ref(0bv64, 18bv64)), $mul.ref(14bv64, 1bv64)), 1bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(device_desc, $mul.ref(0bv64, 18bv64)), $mul.ref(15bv64, 1bv64)), 2bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(device_desc, $mul.ref(0bv64, 18bv64)), $mul.ref(16bv64, 1bv64)), 3bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(device_desc, $mul.ref(0bv64, 18bv64)), $mul.ref(17bv64, 1bv64)), 1bv8);
    $M.0 := $store.bytes.bv32($M.0, usb_printer_gadget, 0bv32);
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(4bv64, 1bv64)), 0bv32);
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), 0bv32);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(16bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(16bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), 0bv32);
    $M.0 := $store.bytes.bv64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(32bv64, 1bv64)), 0bv64);
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), 0bv32);
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), 0bv32);
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(4bv64, 1bv64)), 0bv32);
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), 0bv32);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(16bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(16bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), 0bv32);
    $M.0 := $store.bytes.bv64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(32bv64, 1bv64)), 0bv64);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64)), $mul.ref(72bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64)), $mul.ref(72bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64)), $mul.ref(88bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64)), $mul.ref(96bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64)), $mul.ref(104bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64)), $mul.ref(112bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64)), $mul.ref(112bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64)), $mul.ref(112bv64, 1bv64)), $mul.ref(16bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64)), $mul.ref(112bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), 0bv32);
    $M.0 := $store.bytes.bv64($M.0, $add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(64bv64, 1bv64)), $mul.ref(112bv64, 1bv64)), $mul.ref(32bv64, 1bv64)), 0bv64);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(216bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(224bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(232bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(233bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(240bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(248bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(256bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(264bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(272bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(272bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(288bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(288bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(304bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(304bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(320bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), 0bv32);
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(320bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(4bv64, 1bv64)), 0bv32);
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(320bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), 0bv32);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(320bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(16bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(320bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(320bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(320bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(16bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(320bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), 0bv32);
    $M.0 := $store.bytes.bv64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(320bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(32bv64, 1bv64)), 0bv64);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(320bv64, 1bv64)), $mul.ref(64bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(320bv64, 1bv64)), $mul.ref(64bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(400bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(400bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(416bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(416bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(432bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), 0bv32);
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(432bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(4bv64, 1bv64)), 0bv32);
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(432bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), 0bv32);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(432bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(16bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(432bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(432bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(432bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(16bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(432bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), 0bv32);
    $M.0 := $store.bytes.bv64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(432bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(32bv64, 1bv64)), 0bv64);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(432bv64, 1bv64)), $mul.ref(64bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(432bv64, 1bv64)), $mul.ref(64bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(512bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), 0bv32);
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(512bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(4bv64, 1bv64)), 0bv32);
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(512bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), 0bv32);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(512bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(16bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(512bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(512bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(512bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(16bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(512bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), 0bv32);
    $M.0 := $store.bytes.bv64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(512bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(32bv64, 1bv64)), 0bv64);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(512bv64, 1bv64)), $mul.ref(64bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(512bv64, 1bv64)), $mul.ref(64bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(592bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.bv64($M.0, $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(600bv64, 1bv64)), 0bv64);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(608bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(616bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(617bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(624bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(624bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(624bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(624bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(624bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(32bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(624bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(40bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(624bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(48bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(624bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(56bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), 0bv32);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(624bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(60bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(624bv64, 1bv64)), $mul.ref(64bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(624bv64, 1bv64)), $mul.ref(72bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(624bv64, 1bv64)), $mul.ref(80bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(624bv64, 1bv64)), $mul.ref(80bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(624bv64, 1bv64)), $mul.ref(96bv64, 1bv64)), 0bv32);
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(624bv64, 1bv64)), $mul.ref(100bv64, 1bv64)), 0bv32);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(728bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(736bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(744bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), 0bv32);
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(744bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(4bv64, 1bv64)), 0bv32);
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(744bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), 0bv32);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(744bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(16bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(744bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(744bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(744bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(16bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.bv32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(744bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), 0bv32);
    $M.0 := $store.bytes.bv64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(744bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(32bv64, 1bv64)), 0bv64);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(744bv64, 1bv64)), $mul.ref(64bv64, 1bv64)), $mul.ref(0bv64, 1bv64)), $0.ref);
    $M.0 := $store.bytes.ref($M.0, $add.ref($add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(744bv64, 1bv64)), $mul.ref(64bv64, 1bv64)), $mul.ref(8bv64, 1bv64)), $0.ref);
    $M.8 := 0bv32;
    call {:si_unique_call 898} {:cexpr "g_printer_devno"} boogie_si_record_bv32(0bv32);
    $M.7 := $0.ref;
    $M.25 := 0bv32;
    call {:si_unique_call 899} {:cexpr "epnum"} boogie_si_record_bv32(0bv32);
    $M.0 := $store.bytes.bv8($M.0, .str.1, 80bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0bv64, 15bv64)), $mul.ref(1bv64, 1bv64)), 114bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0bv64, 15bv64)), $mul.ref(2bv64, 1bv64)), 105bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0bv64, 15bv64)), $mul.ref(3bv64, 1bv64)), 110bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0bv64, 15bv64)), $mul.ref(4bv64, 1bv64)), 116bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0bv64, 15bv64)), $mul.ref(5bv64, 1bv64)), 101bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0bv64, 15bv64)), $mul.ref(6bv64, 1bv64)), 114bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0bv64, 15bv64)), $mul.ref(7bv64, 1bv64)), 32bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0bv64, 15bv64)), $mul.ref(8bv64, 1bv64)), 71bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0bv64, 15bv64)), $mul.ref(9bv64, 1bv64)), 97bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0bv64, 15bv64)), $mul.ref(10bv64, 1bv64)), 100bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0bv64, 15bv64)), $mul.ref(11bv64, 1bv64)), 103bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0bv64, 15bv64)), $mul.ref(12bv64, 1bv64)), 101bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0bv64, 15bv64)), $mul.ref(13bv64, 1bv64)), 116bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0bv64, 15bv64)), $mul.ref(14bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, .str.2, 112bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0bv64, 19bv64)), $mul.ref(1bv64, 1bv64)), 114bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0bv64, 19bv64)), $mul.ref(2bv64, 1bv64)), 105bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0bv64, 19bv64)), $mul.ref(3bv64, 1bv64)), 110bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0bv64, 19bv64)), $mul.ref(4bv64, 1bv64)), 116bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0bv64, 19bv64)), $mul.ref(5bv64, 1bv64)), 101bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0bv64, 19bv64)), $mul.ref(6bv64, 1bv64)), 114bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0bv64, 19bv64)), $mul.ref(7bv64, 1bv64)), 95bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0bv64, 19bv64)), $mul.ref(8bv64, 1bv64)), 100bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0bv64, 19bv64)), $mul.ref(9bv64, 1bv64)), 105bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0bv64, 19bv64)), $mul.ref(10bv64, 1bv64)), 115bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0bv64, 19bv64)), $mul.ref(11bv64, 1bv64)), 99bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0bv64, 19bv64)), $mul.ref(12bv64, 1bv64)), 111bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0bv64, 19bv64)), $mul.ref(13bv64, 1bv64)), 110bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0bv64, 19bv64)), $mul.ref(14bv64, 1bv64)), 110bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0bv64, 19bv64)), $mul.ref(15bv64, 1bv64)), 101bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0bv64, 19bv64)), $mul.ref(16bv64, 1bv64)), 99bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0bv64, 19bv64)), $mul.ref(17bv64, 1bv64)), 116bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.2, $mul.ref(0bv64, 19bv64)), $mul.ref(18bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, .str.3, 112bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0bv64, 24bv64)), $mul.ref(1bv64, 1bv64)), 114bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0bv64, 24bv64)), $mul.ref(2bv64, 1bv64)), 105bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0bv64, 24bv64)), $mul.ref(3bv64, 1bv64)), 110bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0bv64, 24bv64)), $mul.ref(4bv64, 1bv64)), 116bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0bv64, 24bv64)), $mul.ref(5bv64, 1bv64)), 101bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0bv64, 24bv64)), $mul.ref(6bv64, 1bv64)), 114bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0bv64, 24bv64)), $mul.ref(7bv64, 1bv64)), 95bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0bv64, 24bv64)), $mul.ref(8bv64, 1bv64)), 114bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0bv64, 24bv64)), $mul.ref(9bv64, 1bv64)), 101bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0bv64, 24bv64)), $mul.ref(10bv64, 1bv64)), 115bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0bv64, 24bv64)), $mul.ref(11bv64, 1bv64)), 101bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0bv64, 24bv64)), $mul.ref(12bv64, 1bv64)), 116bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0bv64, 24bv64)), $mul.ref(13bv64, 1bv64)), 95bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0bv64, 24bv64)), $mul.ref(14bv64, 1bv64)), 105bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0bv64, 24bv64)), $mul.ref(15bv64, 1bv64)), 110bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0bv64, 24bv64)), $mul.ref(16bv64, 1bv64)), 116bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0bv64, 24bv64)), $mul.ref(17bv64, 1bv64)), 101bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0bv64, 24bv64)), $mul.ref(18bv64, 1bv64)), 114bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0bv64, 24bv64)), $mul.ref(19bv64, 1bv64)), 102bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0bv64, 24bv64)), $mul.ref(20bv64, 1bv64)), 97bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0bv64, 24bv64)), $mul.ref(21bv64, 1bv64)), 99bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0bv64, 24bv64)), $mul.ref(22bv64, 1bv64)), 101bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0bv64, 24bv64)), $mul.ref(23bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, .str.24, 102bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0bv64, 5bv64)), $mul.ref(1bv64, 1bv64)), 117bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0bv64, 5bv64)), $mul.ref(2bv64, 1bv64)), 108bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0bv64, 5bv64)), $mul.ref(3bv64, 1bv64)), 108bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.24, $mul.ref(0bv64, 5bv64)), $mul.ref(4bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, .str.25, 104bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0bv64, 5bv64)), $mul.ref(1bv64, 1bv64)), 105bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0bv64, 5bv64)), $mul.ref(2bv64, 1bv64)), 103bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0bv64, 5bv64)), $mul.ref(3bv64, 1bv64)), 104bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.25, $mul.ref(0bv64, 5bv64)), $mul.ref(4bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, .str.26, 63bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.26, $mul.ref(0bv64, 2bv64)), $mul.ref(1bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, .str.4, 112bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0bv64, 15bv64)), $mul.ref(1bv64, 1bv64)), 114bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0bv64, 15bv64)), $mul.ref(2bv64, 1bv64)), 105bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0bv64, 15bv64)), $mul.ref(3bv64, 1bv64)), 110bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0bv64, 15bv64)), $mul.ref(4bv64, 1bv64)), 116bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0bv64, 15bv64)), $mul.ref(5bv64, 1bv64)), 101bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0bv64, 15bv64)), $mul.ref(6bv64, 1bv64)), 114bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0bv64, 15bv64)), $mul.ref(7bv64, 1bv64)), 95bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0bv64, 15bv64)), $mul.ref(8bv64, 1bv64)), 117bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0bv64, 15bv64)), $mul.ref(9bv64, 1bv64)), 110bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0bv64, 15bv64)), $mul.ref(10bv64, 1bv64)), 98bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0bv64, 15bv64)), $mul.ref(11bv64, 1bv64)), 105bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0bv64, 15bv64)), $mul.ref(12bv64, 1bv64)), 110bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0bv64, 15bv64)), $mul.ref(13bv64, 1bv64)), 100bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0bv64, 15bv64)), $mul.ref(14bv64, 1bv64)), 0bv8);
    $M.88 := $store.bytes.bv8($M.88, .str.10, 37bv8);
    $M.88 := $store.bytes.bv8($M.88, $add.ref($add.ref(.str.10, $mul.ref(0bv64, 14bv64)), $mul.ref(1bv64, 1bv64)), 115bv8);
    $M.88 := $store.bytes.bv8($M.88, $add.ref($add.ref(.str.10, $mul.ref(0bv64, 14bv64)), $mul.ref(2bv64, 1bv64)), 32bv8);
    $M.88 := $store.bytes.bv8($M.88, $add.ref($add.ref(.str.10, $mul.ref(0bv64, 14bv64)), $mul.ref(3bv64, 1bv64)), 37bv8);
    $M.88 := $store.bytes.bv8($M.88, $add.ref($add.ref(.str.10, $mul.ref(0bv64, 14bv64)), $mul.ref(4bv64, 1bv64)), 115bv8);
    $M.88 := $store.bytes.bv8($M.88, $add.ref($add.ref(.str.10, $mul.ref(0bv64, 14bv64)), $mul.ref(5bv64, 1bv64)), 32bv8);
    $M.88 := $store.bytes.bv8($M.88, $add.ref($add.ref(.str.10, $mul.ref(0bv64, 14bv64)), $mul.ref(6bv64, 1bv64)), 119bv8);
    $M.88 := $store.bytes.bv8($M.88, $add.ref($add.ref(.str.10, $mul.ref(0bv64, 14bv64)), $mul.ref(7bv64, 1bv64)), 105bv8);
    $M.88 := $store.bytes.bv8($M.88, $add.ref($add.ref(.str.10, $mul.ref(0bv64, 14bv64)), $mul.ref(8bv64, 1bv64)), 116bv8);
    $M.88 := $store.bytes.bv8($M.88, $add.ref($add.ref(.str.10, $mul.ref(0bv64, 14bv64)), $mul.ref(9bv64, 1bv64)), 104bv8);
    $M.88 := $store.bytes.bv8($M.88, $add.ref($add.ref(.str.10, $mul.ref(0bv64, 14bv64)), $mul.ref(10bv64, 1bv64)), 32bv8);
    $M.88 := $store.bytes.bv8($M.88, $add.ref($add.ref(.str.10, $mul.ref(0bv64, 14bv64)), $mul.ref(11bv64, 1bv64)), 37bv8);
    $M.88 := $store.bytes.bv8($M.88, $add.ref($add.ref(.str.10, $mul.ref(0bv64, 14bv64)), $mul.ref(12bv64, 1bv64)), 115bv8);
    $M.88 := $store.bytes.bv8($M.88, $add.ref($add.ref(.str.10, $mul.ref(0bv64, 14bv64)), $mul.ref(13bv64, 1bv64)), 0bv8);
    $M.89 := $store.bytes.bv8($M.89, .str.17, 114bv8);
    $M.89 := $store.bytes.bv8($M.89, $add.ref($add.ref(.str.17, $mul.ref(0bv64, 13bv64)), $mul.ref(1bv64, 1bv64)), 56bv8);
    $M.89 := $store.bytes.bv8($M.89, $add.ref($add.ref(.str.17, $mul.ref(0bv64, 13bv64)), $mul.ref(2bv64, 1bv64)), 97bv8);
    $M.89 := $store.bytes.bv8($M.89, $add.ref($add.ref(.str.17, $mul.ref(0bv64, 13bv64)), $mul.ref(3bv64, 1bv64)), 54bv8);
    $M.89 := $store.bytes.bv8($M.89, $add.ref($add.ref(.str.17, $mul.ref(0bv64, 13bv64)), $mul.ref(4bv64, 1bv64)), 54bv8);
    $M.89 := $store.bytes.bv8($M.89, $add.ref($add.ref(.str.17, $mul.ref(0bv64, 13bv64)), $mul.ref(5bv64, 1bv64)), 53bv8);
    $M.89 := $store.bytes.bv8($M.89, $add.ref($add.ref(.str.17, $mul.ref(0bv64, 13bv64)), $mul.ref(6bv64, 1bv64)), 57bv8);
    $M.89 := $store.bytes.bv8($M.89, $add.ref($add.ref(.str.17, $mul.ref(0bv64, 13bv64)), $mul.ref(7bv64, 1bv64)), 55bv8);
    $M.89 := $store.bytes.bv8($M.89, $add.ref($add.ref(.str.17, $mul.ref(0bv64, 13bv64)), $mul.ref(8bv64, 1bv64)), 95bv8);
    $M.89 := $store.bytes.bv8($M.89, $add.ref($add.ref(.str.17, $mul.ref(0bv64, 13bv64)), $mul.ref(9bv64, 1bv64)), 117bv8);
    $M.89 := $store.bytes.bv8($M.89, $add.ref($add.ref(.str.17, $mul.ref(0bv64, 13bv64)), $mul.ref(10bv64, 1bv64)), 100bv8);
    $M.89 := $store.bytes.bv8($M.89, $add.ref($add.ref(.str.17, $mul.ref(0bv64, 13bv64)), $mul.ref(11bv64, 1bv64)), 99bv8);
    $M.89 := $store.bytes.bv8($M.89, $add.ref($add.ref(.str.17, $mul.ref(0bv64, 13bv64)), $mul.ref(12bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, .str.52, 112bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0bv64, 24bv64)), $mul.ref(1bv64, 1bv64)), 114bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0bv64, 24bv64)), $mul.ref(2bv64, 1bv64)), 105bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0bv64, 24bv64)), $mul.ref(3bv64, 1bv64)), 110bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0bv64, 24bv64)), $mul.ref(4bv64, 1bv64)), 116bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0bv64, 24bv64)), $mul.ref(5bv64, 1bv64)), 101bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0bv64, 24bv64)), $mul.ref(6bv64, 1bv64)), 114bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0bv64, 24bv64)), $mul.ref(7bv64, 1bv64)), 95bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0bv64, 24bv64)), $mul.ref(8bv64, 1bv64)), 109bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0bv64, 24bv64)), $mul.ref(9bv64, 1bv64)), 117bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0bv64, 24bv64)), $mul.ref(10bv64, 1bv64)), 116bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0bv64, 24bv64)), $mul.ref(11bv64, 1bv64)), 101bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0bv64, 24bv64)), $mul.ref(12bv64, 1bv64)), 120bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0bv64, 24bv64)), $mul.ref(13bv64, 1bv64)), 46bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0bv64, 24bv64)), $mul.ref(14bv64, 1bv64)), 119bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0bv64, 24bv64)), $mul.ref(15bv64, 1bv64)), 97bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0bv64, 24bv64)), $mul.ref(16bv64, 1bv64)), 105bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0bv64, 24bv64)), $mul.ref(17bv64, 1bv64)), 116bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0bv64, 24bv64)), $mul.ref(18bv64, 1bv64)), 95bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0bv64, 24bv64)), $mul.ref(19bv64, 1bv64)), 108bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0bv64, 24bv64)), $mul.ref(20bv64, 1bv64)), 111bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0bv64, 24bv64)), $mul.ref(21bv64, 1bv64)), 99bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0bv64, 24bv64)), $mul.ref(22bv64, 1bv64)), 107bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0bv64, 24bv64)), $mul.ref(23bv64, 1bv64)), 0bv8);
    $M.0 := $store.bytes.bv8($M.0, .str.53, 112bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0bv64, 14bv64)), $mul.ref(1bv64, 1bv64)), 114bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0bv64, 14bv64)), $mul.ref(2bv64, 1bv64)), 105bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0bv64, 14bv64)), $mul.ref(3bv64, 1bv64)), 110bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0bv64, 14bv64)), $mul.ref(4bv64, 1bv64)), 116bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0bv64, 14bv64)), $mul.ref(5bv64, 1bv64)), 101bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0bv64, 14bv64)), $mul.ref(6bv64, 1bv64)), 114bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0bv64, 14bv64)), $mul.ref(7bv64, 1bv64)), 95bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0bv64, 14bv64)), $mul.ref(8bv64, 1bv64)), 109bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0bv64, 14bv64)), $mul.ref(9bv64, 1bv64)), 117bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0bv64, 14bv64)), $mul.ref(10bv64, 1bv64)), 116bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0bv64, 14bv64)), $mul.ref(11bv64, 1bv64)), 101bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0bv64, 14bv64)), $mul.ref(12bv64, 1bv64)), 120bv8);
    $M.0 := $store.bytes.bv8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0bv64, 14bv64)), $mul.ref(13bv64, 1bv64)), 0bv8);
    call {:si_unique_call 900} {:cexpr "errno_global"} boogie_si_record_bv32(0bv32);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0bv64, 312704bv64);

procedure devirtbounce(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0bv64, 313736bv64);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: bv32) returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: bv32) returns ($r: bv32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: bv32;
  var $i3: bv32;
  var $i4: bv1;
  var $i5: bv1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i5 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i5} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i5 == 1bv1);
    $i4 := $eq.ref(printer_fsync, $p0);
    assume {:branchcond $i4} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i4 == 1bv1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1bv1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 901} $i2 := printer_fsync($p1, arg1);
    $r := $i2;
    return;

  $bb3:
    assume $i5 == 1bv1;
    call {:si_unique_call 902} $i3 := __builtinx_object_size();
    $r := $i3;
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0bv64, 314768bv64);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0bv64, 315800bv64);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: bv32) returns ($r: bv32);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: bv32) returns ($r: bv32)
{
  var $p0: ref;
  var $i1: bv32;
  var $i2: bv1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1bv1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1bv1;
    call {:si_unique_call 903} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0bv64, 316832bv64);

procedure devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.25, $CurrAddr, $M.26, $M.27, $M.2, $M.3, $M.4, $M.5, $M.6;



implementation devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: bv32)
{
  var $p0: ref;
  var $i1: bv32;
  var $p2: ref;
  var $i3: bv32;
  var $i4: bv1;
  var $i5: bv1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i5 := $eq.ref(printer_bind, $p0);
    assume {:branchcond $i5} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i5 == 1bv1);
    $i4 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i4} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i4 == 1bv1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1bv1;
    call {:si_unique_call 904} $i1 := __builtinx_object_size();
    $r := $i1;
    return;

  $bb3:
    assume $i5 == 1bv1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 905} $i3 := printer_bind($p2);
    $r := $i3;
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0bv64, 317864bv64);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref) returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.24, $M.25, $CurrAddr, $M.26, $M.27;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref) returns ($r: bv32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: bv32;
  var $p4: ref;
  var $p5: ref;
  var $i6: bv32;
  var $p7: ref;
  var $p8: ref;
  var $i9: bv32;
  var $i10: bv32;
  var $p11: ref;
  var $p12: ref;
  var $i13: bv32;
  var $i14: bv1;
  var $i15: bv1;
  var $i16: bv1;
  var $i17: bv1;
  var $i18: bv1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i18 := $eq.ref(printer_setup, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i18 == 1bv1);
    $i17 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i17 == 1bv1);
    $i16 := $eq.ref(printer_close, $p0);
    assume {:branchcond $i16} true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i16 == 1bv1);
    $i15 := $eq.ref(printer_open, $p0);
    assume true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i15 == 1bv1);
    $i14 := $eq.ref(printer_poll, $p0);
    assume {:branchcond $i14} true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i14 == 1bv1);
    assume false;
    return;

  $bb2:
    assume $i14 == 1bv1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 906} $i3 := printer_poll($p1, $p2);
    $r := $i3;
    return;

  $bb3:
    assume $i15 == 1bv1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 907} $i6 := printer_open($p4, $p5);
    $r := $i6;
    return;

  $bb4:
    assume $i16 == 1bv1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 908} $i9 := printer_close($p7, $p8);
    $r := $i9;
    return;

  $bb5:
    assume $i17 == 1bv1;
    call {:si_unique_call 909} $i10 := __builtinx_object_size();
    $r := $i10;
    return;

  $bb6:
    assume $i18 == 1bv1;
    $p11 := $bitcast.ref.ref(arg);
    $p12 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 910} $i13 := printer_setup($p11, $p12);
    $r := $i13;
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0bv64, 318896bv64);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: bv32) returns ($r: bv32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: bv32) returns ($r: bv32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: bv32;
  var $i3: bv32;
  var $i4: bv1;
  var $i5: bv1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i5 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i5} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i5 == 1bv1);
    $i4 := $eq.ref(printer_fsync, $p0);
    assume {:branchcond $i4} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i4 == 1bv1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1bv1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 911} $i2 := printer_fsync($p1, arg1);
    $r := $i2;
    return;

  $bb3:
    assume $i5 == 1bv1;
    call {:si_unique_call 912} $i3 := __builtinx_object_size();
    $r := $i3;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0bv64, 319928bv64);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $i1: bv1;
  var $i2: bv1;
  var $i3: bv1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(printer_setup_complete, $p0);
    assume {:branchcond $i3} true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i3 == 1bv1);
    $i2 := $eq.ref(tx_complete, $p0);
    assume {:branchcond $i2} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i2 == 1bv1);
    $i1 := $eq.ref(rx_complete, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i1 == 1bv1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1bv1;
    call {:si_unique_call 913} rx_complete(arg, arg1);
    return;

  $bb3:
    assume $i2 == 1bv1;
    call {:si_unique_call 914} tx_complete(arg, arg1);
    return;

  $bb4:
    assume $i3 == 1bv1;
    call {:si_unique_call 915} printer_setup_complete(arg, arg1);
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0bv64, 320960bv64);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: bv32) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: bv32) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.bv8(M.dst: [ref]bv8, M.src: [ref]bv8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]bv8);
  free requires assertsPassed;



implementation $memcpy.bv8(M.dst: [ref]bv8, M.src: [ref]bv8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]bv8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.bv8(M: [ref]bv8, dst: ref, val: bv8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]bv8);
  free requires assertsPassed;



implementation $memset.bv8(M: [ref]bv8, dst: ref, val: bv8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]bv8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_bv16(x: bv16);



procedure boogie_si_record_bv32(x: bv32);



procedure boogie_si_record_bv64(x: bv64);



procedure boogie_si_record_bv8(x: bv8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.29, $M.26, $M.27, $M.30, $M.31, $M.32, $M.24, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.0, $M.41, $M.23, $M.16, $M.15, $M.14, $M.13, $M.12, $M.11, $M.10, $M.9, $M.8, $M.7, $M.25, $M.88, $M.89, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 916} __SMACK_static_init();
    call {:si_unique_call 917} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: bv32);
  free requires assertsPassed;
  modifies assertsPassed, $M.28, $M.30, $M.31, $M.32, $M.24, $M.0, $M.33, $M.34, $M.35, $M.29, $M.2, $M.3, $M.4, $M.5, $M.6, $M.36, $M.26, $M.27, $M.37, $M.38, $M.39, $M.41, $M.23, $M.16, $M.15, $M.14, $M.13, $M.12, $M.11, $M.10, $M.9, $M.8, $M.7, $M.25, $M.88, $M.89, $CurrAddr;



implementation {:entrypoint} main_SeqInstr() returns ($r: bv32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation printer_read_loop_$bb39(in_$p7: ref, in_$i88: bv1, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$i96: bv32, in_$i97: bv1, in_$p98: ref, in_$p99: ref, in_$i100: bv64, in_$i101: bv1, in_$p102: ref, in_$p108: ref, in_$p109: ref, in_$p81: ref, in_$i82: bv64, in_$i83: bv64, in_$i84: bv64, in_$p85: ref, in_$i86: bv64, in_$i144: bv1, in_$p145: ref, in_$i146: bv32, in_$i147: bv1, in_$i148: bv32, in_$i149: bv64, in_$i150: bv64, in_$i151: bv1, in_$i157: bv1, in_$p158: ref, in_$i159: bv64, in_$i160: bv64, in_$i161: bv64, in_$p162: ref, in_$p152: ref, in_$i153: bv64, in_$i154: bv64, in_$i155: bv64, in_$p156: ref) returns (out_$i88: bv1, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$i96: bv32, out_$i97: bv1, out_$p98: ref, out_$p99: ref, out_$i100: bv64, out_$i101: bv1, out_$p102: ref, out_$p108: ref, out_$p109: ref, out_$i144: bv1, out_$p145: ref, out_$i146: bv32, out_$i147: bv1, out_$i148: bv32, out_$i149: bv64, out_$i150: bv64, out_$i151: bv1, out_$i157: bv1, out_$p158: ref, out_$i159: bv64, out_$i160: bv64, out_$i161: bv64, out_$p162: ref, out_$p152: ref, out_$i153: bv64, out_$i154: bv64, out_$i155: bv64, out_$p156: ref)
{

  entry:
    out_$i88, out_$p90, out_$p91, out_$p92, out_$p93, out_$p94, out_$p95, out_$i96, out_$i97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p108, out_$p109, out_$i144, out_$p145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p152, out_$i153, out_$i154, out_$i155, out_$p156 := in_$i88, in_$p90, in_$p91, in_$p92, in_$p93, in_$p94, in_$p95, in_$i96, in_$i97, in_$p98, in_$p99, in_$i100, in_$i101, in_$p102, in_$p108, in_$p109, in_$i144, in_$p145, in_$i146, in_$i147, in_$i148, in_$i149, in_$i150, in_$i151, in_$i157, in_$p158, in_$i159, in_$i160, in_$i161, in_$p162, in_$p152, in_$i153, in_$i154, in_$i155, in_$p156;
    goto $bb39, exit;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i144 := $ne.bv64(in_$i84, 0bv64);
    goto corral_source_split_169;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    goto corral_source_split_160_dummy;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} list_add(out_$p108, out_$p109);
    goto corral_source_split_160;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(in_$p7, $mul.ref(0bv64, 824bv64)), $mul.ref(272bv64, 1bv64));
    goto corral_source_split_159;

  $bb35:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(out_$p92, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_158;

  $bb34:
    assume {:verifier.code 0} true;
    assume !(out_$i97 == 1bv1);
    goto $bb35;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i101 == 1bv1);
    goto $bb35;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    out_$p102 := out_$p93;
    assume true;
    goto $bb37;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    out_$i101 := $ne.bv64(out_$i100, 0bv64);
    goto corral_source_split_156;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    out_$i100 := $p2i.ref.bv64(out_$p99);
    goto corral_source_split_155;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    out_$p99 := $load.bytes.ref($M.0, out_$p98);
    goto corral_source_split_154;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(out_$p92, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_153;

  $bb33:
    assume out_$i97 == 1bv1;
    goto corral_source_split_152;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    out_$i97 := $ne.bv32(out_$i96, 0bv32);
    goto corral_source_split_150;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    out_$i96 := $load.bytes.bv32($M.0, out_$p95);
    goto corral_source_split_149;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(out_$p92, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(68bv64, 1bv64));
    goto corral_source_split_148;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} list_del_init(out_$p94);
    goto corral_source_split_147;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(out_$p92, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_146;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref(out_$p92, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64));
    goto corral_source_split_145;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    out_$p92 := $bitcast.ref.ref(out_$p91);
    goto corral_source_split_144;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    out_$p91 := $load.bytes.ref($M.0, out_$p90);
    goto corral_source_split_143;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref($add.ref(in_$p7, $mul.ref(0bv64, 824bv64)), $mul.ref(304bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_142;

  $bb31:
    assume out_$i88 == 1bv1;
    goto corral_source_split_141;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.bv64(in_$i84, 0bv64);
    goto corral_source_split_139;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb55:
    assume out_$i157 == 1bv1;
    goto corral_source_split_232;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    out_$p158, out_$i159, out_$i160, out_$i161, out_$p162 := in_$p81, in_$i82, in_$i83, in_$i84, in_$p85;
    assume true;
    goto $bb55;

  $bb52:
    assume {:verifier.code 0} true;
    out_$i157 := $ne.bv64(in_$i86, 0bv64);
    goto corral_source_split_226;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb50:
    assume out_$i144 == 1bv1;
    goto corral_source_split_215;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb53:
    assume out_$i151 == 1bv1;
    goto corral_source_split_228;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    out_$p152, out_$i153, out_$i154, out_$i155, out_$p156 := in_$p81, in_$i82, in_$i83, in_$i84, in_$p85;
    assume true;
    goto $bb53;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    out_$i151 := $ne.bv64(out_$i150, 0bv64);
    goto corral_source_split_224;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} out_$i150 := ldv__builtin_expect(out_$i149, 1bv64);
    call {:si_unique_call 68} {:cexpr "tmp___13"} boogie_si_record_bv64(out_$i150);
    goto corral_source_split_223;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    out_$i149 := $sext.bv32.bv64(out_$i148);
    goto corral_source_split_222;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    out_$i148 := $zext.bv1.bv32(out_$i147);
    goto corral_source_split_221;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    out_$i147 := $eq.bv32(out_$i146, 0bv32);
    goto corral_source_split_220;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} out_$i146 := list_empty(out_$p145);
    call {:si_unique_call 66} {:cexpr "tmp___12"} boogie_si_record_bv32(out_$i146);
    goto corral_source_split_219;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    out_$p145 := $add.ref($add.ref(in_$p7, $mul.ref(0bv64, 824bv64)), $mul.ref(304bv64, 1bv64));
    goto corral_source_split_218;

  $bb51:
    assume !(out_$i144 == 1bv1);
    goto corral_source_split_217;

  corral_source_split_160_dummy:
    call {:si_unique_call 1} out_$i88, out_$p90, out_$p91, out_$p92, out_$p93, out_$p94, out_$p95, out_$i96, out_$i97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p108, out_$p109, out_$i144, out_$p145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p152, out_$i153, out_$i154, out_$i155, out_$p156 := printer_read_loop_$bb39(in_$p7, out_$i88, out_$p90, out_$p91, out_$p92, out_$p93, out_$p94, out_$p95, out_$i96, out_$i97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p108, out_$p109, in_$p81, in_$i82, in_$i83, in_$i84, in_$p85, in_$i86, out_$i144, out_$p145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p152, out_$i153, out_$i154, out_$i155, out_$p156);
    return;

  exit:
    return;
}



procedure printer_read_loop_$bb39(in_$p7: ref, in_$i88: bv1, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$i96: bv32, in_$i97: bv1, in_$p98: ref, in_$p99: ref, in_$i100: bv64, in_$i101: bv1, in_$p102: ref, in_$p108: ref, in_$p109: ref, in_$p81: ref, in_$i82: bv64, in_$i83: bv64, in_$i84: bv64, in_$p85: ref, in_$i86: bv64, in_$i144: bv1, in_$p145: ref, in_$i146: bv32, in_$i147: bv1, in_$i148: bv32, in_$i149: bv64, in_$i150: bv64, in_$i151: bv1, in_$i157: bv1, in_$p158: ref, in_$i159: bv64, in_$i160: bv64, in_$i161: bv64, in_$p162: ref, in_$p152: ref, in_$i153: bv64, in_$i154: bv64, in_$i155: bv64, in_$p156: ref) returns (out_$i88: bv1, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$i96: bv32, out_$i97: bv1, out_$p98: ref, out_$p99: ref, out_$i100: bv64, out_$i101: bv1, out_$p102: ref, out_$p108: ref, out_$p109: ref, out_$i144: bv1, out_$p145: ref, out_$i146: bv32, out_$i147: bv1, out_$i148: bv32, out_$i149: bv64, out_$i150: bv64, out_$i151: bv1, out_$i157: bv1, out_$p158: ref, out_$i159: bv64, out_$i160: bv64, out_$i161: bv64, out_$p162: ref, out_$p152: ref, out_$i153: bv64, out_$i154: bv64, out_$i155: bv64, out_$p156: ref);
  modifies $M.0;



implementation printer_read_loop_$bb29(in_$p7: ref, in_$i88: bv1, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$i96: bv32, in_$i97: bv1, in_$p98: ref, in_$p99: ref, in_$i100: bv64, in_$i101: bv1, in_$p102: ref, in_$p103: ref, in_$i104: bv32, in_$i105: bv64, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$i111: bv64, in_$p112: ref, in_$p113: ref, in_$i114: bv1, in_$i115: bv64, in_$i116: bv32, in_$i117: bv32, in_$i118: bv64, in_$i119: bv64, in_$i120: bv64, in_$i121: bv64, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$i125: bv64, in_$p126: ref, in_$i127: bv8, in_$i128: bv32, in_$i129: bv1, in_$p130: ref, in_$i131: bv64, in_$i136: bv1, in_$i137: bv64, in_$p138: ref, in_$p142: ref, in_$p143: ref, in_$p139: ref, in_$i140: bv64, in_$p141: ref, in_$p81: ref, in_$i82: bv64, in_$i83: bv64, in_$i84: bv64, in_$p85: ref, in_$i86: bv64, in_$p87: ref, in_$i144: bv1, in_$p145: ref, in_$i146: bv32, in_$i147: bv1, in_$i148: bv32, in_$i149: bv64, in_$i150: bv64, in_$i151: bv1, in_$i157: bv1, in_$p158: ref, in_$i159: bv64, in_$i160: bv64, in_$i161: bv64, in_$p162: ref, in_$p152: ref, in_$i153: bv64, in_$i154: bv64, in_$i155: bv64, in_$p156: ref) returns (out_$i88: bv1, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$i96: bv32, out_$i97: bv1, out_$p98: ref, out_$p99: ref, out_$i100: bv64, out_$i101: bv1, out_$p102: ref, out_$p103: ref, out_$i104: bv32, out_$i105: bv64, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$i111: bv64, out_$p112: ref, out_$p113: ref, out_$i114: bv1, out_$i115: bv64, out_$i116: bv32, out_$i117: bv32, out_$i118: bv64, out_$i119: bv64, out_$i120: bv64, out_$i121: bv64, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$i125: bv64, out_$p126: ref, out_$i127: bv8, out_$i128: bv32, out_$i129: bv1, out_$p130: ref, out_$i131: bv64, out_$i136: bv1, out_$i137: bv64, out_$p138: ref, out_$p142: ref, out_$p143: ref, out_$p139: ref, out_$i140: bv64, out_$p141: ref, out_$p81: ref, out_$i82: bv64, out_$i83: bv64, out_$i84: bv64, out_$p85: ref, out_$i86: bv64, out_$p87: ref, out_$i144: bv1, out_$p145: ref, out_$i146: bv32, out_$i147: bv1, out_$i148: bv32, out_$i149: bv64, out_$i150: bv64, out_$i151: bv1, out_$i157: bv1, out_$p158: ref, out_$i159: bv64, out_$i160: bv64, out_$i161: bv64, out_$p162: ref, out_$p152: ref, out_$i153: bv64, out_$i154: bv64, out_$i155: bv64, out_$p156: ref)
{

  entry:
    out_$i88, out_$p90, out_$p91, out_$p92, out_$p93, out_$p94, out_$p95, out_$i96, out_$i97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$i104, out_$i105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$i111, out_$p112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i136, out_$i137, out_$p138, out_$p142, out_$p143, out_$p139, out_$i140, out_$p141, out_$p81, out_$i82, out_$i83, out_$i84, out_$p85, out_$i86, out_$p87, out_$i144, out_$p145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p152, out_$i153, out_$i154, out_$i155, out_$p156 := in_$i88, in_$p90, in_$p91, in_$p92, in_$p93, in_$p94, in_$p95, in_$i96, in_$i97, in_$p98, in_$p99, in_$i100, in_$i101, in_$p102, in_$p103, in_$i104, in_$i105, in_$p106, in_$p107, in_$p108, in_$p109, in_$p110, in_$i111, in_$p112, in_$p113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$p122, in_$p123, in_$p124, in_$i125, in_$p126, in_$i127, in_$i128, in_$i129, in_$p130, in_$i131, in_$i136, in_$i137, in_$p138, in_$p142, in_$p143, in_$p139, in_$i140, in_$p141, in_$p81, in_$i82, in_$i83, in_$i84, in_$p85, in_$i86, in_$p87, in_$i144, in_$p145, in_$i146, in_$i147, in_$i148, in_$i149, in_$i150, in_$i151, in_$i157, in_$p158, in_$i159, in_$i160, in_$i161, in_$p162, in_$p152, in_$i153, in_$i154, in_$i155, in_$p156;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_137;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    out_$p81, out_$i82, out_$i83, out_$i84, out_$p85, out_$i86, out_$p87 := out_$p139, out_$i120, out_$i125, out_$i140, out_$p141, out_$i121, out_$p122;
    goto corral_source_split_213_dummy;

  $bb49:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_213;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} list_add(out_$p142, out_$p143);
    assume {:verifier.code 0} true;
    out_$p139, out_$i140, out_$p141 := $0.ref, 0bv64, $0.ref;
    goto $bb49;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    out_$p139, out_$i140, out_$p141 := out_$p110, out_$i137, out_$p138;
    goto $bb49;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref(out_$p112, $mul.ref(out_$i119, 1bv64));
    goto corral_source_split_207;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    out_$i137 := $sub.bv64(out_$i111, out_$i119);
    call {:si_unique_call 63} {:cexpr "current_rx_bytes"} boogie_si_record_bv64(out_$i137);
    goto corral_source_split_206;

  $bb47:
    assume out_$i136 == 1bv1;
    goto corral_source_split_205;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i136 := $ult.bv64(out_$i119, out_$i111);
    goto corral_source_split_203;

  $bb45:
    assume !(out_$i129 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    out_$p130, out_$i131 := out_$p110, out_$i125;
    assume true;
    goto $bb45;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    out_$i129 := $ne.bv32(out_$i128, 0bv32);
    goto corral_source_split_192;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    out_$i128 := $zext.bv8.bv32(out_$i127);
    goto corral_source_split_191;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    out_$i127 := $load.bytes.bv8($M.0, out_$p126);
    goto corral_source_split_190;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref(in_$p7, $mul.ref(0bv64, 824bv64)), $mul.ref(617bv64, 1bv64));
    goto corral_source_split_189;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} out_$i125 := _raw_spin_lock_irqsave(out_$p124);
    call {:si_unique_call 59} {:cexpr "flags"} boogie_si_record_bv64(out_$i125);
    goto corral_source_split_188;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} out_$p124 := spinlock_check(out_$p123);
    goto corral_source_split_187;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref(in_$p7, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_186;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref(out_$p87, $mul.ref(out_$i119, 1bv64));
    goto corral_source_split_185;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    out_$i121 := $sub.bv64(out_$i86, out_$i119);
    call {:si_unique_call 56} {:cexpr "len"} boogie_si_record_bv64(out_$i121);
    goto corral_source_split_184;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    out_$i120 := $add.bv64(out_$i82, out_$i119);
    call {:si_unique_call 55} {:cexpr "bytes_copied"} boogie_si_record_bv64(out_$i120);
    goto corral_source_split_183;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    out_$i119 := $sub.bv64(out_$i115, out_$i118);
    call {:si_unique_call 54} {:cexpr "size"} boogie_si_record_bv64(out_$i119);
    goto corral_source_split_182;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    out_$i118 := $sext.bv32.bv64(out_$i117);
    goto corral_source_split_181;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} out_$i117 := copy_to_user(out_$p87, out_$p112, out_$i116);
    call {:si_unique_call 53} {:cexpr "tmp___10"} boogie_si_record_bv32(out_$i117);
    goto corral_source_split_180;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    out_$i116 := $trunc.bv64.bv32(out_$i115);
    goto corral_source_split_179;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_178;

  $bb42:
    assume !(out_$i114 == 1bv1);
    assume {:verifier.code 0} true;
    out_$i115 := out_$i86;
    goto $bb43;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    out_$i115 := out_$i111;
    goto $bb43;

  $bb41:
    assume out_$i114 == 1bv1;
    goto corral_source_split_176;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    out_$i114 := $ugt.bv64(out_$i86, out_$i111);
    goto corral_source_split_174;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} spin_unlock_irqrestore(out_$p113, out_$i83);
    goto corral_source_split_173;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(in_$p7, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_172;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_171;

  $bb32:
    assume !(out_$i88 == 1bv1);
    assume {:verifier.code 0} true;
    out_$p110, out_$i111, out_$p112 := out_$p81, out_$i84, out_$p85;
    goto $bb40;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p110, out_$i111, out_$p112 := out_$p102, out_$i105, out_$p107;
    goto $bb40;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    out_$p107 := $load.bytes.ref($M.0, out_$p106);
    goto corral_source_split_167;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(out_$p102, $mul.ref(0bv64, 72bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_166;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    out_$i105 := $zext.bv32.bv64(out_$i104);
    call {:si_unique_call 50} {:cexpr "current_rx_bytes"} boogie_si_record_bv64(out_$i105);
    goto corral_source_split_165;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    out_$i104 := $load.bytes.bv32($M.0, out_$p103);
    goto corral_source_split_164;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(out_$p102, $mul.ref(0bv64, 72bv64)), $mul.ref(68bv64, 1bv64));
    goto corral_source_split_163;

  $bb36:
    assume out_$i101 == 1bv1;
    assume {:verifier.code 0} true;
    goto corral_source_split_162;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    out_$p102 := out_$p93;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    out_$i101 := $ne.bv64(out_$i100, 0bv64);
    goto corral_source_split_156;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    out_$i100 := $p2i.ref.bv64(out_$p99);
    goto corral_source_split_155;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    out_$p99 := $load.bytes.ref($M.0, out_$p98);
    goto corral_source_split_154;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(out_$p92, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_153;

  $bb33:
    assume out_$i97 == 1bv1;
    goto corral_source_split_152;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    out_$i97 := $ne.bv32(out_$i96, 0bv32);
    goto corral_source_split_150;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    out_$i96 := $load.bytes.bv32($M.0, out_$p95);
    goto corral_source_split_149;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(out_$p92, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(68bv64, 1bv64));
    goto corral_source_split_148;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} list_del_init(out_$p94);
    goto corral_source_split_147;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(out_$p92, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_146;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref(out_$p92, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64));
    goto corral_source_split_145;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    out_$p92 := $bitcast.ref.ref(out_$p91);
    goto corral_source_split_144;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    out_$p91 := $load.bytes.ref($M.0, out_$p90);
    goto corral_source_split_143;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref($add.ref(in_$p7, $mul.ref(0bv64, 824bv64)), $mul.ref(304bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_142;

  $bb31:
    assume out_$i88 == 1bv1;
    goto corral_source_split_141;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.bv64(out_$i84, 0bv64);
    goto corral_source_split_139;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb55:
    assume out_$i157 == 1bv1;
    goto corral_source_split_232;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    out_$p158, out_$i159, out_$i160, out_$i161, out_$p162 := out_$p81, out_$i82, out_$i83, out_$i84, out_$p85;
    assume true;
    goto $bb55;

  $bb52:
    assume {:verifier.code 0} true;
    out_$i157 := $ne.bv64(out_$i86, 0bv64);
    goto corral_source_split_226;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb50:
    assume out_$i144 == 1bv1;
    goto corral_source_split_215;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb39:
    call out_$i88, out_$p90, out_$p91, out_$p92, out_$p93, out_$p94, out_$p95, out_$i96, out_$i97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p108, out_$p109, out_$i144, out_$p145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p152, out_$i153, out_$i154, out_$i155, out_$p156 := printer_read_loop_$bb39(in_$p7, out_$i88, out_$p90, out_$p91, out_$p92, out_$p93, out_$p94, out_$p95, out_$i96, out_$i97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p108, out_$p109, out_$p81, out_$i82, out_$i83, out_$i84, out_$p85, out_$i86, out_$i144, out_$p145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p152, out_$i153, out_$i154, out_$i155, out_$p156);
    goto $bb39_last;

  $bb39_last:
    assume {:verifier.code 0} true;
    out_$i144 := $ne.bv64(out_$i84, 0bv64);
    goto corral_source_split_169;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    assume false;
    return;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} list_add(out_$p108, out_$p109);
    goto corral_source_split_160;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(in_$p7, $mul.ref(0bv64, 824bv64)), $mul.ref(272bv64, 1bv64));
    goto corral_source_split_159;

  $bb35:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(out_$p92, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_158;

  $bb34:
    assume {:verifier.code 0} true;
    assume !(out_$i97 == 1bv1);
    goto $bb35;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i101 == 1bv1);
    goto $bb35;

  $bb53:
    assume out_$i151 == 1bv1;
    goto corral_source_split_228;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    out_$p152, out_$i153, out_$i154, out_$i155, out_$p156 := out_$p81, out_$i82, out_$i83, out_$i84, out_$p85;
    assume true;
    goto $bb53;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    out_$i151 := $ne.bv64(out_$i150, 0bv64);
    goto corral_source_split_224;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} out_$i150 := ldv__builtin_expect(out_$i149, 1bv64);
    call {:si_unique_call 68} {:cexpr "tmp___13"} boogie_si_record_bv64(out_$i150);
    goto corral_source_split_223;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    out_$i149 := $sext.bv32.bv64(out_$i148);
    goto corral_source_split_222;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    out_$i148 := $zext.bv1.bv32(out_$i147);
    goto corral_source_split_221;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    out_$i147 := $eq.bv32(out_$i146, 0bv32);
    goto corral_source_split_220;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} out_$i146 := list_empty(out_$p145);
    call {:si_unique_call 66} {:cexpr "tmp___12"} boogie_si_record_bv32(out_$i146);
    goto corral_source_split_219;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    out_$p145 := $add.ref($add.ref(in_$p7, $mul.ref(0bv64, 824bv64)), $mul.ref(304bv64, 1bv64));
    goto corral_source_split_218;

  $bb51:
    assume !(out_$i144 == 1bv1);
    goto corral_source_split_217;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref(in_$p7, $mul.ref(0bv64, 824bv64)), $mul.ref(272bv64, 1bv64));
    goto corral_source_split_211;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(out_$p110, $mul.ref(0bv64, 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_210;

  $bb48:
    assume !(out_$i136 == 1bv1);
    goto corral_source_split_209;

  corral_source_split_213_dummy:
    call {:si_unique_call 1} out_$i88, out_$p90, out_$p91, out_$p92, out_$p93, out_$p94, out_$p95, out_$i96, out_$i97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$i104, out_$i105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$i111, out_$p112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i136, out_$i137, out_$p138, out_$p142, out_$p143, out_$p139, out_$i140, out_$p141, out_$p81, out_$i82, out_$i83, out_$i84, out_$p85, out_$i86, out_$p87, out_$i144, out_$p145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p152, out_$i153, out_$i154, out_$i155, out_$p156 := printer_read_loop_$bb29(in_$p7, out_$i88, out_$p90, out_$p91, out_$p92, out_$p93, out_$p94, out_$p95, out_$i96, out_$i97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$i104, out_$i105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$i111, out_$p112, out_$p113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$i131, out_$i136, out_$i137, out_$p138, out_$p142, out_$p143, out_$p139, out_$i140, out_$p141, out_$p81, out_$i82, out_$i83, out_$i84, out_$p85, out_$i86, out_$p87, out_$i144, out_$p145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p152, out_$i153, out_$i154, out_$i155, out_$p156);
    return;

  exit:
    return;
}



procedure printer_read_loop_$bb29(in_$p7: ref, in_$i88: bv1, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$i96: bv32, in_$i97: bv1, in_$p98: ref, in_$p99: ref, in_$i100: bv64, in_$i101: bv1, in_$p102: ref, in_$p103: ref, in_$i104: bv32, in_$i105: bv64, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$i111: bv64, in_$p112: ref, in_$p113: ref, in_$i114: bv1, in_$i115: bv64, in_$i116: bv32, in_$i117: bv32, in_$i118: bv64, in_$i119: bv64, in_$i120: bv64, in_$i121: bv64, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$i125: bv64, in_$p126: ref, in_$i127: bv8, in_$i128: bv32, in_$i129: bv1, in_$p130: ref, in_$i131: bv64, in_$i136: bv1, in_$i137: bv64, in_$p138: ref, in_$p142: ref, in_$p143: ref, in_$p139: ref, in_$i140: bv64, in_$p141: ref, in_$p81: ref, in_$i82: bv64, in_$i83: bv64, in_$i84: bv64, in_$p85: ref, in_$i86: bv64, in_$p87: ref, in_$i144: bv1, in_$p145: ref, in_$i146: bv32, in_$i147: bv1, in_$i148: bv32, in_$i149: bv64, in_$i150: bv64, in_$i151: bv1, in_$i157: bv1, in_$p158: ref, in_$i159: bv64, in_$i160: bv64, in_$i161: bv64, in_$p162: ref, in_$p152: ref, in_$i153: bv64, in_$i154: bv64, in_$i155: bv64, in_$p156: ref) returns (out_$i88: bv1, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$i96: bv32, out_$i97: bv1, out_$p98: ref, out_$p99: ref, out_$i100: bv64, out_$i101: bv1, out_$p102: ref, out_$p103: ref, out_$i104: bv32, out_$i105: bv64, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$i111: bv64, out_$p112: ref, out_$p113: ref, out_$i114: bv1, out_$i115: bv64, out_$i116: bv32, out_$i117: bv32, out_$i118: bv64, out_$i119: bv64, out_$i120: bv64, out_$i121: bv64, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$i125: bv64, out_$p126: ref, out_$i127: bv8, out_$i128: bv32, out_$i129: bv1, out_$p130: ref, out_$i131: bv64, out_$i136: bv1, out_$i137: bv64, out_$p138: ref, out_$p142: ref, out_$p143: ref, out_$p139: ref, out_$i140: bv64, out_$p141: ref, out_$p81: ref, out_$i82: bv64, out_$i83: bv64, out_$i84: bv64, out_$p85: ref, out_$i86: bv64, out_$p87: ref, out_$i144: bv1, out_$p145: ref, out_$i146: bv32, out_$i147: bv1, out_$i148: bv32, out_$i149: bv64, out_$i150: bv64, out_$i151: bv1, out_$i157: bv1, out_$p158: ref, out_$i159: bv64, out_$i160: bv64, out_$i161: bv64, out_$p162: ref, out_$p152: ref, out_$i153: bv64, out_$i154: bv64, out_$i155: bv64, out_$p156: ref);
  modifies $M.0;



implementation printer_read_loop_$bb17(in_$p4: ref, in_$p58: ref, in_$p59: ref, in_$p66: ref, in_$i67: bv32, in_$i68: bv1, in_$i69: bv32, in_$i70: bv1, in_$i71: bv32, in_$i72: bv64, in_$i73: bv64, in_$i74: bv1) returns (out_$p66: ref, out_$i67: bv32, out_$i68: bv1, out_$i69: bv32, out_$i70: bv1, out_$i71: bv32, out_$i72: bv64, out_$i73: bv64, out_$i74: bv1)
{

  entry:
    out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74 := in_$p66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb25:
    assume {:verifier.code 0} true;
    assume !(out_$i74 == 1bv1);
    goto $bb25_dummy;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.bv64(out_$i73, 0bv64);
    goto corral_source_split_127;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} out_$i73 := ldv__builtin_expect(out_$i72, 1bv64);
    call {:si_unique_call 44} {:cexpr "tmp___2"} boogie_si_record_bv64(out_$i73);
    goto corral_source_split_126;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    out_$i72 := $sext.bv32.bv64(out_$i71);
    goto corral_source_split_125;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    out_$i71 := $zext.bv1.bv32(out_$i70);
    goto corral_source_split_124;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    out_$i70 := $eq.bv32(out_$i69, 0bv32);
    goto corral_source_split_123;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} out_$i69 := list_empty(in_$p59);
    call {:si_unique_call 42} {:cexpr "tmp___1"} boogie_si_record_bv32(out_$i69);
    goto corral_source_split_122;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} prepare_to_wait(in_$p58, in_$p4, 1bv32);
    goto corral_source_split_121;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} schedule();
    goto corral_source_split_119;

  $bb21:
    assume out_$i68 == 1bv1;
    goto corral_source_split_118;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    out_$i68 := $eq.bv32(out_$i67, 0bv32);
    goto corral_source_split_116;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} out_$i67 := signal_pending(out_$p66);
    call {:si_unique_call 38} {:cexpr "tmp___4"} boogie_si_record_bv32(out_$i67);
    goto corral_source_split_115;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} out_$p66 := get_current();
    goto corral_source_split_114;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74 := printer_read_loop_$bb17(in_$p4, in_$p58, in_$p59, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74);
    return;

  exit:
    return;
}



procedure printer_read_loop_$bb17(in_$p4: ref, in_$p58: ref, in_$p59: ref, in_$p66: ref, in_$i67: bv32, in_$i68: bv1, in_$i69: bv32, in_$i70: bv1, in_$i71: bv32, in_$i72: bv64, in_$i73: bv64, in_$i74: bv1) returns (out_$p66: ref, out_$i67: bv32, out_$i68: bv1, out_$i69: bv32, out_$i70: bv1, out_$i71: bv32, out_$i72: bv64, out_$i73: bv64, out_$i74: bv1);
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation printer_write_loop_$bb29(in_$p7: ref, in_$p70: ref, in_$i83: bv1, in_$i84: bv64, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$i92: bv32, in_$p93: ref, in_$i94: bv1, in_$p95: ref, in_$i96: bv8, in_$i97: bv8, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: bv16, in_$i102: bv64, in_$i103: bv64, in_$i104: bv1, in_$i105: bv32, in_$i106: bv8, in_$p107: ref, in_$i108: bv8, in_$i109: bv8, in_$i110: bv8, in_$i111: bv8, in_$i112: bv8, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$i116: bv64, in_$i117: bv1, in_$i118: bv64, in_$p119: ref, in_$i123: bv64, in_$i124: bv64, in_$p125: ref, in_$p126: ref, in_$p127: ref, in_$i128: bv64, in_$p129: ref, in_$i130: bv8, in_$i131: bv32, in_$i132: bv1, in_$p133: ref, in_$i134: bv64, in_$p139: ref, in_$p140: ref, in_$i141: bv32, in_$i142: bv1, in_$p143: ref, in_$i144: bv64, in_$p149: ref, in_$p150: ref, in_$i151: bv32, in_$i152: bv1, in_$i153: bv32, in_$i154: bv64, in_$i155: bv64, in_$i156: bv1, in_$p79: ref, in_$i80: bv64, in_$i81: bv64, in_$i82: bv64, in_$i159: bv1, in_$i160: bv64, in_$i161: bv64, in_$i157: bv64, in_$i158: bv64) returns (out_$i83: bv1, out_$i84: bv64, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$i92: bv32, out_$p93: ref, out_$i94: bv1, out_$p95: ref, out_$i96: bv8, out_$i97: bv8, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: bv16, out_$i102: bv64, out_$i103: bv64, out_$i104: bv1, out_$i105: bv32, out_$i106: bv8, out_$p107: ref, out_$i108: bv8, out_$i109: bv8, out_$i110: bv8, out_$i111: bv8, out_$i112: bv8, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$i116: bv64, out_$i117: bv1, out_$i118: bv64, out_$p119: ref, out_$i123: bv64, out_$i124: bv64, out_$p125: ref, out_$p126: ref, out_$p127: ref, out_$i128: bv64, out_$p129: ref, out_$i130: bv8, out_$i131: bv32, out_$i132: bv1, out_$p133: ref, out_$i134: bv64, out_$p139: ref, out_$p140: ref, out_$i141: bv32, out_$i142: bv1, out_$p143: ref, out_$i144: bv64, out_$p149: ref, out_$p150: ref, out_$i151: bv32, out_$i152: bv1, out_$i153: bv32, out_$i154: bv64, out_$i155: bv64, out_$i156: bv1, out_$p79: ref, out_$i80: bv64, out_$i81: bv64, out_$i82: bv64, out_$i159: bv1, out_$i160: bv64, out_$i161: bv64, out_$i157: bv64, out_$i158: bv64)
{

  entry:
    out_$i83, out_$i84, out_$p86, out_$p87, out_$p88, out_$p89, out_$p90, out_$p91, out_$i92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$p114, out_$p115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i123, out_$i124, out_$p125, out_$p126, out_$p127, out_$i128, out_$p129, out_$i130, out_$i131, out_$i132, out_$p133, out_$i134, out_$p139, out_$p140, out_$i141, out_$i142, out_$p143, out_$i144, out_$p149, out_$p150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$p79, out_$i80, out_$i81, out_$i82, out_$i159, out_$i160, out_$i161, out_$i157, out_$i158 := in_$i83, in_$i84, in_$p86, in_$p87, in_$p88, in_$p89, in_$p90, in_$p91, in_$i92, in_$p93, in_$i94, in_$p95, in_$i96, in_$i97, in_$p98, in_$p99, in_$p100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$p107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$p113, in_$p114, in_$p115, in_$i116, in_$i117, in_$i118, in_$p119, in_$i123, in_$i124, in_$p125, in_$p126, in_$p127, in_$i128, in_$p129, in_$i130, in_$i131, in_$i132, in_$p133, in_$i134, in_$p139, in_$p140, in_$i141, in_$i142, in_$p143, in_$i144, in_$p149, in_$p150, in_$i151, in_$i152, in_$i153, in_$i154, in_$i155, in_$i156, in_$p79, in_$i80, in_$i81, in_$i82, in_$i159, in_$i160, in_$i161, in_$i157, in_$i158;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_364;

  $bb46:
    assume out_$i156 == 1bv1;
    assume {:verifier.code 0} true;
    out_$p79, out_$i80, out_$i81, out_$i82 := out_$p125, out_$i124, out_$i123, out_$i128;
    goto $bb46_dummy;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    out_$i157, out_$i158 := out_$i128, out_$i123;
    assume true;
    goto $bb46;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    out_$i156 := $ne.bv64(out_$i155, 0bv64);
    goto corral_source_split_464;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} out_$i155 := ldv__builtin_expect(out_$i154, 1bv64);
    call {:si_unique_call 135} {:cexpr "tmp___14"} boogie_si_record_bv64(out_$i155);
    goto corral_source_split_463;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    out_$i154 := $sext.bv32.bv64(out_$i153);
    goto corral_source_split_462;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    out_$i153 := $zext.bv1.bv32(out_$i152);
    goto corral_source_split_461;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    out_$i152 := $eq.bv32(out_$i151, 0bv32);
    goto corral_source_split_460;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} out_$i151 := list_empty(in_$p70);
    call {:si_unique_call 133} {:cexpr "tmp___13"} boogie_si_record_bv32(out_$i151);
    goto corral_source_split_459;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} list_add(out_$p149, out_$p150);
    goto corral_source_split_458;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    out_$p150 := $add.ref($add.ref(in_$p7, $mul.ref(0bv64, 824bv64)), $mul.ref(416bv64, 1bv64));
    goto corral_source_split_457;

  $bb45:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref(out_$p88, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_456;

  $bb44:
    assume !(out_$i142 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    out_$p143, out_$i144 := out_$p89, out_$i128;
    assume true;
    goto $bb44;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    out_$i142 := $ne.bv32(out_$i141, 0bv32);
    goto corral_source_split_445;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} out_$i141 := usb_ep_queue(out_$p140, out_$p89, 32bv32);
    call {:si_unique_call 127} {:cexpr "tmp___12"} boogie_si_record_bv32(out_$i141);
    goto corral_source_split_444;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    out_$p140 := $load.bytes.ref($M.0, out_$p139);
    goto corral_source_split_443;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref(in_$p7, $mul.ref(0bv64, 824bv64)), $mul.ref(240bv64, 1bv64));
    goto corral_source_split_442;

  $bb41:
    assume !(out_$i132 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    out_$p133, out_$i134 := out_$p89, out_$i128;
    assume true;
    goto $bb41;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    out_$i132 := $ne.bv32(out_$i131, 0bv32);
    goto corral_source_split_431;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    out_$i131 := $zext.bv8.bv32(out_$i130);
    goto corral_source_split_430;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    out_$i130 := $load.bytes.bv8($M.0, out_$p129);
    goto corral_source_split_429;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(in_$p7, $mul.ref(0bv64, 824bv64)), $mul.ref(617bv64, 1bv64));
    goto corral_source_split_428;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} out_$i128 := _raw_spin_lock_irqsave(out_$p127);
    call {:si_unique_call 122} {:cexpr "flags"} boogie_si_record_bv64(out_$i128);
    goto corral_source_split_427;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} out_$p127 := spinlock_check(out_$p126);
    goto corral_source_split_426;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref(in_$p7, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_425;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref(out_$p79, $mul.ref(out_$i84, 1bv64));
    goto corral_source_split_424;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    out_$i124 := $sub.bv64(out_$i80, out_$i84);
    call {:si_unique_call 119} {:cexpr "len"} boogie_si_record_bv64(out_$i124);
    goto corral_source_split_423;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i123 := $add.bv64(out_$i81, out_$i84);
    call {:si_unique_call 118} {:cexpr "bytes_copied"} boogie_si_record_bv64(out_$i123);
    goto corral_source_split_422;

  $bb38:
    assume !(out_$i117 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    out_$i118, out_$p119 := out_$i81, out_$p89;
    assume true;
    goto $bb38;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    out_$i117 := $ne.bv64(out_$i116, 0bv64);
    goto corral_source_split_413;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} out_$i116 := copy_from_user(out_$p115, out_$p79, out_$i84);
    call {:si_unique_call 115} {:cexpr "tmp___10"} boogie_si_record_bv64(out_$i116);
    goto corral_source_split_412;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    out_$p115 := $load.bytes.ref($M.0, out_$p114);
    goto corral_source_split_411;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(out_$p88, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_410;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} spin_unlock_irqrestore(out_$p113, out_$i82);
    goto corral_source_split_409;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(in_$p7, $mul.ref(0bv64, 824bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_408;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, out_$p107, out_$i112);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv8($M.0, out_$p95, out_$i97);
    goto corral_source_split_389;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    out_$i97 := $and.bv8(out_$i96, $sub.bv8(0bv8, 3bv8));
    goto corral_source_split_388;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    out_$i96 := $load.bytes.bv8($M.0, out_$p95);
    goto corral_source_split_387;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(out_$p88, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(24bv64, 1bv64));
    goto corral_source_split_386;

  $bb34:
    assume out_$i94 == 1bv1;
    goto corral_source_split_385;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    out_$i94 := $ugt.bv64(out_$i80, out_$i84);
    goto corral_source_split_383;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv32($M.0, out_$p93, out_$i92);
    goto corral_source_split_382;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(out_$p88, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_381;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    out_$i92 := $trunc.bv64.bv32(out_$i84);
    goto corral_source_split_380;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, out_$p91, tx_complete);
    goto corral_source_split_379;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(out_$p88, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(32bv64, 1bv64));
    goto corral_source_split_378;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} list_del_init(out_$p90);
    goto corral_source_split_377;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p88, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_376;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref(out_$p88, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64));
    goto corral_source_split_375;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    out_$p88 := $bitcast.ref.ref(out_$p87);
    goto corral_source_split_374;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    out_$p87 := $load.bytes.ref($M.0, out_$p86);
    goto corral_source_split_373;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref($add.ref(in_$p7, $mul.ref(0bv64, 824bv64)), $mul.ref(400bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_372;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_371;

  $bb32:
    assume !(out_$i83 == 1bv1);
    assume {:verifier.code 0} true;
    out_$i84 := out_$i80;
    goto $bb33;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    out_$i84 := 8192bv64;
    goto $bb33;

  $bb31:
    assume out_$i83 == 1bv1;
    goto corral_source_split_369;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i83 := $ugt.bv64(out_$i80, 8192bv64);
    goto corral_source_split_367;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb48:
    assume out_$i159 == 1bv1;
    goto corral_source_split_468;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    out_$i160, out_$i161 := out_$i82, out_$i81;
    assume true;
    goto $bb48;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    out_$i159 := $ne.bv64(out_$i80, 0bv64);
    goto corral_source_split_365;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    out_$i112 := $or.bv8(out_$i111, out_$i110);
    goto corral_source_split_406;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    out_$i111 := $and.bv8(out_$i108, $sub.bv8(0bv8, 3bv8));
    goto corral_source_split_405;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    out_$i110 := $shl.bv8(out_$i109, 1bv8);
    goto corral_source_split_404;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    out_$i109 := $and.bv8(out_$i106, 1bv8);
    goto corral_source_split_403;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    out_$i108 := $load.bytes.bv8($M.0, out_$p107);
    goto corral_source_split_402;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(out_$p88, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(24bv64, 1bv64));
    goto corral_source_split_401;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    out_$i106 := $trunc.bv32.bv8(out_$i105);
    goto corral_source_split_400;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    out_$i105 := $zext.bv1.bv32(out_$i104);
    goto corral_source_split_399;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    out_$i104 := $eq.bv64(out_$i103, 0bv64);
    goto corral_source_split_398;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    out_$i103 := $urem.bv64(out_$i80, out_$i102);
    goto corral_source_split_397;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    out_$i102 := $zext.bv16.bv64(out_$i101);
    goto corral_source_split_396;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    out_$i101 := $load.bytes.bv16($M.0, out_$p100);
    goto corral_source_split_395;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p99, $mul.ref(0bv64, 48bv64)), $mul.ref(40bv64, 1bv64));
    goto corral_source_split_394;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    out_$p99 := $load.bytes.ref($M.0, out_$p98);
    goto corral_source_split_393;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(in_$p7, $mul.ref(0bv64, 824bv64)), $mul.ref(240bv64, 1bv64));
    goto corral_source_split_392;

  $bb35:
    assume !(out_$i94 == 1bv1);
    goto corral_source_split_391;

  $bb46_dummy:
    call {:si_unique_call 1} out_$i83, out_$i84, out_$p86, out_$p87, out_$p88, out_$p89, out_$p90, out_$p91, out_$i92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$p114, out_$p115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i123, out_$i124, out_$p125, out_$p126, out_$p127, out_$i128, out_$p129, out_$i130, out_$i131, out_$i132, out_$p133, out_$i134, out_$p139, out_$p140, out_$i141, out_$i142, out_$p143, out_$i144, out_$p149, out_$p150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$p79, out_$i80, out_$i81, out_$i82, out_$i159, out_$i160, out_$i161, out_$i157, out_$i158 := printer_write_loop_$bb29(in_$p7, in_$p70, out_$i83, out_$i84, out_$p86, out_$p87, out_$p88, out_$p89, out_$p90, out_$p91, out_$i92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$p114, out_$p115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i123, out_$i124, out_$p125, out_$p126, out_$p127, out_$i128, out_$p129, out_$i130, out_$i131, out_$i132, out_$p133, out_$i134, out_$p139, out_$p140, out_$i141, out_$i142, out_$p143, out_$i144, out_$p149, out_$p150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$p79, out_$i80, out_$i81, out_$i82, out_$i159, out_$i160, out_$i161, out_$i157, out_$i158);
    return;

  exit:
    return;
}



procedure printer_write_loop_$bb29(in_$p7: ref, in_$p70: ref, in_$i83: bv1, in_$i84: bv64, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$i92: bv32, in_$p93: ref, in_$i94: bv1, in_$p95: ref, in_$i96: bv8, in_$i97: bv8, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: bv16, in_$i102: bv64, in_$i103: bv64, in_$i104: bv1, in_$i105: bv32, in_$i106: bv8, in_$p107: ref, in_$i108: bv8, in_$i109: bv8, in_$i110: bv8, in_$i111: bv8, in_$i112: bv8, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$i116: bv64, in_$i117: bv1, in_$i118: bv64, in_$p119: ref, in_$i123: bv64, in_$i124: bv64, in_$p125: ref, in_$p126: ref, in_$p127: ref, in_$i128: bv64, in_$p129: ref, in_$i130: bv8, in_$i131: bv32, in_$i132: bv1, in_$p133: ref, in_$i134: bv64, in_$p139: ref, in_$p140: ref, in_$i141: bv32, in_$i142: bv1, in_$p143: ref, in_$i144: bv64, in_$p149: ref, in_$p150: ref, in_$i151: bv32, in_$i152: bv1, in_$i153: bv32, in_$i154: bv64, in_$i155: bv64, in_$i156: bv1, in_$p79: ref, in_$i80: bv64, in_$i81: bv64, in_$i82: bv64, in_$i159: bv1, in_$i160: bv64, in_$i161: bv64, in_$i157: bv64, in_$i158: bv64) returns (out_$i83: bv1, out_$i84: bv64, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$i92: bv32, out_$p93: ref, out_$i94: bv1, out_$p95: ref, out_$i96: bv8, out_$i97: bv8, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: bv16, out_$i102: bv64, out_$i103: bv64, out_$i104: bv1, out_$i105: bv32, out_$i106: bv8, out_$p107: ref, out_$i108: bv8, out_$i109: bv8, out_$i110: bv8, out_$i111: bv8, out_$i112: bv8, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$i116: bv64, out_$i117: bv1, out_$i118: bv64, out_$p119: ref, out_$i123: bv64, out_$i124: bv64, out_$p125: ref, out_$p126: ref, out_$p127: ref, out_$i128: bv64, out_$p129: ref, out_$i130: bv8, out_$i131: bv32, out_$i132: bv1, out_$p133: ref, out_$i134: bv64, out_$p139: ref, out_$p140: ref, out_$i141: bv32, out_$i142: bv1, out_$p143: ref, out_$i144: bv64, out_$p149: ref, out_$p150: ref, out_$i151: bv32, out_$i152: bv1, out_$i153: bv32, out_$i154: bv64, out_$i155: bv64, out_$i156: bv1, out_$p79: ref, out_$i80: bv64, out_$i81: bv64, out_$i82: bv64, out_$i159: bv1, out_$i160: bv64, out_$i161: bv64, out_$i157: bv64, out_$i158: bv64);
  modifies $M.0;



implementation printer_write_loop_$bb15(in_$p4: ref, in_$p48: ref, in_$p49: ref, in_$p56: ref, in_$i57: bv32, in_$i58: bv1, in_$i59: bv32, in_$i60: bv1, in_$i61: bv32, in_$i62: bv64, in_$i63: bv64, in_$i64: bv1) returns (out_$p56: ref, out_$i57: bv32, out_$i58: bv1, out_$i59: bv32, out_$i60: bv1, out_$i61: bv32, out_$i62: bv64, out_$i63: bv64, out_$i64: bv1)
{

  entry:
    out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64 := in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i64 == 1bv1);
    goto $bb23_dummy;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.bv64(out_$i63, 0bv64);
    goto corral_source_split_347;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} out_$i63 := ldv__builtin_expect(out_$i62, 1bv64);
    call {:si_unique_call 104} {:cexpr "tmp___2"} boogie_si_record_bv64(out_$i63);
    goto corral_source_split_346;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.bv32.bv64(out_$i61);
    goto corral_source_split_345;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    out_$i61 := $zext.bv1.bv32(out_$i60);
    goto corral_source_split_344;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.bv32(out_$i59, 0bv32);
    goto corral_source_split_343;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} out_$i59 := list_empty(in_$p49);
    call {:si_unique_call 102} {:cexpr "tmp___1"} boogie_si_record_bv32(out_$i59);
    goto corral_source_split_342;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} prepare_to_wait(in_$p48, in_$p4, 1bv32);
    goto corral_source_split_341;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} schedule();
    goto corral_source_split_339;

  $bb19:
    assume out_$i58 == 1bv1;
    goto corral_source_split_338;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.bv32(out_$i57, 0bv32);
    goto corral_source_split_336;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} out_$i57 := signal_pending(out_$p56);
    call {:si_unique_call 98} {:cexpr "tmp___4"} boogie_si_record_bv32(out_$i57);
    goto corral_source_split_335;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} out_$p56 := get_current();
    goto corral_source_split_334;

  $bb23_dummy:
    call {:si_unique_call 1} out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64 := printer_write_loop_$bb15(in_$p4, in_$p48, in_$p49, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64);
    return;

  exit:
    return;
}



procedure printer_write_loop_$bb15(in_$p4: ref, in_$p48: ref, in_$p49: ref, in_$p56: ref, in_$i57: bv32, in_$i58: bv1, in_$i59: bv32, in_$i60: bv1, in_$i61: bv32, in_$i62: bv64, in_$i63: bv64, in_$i64: bv1) returns (out_$p56: ref, out_$i57: bv32, out_$i58: bv1, out_$i59: bv32, out_$i60: bv1, out_$i61: bv32, out_$i62: bv64, out_$i63: bv64, out_$i64: bv1);
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation printer_fsync_loop_$bb8(in_$p2: ref, in_$p36: ref, in_$p37: ref, in_$p44: ref, in_$i45: bv32, in_$i46: bv1, in_$i47: bv32, in_$i48: bv1, in_$i49: bv32, in_$i50: bv64, in_$i51: bv64, in_$i52: bv1) returns (out_$p44: ref, out_$i45: bv32, out_$i46: bv1, out_$i47: bv32, out_$i48: bv1, out_$i49: bv32, out_$i50: bv64, out_$i51: bv64, out_$i52: bv1)
{

  entry:
    out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52 := in_$p44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i52 == 1bv1);
    goto $bb16_dummy;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.bv64(out_$i51, 0bv64);
    goto corral_source_split_698;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} out_$i51 := ldv__builtin_expect(out_$i50, 1bv64);
    call {:si_unique_call 216} {:cexpr "tmp___4"} boogie_si_record_bv64(out_$i51);
    goto corral_source_split_697;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.bv32.bv64(out_$i49);
    goto corral_source_split_696;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.bv1.bv32(out_$i48);
    goto corral_source_split_695;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.bv32(out_$i47, 0bv32);
    goto corral_source_split_694;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} out_$i47 := list_empty(in_$p37);
    call {:si_unique_call 214} {:cexpr "tmp___3"} boogie_si_record_bv32(out_$i47);
    goto corral_source_split_693;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} prepare_to_wait(in_$p36, in_$p2, 1bv32);
    goto corral_source_split_692;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} schedule();
    goto corral_source_split_690;

  $bb12:
    assume out_$i46 == 1bv1;
    goto corral_source_split_689;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.bv32(out_$i45, 0bv32);
    goto corral_source_split_687;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} out_$i45 := signal_pending(out_$p44);
    call {:si_unique_call 210} {:cexpr "tmp___6"} boogie_si_record_bv32(out_$i45);
    goto corral_source_split_686;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} out_$p44 := get_current();
    goto corral_source_split_685;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52 := printer_fsync_loop_$bb8(in_$p2, in_$p36, in_$p37, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52);
    return;

  exit:
    return;
}



procedure printer_fsync_loop_$bb8(in_$p2: ref, in_$p36: ref, in_$p37: ref, in_$p44: ref, in_$i45: bv32, in_$i46: bv1, in_$i47: bv32, in_$i48: bv1, in_$i49: bv32, in_$i50: bv64, in_$i51: bv64, in_$i52: bv1) returns (out_$p44: ref, out_$i45: bv32, out_$i46: bv1, out_$i47: bv32, out_$i48: bv1, out_$i49: bv32, out_$i50: bv64, out_$i51: bv64, out_$i52: bv1);
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation setup_rx_reqs_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: bv32, in_$i19: bv1, in_$p20: ref, in_$i21: bv32, in_$p25: ref, in_$p26: ref, in_$i27: bv32, in_$i28: bv1, in_$i29: bv32, in_$i30: bv64, in_$i31: bv64, in_$i32: bv1) returns (out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: bv32, out_$i19: bv1, out_$p20: ref, out_$i21: bv32, out_$p25: ref, out_$p26: ref, out_$i27: bv32, out_$i28: bv1, out_$i29: bv32, out_$i30: bv64, out_$i31: bv64, out_$i32: bv1)
{

  entry:
    out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32 := in_$p9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$i18, in_$i19, in_$p20, in_$i21, in_$p25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i32 == 1bv1;
    goto $bb10_dummy;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.bv64(out_$i31, 0bv64);
    goto corral_source_split_828;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} out_$i31 := ldv__builtin_expect(out_$i30, 1bv64);
    call {:si_unique_call 273} {:cexpr "tmp___0"} boogie_si_record_bv64(out_$i31);
    goto corral_source_split_827;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    out_$i30 := $sext.bv32.bv64(out_$i29);
    goto corral_source_split_826;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.bv1.bv32(out_$i28);
    goto corral_source_split_825;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.bv32(out_$i27, 0bv32);
    goto corral_source_split_824;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} out_$i27 := list_empty(in_$p1);
    call {:si_unique_call 271} {:cexpr "tmp"} boogie_si_record_bv32(out_$i27);
    goto corral_source_split_823;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} list_add(out_$p25, out_$p26);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p0, $mul.ref(0bv64, 824bv64)), $mul.ref(288bv64, 1bv64));
    goto corral_source_split_821;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p11, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_820;

  $bb7:
    assume !(out_$i19 == 1bv1);
    goto corral_source_split_819;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    out_$p20, out_$i21 := out_$p12, out_$i18;
    assume true;
    goto $bb7;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.bv32(out_$i18, 0bv32);
    goto corral_source_split_811;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} out_$i18 := usb_ep_queue(out_$p17, out_$p12, 32bv32);
    call {:si_unique_call 266} {:cexpr "error"} boogie_si_record_bv32(out_$i18);
    goto corral_source_split_810;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    out_$p17 := $load.bytes.ref($M.0, out_$p16);
    goto corral_source_split_809;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p0, $mul.ref(0bv64, 824bv64)), $mul.ref(248bv64, 1bv64));
    goto corral_source_split_808;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, out_$p15, rx_complete);
    goto corral_source_split_807;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p11, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(32bv64, 1bv64));
    goto corral_source_split_806;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.bv32($M.0, out_$p14, 8192bv32);
    goto corral_source_split_805;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p11, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_804;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} list_del_init(out_$p13);
    goto corral_source_split_803;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p11, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_802;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(out_$p11, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64));
    goto corral_source_split_801;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    out_$p11 := $bitcast.ref.ref(out_$p10);
    goto corral_source_split_800;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    out_$p10 := $load.bytes.ref($M.0, out_$p9);
    goto corral_source_split_799;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0bv64, 824bv64)), $mul.ref(272bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_798;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32 := setup_rx_reqs_loop_$bb4(in_$p0, in_$p1, out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32);
    return;

  exit:
    return;
}



procedure setup_rx_reqs_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: bv32, in_$i19: bv1, in_$p20: ref, in_$i21: bv32, in_$p25: ref, in_$p26: ref, in_$i27: bv32, in_$i28: bv1, in_$i29: bv32, in_$i30: bv64, in_$i31: bv64, in_$i32: bv1) returns (out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: bv32, out_$i19: bv1, out_$p20: ref, out_$i21: bv32, out_$p25: ref, out_$p26: ref, out_$i27: bv32, out_$i28: bv1, out_$i29: bv32, out_$i30: bv64, out_$i31: bv64, out_$i32: bv1);
  modifies $M.0;



implementation printer_bind_loop_$bb75(in_$p184: ref, in_$p188: ref, in_$p189: ref, in_$p190: ref, in_$p191: ref, in_$p192: ref, in_$p193: ref, in_$p194: ref, in_$i195: bv32, in_$i196: bv1) returns (out_$p188: ref, out_$p189: ref, out_$p190: ref, out_$p191: ref, out_$p192: ref, out_$p193: ref, out_$p194: ref, out_$i195: bv32, out_$i196: bv1)
{

  entry:
    out_$p188, out_$p189, out_$p190, out_$p191, out_$p192, out_$p193, out_$p194, out_$i195, out_$i196 := in_$p188, in_$p189, in_$p190, in_$p191, in_$p192, in_$p193, in_$p194, in_$i195, in_$i196;
    goto $bb75, exit;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb77:
    assume {:verifier.code 0} true;
    assume out_$i196 == 1bv1;
    goto $bb77_dummy;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    out_$i196 := $eq.bv32(out_$i195, 0bv32);
    goto corral_source_split_1339;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} out_$i195 := list_empty(in_$p184);
    call {:si_unique_call 394} {:cexpr "tmp___3"} boogie_si_record_bv32(out_$i195);
    goto corral_source_split_1338;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} printer_req_free(out_$p194, out_$p191);
    goto corral_source_split_1337;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    out_$p194 := $load.bytes.ref($M.0, out_$p193);
    goto corral_source_split_1336;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    out_$p193 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(248bv64, 1bv64));
    goto corral_source_split_1335;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} list_del(out_$p192);
    goto corral_source_split_1334;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    out_$p192 := $add.ref($add.ref(out_$p190, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_1333;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    out_$p191 := $add.ref(out_$p190, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64));
    goto corral_source_split_1332;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    out_$p190 := $bitcast.ref.ref(out_$p189);
    goto corral_source_split_1331;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    out_$p189 := $load.bytes.ref($M.0, out_$p188);
    goto corral_source_split_1330;

  $bb76:
    assume {:verifier.code 0} true;
    out_$p188 := $add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(272bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1329;

  $bb77_dummy:
    call {:si_unique_call 1} out_$p188, out_$p189, out_$p190, out_$p191, out_$p192, out_$p193, out_$p194, out_$i195, out_$i196 := printer_bind_loop_$bb75(in_$p184, out_$p188, out_$p189, out_$p190, out_$p191, out_$p192, out_$p193, out_$p194, out_$i195, out_$i196);
    return;

  exit:
    return;
}



procedure printer_bind_loop_$bb75(in_$p184: ref, in_$p188: ref, in_$p189: ref, in_$p190: ref, in_$p191: ref, in_$p192: ref, in_$p193: ref, in_$p194: ref, in_$i195: bv32, in_$i196: bv1) returns (out_$p188: ref, out_$p189: ref, out_$p190: ref, out_$p191: ref, out_$p192: ref, out_$p193: ref, out_$p194: ref, out_$i195: bv32, out_$i196: bv1);
  modifies $M.0;



implementation printer_bind_loop_$bb68(in_$p179: ref, in_$p180: ref, in_$p181: ref, in_$i182: bv64, in_$i183: bv1, in_$p197: ref, in_$p198: ref, in_$i199: bv32, in_$i200: bv32, in_$i201: bv1, in_$i178: bv32) returns (out_$p179: ref, out_$p180: ref, out_$p181: ref, out_$i182: bv64, out_$i183: bv1, out_$p197: ref, out_$p198: ref, out_$i199: bv32, out_$i200: bv32, out_$i201: bv1, out_$i178: bv32)
{

  entry:
    out_$p179, out_$p180, out_$p181, out_$i182, out_$i183, out_$p197, out_$p198, out_$i199, out_$i200, out_$i201, out_$i178 := in_$p179, in_$p180, in_$p181, in_$i182, in_$i183, in_$p197, in_$p198, in_$i199, in_$i200, in_$i201, in_$i178;
    goto $bb68, exit;

  $bb68:
    assume {:verifier.code 0} true;
    goto corral_source_split_1314;

  $bb81:
    assume out_$i201 == 1bv1;
    assume {:verifier.code 0} true;
    out_$i178 := out_$i199;
    goto $bb81_dummy;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    out_$i201 := $ult.bv32(out_$i199, out_$i200);
    goto corral_source_split_1348;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    out_$i200 := $M.16;
    goto corral_source_split_1347;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    out_$i199 := $add.bv32(out_$i178, 1bv32);
    call {:si_unique_call 396} {:cexpr "i"} boogie_si_record_bv32(out_$i199);
    goto corral_source_split_1346;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} list_add(out_$p197, out_$p198);
    goto corral_source_split_1345;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    out_$p198 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(272bv64, 1bv64));
    goto corral_source_split_1344;

  $bb80:
    assume {:verifier.code 0} true;
    out_$p197 := $add.ref($add.ref(out_$p181, $mul.ref(0bv64, 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_1343;

  $bb71:
    assume !(out_$i183 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    out_$i183 := $eq.bv64(out_$i182, 0bv64);
    goto corral_source_split_1320;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    out_$i182 := $p2i.ref.bv64(out_$p181);
    goto corral_source_split_1319;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} out_$p181 := printer_req_alloc(out_$p180, 8192bv32, 208bv32);
    goto corral_source_split_1318;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    out_$p180 := $load.bytes.ref($M.0, out_$p179);
    goto corral_source_split_1317;

  $bb69:
    assume {:verifier.code 0} true;
    out_$p179 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(248bv64, 1bv64));
    goto corral_source_split_1316;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb81_dummy:
    call {:si_unique_call 1} out_$p179, out_$p180, out_$p181, out_$i182, out_$i183, out_$p197, out_$p198, out_$i199, out_$i200, out_$i201, out_$i178 := printer_bind_loop_$bb68(out_$p179, out_$p180, out_$p181, out_$i182, out_$i183, out_$p197, out_$p198, out_$i199, out_$i200, out_$i201, out_$i178);
    return;

  exit:
    return;
}



procedure printer_bind_loop_$bb68(in_$p179: ref, in_$p180: ref, in_$p181: ref, in_$i182: bv64, in_$i183: bv1, in_$p197: ref, in_$p198: ref, in_$i199: bv32, in_$i200: bv32, in_$i201: bv1, in_$i178: bv32) returns (out_$p179: ref, out_$p180: ref, out_$p181: ref, out_$i182: bv64, out_$i183: bv1, out_$p197: ref, out_$p198: ref, out_$i199: bv32, out_$i200: bv32, out_$i201: bv1, out_$i178: bv32);
  modifies $M.0, $CurrAddr;



implementation printer_bind_loop_$bb56(in_$p158: ref, in_$p162: ref, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$p166: ref, in_$p167: ref, in_$p168: ref, in_$i169: bv32, in_$i170: bv1) returns (out_$p162: ref, out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$p166: ref, out_$p167: ref, out_$p168: ref, out_$i169: bv32, out_$i170: bv1)
{

  entry:
    out_$p162, out_$p163, out_$p164, out_$p165, out_$p166, out_$p167, out_$p168, out_$i169, out_$i170 := in_$p162, in_$p163, in_$p164, in_$p165, in_$p166, in_$p167, in_$p168, in_$i169, in_$i170;
    goto $bb56, exit;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb58:
    assume {:verifier.code 0} true;
    assume out_$i170 == 1bv1;
    goto $bb58_dummy;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    out_$i170 := $eq.bv32(out_$i169, 0bv32);
    goto corral_source_split_1296;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} out_$i169 := list_empty(in_$p158);
    call {:si_unique_call 385} {:cexpr "tmp___2"} boogie_si_record_bv32(out_$i169);
    goto corral_source_split_1295;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} printer_req_free(out_$p168, out_$p165);
    goto corral_source_split_1294;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    out_$p168 := $load.bytes.ref($M.0, out_$p167);
    goto corral_source_split_1293;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    out_$p167 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(240bv64, 1bv64));
    goto corral_source_split_1292;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} list_del(out_$p166);
    goto corral_source_split_1291;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    out_$p166 := $add.ref($add.ref(out_$p164, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_1290;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref(out_$p164, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64));
    goto corral_source_split_1289;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    out_$p164 := $bitcast.ref.ref(out_$p163);
    goto corral_source_split_1288;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    out_$p163 := $load.bytes.ref($M.0, out_$p162);
    goto corral_source_split_1287;

  $bb57:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(400bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1286;

  $bb58_dummy:
    call {:si_unique_call 1} out_$p162, out_$p163, out_$p164, out_$p165, out_$p166, out_$p167, out_$p168, out_$i169, out_$i170 := printer_bind_loop_$bb56(in_$p158, out_$p162, out_$p163, out_$p164, out_$p165, out_$p166, out_$p167, out_$p168, out_$i169, out_$i170);
    return;

  exit:
    return;
}



procedure printer_bind_loop_$bb56(in_$p158: ref, in_$p162: ref, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$p166: ref, in_$p167: ref, in_$p168: ref, in_$i169: bv32, in_$i170: bv1) returns (out_$p162: ref, out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$p166: ref, out_$p167: ref, out_$p168: ref, out_$i169: bv32, out_$i170: bv1);
  modifies $M.0;



implementation printer_bind_loop_$bb49(in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$i156: bv64, in_$i157: bv1, in_$p171: ref, in_$p172: ref, in_$i173: bv32, in_$i174: bv32, in_$i175: bv1, in_$i152: bv32) returns (out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$i156: bv64, out_$i157: bv1, out_$p171: ref, out_$p172: ref, out_$i173: bv32, out_$i174: bv32, out_$i175: bv1, out_$i152: bv32)
{

  entry:
    out_$p153, out_$p154, out_$p155, out_$i156, out_$i157, out_$p171, out_$p172, out_$i173, out_$i174, out_$i175, out_$i152 := in_$p153, in_$p154, in_$p155, in_$i156, in_$i157, in_$p171, in_$p172, in_$i173, in_$i174, in_$i175, in_$i152;
    goto $bb49, exit;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_1271;

  $bb62:
    assume out_$i175 == 1bv1;
    assume {:verifier.code 0} true;
    out_$i152 := out_$i173;
    goto $bb62_dummy;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    out_$i175 := $ult.bv32(out_$i173, out_$i174);
    goto corral_source_split_1305;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    out_$i174 := $M.16;
    goto corral_source_split_1304;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    out_$i173 := $add.bv32(out_$i152, 1bv32);
    call {:si_unique_call 387} {:cexpr "i"} boogie_si_record_bv32(out_$i173);
    goto corral_source_split_1303;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} list_add(out_$p171, out_$p172);
    goto corral_source_split_1302;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    out_$p172 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(400bv64, 1bv64));
    goto corral_source_split_1301;

  $bb61:
    assume {:verifier.code 0} true;
    out_$p171 := $add.ref($add.ref(out_$p155, $mul.ref(0bv64, 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_1300;

  $bb52:
    assume !(out_$i157 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    out_$i157 := $eq.bv64(out_$i156, 0bv64);
    goto corral_source_split_1277;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    out_$i156 := $p2i.ref.bv64(out_$p155);
    goto corral_source_split_1276;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} out_$p155 := printer_req_alloc(out_$p154, 8192bv32, 208bv32);
    goto corral_source_split_1275;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    out_$p154 := $load.bytes.ref($M.0, out_$p153);
    goto corral_source_split_1274;

  $bb50:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref($add.ref(usb_printer_gadget, $mul.ref(0bv64, 824bv64)), $mul.ref(240bv64, 1bv64));
    goto corral_source_split_1273;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb62_dummy:
    call {:si_unique_call 1} out_$p153, out_$p154, out_$p155, out_$i156, out_$i157, out_$p171, out_$p172, out_$i173, out_$i174, out_$i175, out_$i152 := printer_bind_loop_$bb49(out_$p153, out_$p154, out_$p155, out_$i156, out_$i157, out_$p171, out_$p172, out_$i173, out_$i174, out_$i175, out_$i152);
    return;

  exit:
    return;
}



procedure printer_bind_loop_$bb49(in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$i156: bv64, in_$i157: bv1, in_$p171: ref, in_$p172: ref, in_$i173: bv32, in_$i174: bv32, in_$i175: bv1, in_$i152: bv32) returns (out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$i156: bv64, out_$i157: bv1, out_$p171: ref, out_$p172: ref, out_$i173: bv32, out_$i174: bv32, out_$i175: bv1, out_$i152: bv32);
  modifies $M.0, $CurrAddr;



implementation printer_unbind_loop_$bb29(in_$p2: ref, in_$p67: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: bv32, in_$i79: bv1) returns (out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: bv32, out_$i79: bv1)
{

  entry:
    out_$p71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79 := in_$p71, in_$p72, in_$p73, in_$p74, in_$p75, in_$p76, in_$p77, in_$i78, in_$i79;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb31:
    assume {:verifier.code 0} true;
    assume out_$i79 == 1bv1;
    goto $bb31_dummy;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    out_$i79 := $eq.bv32(out_$i78, 0bv32);
    goto corral_source_split_1485;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} out_$i78 := list_empty(in_$p67);
    call {:si_unique_call 436} {:cexpr "tmp___6"} boogie_si_record_bv32(out_$i78);
    goto corral_source_split_1484;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} printer_req_free(out_$p77, out_$p74);
    goto corral_source_split_1483;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    out_$p77 := $load.bytes.ref($M.0, out_$p76);
    goto corral_source_split_1482;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p2, $mul.ref(0bv64, 824bv64)), $mul.ref(248bv64, 1bv64));
    goto corral_source_split_1481;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} list_del(out_$p75);
    goto corral_source_split_1480;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p73, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_1479;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref(out_$p73, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64));
    goto corral_source_split_1478;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    out_$p73 := $bitcast.ref.ref(out_$p72);
    goto corral_source_split_1477;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    out_$p72 := $load.bytes.ref($M.0, out_$p71);
    goto corral_source_split_1476;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0bv64, 824bv64)), $mul.ref(304bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1475;

  $bb31_dummy:
    call {:si_unique_call 1} out_$p71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79 := printer_unbind_loop_$bb29(in_$p2, in_$p67, out_$p71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79);
    return;

  exit:
    return;
}



procedure printer_unbind_loop_$bb29(in_$p2: ref, in_$p67: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: bv32, in_$i79: bv1) returns (out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: bv32, out_$i79: bv1);
  modifies $M.0;



implementation printer_unbind_loop_$bb21(in_$p2: ref, in_$p54: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: bv32, in_$i66: bv1) returns (out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: bv32, out_$i66: bv1)
{

  entry:
    out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66 := in_$p58, in_$p59, in_$p60, in_$p61, in_$p62, in_$p63, in_$p64, in_$i65, in_$i66;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23:
    assume {:verifier.code 0} true;
    assume out_$i66 == 1bv1;
    goto $bb23_dummy;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    out_$i66 := $eq.bv32(out_$i65, 0bv32);
    goto corral_source_split_1465;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} out_$i65 := list_empty(in_$p54);
    call {:si_unique_call 430} {:cexpr "tmp___5"} boogie_si_record_bv32(out_$i65);
    goto corral_source_split_1464;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} printer_req_free(out_$p64, out_$p61);
    goto corral_source_split_1463;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    out_$p64 := $load.bytes.ref($M.0, out_$p63);
    goto corral_source_split_1462;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p2, $mul.ref(0bv64, 824bv64)), $mul.ref(248bv64, 1bv64));
    goto corral_source_split_1461;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} list_del(out_$p62);
    goto corral_source_split_1460;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p60, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_1459;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref(out_$p60, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64));
    goto corral_source_split_1458;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    out_$p60 := $bitcast.ref.ref(out_$p59);
    goto corral_source_split_1457;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    out_$p59 := $load.bytes.ref($M.0, out_$p58);
    goto corral_source_split_1456;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0bv64, 824bv64)), $mul.ref(272bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1455;

  $bb23_dummy:
    call {:si_unique_call 1} out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66 := printer_unbind_loop_$bb21(in_$p2, in_$p54, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66);
    return;

  exit:
    return;
}



procedure printer_unbind_loop_$bb21(in_$p2: ref, in_$p54: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: bv32, in_$i66: bv1) returns (out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: bv32, out_$i66: bv1);
  modifies $M.0;



implementation printer_unbind_loop_$bb10(in_$p2: ref, in_$p33: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: bv32, in_$i45: bv1) returns (out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: bv32, out_$i45: bv1)
{

  entry:
    out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45 := in_$p37, in_$p38, in_$p39, in_$p40, in_$p41, in_$p42, in_$p43, in_$i44, in_$i45;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i45 == 1bv1;
    goto $bb12_dummy;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.bv32(out_$i44, 0bv32);
    goto corral_source_split_1433;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} out_$i44 := list_empty(in_$p33);
    call {:si_unique_call 423} {:cexpr "tmp___4"} boogie_si_record_bv32(out_$i44);
    goto corral_source_split_1432;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} printer_req_free(out_$p43, out_$p40);
    goto corral_source_split_1431;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    out_$p43 := $load.bytes.ref($M.0, out_$p42);
    goto corral_source_split_1430;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p2, $mul.ref(0bv64, 824bv64)), $mul.ref(240bv64, 1bv64));
    goto corral_source_split_1429;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} list_del(out_$p41);
    goto corral_source_split_1428;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p39, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_1427;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref(out_$p39, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64));
    goto corral_source_split_1426;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    out_$p39 := $bitcast.ref.ref(out_$p38);
    goto corral_source_split_1425;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    out_$p38 := $load.bytes.ref($M.0, out_$p37);
    goto corral_source_split_1424;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0bv64, 824bv64)), $mul.ref(400bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1423;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45 := printer_unbind_loop_$bb10(in_$p2, in_$p33, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45);
    return;

  exit:
    return;
}



procedure printer_unbind_loop_$bb10(in_$p2: ref, in_$p33: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: bv32, in_$i45: bv1) returns (out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: bv32, out_$i45: bv1);
  modifies $M.0;



implementation usb_gadget_get_string_loop_$bb8(in_$i1: bv32, in_$p22: ref, in_$i23: bv8, in_$i24: bv32, in_$i25: bv1, in_$p26: ref, in_$p28: ref, in_$i29: bv64, in_$i30: bv1, in_$p21: ref, in_$p32: ref, in_$p33: ref, in_$i34: bv64, in_$i35: bv1, in_$p36: ref, in_$p31: ref) returns (out_$p22: ref, out_$i23: bv8, out_$i24: bv32, out_$i25: bv1, out_$p26: ref, out_$p28: ref, out_$i29: bv64, out_$i30: bv1, out_$p21: ref, out_$p32: ref, out_$p33: ref, out_$i34: bv64, out_$i35: bv1, out_$p36: ref, out_$p31: ref)
{

  entry:
    out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p28, out_$i29, out_$i30, out_$p21, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p31 := in_$p22, in_$i23, in_$i24, in_$i25, in_$p26, in_$p28, in_$i29, in_$i30, in_$p21, in_$p32, in_$p33, in_$i34, in_$i35, in_$p36, in_$p31;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1993;

  $bb14:
    assume out_$i30 == 1bv1;
    assume {:verifier.code 0} true;
    out_$p21 := out_$p28;
    goto $bb14_dummy;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    out_$p31 := out_$p28;
    assume true;
    goto $bb14;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.bv64(out_$i29, 0bv64);
    goto corral_source_split_2012;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.bv64(out_$p28);
    goto corral_source_split_2011;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref(out_$p21, $mul.ref(1bv64, 16bv64));
    goto corral_source_split_2010;

  $bb11:
    assume !(out_$i25 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    out_$p26 := out_$p21;
    assume true;
    goto $bb11;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.bv32(out_$i24, in_$i1);
    goto corral_source_split_2002;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.bv8.bv32(out_$i23);
    goto corral_source_split_2001;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    out_$i23 := $load.bytes.bv8($M.0, out_$p22);
    goto corral_source_split_2000;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0bv64, 16bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_1999;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume out_$i35 == 1bv1;
    goto corral_source_split_2016;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    out_$p36 := out_$p21;
    assume true;
    goto $bb16;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.bv64(out_$i34, 0bv64);
    goto corral_source_split_1997;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.bv64(out_$p33);
    goto corral_source_split_1996;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    out_$p33 := $load.bytes.ref($M.0, out_$p32);
    goto corral_source_split_1995;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p21, $mul.ref(0bv64, 16bv64)), $mul.ref(8bv64, 1bv64));
    goto corral_source_split_1994;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p28, out_$i29, out_$i30, out_$p21, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p31 := usb_gadget_get_string_loop_$bb8(in_$i1, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p28, out_$i29, out_$i30, out_$p21, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p31);
    return;

  exit:
    return;
}



procedure usb_gadget_get_string_loop_$bb8(in_$i1: bv32, in_$p22: ref, in_$i23: bv8, in_$i24: bv32, in_$i25: bv1, in_$p26: ref, in_$p28: ref, in_$i29: bv64, in_$i30: bv1, in_$p21: ref, in_$p32: ref, in_$p33: ref, in_$i34: bv64, in_$i35: bv1, in_$p36: ref, in_$p31: ref) returns (out_$p22: ref, out_$i23: bv8, out_$i24: bv32, out_$i25: bv1, out_$p26: ref, out_$p28: ref, out_$i29: bv64, out_$i30: bv1, out_$p21: ref, out_$p32: ref, out_$p33: ref, out_$i34: bv64, out_$i35: bv1, out_$p36: ref, out_$p31: ref);



implementation printer_soft_reset_loop_$bb29(in_$p0: ref, in_$p66: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: bv32, in_$i82: bv1, in_$i83: bv32, in_$i84: bv64, in_$i85: bv64, in_$i86: bv1) returns (out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: bv32, out_$i82: bv1, out_$i83: bv32, out_$i84: bv64, out_$i85: bv64, out_$i86: bv1)
{

  entry:
    out_$p74, out_$p75, out_$p76, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86 := in_$p74, in_$p75, in_$p76, in_$p78, in_$p79, in_$p80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb31:
    assume {:verifier.code 0} true;
    assume out_$i86 == 1bv1;
    goto $bb31_dummy;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    out_$i86 := $ne.bv64(out_$i85, 0bv64);
    goto corral_source_split_2243;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} out_$i85 := ldv__builtin_expect(out_$i84, 1bv64);
    call {:si_unique_call 549} {:cexpr "tmp___6"} boogie_si_record_bv64(out_$i85);
    goto corral_source_split_2242;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    out_$i84 := $sext.bv32.bv64(out_$i83);
    goto corral_source_split_2241;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    out_$i83 := $zext.bv1.bv32(out_$i82);
    goto corral_source_split_2240;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.bv32(out_$i81, 0bv32);
    goto corral_source_split_2239;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} out_$i81 := list_empty(in_$p66);
    call {:si_unique_call 547} {:cexpr "tmp___5"} boogie_si_record_bv32(out_$i81);
    goto corral_source_split_2238;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} list_add(out_$p79, out_$p80);
    goto corral_source_split_2237;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p0, $mul.ref(0bv64, 824bv64)), $mul.ref(400bv64, 1bv64));
    goto corral_source_split_2236;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p76, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_2235;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} list_del_init(out_$p78);
    goto corral_source_split_2234;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(out_$p76, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_2233;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    goto corral_source_split_2232;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    out_$p76 := $bitcast.ref.ref(out_$p75);
    goto corral_source_split_2231;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    out_$p75 := $load.bytes.ref($M.0, out_$p74);
    goto corral_source_split_2230;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0bv64, 824bv64)), $mul.ref(416bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2229;

  $bb31_dummy:
    call {:si_unique_call 1} out_$p74, out_$p75, out_$p76, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86 := printer_soft_reset_loop_$bb29(in_$p0, in_$p66, out_$p74, out_$p75, out_$p76, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86);
    return;

  exit:
    return;
}



procedure printer_soft_reset_loop_$bb29(in_$p0: ref, in_$p66: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: bv32, in_$i82: bv1, in_$i83: bv32, in_$i84: bv64, in_$i85: bv64, in_$i86: bv1) returns (out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: bv32, out_$i82: bv1, out_$i83: bv32, out_$i84: bv64, out_$i85: bv64, out_$i86: bv1);
  modifies $M.0;



implementation printer_soft_reset_loop_$bb21(in_$p0: ref, in_$p45: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: bv32, in_$i61: bv1, in_$i62: bv32, in_$i63: bv64, in_$i64: bv64, in_$i65: bv1) returns (out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: bv32, out_$i61: bv1, out_$i62: bv32, out_$i63: bv64, out_$i64: bv64, out_$i65: bv1)
{

  entry:
    out_$p53, out_$p54, out_$p55, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65 := in_$p53, in_$p54, in_$p55, in_$p57, in_$p58, in_$p59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23:
    assume {:verifier.code 0} true;
    assume out_$i65 == 1bv1;
    goto $bb23_dummy;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.bv64(out_$i64, 0bv64);
    goto corral_source_split_2215;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} out_$i64 := ldv__builtin_expect(out_$i63, 1bv64);
    call {:si_unique_call 539} {:cexpr "tmp___4"} boogie_si_record_bv64(out_$i64);
    goto corral_source_split_2214;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    out_$i63 := $sext.bv32.bv64(out_$i62);
    goto corral_source_split_2213;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    out_$i62 := $zext.bv1.bv32(out_$i61);
    goto corral_source_split_2212;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.bv32(out_$i60, 0bv32);
    goto corral_source_split_2211;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} out_$i60 := list_empty(in_$p45);
    call {:si_unique_call 537} {:cexpr "tmp___3"} boogie_si_record_bv32(out_$i60);
    goto corral_source_split_2210;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} list_add(out_$p58, out_$p59);
    goto corral_source_split_2209;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p0, $mul.ref(0bv64, 824bv64)), $mul.ref(272bv64, 1bv64));
    goto corral_source_split_2208;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p55, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_2207;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} list_del_init(out_$p57);
    goto corral_source_split_2206;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p55, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_2205;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    goto corral_source_split_2204;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    out_$p55 := $bitcast.ref.ref(out_$p54);
    goto corral_source_split_2203;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    out_$p54 := $load.bytes.ref($M.0, out_$p53);
    goto corral_source_split_2202;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0bv64, 824bv64)), $mul.ref(304bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2201;

  $bb23_dummy:
    call {:si_unique_call 1} out_$p53, out_$p54, out_$p55, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65 := printer_soft_reset_loop_$bb21(in_$p0, in_$p45, out_$p53, out_$p54, out_$p55, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65);
    return;

  exit:
    return;
}



procedure printer_soft_reset_loop_$bb21(in_$p0: ref, in_$p45: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: bv32, in_$i61: bv1, in_$i62: bv32, in_$i63: bv64, in_$i64: bv64, in_$i65: bv1) returns (out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: bv32, out_$i61: bv1, out_$i62: bv32, out_$i63: bv64, out_$i64: bv64, out_$i65: bv1);
  modifies $M.0;



implementation printer_soft_reset_loop_$bb13(in_$p0: ref, in_$p24: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: bv32, in_$i40: bv1, in_$i41: bv32, in_$i42: bv64, in_$i43: bv64, in_$i44: bv1) returns (out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: bv32, out_$i40: bv1, out_$i41: bv32, out_$i42: bv64, out_$i43: bv64, out_$i44: bv1)
{

  entry:
    out_$p32, out_$p33, out_$p34, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44 := in_$p32, in_$p33, in_$p34, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb15:
    assume {:verifier.code 0} true;
    assume out_$i44 == 1bv1;
    goto $bb15_dummy;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.bv64(out_$i43, 0bv64);
    goto corral_source_split_2187;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} out_$i43 := ldv__builtin_expect(out_$i42, 1bv64);
    call {:si_unique_call 529} {:cexpr "tmp___2"} boogie_si_record_bv64(out_$i43);
    goto corral_source_split_2186;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.bv32.bv64(out_$i41);
    goto corral_source_split_2185;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.bv1.bv32(out_$i40);
    goto corral_source_split_2184;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.bv32(out_$i39, 0bv32);
    goto corral_source_split_2183;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} out_$i39 := list_empty(in_$p24);
    call {:si_unique_call 527} {:cexpr "tmp___1"} boogie_si_record_bv32(out_$i39);
    goto corral_source_split_2182;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} list_add(out_$p37, out_$p38);
    goto corral_source_split_2181;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p0, $mul.ref(0bv64, 824bv64)), $mul.ref(272bv64, 1bv64));
    goto corral_source_split_2180;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p34, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_2179;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} list_del_init(out_$p36);
    goto corral_source_split_2178;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p34, $mul.ref($sub.ref(0bv64, 48bv64), 72bv64)), $mul.ref(48bv64, 1bv64));
    goto corral_source_split_2177;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    goto corral_source_split_2176;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(out_$p33);
    goto corral_source_split_2175;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    out_$p33 := $load.bytes.ref($M.0, out_$p32);
    goto corral_source_split_2174;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0bv64, 824bv64)), $mul.ref(304bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2173;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p32, out_$p33, out_$p34, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44 := printer_soft_reset_loop_$bb13(in_$p0, in_$p24, out_$p32, out_$p33, out_$p34, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44);
    return;

  exit:
    return;
}



procedure printer_soft_reset_loop_$bb13(in_$p0: ref, in_$p24: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: bv32, in_$i40: bv1, in_$i41: bv32, in_$i42: bv64, in_$i43: bv64, in_$i44: bv1) returns (out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: bv32, out_$i40: bv1, out_$i41: bv32, out_$i42: bv64, out_$i43: bv64, out_$i44: bv1);
  modifies $M.0;



implementation utf8_to_utf16le_loop_$bb4(in_$i9: bv32, in_$i11: bv1, in_$i12: bv32, in_$i13: bv64, in_$i14: bv64, in_$i15: bv1, in_$i16: bv32, in_$i17: bv32, in_$i18: bv1, in_$i19: bv16, in_$i20: bv32, in_$i21: bv32, in_$i22: bv32, in_$i23: bv16, in_$i24: bv64, in_$p25: ref, in_$i26: bv8, in_$i28: bv32, in_$i29: bv32, in_$i30: bv1, in_$i31: bv32, in_$i32: bv32, in_$i33: bv8, in_$i34: bv16, in_$i35: bv32, in_$i36: bv32, in_$i37: bv32, in_$i38: bv16, in_$i41: bv32, in_$i42: bv32, in_$i43: bv1, in_$i44: bv32, in_$i45: bv32, in_$i46: bv16, in_$i47: bv64, in_$p48: ref, in_$i49: bv8, in_$i50: bv32, in_$i51: bv32, in_$i52: bv1, in_$i53: bv32, in_$i54: bv32, in_$i55: bv8, in_$i56: bv32, in_$i57: bv32, in_$i58: bv16, in_$i59: bv32, in_$i60: bv32, in_$i61: bv32, in_$i62: bv16, in_$i63: bv64, in_$p64: ref, in_$i65: bv8, in_$i66: bv32, in_$i67: bv32, in_$i68: bv1, in_$i69: bv32, in_$i70: bv32, in_$i71: bv8, in_$i72: bv16, in_$i73: bv32, in_$i74: bv32, in_$i75: bv32, in_$i76: bv16, in_$i77: bv32, in_$i78: bv1, in_$i79: bv32, in_$i80: bv1, in_$i39: bv16, in_$p40: ref, in_$i83: bv16, in_$i81: bv16, in_$p82: ref, in_$p84: ref, in_$i85: bv32, in_$i86: bv16, in_$p87: ref, in_$i88: bv32, in_$i89: bv32, in_$i90: bv1, in_$p5: ref, in_$p6: ref, in_$i7: bv32, in_$i8: bv32, in_$p27: ref, in_$i10: bv8, in_$i92: bv32, in_$i93: bv1, in_$i94: bv32, in_$i91: bv32) returns (out_$i9: bv32, out_$i11: bv1, out_$i12: bv32, out_$i13: bv64, out_$i14: bv64, out_$i15: bv1, out_$i16: bv32, out_$i17: bv32, out_$i18: bv1, out_$i19: bv16, out_$i20: bv32, out_$i21: bv32, out_$i22: bv32, out_$i23: bv16, out_$i24: bv64, out_$p25: ref, out_$i26: bv8, out_$i28: bv32, out_$i29: bv32, out_$i30: bv1, out_$i31: bv32, out_$i32: bv32, out_$i33: bv8, out_$i34: bv16, out_$i35: bv32, out_$i36: bv32, out_$i37: bv32, out_$i38: bv16, out_$i41: bv32, out_$i42: bv32, out_$i43: bv1, out_$i44: bv32, out_$i45: bv32, out_$i46: bv16, out_$i47: bv64, out_$p48: ref, out_$i49: bv8, out_$i50: bv32, out_$i51: bv32, out_$i52: bv1, out_$i53: bv32, out_$i54: bv32, out_$i55: bv8, out_$i56: bv32, out_$i57: bv32, out_$i58: bv16, out_$i59: bv32, out_$i60: bv32, out_$i61: bv32, out_$i62: bv16, out_$i63: bv64, out_$p64: ref, out_$i65: bv8, out_$i66: bv32, out_$i67: bv32, out_$i68: bv1, out_$i69: bv32, out_$i70: bv32, out_$i71: bv8, out_$i72: bv16, out_$i73: bv32, out_$i74: bv32, out_$i75: bv32, out_$i76: bv16, out_$i77: bv32, out_$i78: bv1, out_$i79: bv32, out_$i80: bv1, out_$i39: bv16, out_$p40: ref, out_$i83: bv16, out_$i81: bv16, out_$p82: ref, out_$p84: ref, out_$i85: bv32, out_$i86: bv16, out_$p87: ref, out_$i88: bv32, out_$i89: bv32, out_$i90: bv1, out_$p5: ref, out_$p6: ref, out_$i7: bv32, out_$i8: bv32, out_$p27: ref, out_$i10: bv8, out_$i92: bv32, out_$i93: bv1, out_$i94: bv32, out_$i91: bv32)
{

  entry:
    out_$i9, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i39, out_$p40, out_$i83, out_$i81, out_$p82, out_$p84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$p5, out_$p6, out_$i7, out_$i8, out_$p27, out_$i10, out_$i92, out_$i93, out_$i94, out_$i91 := in_$i9, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$p25, in_$i26, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$p64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i39, in_$p40, in_$i83, in_$i81, in_$p82, in_$p84, in_$i85, in_$i86, in_$p87, in_$i88, in_$i89, in_$i90, in_$p5, in_$p6, in_$i7, in_$i8, in_$p27, in_$i10, in_$i92, in_$i93, in_$i94, in_$i91;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2372;

  $bb31:
    assume out_$i90 == 1bv1;
    assume {:verifier.code 0} true;
    out_$p5, out_$p6, out_$i7, out_$i8 := out_$p82, out_$p84, out_$i89, out_$i88;
    goto $bb31_dummy;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    out_$i91 := out_$i88;
    assume true;
    goto $bb31;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    out_$i90 := $ne.bv32(out_$i89, 0bv32);
    goto corral_source_split_2479;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    out_$i89 := $sub.bv32(out_$i7, 1bv32);
    call {:si_unique_call 590} {:cexpr "len"} boogie_si_record_bv32(out_$i89);
    goto corral_source_split_2478;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    out_$i88 := $add.bv32(out_$i8, 1bv32);
    call {:si_unique_call 589} {:cexpr "count"} boogie_si_record_bv32(out_$i88);
    goto corral_source_split_2477;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} put_unaligned_le16(out_$i86, out_$p87);
    goto corral_source_split_2476;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    out_$p87 := $bitcast.ref.ref(out_$p6);
    goto corral_source_split_2475;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    out_$i86 := $trunc.bv32.bv16(out_$i85);
    goto corral_source_split_2474;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    out_$i85 := $zext.bv16.bv32(out_$i81);
    goto corral_source_split_2473;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref(out_$p6, $mul.ref(1bv64, 2bv64));
    goto corral_source_split_2472;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2471;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    out_$i83 := $zext.bv8.bv16(out_$i10);
    call {:si_unique_call 576} {:cexpr "uchar"} boogie_si_record_bv16(out_$i83);
    assume {:verifier.code 0} true;
    out_$i81, out_$p82 := out_$i83, out_$p27;
    goto $bb30;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    out_$i81, out_$p82 := out_$i39, out_$p40;
    goto $bb30;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2420;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i39, out_$p40 := out_$i76, out_$p64;
    goto $bb14;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    out_$i39, out_$p40 := out_$i38, out_$p25;
    goto $bb14;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    out_$i38 := $trunc.bv32.bv16(out_$i37);
    call {:si_unique_call 580} {:cexpr "uchar"} boogie_si_record_bv16(out_$i38);
    goto corral_source_split_2418;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    out_$i37 := $or.bv32(out_$i35, out_$i36);
    goto corral_source_split_2417;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.bv16.bv32(out_$i23);
    goto corral_source_split_2416;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.bv16.bv32(out_$i34);
    goto corral_source_split_2415;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.bv8.bv16(out_$i33);
    goto corral_source_split_2414;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    out_$i33 := $trunc.bv32.bv8(out_$i32);
    call {:si_unique_call 579} {:cexpr "c"} boogie_si_record_bv8(out_$i33);
    goto corral_source_split_2413;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    out_$i32 := $and.bv32(out_$i31, 63bv32);
    goto corral_source_split_2412;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.bv8.bv32(out_$i26);
    goto corral_source_split_2411;

  $bb11:
    assume !(out_$i30 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.bv32(out_$i29, 128bv32);
    goto corral_source_split_2402;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    out_$i29 := $and.bv32(out_$i28, 192bv32);
    goto corral_source_split_2401;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.bv8.bv32(out_$i26);
    goto corral_source_split_2400;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    out_$i26 := $load.bytes.bv8($M.0, out_$p27);
    call {:si_unique_call 578} {:cexpr "c"} boogie_si_record_bv8(out_$i26);
    goto corral_source_split_2399;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref(out_$p5, $mul.ref(out_$i24, 1bv64));
    goto corral_source_split_2398;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    out_$i23 := $trunc.bv32.bv16(out_$i22);
    call {:si_unique_call 577} {:cexpr "uchar"} boogie_si_record_bv16(out_$i23);
    out_$i24 := $add.bv64(1bv64, 1bv64);
    goto corral_source_split_2397;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    out_$i22 := $shl.bv32(out_$i21, 6bv32);
    goto corral_source_split_2396;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    out_$i21 := $and.bv32(out_$i20, 31bv32);
    goto corral_source_split_2395;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.bv16.bv32(out_$i19);
    goto corral_source_split_2394;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.bv8.bv16(out_$i10);
    goto corral_source_split_2393;

  $bb8:
    assume out_$i18 == 1bv1;
    goto corral_source_split_2392;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.bv32(out_$i17, 192bv32);
    goto corral_source_split_2388;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    out_$i17 := $and.bv32(out_$i16, 224bv32);
    goto corral_source_split_2387;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.bv8.bv32(out_$i10);
    goto corral_source_split_2386;

  $bb6:
    assume out_$i15 == 1bv1;
    goto corral_source_split_2385;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.bv64(out_$i14, 0bv64);
    goto corral_source_split_2383;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} out_$i14 := ldv__builtin_expect(out_$i13, 0bv64);
    call {:si_unique_call 575} {:cexpr "tmp___2"} boogie_si_record_bv64(out_$i14);
    goto corral_source_split_2382;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.bv32.bv64(out_$i12);
    goto corral_source_split_2381;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    out_$i12 := $zext.bv1.bv32(out_$i11);
    goto corral_source_split_2380;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    out_$i11 := $slt.bv32(out_$i9, 0bv32);
    goto corral_source_split_2379;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.bv8.bv32(out_$i10);
    goto corral_source_split_2378;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb33:
    assume out_$i93 == 1bv1;
    goto corral_source_split_2483;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    out_$i94 := out_$i8;
    assume true;
    goto $bb33;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    out_$i93 := $ne.bv32(out_$i92, 0bv32);
    goto corral_source_split_2376;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    out_$i92 := $zext.bv8.bv32(out_$i10);
    goto corral_source_split_2375;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    out_$i10 := $load.bytes.bv8($M.0, out_$p5);
    call {:si_unique_call 573} {:cexpr "c"} boogie_si_record_bv8(out_$i10);
    goto corral_source_split_2374;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref(out_$p5, $mul.ref(1bv64, 1bv64));
    goto corral_source_split_2373;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i78 == 1bv1);
    goto $bb25;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i80 == 1bv1);
    goto $bb25;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    out_$i80 := $ule.bv32(out_$i79, 57343bv32);
    goto corral_source_split_2467;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    out_$i79 := $zext.bv16.bv32(out_$i76);
    goto corral_source_split_2466;

  $bb23:
    assume out_$i78 == 1bv1;
    goto corral_source_split_2465;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    out_$i78 := $ugt.bv32(out_$i77, 55295bv32);
    goto corral_source_split_2463;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.bv16.bv32(out_$i76);
    goto corral_source_split_2462;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    out_$i76 := $trunc.bv32.bv16(out_$i75);
    call {:si_unique_call 587} {:cexpr "uchar"} boogie_si_record_bv16(out_$i76);
    goto corral_source_split_2461;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    out_$i75 := $or.bv32(out_$i73, out_$i74);
    goto corral_source_split_2460;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    out_$i74 := $zext.bv16.bv32(out_$i62);
    goto corral_source_split_2459;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    out_$i73 := $zext.bv16.bv32(out_$i72);
    goto corral_source_split_2458;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.bv8.bv16(out_$i71);
    goto corral_source_split_2457;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    out_$i71 := $trunc.bv32.bv8(out_$i70);
    call {:si_unique_call 586} {:cexpr "c"} boogie_si_record_bv8(out_$i71);
    goto corral_source_split_2456;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    out_$i70 := $and.bv32(out_$i69, 63bv32);
    goto corral_source_split_2455;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.bv8.bv32(out_$i65);
    goto corral_source_split_2454;

  $bb21:
    assume !(out_$i68 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.bv32(out_$i67, 128bv32);
    goto corral_source_split_2450;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    out_$i67 := $and.bv32(out_$i66, 192bv32);
    goto corral_source_split_2449;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    out_$i66 := $zext.bv8.bv32(out_$i65);
    goto corral_source_split_2448;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    out_$i65 := $load.bytes.bv8($M.0, out_$p48);
    call {:si_unique_call 585} {:cexpr "c"} boogie_si_record_bv8(out_$i65);
    goto corral_source_split_2447;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref(out_$p5, $mul.ref(out_$i63, 1bv64));
    goto corral_source_split_2446;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    out_$i62 := $trunc.bv32.bv16(out_$i61);
    call {:si_unique_call 584} {:cexpr "uchar"} boogie_si_record_bv16(out_$i62);
    out_$i63 := $add.bv64(out_$i47, 1bv64);
    goto corral_source_split_2445;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    out_$i61 := $or.bv32(out_$i59, out_$i60);
    goto corral_source_split_2444;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    out_$i60 := $sext.bv16.bv32(out_$i46);
    goto corral_source_split_2443;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    out_$i59 := $sext.bv16.bv32(out_$i58);
    goto corral_source_split_2442;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    out_$i58 := $trunc.bv32.bv16(out_$i57);
    goto corral_source_split_2441;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    out_$i57 := $shl.bv32(out_$i56, 6bv32);
    goto corral_source_split_2440;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.bv8.bv32(out_$i55);
    goto corral_source_split_2439;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    out_$i55 := $trunc.bv32.bv8(out_$i54);
    call {:si_unique_call 583} {:cexpr "c"} boogie_si_record_bv8(out_$i55);
    goto corral_source_split_2438;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    out_$i54 := $and.bv32(out_$i53, 63bv32);
    goto corral_source_split_2437;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.bv8.bv32(out_$i49);
    goto corral_source_split_2436;

  $bb18:
    assume !(out_$i52 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.bv32(out_$i51, 128bv32);
    goto corral_source_split_2430;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    out_$i51 := $and.bv32(out_$i50, 192bv32);
    goto corral_source_split_2429;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.bv8.bv32(out_$i49);
    goto corral_source_split_2428;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    out_$i49 := $load.bytes.bv8($M.0, out_$p27);
    call {:si_unique_call 582} {:cexpr "c"} boogie_si_record_bv8(out_$i49);
    goto corral_source_split_2427;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref(out_$p5, $mul.ref(out_$i47, 1bv64));
    goto corral_source_split_2426;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    out_$i46 := $trunc.bv32.bv16(out_$i45);
    call {:si_unique_call 581} {:cexpr "uchar"} boogie_si_record_bv16(out_$i46);
    out_$i47 := $add.bv64(1bv64, 1bv64);
    goto corral_source_split_2425;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    out_$i45 := $shl.bv32(out_$i44, 12bv32);
    goto corral_source_split_2424;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.bv8.bv32(out_$i10);
    goto corral_source_split_2423;

  $bb15:
    assume out_$i43 == 1bv1;
    goto corral_source_split_2422;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.bv32(out_$i42, 224bv32);
    goto corral_source_split_2407;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    out_$i42 := $and.bv32(out_$i41, 240bv32);
    goto corral_source_split_2406;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.bv8.bv32(out_$i10);
    goto corral_source_split_2405;

  $bb9:
    assume !(out_$i18 == 1bv1);
    goto corral_source_split_2404;

  $bb7:
    assume !(out_$i15 == 1bv1);
    goto corral_source_split_2390;

  $bb31_dummy:
    call {:si_unique_call 1} out_$i9, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i39, out_$p40, out_$i83, out_$i81, out_$p82, out_$p84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$p5, out_$p6, out_$i7, out_$i8, out_$p27, out_$i10, out_$i92, out_$i93, out_$i94, out_$i91 := utf8_to_utf16le_loop_$bb4(out_$i9, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i39, out_$p40, out_$i83, out_$i81, out_$p82, out_$p84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$p5, out_$p6, out_$i7, out_$i8, out_$p27, out_$i10, out_$i92, out_$i93, out_$i94, out_$i91);
    return;

  exit:
    return;
}



procedure utf8_to_utf16le_loop_$bb4(in_$i9: bv32, in_$i11: bv1, in_$i12: bv32, in_$i13: bv64, in_$i14: bv64, in_$i15: bv1, in_$i16: bv32, in_$i17: bv32, in_$i18: bv1, in_$i19: bv16, in_$i20: bv32, in_$i21: bv32, in_$i22: bv32, in_$i23: bv16, in_$i24: bv64, in_$p25: ref, in_$i26: bv8, in_$i28: bv32, in_$i29: bv32, in_$i30: bv1, in_$i31: bv32, in_$i32: bv32, in_$i33: bv8, in_$i34: bv16, in_$i35: bv32, in_$i36: bv32, in_$i37: bv32, in_$i38: bv16, in_$i41: bv32, in_$i42: bv32, in_$i43: bv1, in_$i44: bv32, in_$i45: bv32, in_$i46: bv16, in_$i47: bv64, in_$p48: ref, in_$i49: bv8, in_$i50: bv32, in_$i51: bv32, in_$i52: bv1, in_$i53: bv32, in_$i54: bv32, in_$i55: bv8, in_$i56: bv32, in_$i57: bv32, in_$i58: bv16, in_$i59: bv32, in_$i60: bv32, in_$i61: bv32, in_$i62: bv16, in_$i63: bv64, in_$p64: ref, in_$i65: bv8, in_$i66: bv32, in_$i67: bv32, in_$i68: bv1, in_$i69: bv32, in_$i70: bv32, in_$i71: bv8, in_$i72: bv16, in_$i73: bv32, in_$i74: bv32, in_$i75: bv32, in_$i76: bv16, in_$i77: bv32, in_$i78: bv1, in_$i79: bv32, in_$i80: bv1, in_$i39: bv16, in_$p40: ref, in_$i83: bv16, in_$i81: bv16, in_$p82: ref, in_$p84: ref, in_$i85: bv32, in_$i86: bv16, in_$p87: ref, in_$i88: bv32, in_$i89: bv32, in_$i90: bv1, in_$p5: ref, in_$p6: ref, in_$i7: bv32, in_$i8: bv32, in_$p27: ref, in_$i10: bv8, in_$i92: bv32, in_$i93: bv1, in_$i94: bv32, in_$i91: bv32) returns (out_$i9: bv32, out_$i11: bv1, out_$i12: bv32, out_$i13: bv64, out_$i14: bv64, out_$i15: bv1, out_$i16: bv32, out_$i17: bv32, out_$i18: bv1, out_$i19: bv16, out_$i20: bv32, out_$i21: bv32, out_$i22: bv32, out_$i23: bv16, out_$i24: bv64, out_$p25: ref, out_$i26: bv8, out_$i28: bv32, out_$i29: bv32, out_$i30: bv1, out_$i31: bv32, out_$i32: bv32, out_$i33: bv8, out_$i34: bv16, out_$i35: bv32, out_$i36: bv32, out_$i37: bv32, out_$i38: bv16, out_$i41: bv32, out_$i42: bv32, out_$i43: bv1, out_$i44: bv32, out_$i45: bv32, out_$i46: bv16, out_$i47: bv64, out_$p48: ref, out_$i49: bv8, out_$i50: bv32, out_$i51: bv32, out_$i52: bv1, out_$i53: bv32, out_$i54: bv32, out_$i55: bv8, out_$i56: bv32, out_$i57: bv32, out_$i58: bv16, out_$i59: bv32, out_$i60: bv32, out_$i61: bv32, out_$i62: bv16, out_$i63: bv64, out_$p64: ref, out_$i65: bv8, out_$i66: bv32, out_$i67: bv32, out_$i68: bv1, out_$i69: bv32, out_$i70: bv32, out_$i71: bv8, out_$i72: bv16, out_$i73: bv32, out_$i74: bv32, out_$i75: bv32, out_$i76: bv16, out_$i77: bv32, out_$i78: bv1, out_$i79: bv32, out_$i80: bv1, out_$i39: bv16, out_$p40: ref, out_$i83: bv16, out_$i81: bv16, out_$p82: ref, out_$p84: ref, out_$i85: bv32, out_$i86: bv16, out_$p87: ref, out_$i88: bv32, out_$i89: bv32, out_$i90: bv1, out_$p5: ref, out_$p6: ref, out_$i7: bv32, out_$i8: bv32, out_$p27: ref, out_$i10: bv8, out_$i92: bv32, out_$i93: bv1, out_$i94: bv32, out_$i91: bv32);
  modifies $M.0;



implementation usb_descriptor_fillbuf_loop_$bb8(in_$p13: ref, in_$p14: ref, in_$i15: bv8, in_$i16: bv32, in_$i17: bv1, in_$i18: bv64, in_$p19: ref, in_$p20: ref, in_$i21: bv32, in_$i22: bv64, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: bv64, in_$i27: bv1, in_$p10: ref, in_$i11: bv32, in_$p12: ref, in_$p28: ref, in_cmdloc_dummy_var_14: [ref]bv8, in_cmdloc_dummy_var_15: [ref]bv8, in_cmdloc_dummy_var_16: [ref]bv8) returns (out_$p13: ref, out_$p14: ref, out_$i15: bv8, out_$i16: bv32, out_$i17: bv1, out_$i18: bv64, out_$p19: ref, out_$p20: ref, out_$i21: bv32, out_$i22: bv64, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: bv64, out_$i27: bv1, out_$p10: ref, out_$i11: bv32, out_$p12: ref, out_$p28: ref, out_cmdloc_dummy_var_14: [ref]bv8, out_cmdloc_dummy_var_15: [ref]bv8, out_cmdloc_dummy_var_16: [ref]bv8)
{

  entry:
    out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p10, out_$i11, out_$p12, out_$p28, out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16 := in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$i18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p24, in_$p25, in_$i26, in_$i27, in_$p10, in_$i11, in_$p12, in_$p28, in_cmdloc_dummy_var_14, in_cmdloc_dummy_var_15, in_cmdloc_dummy_var_16;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2549;

  $bb13:
    assume out_$i27 == 1bv1;
    assume {:verifier.code 0} true;
    out_$p10, out_$i11, out_$p12 := out_$p23, out_$i21, out_$p24;
    goto $bb13_dummy;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    out_$p28 := out_$p23;
    assume true;
    goto $bb13;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.bv64(out_$i26, 0bv64);
    goto corral_source_split_2569;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.bv64(out_$p25);
    goto corral_source_split_2568;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    out_$p25 := $load.bytes.ref($M.23, out_$p24);
    goto corral_source_split_2567;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref(out_$p12, $mul.ref(1bv64, 8bv64));
    goto corral_source_split_2566;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(out_$p10, $mul.ref(out_$i22, 1bv64));
    goto corral_source_split_2565;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.bv32.bv64(out_$i16);
    goto corral_source_split_2564;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    out_$i21 := $sub.bv32(out_$i11, out_$i16);
    call {:si_unique_call 601} {:cexpr "buflen"} boogie_si_record_bv32(out_$i21);
    goto corral_source_split_2563;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_14 := $M.0;
    out_cmdloc_dummy_var_15 := $M.0;
    call {:si_unique_call 600} out_cmdloc_dummy_var_16 := $memcpy.bv8(out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15, out_$p10, out_$p20, out_$i18, $zext.bv32.bv64(1bv32), 0bv1 == 1bv1);
    $M.0 := out_cmdloc_dummy_var_16;
    goto corral_source_split_2562;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p19);
    goto corral_source_split_2561;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    out_$p19 := $load.bytes.ref($M.23, out_$p12);
    goto corral_source_split_2560;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.bv32.bv64(out_$i16);
    call {:si_unique_call 599} {:cexpr "__len"} boogie_si_record_bv64(out_$i18);
    goto corral_source_split_2559;

  $bb11:
    assume !(out_$i17 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    out_$i17 := $ugt.bv32(out_$i16, out_$i11);
    goto corral_source_split_2555;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.bv8.bv32(out_$i15);
    call {:si_unique_call 598} {:cexpr "len"} boogie_si_record_bv32(out_$i16);
    goto corral_source_split_2554;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    out_$i15 := $load.bytes.bv8($M.0, out_$p14);
    goto corral_source_split_2553;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p13, $mul.ref(0bv64, 2bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2552;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p13 := $load.bytes.ref($M.23, out_$p12);
    goto corral_source_split_2551;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p10, out_$i11, out_$p12, out_$p28, out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16 := usb_descriptor_fillbuf_loop_$bb8(out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p10, out_$i11, out_$p12, out_$p28, out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16);
    return;

  exit:
    return;
}



procedure usb_descriptor_fillbuf_loop_$bb8(in_$p13: ref, in_$p14: ref, in_$i15: bv8, in_$i16: bv32, in_$i17: bv1, in_$i18: bv64, in_$p19: ref, in_$p20: ref, in_$i21: bv32, in_$i22: bv64, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: bv64, in_$i27: bv1, in_$p10: ref, in_$i11: bv32, in_$p12: ref, in_$p28: ref, in_cmdloc_dummy_var_14: [ref]bv8, in_cmdloc_dummy_var_15: [ref]bv8, in_cmdloc_dummy_var_16: [ref]bv8) returns (out_$p13: ref, out_$p14: ref, out_$i15: bv8, out_$i16: bv32, out_$i17: bv1, out_$i18: bv64, out_$p19: ref, out_$p20: ref, out_$i21: bv32, out_$i22: bv64, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: bv64, out_$i27: bv1, out_$p10: ref, out_$i11: bv32, out_$p12: ref, out_$p28: ref, out_cmdloc_dummy_var_14: [ref]bv8, out_cmdloc_dummy_var_15: [ref]bv8, out_cmdloc_dummy_var_16: [ref]bv8);
  modifies $M.0;



implementation usb_ep_autoconfig_reset_loop_$bb4(in_$i13: bv64, in_$p16: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: bv64, in_$i28: bv1, in_$p15: ref) returns (out_$p16: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: bv64, out_$i28: bv1, out_$p15: ref)
{

  entry:
    out_$p16, out_$p18, out_$p19, out_$p20, out_$p21, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p15 := in_$p16, in_$p18, in_$p19, in_$p20, in_$p21, in_$p23, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$p15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2679;

  $bb6:
    assume out_$i28 == 1bv1;
    assume {:verifier.code 0} true;
    out_$p15 := out_$p21;
    goto $bb6_dummy;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.bv64(out_$i27, in_$i13);
    goto corral_source_split_2693;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.bv64(out_$p26);
    goto corral_source_split_2692;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p20, $mul.ref($sub.ref(0bv64, 24bv64), 48bv64)), $mul.ref(24bv64, 1bv64));
    goto corral_source_split_2691;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} llvm.prefetch(out_$p25, 0bv32, 3bv32, 1bv32);
    goto corral_source_split_2690;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(out_$p24);
    goto corral_source_split_2689;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    out_$p24 := $load.bytes.ref($M.0, out_$p23);
    goto corral_source_split_2688;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(out_$p20, $mul.ref($sub.ref(0bv64, 24bv64), 48bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2687;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref(out_$p20, $mul.ref($sub.ref(0bv64, 24bv64), 48bv64));
    goto corral_source_split_2686;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p19);
    goto corral_source_split_2685;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    out_$p19 := $load.bytes.ref($M.0, out_$p18);
    goto corral_source_split_2684;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0bv64, 48bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2683;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $M.0 := $store.bytes.ref($M.0, out_$p16, $0.ref);
    goto corral_source_split_2682;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0bv64, 48bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2681;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p16, out_$p18, out_$p19, out_$p20, out_$p21, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p15 := usb_ep_autoconfig_reset_loop_$bb4(in_$i13, out_$p16, out_$p18, out_$p19, out_$p20, out_$p21, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p15);
    return;

  exit:
    return;
}



procedure usb_ep_autoconfig_reset_loop_$bb4(in_$i13: bv64, in_$p16: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: bv64, in_$i28: bv1, in_$p15: ref) returns (out_$p16: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: bv64, out_$i28: bv1, out_$p15: ref);
  modifies $M.0;



implementation usb_ep_autoconfig_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i14: bv64, in_$i17: bv32, in_$i18: bv1, in_$p19: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: bv64, in_$i32: bv1, in_$p16: ref) returns (out_$i17: bv32, out_$i18: bv1, out_$p19: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: bv64, out_$i32: bv1, out_$p16: ref)
{

  entry:
    out_$i17, out_$i18, out_$p19, out_$p22, out_$p23, out_$p24, out_$p25, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p16 := in_$i17, in_$i18, in_$p19, in_$p22, in_$p23, in_$p24, in_$p25, in_$p27, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$p16;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2716;

  $bb10:
    assume out_$i32 == 1bv1;
    assume {:verifier.code 0} true;
    out_$p16 := out_$p25;
    goto $bb10_dummy;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.bv64(out_$i31, in_$i14);
    goto corral_source_split_2735;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.bv64(out_$p30);
    goto corral_source_split_2734;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p24, $mul.ref($sub.ref(0bv64, 24bv64), 48bv64)), $mul.ref(24bv64, 1bv64));
    goto corral_source_split_2733;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} llvm.prefetch(out_$p29, 0bv32, 3bv32, 1bv32);
    goto corral_source_split_2732;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(out_$p28);
    goto corral_source_split_2731;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    out_$p28 := $load.bytes.ref($M.0, out_$p27);
    goto corral_source_split_2730;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(out_$p24, $mul.ref($sub.ref(0bv64, 24bv64), 48bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2729;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref(out_$p24, $mul.ref($sub.ref(0bv64, 24bv64), 48bv64));
    goto corral_source_split_2728;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_2727;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    out_$p23 := $load.bytes.ref($M.0, out_$p22);
    goto corral_source_split_2726;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref($add.ref(out_$p16, $mul.ref(0bv64, 48bv64)), $mul.ref(24bv64, 1bv64)), $mul.ref(0bv64, 1bv64));
    goto corral_source_split_2725;

  $bb7:
    assume !(out_$i18 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    out_$p19 := out_$p16;
    assume true;
    goto $bb7;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.bv32(out_$i17, 0bv32);
    goto corral_source_split_2719;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} out_$i17 := ep_matches(in_$p0, out_$p16, in_$p1);
    call {:si_unique_call 639} {:cexpr "tmp___3"} boogie_si_record_bv32(out_$i17);
    goto corral_source_split_2718;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i17, out_$i18, out_$p19, out_$p22, out_$p23, out_$p24, out_$p25, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p16 := usb_ep_autoconfig_loop_$bb4(in_$p0, in_$p1, in_$i14, out_$i17, out_$i18, out_$p19, out_$p22, out_$p23, out_$p24, out_$p25, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p16);
    return;

  exit:
    return;
}



procedure usb_ep_autoconfig_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i14: bv64, in_$i17: bv32, in_$i18: bv1, in_$p19: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: bv64, in_$i32: bv1, in_$p16: ref) returns (out_$i17: bv32, out_$i18: bv1, out_$p19: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: bv64, out_$i32: bv1, out_$p16: ref);
  modifies $M.0, $M.25;



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p6: ref, in_$p7: ref, in_$p9: ref, in_$p11: ref, in_$p13: ref, in_$p14: ref, in_$i25: bv32, in_$i26: bv1, in_$i27: bv1, in_$i28: bv1, in_$i29: bv1, in_$i30: bv32, in_$i31: bv1, in_$i32: bv32, in_$i33: bv1, in_$i34: bv1, in_$i35: bv1, in_$i36: bv1, in_$i37: bv1, in_$i38: bv32, in_$i39: bv1, in_$p40: ref, in_$i41: bv32, in_$i42: bv1, in_$p43: ref, in_$i44: bv32, in_$i45: bv32, in_$i46: bv32, in_$i47: bv1, in_$p48: ref, in_$i49: bv32, in_$i50: bv32, in_$i51: bv1, in_$i52: bv32, in_$i53: bv32, in_$i54: bv32, in_$i55: bv1, in_$p56: ref, in_$i57: bv32, in_$i58: bv32, in_$i59: bv1, in_$i60: bv32, in_$i61: bv1, in_$i62: bv32, in_$i63: bv1, in_$i64: bv1, in_$i65: bv1, in_$i66: bv32, in_$i67: bv1, in_$i68: bv32, in_$i69: bv1, in_$i70: bv32, in_$i71: bv1, in_$i72: bv32, in_$i73: bv32, in_$i74: bv1, in_$i75: bv32, in_$i76: bv1, in_$i77: bv32, in_$i78: bv1, in_$i79: bv32, in_$i80: bv1, in_$i81: bv1, in_$i82: bv1, in_$i83: bv1, in_$i84: bv1, in_$i85: bv1, in_$i86: bv1, in_$i87: bv1, in_$i88: bv32, in_$i89: bv1, in_$p90: ref, in_$i91: bv64, in_$i93: bv32, in_$i94: bv1, in_$p95: ref, in_$i96: bv64, in_$i98: bv32, in_$i99: bv1, in_$p100: ref, in_$p101: ref, in_$i103: bv32, in_$i104: bv32, in_$i105: bv32, in_$i106: bv1, in_$p107: ref, in_$i108: bv64, in_$i110: bv32, in_$i111: bv1, in_$p112: ref, in_$i113: bv32, in_$i115: bv32, in_$i116: bv1, in_$p117: ref, in_$i118: bv32, in_$i120: bv32, in_$i121: bv1, in_$p122: ref, in_$i124: bv32, in_$i125: bv1, in_$p126: ref, in_$i128: bv32, in_$i129: bv1, in_$p130: ref, in_$p131: ref, in_$i132: bv32, in_$i133: bv32, in_$i134: bv1, in_$i135: bv32, in_$i136: bv32, in_$i137: bv32, in_$i138: bv1, in_$p139: ref, in_$i140: bv32, in_$i141: bv64, in_vslice_dummy_var_79: bv64, in_vslice_dummy_var_80: bv64, in_vslice_dummy_var_81: bv32, in_vslice_dummy_var_82: bv64, in_vslice_dummy_var_83: bv32, in_vslice_dummy_var_84: bv32, in_vslice_dummy_var_85: bv32, in_vslice_dummy_var_86: bv32, in_vslice_dummy_var_87: bv64) returns (out_$i25: bv32, out_$i26: bv1, out_$i27: bv1, out_$i28: bv1, out_$i29: bv1, out_$i30: bv32, out_$i31: bv1, out_$i32: bv32, out_$i33: bv1, out_$i34: bv1, out_$i35: bv1, out_$i36: bv1, out_$i37: bv1, out_$i38: bv32, out_$i39: bv1, out_$p40: ref, out_$i41: bv32, out_$i42: bv1, out_$p43: ref, out_$i44: bv32, out_$i45: bv32, out_$i46: bv32, out_$i47: bv1, out_$p48: ref, out_$i49: bv32, out_$i50: bv32, out_$i51: bv1, out_$i52: bv32, out_$i53: bv32, out_$i54: bv32, out_$i55: bv1, out_$p56: ref, out_$i57: bv32, out_$i58: bv32, out_$i59: bv1, out_$i60: bv32, out_$i61: bv1, out_$i62: bv32, out_$i63: bv1, out_$i64: bv1, out_$i65: bv1, out_$i66: bv32, out_$i67: bv1, out_$i68: bv32, out_$i69: bv1, out_$i70: bv32, out_$i71: bv1, out_$i72: bv32, out_$i73: bv32, out_$i74: bv1, out_$i75: bv32, out_$i76: bv1, out_$i77: bv32, out_$i78: bv1, out_$i79: bv32, out_$i80: bv1, out_$i81: bv1, out_$i82: bv1, out_$i83: bv1, out_$i84: bv1, out_$i85: bv1, out_$i86: bv1, out_$i87: bv1, out_$i88: bv32, out_$i89: bv1, out_$p90: ref, out_$i91: bv64, out_$i93: bv32, out_$i94: bv1, out_$p95: ref, out_$i96: bv64, out_$i98: bv32, out_$i99: bv1, out_$p100: ref, out_$p101: ref, out_$i103: bv32, out_$i104: bv32, out_$i105: bv32, out_$i106: bv1, out_$p107: ref, out_$i108: bv64, out_$i110: bv32, out_$i111: bv1, out_$p112: ref, out_$i113: bv32, out_$i115: bv32, out_$i116: bv1, out_$p117: ref, out_$i118: bv32, out_$i120: bv32, out_$i121: bv1, out_$p122: ref, out_$i124: bv32, out_$i125: bv1, out_$p126: ref, out_$i128: bv32, out_$i129: bv1, out_$p130: ref, out_$p131: ref, out_$i132: bv32, out_$i133: bv32, out_$i134: bv1, out_$i135: bv32, out_$i136: bv32, out_$i137: bv32, out_$i138: bv1, out_$p139: ref, out_$i140: bv32, out_$i141: bv64, out_vslice_dummy_var_79: bv64, out_vslice_dummy_var_80: bv64, out_vslice_dummy_var_81: bv32, out_vslice_dummy_var_82: bv64, out_vslice_dummy_var_83: bv32, out_vslice_dummy_var_84: bv32, out_vslice_dummy_var_85: bv32, out_vslice_dummy_var_86: bv32, out_vslice_dummy_var_87: bv64)
{

  entry:
    out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i93, out_$i94, out_$p95, out_$i96, out_$i98, out_$i99, out_$p100, out_$p101, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i110, out_$i111, out_$p112, out_$i113, out_$i115, out_$i116, out_$p117, out_$i118, out_$i120, out_$i121, out_$p122, out_$i124, out_$i125, out_$p126, out_$i128, out_$i129, out_$p130, out_$p131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$i141, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87 := in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$p40, in_$i41, in_$i42, in_$p43, in_$i44, in_$i45, in_$i46, in_$i47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$p90, in_$i91, in_$i93, in_$i94, in_$p95, in_$i96, in_$i98, in_$i99, in_$p100, in_$p101, in_$i103, in_$i104, in_$i105, in_$i106, in_$p107, in_$i108, in_$i110, in_$i111, in_$p112, in_$i113, in_$i115, in_$i116, in_$p117, in_$i118, in_$i120, in_$i121, in_$p122, in_$i124, in_$i125, in_$p126, in_$i128, in_$i129, in_$p130, in_$p131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i138, in_$p139, in_$i140, in_$i141, in_vslice_dummy_var_79, in_vslice_dummy_var_80, in_vslice_dummy_var_81, in_vslice_dummy_var_82, in_vslice_dummy_var_83, in_vslice_dummy_var_84, in_vslice_dummy_var_85, in_vslice_dummy_var_86, in_vslice_dummy_var_87;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 703} out_$i25 := __VERIFIER_nondet_int();
    call {:si_unique_call 704} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32(out_$i25);
    call {:si_unique_call 705} {:cexpr "tmp___5"} boogie_si_record_bv32(out_$i25);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb48_dummy;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb13:
    assume !(out_$i31 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume !(out_$i39 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $M.30 := 2bv32;
    call {:si_unique_call 710} {:cexpr "ldv_state_variable_1"} boogie_si_record_bv32(2bv32);
    goto corral_source_split_3122;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} printer_disconnect(out_$p40);
    goto corral_source_split_3121;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    out_$p40 := $M.29;
    goto corral_source_split_3120;

  $bb26:
    assume out_$i39 == 1bv1;
    goto corral_source_split_3119;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.bv32(out_$i38, 3bv32);
    goto corral_source_split_3117;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    out_$i38 := $M.30;
    goto corral_source_split_3116;

  $bb24:
    assume out_$i37 == 1bv1;
    goto corral_source_split_3115;

  $bb22:
    assume out_$i36 == 1bv1;
    assume {:verifier.code 0} true;
    out_$i37 := $eq.bv32(out_$i32, 0bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb15:
    assume out_$i33 == 1bv1;
    assume {:verifier.code 0} true;
    out_$i36 := $slt.bv32(out_$i32, 1bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i33 := $slt.bv32(out_$i32, 2bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_3101:
    assume {:verifier.code 1} true;
    call {:si_unique_call 706} out_$i32 := __VERIFIER_nondet_int();
    call {:si_unique_call 707} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32(out_$i32);
    call {:si_unique_call 708} {:cexpr "tmp___6"} boogie_si_record_bv32(out_$i32);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume out_$i31 == 1bv1;
    goto corral_source_split_3101;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.bv32(out_$i30, 0bv32);
    goto corral_source_split_3099;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    out_$i30 := $M.30;
    goto corral_source_split_3098;

  $bb10:
    assume out_$i29 == 1bv1;
    goto corral_source_split_3097;

  $bb3:
    assume out_$i26 == 1bv1;
    assume {:verifier.code 0} true;
    out_$i29 := $eq.bv32(out_$i25, 0bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i26 := $slt.bv32(out_$i25, 1bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb31:
    assume !(out_$i42 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $M.31 := out_$i45;
    call {:si_unique_call 713} {:cexpr "ref_cnt"} boogie_si_record_bv32(out_$i45);
    goto corral_source_split_3130;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    out_$i45 := $sub.bv32(out_$i44, 1bv32);
    goto corral_source_split_3129;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    out_$i44 := $M.31;
    goto corral_source_split_3128;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $M.30 := 1bv32;
    call {:si_unique_call 712} {:cexpr "ldv_state_variable_1"} boogie_si_record_bv32(1bv32);
    goto corral_source_split_3127;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} printer_unbind(out_$p43);
    goto corral_source_split_3126;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    out_$p43 := $M.29;
    goto corral_source_split_3125;

  $bb30:
    assume out_$i42 == 1bv1;
    goto corral_source_split_3124;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.bv32(out_$i41, 2bv32);
    goto corral_source_split_3113;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    out_$i41 := $M.30;
    goto corral_source_split_3112;

  $bb23:
    assume !(out_$i36 == 1bv1);
    goto corral_source_split_3111;

  $bb34:
    assume !(out_$i47 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume !(out_$i51 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $M.31 := out_$i53;
    call {:si_unique_call 717} {:cexpr "ref_cnt"} boogie_si_record_bv32(out_$i53);
    goto corral_source_split_3143;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    out_$i53 := $add.bv32(out_$i52, 1bv32);
    goto corral_source_split_3142;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    out_$i52 := $M.31;
    goto corral_source_split_3141;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $M.30 := 2bv32;
    call {:si_unique_call 716} {:cexpr "ldv_state_variable_1"} boogie_si_record_bv32(2bv32);
    goto corral_source_split_3140;

  $bb35:
    assume out_$i51 == 1bv1;
    goto corral_source_split_3139;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.bv32(out_$i50, 0bv32);
    goto corral_source_split_3137;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    out_$i50 := $M.33;
    goto corral_source_split_3136;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $M.33 := out_$i49;
    call {:si_unique_call 715} {:cexpr "ldv_retval_1"} boogie_si_record_bv32(out_$i49);
    goto corral_source_split_3135;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} out_$i49 := printer_bind(out_$p48);
    goto corral_source_split_3134;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    out_$p48 := $M.29;
    goto corral_source_split_3133;

  $bb33:
    assume out_$i47 == 1bv1;
    goto corral_source_split_3132;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.bv32(out_$i46, 1bv32);
    goto corral_source_split_3105;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    out_$i46 := $M.30;
    goto corral_source_split_3104;

  $bb17:
    assume out_$i34 == 1bv1;
    goto corral_source_split_3103;

  $bb16:
    assume !(out_$i33 == 1bv1);
    assume {:verifier.code 0} true;
    out_$i34 := $slt.bv32(out_$i32, 3bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb40:
    assume !(out_$i55 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb42:
    assume !(out_$i59 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $M.30 := 3bv32;
    call {:si_unique_call 720} {:cexpr "ldv_state_variable_1"} boogie_si_record_bv32(3bv32);
    goto corral_source_split_3153;

  $bb41:
    assume out_$i59 == 1bv1;
    goto corral_source_split_3152;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.bv32(out_$i58, 0bv32);
    goto corral_source_split_3150;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    out_$i58 := $M.34;
    goto corral_source_split_3149;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $M.34 := out_$i57;
    call {:si_unique_call 719} {:cexpr "ldv_retval_0"} boogie_si_record_bv32(out_$i57);
    goto corral_source_split_3148;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} out_$i57 := printer_setup(out_$p56, in_$p6);
    goto corral_source_split_3147;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    out_$p56 := $M.29;
    goto corral_source_split_3146;

  $bb39:
    assume out_$i55 == 1bv1;
    goto corral_source_split_3145;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.bv32(out_$i54, 2bv32);
    goto corral_source_split_3109;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    out_$i54 := $M.30;
    goto corral_source_split_3108;

  $bb19:
    assume out_$i35 == 1bv1;
    goto corral_source_split_3107;

  $bb18:
    assume !(out_$i34 == 1bv1);
    assume {:verifier.code 0} true;
    out_$i35 := $eq.bv32(out_$i32, 3bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} ldv_stop();
    goto corral_source_split_3155;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i35 == 1bv1);
    goto $bb21;

  $bb25:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1bv1);
    goto $bb21;

  $bb50:
    assume !(out_$i61 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb60:
    assume {:verifier.code 0} true;
    assume !(out_$i67 == 1bv1);
    goto $bb61;

  $bb63:
    assume {:verifier.code 0} true;
    assume !(out_$i69 == 1bv1);
    goto $bb61;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.bv32(out_$i68, 0bv32);
    goto corral_source_split_3169;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    out_$i68 := $M.31;
    goto corral_source_split_3168;

  $bb59:
    assume out_$i67 == 1bv1;
    goto corral_source_split_3167;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    out_$i67 := $eq.bv32(out_$i66, 2bv32);
    goto corral_source_split_3165;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    out_$i66 := $M.32;
    goto corral_source_split_3164;

  $bb57:
    assume out_$i65 == 1bv1;
    goto corral_source_split_3163;

  $bb52:
    assume out_$i63 == 1bv1;
    assume {:verifier.code 0} true;
    out_$i65 := $eq.bv32(out_$i62, 0bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb51:
    assume {:verifier.code 0} true;
    out_$i63 := $slt.bv32(out_$i62, 1bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_3157:
    assume {:verifier.code 1} true;
    call {:si_unique_call 722} out_$i62 := __VERIFIER_nondet_int();
    call {:si_unique_call 723} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32(out_$i62);
    call {:si_unique_call 724} {:cexpr "tmp___7"} boogie_si_record_bv32(out_$i62);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb49:
    assume out_$i61 == 1bv1;
    goto corral_source_split_3157;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.bv32(out_$i60, 0bv32);
    goto corral_source_split_3091;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    out_$i60 := $M.32;
    goto corral_source_split_3090;

  $bb5:
    assume out_$i27 == 1bv1;
    goto corral_source_split_3089;

  $bb4:
    assume !(out_$i26 == 1bv1);
    assume {:verifier.code 0} true;
    out_$i27 := $slt.bv32(out_$i25, 2bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb68:
    assume !(out_$i71 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb73:
    assume !(out_$i76 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} ldv_initialize_usb_gadget_driver_1();
    goto corral_source_split_3192;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $M.30 := 1bv32;
    call {:si_unique_call 732} {:cexpr "ldv_state_variable_1"} boogie_si_record_bv32(1bv32);
    goto corral_source_split_3191;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $M.32 := 2bv32;
    call {:si_unique_call 731} {:cexpr "ldv_state_variable_0"} boogie_si_record_bv32(2bv32);
    goto corral_source_split_3190;

  $bb72:
    assume out_$i76 == 1bv1;
    goto corral_source_split_3189;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    out_$i76 := $eq.bv32(out_$i75, 0bv32);
    goto corral_source_split_3187;

  $bb71:
    assume {:verifier.code 0} true;
    out_$i75 := $M.35;
    goto corral_source_split_3186;

  $bb70:
    assume !(out_$i74 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.bv32(out_$i73, 0bv32);
    goto corral_source_split_3181;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    out_$i73 := $M.35;
    goto corral_source_split_3180;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $M.35 := out_$i72;
    call {:si_unique_call 729} {:cexpr "ldv_retval_2"} boogie_si_record_bv32(out_$i72);
    goto corral_source_split_3179;

  SeqInstr_9:
    goto corral_source_split_3178;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} out_$i72 := init();
    goto SeqInstr_8;

  $bb67:
    assume out_$i71 == 1bv1;
    goto corral_source_split_3177;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.bv32(out_$i70, 1bv32);
    goto corral_source_split_3161;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    out_$i70 := $M.32;
    goto corral_source_split_3160;

  $bb54:
    assume out_$i64 == 1bv1;
    goto corral_source_split_3159;

  $bb53:
    assume !(out_$i63 == 1bv1);
    assume {:verifier.code 0} true;
    out_$i64 := $eq.bv32(out_$i62, 1bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} ldv_stop();
    goto corral_source_split_3194;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb55:
    assume {:verifier.code 0} true;
    assume !(out_$i64 == 1bv1);
    goto $bb56;

  $bb58:
    assume {:verifier.code 0} true;
    assume !(out_$i65 == 1bv1);
    goto $bb56;

  $bb80:
    assume !(out_$i78 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb103:
    assume !(out_$i94 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb104;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    goto $bb104;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $M.24 := 2bv32;
    call {:si_unique_call 741} {:cexpr "ldv_state_variable_2"} boogie_si_record_bv32(2bv32);
    goto corral_source_split_3239;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} out_vslice_dummy_var_80 := printer_write(out_$p95, in_$p14, out_$i96, in_$p13);
    goto corral_source_split_3238;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    out_$i96 := $load.bytes.bv64($M.28, in_$p3);
    goto corral_source_split_3237;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    out_$p95 := $M.27;
    goto corral_source_split_3236;

  $bb102:
    assume out_$i94 == 1bv1;
    goto corral_source_split_3235;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    out_$i94 := $eq.bv32(out_$i93, 2bv32);
    goto corral_source_split_3233;

  $bb101:
    assume {:verifier.code 0} true;
    out_$i93 := $M.24;
    goto corral_source_split_3232;

  $bb100:
    assume !(out_$i89 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $M.24 := 1bv32;
    call {:si_unique_call 739} {:cexpr "ldv_state_variable_2"} boogie_si_record_bv32(1bv32);
    goto corral_source_split_3230;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} out_vslice_dummy_var_79 := printer_write(out_$p90, in_$p14, out_$i91, in_$p13);
    goto corral_source_split_3229;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    out_$i91 := $load.bytes.bv64($M.28, in_$p3);
    goto corral_source_split_3228;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    out_$p90 := $M.27;
    goto corral_source_split_3227;

  $bb99:
    assume out_$i89 == 1bv1;
    goto corral_source_split_3226;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    out_$i89 := $eq.bv32(out_$i88, 1bv32);
    goto corral_source_split_3224;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    out_$i88 := $M.24;
    goto corral_source_split_3223;

  $bb97:
    assume out_$i87 == 1bv1;
    goto corral_source_split_3222;

  $bb93:
    assume out_$i85 == 1bv1;
    assume {:verifier.code 0} true;
    out_$i87 := $eq.bv32(out_$i79, 0bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb82:
    assume out_$i80 == 1bv1;
    assume {:verifier.code 0} true;
    out_$i85 := $slt.bv32(out_$i79, 1bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb81:
    assume {:verifier.code 0} true;
    out_$i80 := $slt.bv32(out_$i79, 3bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_3196:
    assume {:verifier.code 1} true;
    call {:si_unique_call 735} out_$i79 := __VERIFIER_nondet_int();
    call {:si_unique_call 736} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32(out_$i79);
    call {:si_unique_call 737} {:cexpr "tmp___8"} boogie_si_record_bv32(out_$i79);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb79:
    assume out_$i78 == 1bv1;
    goto corral_source_split_3196;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    out_$i78 := $ne.bv32(out_$i77, 0bv32);
    goto corral_source_split_3095;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    out_$i77 := $M.24;
    goto corral_source_split_3094;

  $bb7:
    assume out_$i28 == 1bv1;
    goto corral_source_split_3093;

  $bb6:
    assume !(out_$i27 == 1bv1);
    assume {:verifier.code 0} true;
    out_$i28 := $eq.bv32(out_$i25, 2bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb107:
    assume !(out_$i99 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $M.31 := out_$i104;
    call {:si_unique_call 744} {:cexpr "ref_cnt"} boogie_si_record_bv32(out_$i104);
    goto corral_source_split_3248;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    out_$i104 := $sub.bv32(out_$i103, 1bv32);
    goto corral_source_split_3247;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    out_$i103 := $M.31;
    goto corral_source_split_3246;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $M.24 := 1bv32;
    call {:si_unique_call 743} {:cexpr "ldv_state_variable_2"} boogie_si_record_bv32(1bv32);
    goto corral_source_split_3245;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} out_vslice_dummy_var_81 := printer_close(out_$p100, out_$p101);
    goto corral_source_split_3244;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    out_$p101 := $M.27;
    goto corral_source_split_3243;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    out_$p100 := $M.26;
    goto corral_source_split_3242;

  $bb106:
    assume out_$i99 == 1bv1;
    goto corral_source_split_3241;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    out_$i99 := $eq.bv32(out_$i98, 2bv32);
    goto corral_source_split_3216;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    out_$i98 := $M.24;
    goto corral_source_split_3215;

  $bb95:
    assume out_$i86 == 1bv1;
    goto corral_source_split_3214;

  $bb94:
    assume !(out_$i85 == 1bv1);
    assume {:verifier.code 0} true;
    out_$i86 := $slt.bv32(out_$i79, 2bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb110:
    assume !(out_$i106 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $M.24 := 2bv32;
    call {:si_unique_call 746} {:cexpr "ldv_state_variable_2"} boogie_si_record_bv32(2bv32);
    goto corral_source_split_3254;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} out_vslice_dummy_var_82 := printer_read(out_$p107, in_$p7, out_$i108, in_$p11);
    goto corral_source_split_3253;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    out_$i108 := $load.bytes.bv64($M.28, in_$p0);
    goto corral_source_split_3252;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    out_$p107 := $M.27;
    goto corral_source_split_3251;

  $bb109:
    assume out_$i106 == 1bv1;
    goto corral_source_split_3250;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    out_$i106 := $eq.bv32(out_$i105, 2bv32);
    goto corral_source_split_3220;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    out_$i105 := $M.24;
    goto corral_source_split_3219;

  $bb96:
    assume !(out_$i86 == 1bv1);
    goto corral_source_split_3218;

  $bb116:
    assume !(out_$i116 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $M.24 := 2bv32;
    call {:si_unique_call 750} {:cexpr "ldv_state_variable_2"} boogie_si_record_bv32(2bv32);
    goto corral_source_split_3269;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} out_vslice_dummy_var_84 := printer_fsync(out_$p117, out_$i118);
    goto corral_source_split_3268;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    out_$i118 := $load.bytes.bv32($M.28, in_$p2);
    goto corral_source_split_3267;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    out_$p117 := $M.27;
    goto corral_source_split_3266;

  $bb115:
    assume out_$i116 == 1bv1;
    goto corral_source_split_3265;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    out_$i116 := $eq.bv32(out_$i115, 2bv32);
    goto corral_source_split_3263;

  $bb114:
    assume {:verifier.code 0} true;
    out_$i115 := $M.24;
    goto corral_source_split_3262;

  $bb113:
    assume !(out_$i111 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $M.24 := 1bv32;
    call {:si_unique_call 748} {:cexpr "ldv_state_variable_2"} boogie_si_record_bv32(1bv32);
    goto corral_source_split_3260;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} out_vslice_dummy_var_83 := printer_fsync(out_$p112, out_$i113);
    goto corral_source_split_3259;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    out_$i113 := $load.bytes.bv32($M.28, in_$p2);
    goto corral_source_split_3258;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    out_$p112 := $M.27;
    goto corral_source_split_3257;

  $bb112:
    assume out_$i111 == 1bv1;
    goto corral_source_split_3256;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    out_$i111 := $eq.bv32(out_$i110, 1bv32);
    goto corral_source_split_3208;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    out_$i110 := $M.24;
    goto corral_source_split_3207;

  $bb91:
    assume out_$i84 == 1bv1;
    goto corral_source_split_3206;

  $bb84:
    assume out_$i81 == 1bv1;
    assume {:verifier.code 0} true;
    out_$i84 := $slt.bv32(out_$i79, 4bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb83:
    assume !(out_$i80 == 1bv1);
    assume {:verifier.code 0} true;
    out_$i81 := $slt.bv32(out_$i79, 5bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb122:
    assume !(out_$i125 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $M.24 := 2bv32;
    call {:si_unique_call 754} {:cexpr "ldv_state_variable_2"} boogie_si_record_bv32(2bv32);
    goto corral_source_split_3282;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} out_vslice_dummy_var_86 := printer_poll(out_$p126, in_$p9);
    goto corral_source_split_3281;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    out_$p126 := $M.27;
    goto corral_source_split_3280;

  $bb121:
    assume out_$i125 == 1bv1;
    goto corral_source_split_3279;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    out_$i125 := $eq.bv32(out_$i124, 2bv32);
    goto corral_source_split_3277;

  $bb120:
    assume {:verifier.code 0} true;
    out_$i124 := $M.24;
    goto corral_source_split_3276;

  $bb119:
    assume !(out_$i121 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $M.24 := 1bv32;
    call {:si_unique_call 752} {:cexpr "ldv_state_variable_2"} boogie_si_record_bv32(1bv32);
    goto corral_source_split_3274;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} out_vslice_dummy_var_85 := printer_poll(out_$p122, in_$p9);
    goto corral_source_split_3273;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    out_$p122 := $M.27;
    goto corral_source_split_3272;

  $bb118:
    assume out_$i121 == 1bv1;
    goto corral_source_split_3271;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    out_$i121 := $eq.bv32(out_$i120, 1bv32);
    goto corral_source_split_3212;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    out_$i120 := $M.24;
    goto corral_source_split_3211;

  $bb92:
    assume !(out_$i84 == 1bv1);
    goto corral_source_split_3210;

  $bb125:
    assume !(out_$i129 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb127:
    assume !(out_$i134 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $M.31 := out_$i136;
    call {:si_unique_call 758} {:cexpr "ref_cnt"} boogie_si_record_bv32(out_$i136);
    goto corral_source_split_3296;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    out_$i136 := $add.bv32(out_$i135, 1bv32);
    goto corral_source_split_3295;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    out_$i135 := $M.31;
    goto corral_source_split_3294;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $M.24 := 2bv32;
    call {:si_unique_call 757} {:cexpr "ldv_state_variable_2"} boogie_si_record_bv32(2bv32);
    goto corral_source_split_3293;

  $bb126:
    assume out_$i134 == 1bv1;
    goto corral_source_split_3292;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    out_$i134 := $eq.bv32(out_$i133, 0bv32);
    goto corral_source_split_3290;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    out_$i133 := $M.36;
    goto corral_source_split_3289;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $M.36 := out_$i132;
    call {:si_unique_call 756} {:cexpr "ldv_retval_3"} boogie_si_record_bv32(out_$i132);
    goto corral_source_split_3288;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} out_$i132 := printer_open(out_$p130, out_$p131);
    goto corral_source_split_3287;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    out_$p131 := $M.27;
    goto corral_source_split_3286;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    out_$p130 := $M.26;
    goto corral_source_split_3285;

  $bb124:
    assume out_$i129 == 1bv1;
    goto corral_source_split_3284;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    out_$i129 := $eq.bv32(out_$i128, 1bv32);
    goto corral_source_split_3200;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    out_$i128 := $M.24;
    goto corral_source_split_3199;

  $bb86:
    assume out_$i82 == 1bv1;
    goto corral_source_split_3198;

  $bb85:
    assume !(out_$i81 == 1bv1);
    assume {:verifier.code 0} true;
    out_$i82 := $slt.bv32(out_$i79, 6bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb131:
    assume !(out_$i138 == 1bv1);
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $M.24 := 2bv32;
    call {:si_unique_call 760} {:cexpr "ldv_state_variable_2"} boogie_si_record_bv32(2bv32);
    goto corral_source_split_3303;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} out_vslice_dummy_var_87 := printer_ioctl(out_$p139, out_$i140, out_$i141);
    goto corral_source_split_3302;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    out_$i141 := $load.bytes.bv64($M.28, in_$p1);
    goto corral_source_split_3301;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    out_$i140 := $load.bytes.bv32($M.28, in_$p4);
    goto corral_source_split_3300;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    out_$p139 := $M.27;
    goto corral_source_split_3299;

  $bb130:
    assume out_$i138 == 1bv1;
    goto corral_source_split_3298;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    out_$i138 := $eq.bv32(out_$i137, 2bv32);
    goto corral_source_split_3204;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    out_$i137 := $M.24;
    goto corral_source_split_3203;

  $bb88:
    assume out_$i83 == 1bv1;
    goto corral_source_split_3202;

  $bb87:
    assume !(out_$i82 == 1bv1);
    assume {:verifier.code 0} true;
    out_$i83 := $eq.bv32(out_$i79, 6bv32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} ldv_stop();
    goto corral_source_split_3305;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb89:
    assume {:verifier.code 0} true;
    assume !(out_$i83 == 1bv1);
    goto $bb90;

  $bb98:
    assume {:verifier.code 0} true;
    assume !(out_$i87 == 1bv1);
    goto $bb90;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} ldv_stop();
    goto corral_source_split_3307;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i28 == 1bv1);
    goto $bb9;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i29 == 1bv1);
    goto $bb9;

  $bb48_dummy:
    call {:si_unique_call 1} out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i93, out_$i94, out_$p95, out_$i96, out_$i98, out_$i99, out_$p100, out_$p101, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i110, out_$i111, out_$p112, out_$i113, out_$i115, out_$i116, out_$p117, out_$i118, out_$i120, out_$i121, out_$p122, out_$i124, out_$i125, out_$p126, out_$i128, out_$i129, out_$p130, out_$p131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$i141, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p6, in_$p7, in_$p9, in_$p11, in_$p13, in_$p14, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i93, out_$i94, out_$p95, out_$i96, out_$i98, out_$i99, out_$p100, out_$p101, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i110, out_$i111, out_$p112, out_$i113, out_$i115, out_$i116, out_$p117, out_$i118, out_$i120, out_$i121, out_$p122, out_$i124, out_$i125, out_$p126, out_$i128, out_$i129, out_$p130, out_$p131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$i141, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p6: ref, in_$p7: ref, in_$p9: ref, in_$p11: ref, in_$p13: ref, in_$p14: ref, in_$i25: bv32, in_$i26: bv1, in_$i27: bv1, in_$i28: bv1, in_$i29: bv1, in_$i30: bv32, in_$i31: bv1, in_$i32: bv32, in_$i33: bv1, in_$i34: bv1, in_$i35: bv1, in_$i36: bv1, in_$i37: bv1, in_$i38: bv32, in_$i39: bv1, in_$p40: ref, in_$i41: bv32, in_$i42: bv1, in_$p43: ref, in_$i44: bv32, in_$i45: bv32, in_$i46: bv32, in_$i47: bv1, in_$p48: ref, in_$i49: bv32, in_$i50: bv32, in_$i51: bv1, in_$i52: bv32, in_$i53: bv32, in_$i54: bv32, in_$i55: bv1, in_$p56: ref, in_$i57: bv32, in_$i58: bv32, in_$i59: bv1, in_$i60: bv32, in_$i61: bv1, in_$i62: bv32, in_$i63: bv1, in_$i64: bv1, in_$i65: bv1, in_$i66: bv32, in_$i67: bv1, in_$i68: bv32, in_$i69: bv1, in_$i70: bv32, in_$i71: bv1, in_$i72: bv32, in_$i73: bv32, in_$i74: bv1, in_$i75: bv32, in_$i76: bv1, in_$i77: bv32, in_$i78: bv1, in_$i79: bv32, in_$i80: bv1, in_$i81: bv1, in_$i82: bv1, in_$i83: bv1, in_$i84: bv1, in_$i85: bv1, in_$i86: bv1, in_$i87: bv1, in_$i88: bv32, in_$i89: bv1, in_$p90: ref, in_$i91: bv64, in_$i93: bv32, in_$i94: bv1, in_$p95: ref, in_$i96: bv64, in_$i98: bv32, in_$i99: bv1, in_$p100: ref, in_$p101: ref, in_$i103: bv32, in_$i104: bv32, in_$i105: bv32, in_$i106: bv1, in_$p107: ref, in_$i108: bv64, in_$i110: bv32, in_$i111: bv1, in_$p112: ref, in_$i113: bv32, in_$i115: bv32, in_$i116: bv1, in_$p117: ref, in_$i118: bv32, in_$i120: bv32, in_$i121: bv1, in_$p122: ref, in_$i124: bv32, in_$i125: bv1, in_$p126: ref, in_$i128: bv32, in_$i129: bv1, in_$p130: ref, in_$p131: ref, in_$i132: bv32, in_$i133: bv32, in_$i134: bv1, in_$i135: bv32, in_$i136: bv32, in_$i137: bv32, in_$i138: bv1, in_$p139: ref, in_$i140: bv32, in_$i141: bv64, in_vslice_dummy_var_79: bv64, in_vslice_dummy_var_80: bv64, in_vslice_dummy_var_81: bv32, in_vslice_dummy_var_82: bv64, in_vslice_dummy_var_83: bv32, in_vslice_dummy_var_84: bv32, in_vslice_dummy_var_85: bv32, in_vslice_dummy_var_86: bv32, in_vslice_dummy_var_87: bv64) returns (out_$i25: bv32, out_$i26: bv1, out_$i27: bv1, out_$i28: bv1, out_$i29: bv1, out_$i30: bv32, out_$i31: bv1, out_$i32: bv32, out_$i33: bv1, out_$i34: bv1, out_$i35: bv1, out_$i36: bv1, out_$i37: bv1, out_$i38: bv32, out_$i39: bv1, out_$p40: ref, out_$i41: bv32, out_$i42: bv1, out_$p43: ref, out_$i44: bv32, out_$i45: bv32, out_$i46: bv32, out_$i47: bv1, out_$p48: ref, out_$i49: bv32, out_$i50: bv32, out_$i51: bv1, out_$i52: bv32, out_$i53: bv32, out_$i54: bv32, out_$i55: bv1, out_$p56: ref, out_$i57: bv32, out_$i58: bv32, out_$i59: bv1, out_$i60: bv32, out_$i61: bv1, out_$i62: bv32, out_$i63: bv1, out_$i64: bv1, out_$i65: bv1, out_$i66: bv32, out_$i67: bv1, out_$i68: bv32, out_$i69: bv1, out_$i70: bv32, out_$i71: bv1, out_$i72: bv32, out_$i73: bv32, out_$i74: bv1, out_$i75: bv32, out_$i76: bv1, out_$i77: bv32, out_$i78: bv1, out_$i79: bv32, out_$i80: bv1, out_$i81: bv1, out_$i82: bv1, out_$i83: bv1, out_$i84: bv1, out_$i85: bv1, out_$i86: bv1, out_$i87: bv1, out_$i88: bv32, out_$i89: bv1, out_$p90: ref, out_$i91: bv64, out_$i93: bv32, out_$i94: bv1, out_$p95: ref, out_$i96: bv64, out_$i98: bv32, out_$i99: bv1, out_$p100: ref, out_$p101: ref, out_$i103: bv32, out_$i104: bv32, out_$i105: bv32, out_$i106: bv1, out_$p107: ref, out_$i108: bv64, out_$i110: bv32, out_$i111: bv1, out_$p112: ref, out_$i113: bv32, out_$i115: bv32, out_$i116: bv1, out_$p117: ref, out_$i118: bv32, out_$i120: bv32, out_$i121: bv1, out_$p122: ref, out_$i124: bv32, out_$i125: bv1, out_$p126: ref, out_$i128: bv32, out_$i129: bv1, out_$p130: ref, out_$p131: ref, out_$i132: bv32, out_$i133: bv32, out_$i134: bv1, out_$i135: bv32, out_$i136: bv32, out_$i137: bv32, out_$i138: bv1, out_$p139: ref, out_$i140: bv32, out_$i141: bv64, out_vslice_dummy_var_79: bv64, out_vslice_dummy_var_80: bv64, out_vslice_dummy_var_81: bv32, out_vslice_dummy_var_82: bv64, out_vslice_dummy_var_83: bv32, out_vslice_dummy_var_84: bv32, out_vslice_dummy_var_85: bv32, out_vslice_dummy_var_86: bv32, out_vslice_dummy_var_87: bv64);
  modifies $M.30, $M.0, $M.24, $M.25, $CurrAddr, $M.26, $M.27, $M.2, $M.3, $M.4, $M.5, $M.6, $M.31, $M.33, $M.34, $M.29, $M.32, $M.35, $M.7, $M.37, assertsPassed, $M.38, $M.39, $M.36;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


