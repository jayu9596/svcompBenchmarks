var $M.0: [ref]i8;

var $M.1: ref;

var $M.2: i32;

var $M.3: [ref]ref;

var $M.4: [ref]i8;

var $M.5: [ref]i8;

var $M.6: [ref]i8;

var $M.7: i32;

var $M.8: i32;

var $M.9: i32;

var $M.10: i32;

var $M.11: i32;

var $M.12: i32;

var $M.13: i32;

var $M.14: i32;

var $M.16: ref;

var $M.17: ref;

var $M.18: ref;

var $M.19: ref;

var $M.20: [ref]i8;

var $M.21: i32;

var $M.26: ref;

var $M.34: [ref]i64;

var $M.35: [ref]i64;

var $M.36: ref;

var $M.37: ref;

var $M.38: ref;

var $M.39: ref;

var $M.40: ref;

var $M.41: ref;

var $M.42: ref;

var $M.44: ref;

var $M.45: ref;

var $M.46: ref;

var $M.47: ref;

var $M.48: ref;

var $M.49: ref;

var $M.50: ref;

var $M.51: ref;

var $M.52: [ref]i8;

var $M.53: [ref]i8;

var $M.54: i32;

var $M.55: i32;

var $M.56: i32;

var $M.57: i32;

var $M.58: i32;

var $M.59: i32;

var $M.60: i32;

var $M.61: i32;

var $M.62: i32;

var $M.63: i32;

var $M.64: i32;

var $M.65: i32;

var $M.66: i32;

var $M.67: i32;

var $M.68: i32;

var $M.69: i32;

var $M.70: i32;

var $M.71: i32;

var $M.72: i32;

var $M.73: i32;

var $M.74: i32;

var $M.75: i32;

var $M.76: i32;

var $M.77: ref;

var $M.78: i32;

var $M.79: i32;

var $M.80: [ref]i8;

var $M.246: [ref]i8;

var $M.292: [ref]i8;

var $M.293: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 501534);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_irq_1_3: ref;

axiom ldv_irq_1_3 == $sub.ref(0, 1028);

const ldv_irq_1_0: ref;

axiom ldv_irq_1_0 == $sub.ref(0, 2056);

const ldv_irq_1_2: ref;

axiom ldv_irq_1_2 == $sub.ref(0, 3084);

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 4112);

const ldv_irq_1_1: ref;

axiom ldv_irq_1_1 == $sub.ref(0, 5140);

const sh7757_data_group0: ref;

axiom sh7757_data_group0 == $sub.ref(0, 6172);

const sh7734_data_group0: ref;

axiom sh7734_data_group0 == $sub.ref(0, 7204);

const sh_eth_driver_group0: ref;

axiom sh_eth_driver_group0 == $sub.ref(0, 8236);

const sh_eth_netdev_ops_tsu_group1: ref;

axiom sh_eth_netdev_ops_tsu_group1 == $sub.ref(0, 9268);

const sh7763_data_group0: ref;

axiom sh7763_data_group0 == $sub.ref(0, 10300);

const sh_eth_ethtool_ops_group0: ref;

axiom sh_eth_ethtool_ops_group0 == $sub.ref(0, 11332);

const sh_eth_ethtool_ops_group1: ref;

axiom sh_eth_ethtool_ops_group1 == $sub.ref(0, 12364);

const sh_eth_ethtool_ops_group2: ref;

axiom sh_eth_ethtool_ops_group2 == $sub.ref(0, 13396);

const ldv_irq_line_1_0: ref;

axiom ldv_irq_line_1_0 == $sub.ref(0, 14424);

const ldv_irq_data_1_0: ref;

axiom ldv_irq_data_1_0 == $sub.ref(0, 15456);

const ldv_irq_line_1_1: ref;

axiom ldv_irq_line_1_1 == $sub.ref(0, 16484);

const ldv_irq_data_1_1: ref;

axiom ldv_irq_data_1_1 == $sub.ref(0, 17516);

const ldv_irq_line_1_2: ref;

axiom ldv_irq_line_1_2 == $sub.ref(0, 18544);

const ldv_irq_data_1_2: ref;

axiom ldv_irq_data_1_2 == $sub.ref(0, 19576);

const ldv_irq_line_1_3: ref;

axiom ldv_irq_line_1_3 == $sub.ref(0, 20604);

const ldv_irq_data_1_3: ref;

axiom ldv_irq_data_1_3 == $sub.ref(0, 21636);

const r8a7740_data_group0: ref;

axiom r8a7740_data_group0 == $sub.ref(0, 22668);

const sh_eth_netdev_ops_group1: ref;

axiom sh_eth_netdev_ops_group1 == $sub.ref(0, 23700);

const bb_ops_group0: ref;

axiom bb_ops_group0 == $sub.ref(0, 24732);

const r7s72100_data_group0: ref;

axiom r7s72100_data_group0 == $sub.ref(0, 25764);

const r8a779x_data_group0: ref;

axiom r8a779x_data_group0 == $sub.ref(0, 26796);

const r8a777x_data_group0: ref;

axiom r8a777x_data_group0 == $sub.ref(0, 27828);

const sh7757_data_giga_group0: ref;

axiom sh7757_data_giga_group0 == $sub.ref(0, 28860);

const sh_eth_dev_pm_ops_group1: ref;

axiom sh_eth_dev_pm_ops_group1 == $sub.ref(0, 29892);

const sh7724_data_group0: ref;

axiom sh7724_data_group0 == $sub.ref(0, 30924);

const ldv_state_variable_11: ref;

axiom ldv_state_variable_11 == $sub.ref(0, 31952);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 32980);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 34008);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 35036);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 36064);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 37092);

const ldv_state_variable_16: ref;

axiom ldv_state_variable_16 == $sub.ref(0, 38120);

const ldv_state_variable_13: ref;

axiom ldv_state_variable_13 == $sub.ref(0, 39148);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 40176);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 41204);

const ldv_state_variable_9: ref;

axiom ldv_state_variable_9 == $sub.ref(0, 42232);

const ldv_state_variable_12: ref;

axiom ldv_state_variable_12 == $sub.ref(0, 43260);

const ldv_state_variable_14: ref;

axiom ldv_state_variable_14 == $sub.ref(0, 44288);

const ldv_state_variable_15: ref;

axiom ldv_state_variable_15 == $sub.ref(0, 45316);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 46344);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 47372);

const ldv_state_variable_10: ref;

axiom ldv_state_variable_10 == $sub.ref(0, 48400);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 49428);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 50456);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 51484);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 52512);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 53540);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 54568);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 55596);

const ldv_retval_7: ref;

axiom ldv_retval_7 == $sub.ref(0, 56624);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 57652);

const last_index: ref;

axiom last_index == $sub.ref(0, 58680);

const LDV_SKBS: ref;

axiom LDV_SKBS == $sub.ref(0, 59712);

const __mod_platform__sh_eth_id_table_device_table: ref;

axiom __mod_platform__sh_eth_id_table_device_table == $sub.ref(0, 60768);

const {:count 15} set_impl: ref;

axiom set_impl == $sub.ref(0, 61912);

const {:count 4} sh_eth_gstrings_stats: ref;

axiom sh_eth_gstrings_stats == $sub.ref(0, 63064);

const r8a779x_data: ref;

axiom r8a779x_data == $sub.ref(0, 64200);

const r8a777x_data: ref;

axiom r8a777x_data == $sub.ref(0, 65336);

const r8a7740_data: ref;

axiom r8a7740_data == $sub.ref(0, 66472);

const r7s72100_data: ref;

axiom r7s72100_data == $sub.ref(0, 67608);

const sh7763_data: ref;

axiom sh7763_data == $sub.ref(0, 68744);

const sh7757_data_giga: ref;

axiom sh7757_data_giga == $sub.ref(0, 69880);

const sh7757_data: ref;

axiom sh7757_data == $sub.ref(0, 71016);

const sh7734_data: ref;

axiom sh7734_data == $sub.ref(0, 72152);

const sh7724_data: ref;

axiom sh7724_data == $sub.ref(0, 73288);

const sh771x_data: ref;

axiom sh771x_data == $sub.ref(0, 74424);

const sh7619_data: ref;

axiom sh7619_data == $sub.ref(0, 75560);

const {:count 13} sh_eth_id_table: ref;

axiom sh_eth_id_table == $sub.ref(0, 77000);

const sh_eth_dev_pm_ops: ref;

axiom sh_eth_dev_pm_ops == $sub.ref(0, 78208);

const sh_eth_driver: ref;

axiom sh_eth_driver == $sub.ref(0, 79408);

const bb_ops: ref;

axiom bb_ops == $sub.ref(0, 80472);

const sh_eth_ethtool_ops: ref;

axiom sh_eth_ethtool_ops == $sub.ref(0, 81872);

const sh_eth_netdev_ops: ref;

axiom sh_eth_netdev_ops == $sub.ref(0, 83376);

const sh_eth_netdev_ops_tsu: ref;

axiom sh_eth_netdev_ops_tsu == $sub.ref(0, 84880);

const {:count 109} sh_eth_offset_fast_sh3_sh2: ref;

axiom sh_eth_offset_fast_sh3_sh2 == $sub.ref(0, 86122);

const {:count 109} sh_eth_offset_fast_sh4: ref;

axiom sh_eth_offset_fast_sh4 == $sub.ref(0, 87364);

const {:count 109} sh_eth_offset_fast_rcar: ref;

axiom sh_eth_offset_fast_rcar == $sub.ref(0, 88606);

const {:count 109} sh_eth_offset_fast_rz: ref;

axiom sh_eth_offset_fast_rz == $sub.ref(0, 89848);

const {:count 109} sh_eth_offset_gigabit: ref;

axiom sh_eth_offset_gigabit == $sub.ref(0, 91090);

const {:count 48} .str.48: ref;

axiom .str.48 == $sub.ref(0, 92162);

const {:count 41} .str.1: ref;

axiom .str.1 == $sub.ref(0, 93227);

const dma_ops: ref;

axiom dma_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 47} .str.39: ref;

axiom .str.39 == $sub.ref(0, 94298);

const {:count 21} .str.38: ref;

axiom .str.38 == $sub.ref(0, 95343);

const {:count 26} .str.34: ref;

axiom .str.34 == $sub.ref(0, 96393);

const {:count 63} .str.35: ref;

axiom .str.35 == $sub.ref(0, 97480);

const {:count 13} .str.40: ref;

axiom .str.40 == $sub.ref(0, 98517);

const {:count 16} .str.41: ref;

axiom .str.41 == $sub.ref(0, 99557);

const {:count 17} .str.47: ref;

axiom .str.47 == $sub.ref(0, 100598);

const {:count 37} .str.36: ref;

axiom .str.36 == $sub.ref(0, 101659);

const pv_irq_ops: ref;

axiom pv_irq_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 34} .str.37: ref;

axiom .str.37 == $sub.ref(0, 102717);

const {:count 27} .str.42: ref;

axiom .str.42 == $sub.ref(0, 103768);

const {:count 11} .str.43: ref;

axiom .str.43 == $sub.ref(0, 104803);

const {:count 8} .str.44: ref;

axiom .str.44 == $sub.ref(0, 105835);

const {:count 23} .str.45: ref;

axiom .str.45 == $sub.ref(0, 106882);

const {:count 39} .str.46: ref;

axiom .str.46 == $sub.ref(0, 107945);

const x86_dma_fallback_dev: ref;

axiom x86_dma_fallback_dev == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const .str: ref;

axiom .str == $sub.ref(0, 109020);

const {:count 16} .str.2: ref;

axiom .str.2 == $sub.ref(0, 110060);

const {:count 15} .str.3: ref;

axiom .str.3 == $sub.ref(0, 111099);

const {:count 27} .str.4: ref;

axiom .str.4 == $sub.ref(0, 112150);

const {:count 26} .str.5: ref;

axiom .str.5 == $sub.ref(0, 113200);

const {:count 26} .str.6: ref;

axiom .str.6 == $sub.ref(0, 114250);

const {:count 23} .str.7: ref;

axiom .str.7 == $sub.ref(0, 115297);

const {:count 15} .str.8: ref;

axiom .str.8 == $sub.ref(0, 116336);

const {:count 77} .str.9: ref;

axiom .str.9 == $sub.ref(0, 117437);

const {:count 30} .str.31: ref;

axiom .str.31 == $sub.ref(0, 118491);

const {:count 21} .str.32: ref;

axiom .str.32 == $sub.ref(0, 119536);

const {:count 29} .str.33: ref;

axiom .str.33 == $sub.ref(0, 120589);

const cpu_number: ref;

axiom cpu_number == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 7} .str.19: ref;

axiom .str.19 == $sub.ref(0, 121620);

const {:count 18} .str.10: ref;

axiom .str.10 == $sub.ref(0, 122662);

const {:count 21} .str.11: ref;

axiom .str.11 == $sub.ref(0, 123707);

const {:count 18} .str.12: ref;

axiom .str.12 == $sub.ref(0, 124749);

const {:count 28} .str.13: ref;

axiom .str.13 == $sub.ref(0, 125801);

const {:count 52} .str.14: ref;

axiom .str.14 == $sub.ref(0, 126877);

const {:count 27} .str.15: ref;

axiom .str.15 == $sub.ref(0, 127928);

const {:count 36} .str.16: ref;

axiom .str.16 == $sub.ref(0, 128988);

const {:count 7} .str.17: ref;

axiom .str.17 == $sub.ref(0, 130019);

const {:count 6} .str.18: ref;

axiom .str.18 == $sub.ref(0, 131049);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 132081);

const {:count 3} .str.1.70: ref;

axiom .str.1.70 == $sub.ref(0, 133108);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 134146);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 135174);

const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 136206);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p2 := ldv_malloc($i0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 137238);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 138270);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 5} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 6} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p4 := malloc($i0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 1} true;
    call {:si_unique_call 8} __VERIFIER_assume($i7);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 139302);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 9} $r := $malloc($i0);
    return;
}



const sh_eth_open: ref;

axiom sh_eth_open == $sub.ref(0, 140334);

procedure sh_eth_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.7, $M.9, $M.11, $M.13, $M.8, $M.16, $M.10, $M.17, $M.12, $M.18, $M.14, $M.19, $M.3, $M.2, $M.34, $M.35, $CurrAddr, $M.5, $M.4;



implementation sh_eth_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i21: i32;
  var $i22: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i23: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i20: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i28: i32;
  var vslice_dummy_var_26: i32;
  var vslice_dummy_var_27: i32;
  var vslice_dummy_var_28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $p1 := netdev_priv($p0);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(0, 1));
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} vslice_dummy_var_26 := pm_runtime_get_sync($p5);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(192, 1));
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} napi_enable($p7);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(64, 1));
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(0, 1));
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p0);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $i17 := ldv_request_irq_14($i9, sh_eth_interrupt, $i13, $p15, $p16);
    call {:si_unique_call 14} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} $i21 := sh_eth_ring_init($p0);
    call {:si_unique_call 19} {:cexpr "ret"} boogie_si_record_i32($i21);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $i24 := sh_eth_dev_init($p0, 1);
    call {:si_unique_call 22} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $i26 := sh_eth_phy_start($p0);
    call {:si_unique_call 24} {:cexpr "ret"} boogie_si_record_i32($i26);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i28 := $i26;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb12:
    assume $i27 == 1;
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i23 := $i26;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(64, 1));
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p0);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} ldv_free_irq_15($i30, $p31);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i20 := $i23;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(192, 1));
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} napi_disable($p32);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(0, 1));
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} vslice_dummy_var_28 := pm_runtime_put_sync($p35);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i28 := $i20;
    goto $bb15;

  $bb9:
    assume $i25 == 1;
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i23 := $i24;
    goto $bb7;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i23 := $i21;
    goto $bb7;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} vslice_dummy_var_27 := netdev_err.ref.ref($p0, .str.42);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i20 := $i17;
    goto $bb3;
}



const sh_eth_close: ref;

axiom sh_eth_close == $sub.ref(0, 141366);

procedure sh_eth_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.7, $M.9, $M.11, $M.13, $M.3, $M.2, $CurrAddr;



implementation sh_eth_close($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var vslice_dummy_var_29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $p1 := netdev_priv($p0);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} netif_stop_queue($p0);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} sh_eth_write($p0, 0, 5);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} sh_eth_write($p0, 0, 2);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} sh_eth_write($p0, 0, 3);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(392, 1));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(64, 1));
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p0);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} ldv_free_irq_16($i12, $p13);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(192, 1));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} napi_disable($p14);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} sh_eth_ring_free($p0);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} sh_eth_free_dma_buffer($p2);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(0, 1));
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} vslice_dummy_var_29 := pm_runtime_put_sync($p17);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(392, 1));
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} phy_stop($p8);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(392, 1));
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} phy_disconnect($p10);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sh_eth_start_xmit: ref;

axiom sh_eth_start_xmit == $sub.ref(0, 142398);

procedure sh_eth_start_xmit($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation sh_eth_start_xmit($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i64;
  var $i50: i64;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i64;
  var $i61: i64;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i16;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $p80: ref;
  var $i81: i32;
  var $p82: ref;
  var $i83: i32;
  var $i84: i32;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $p89: ref;
  var $i90: i64;
  var $i91: i64;
  var $i92: i64;
  var $i93: i1;
  var $i94: i64;
  var $i24: i32;
  var vslice_dummy_var_30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $p2 := netdev_priv($p1);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(96, 1));
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} $p5 := spinlock_check($p4);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 40} {:cexpr "flags"} boogie_si_record_i64($i6);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(176, 1));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(180, 1));
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i8, $i10);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(44, 1));
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32($i13, 4);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i15 := $uge.i32($i11, $i14);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(96, 1));
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} spin_unlock_irqrestore($p25, $i6);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(176, 1));
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(44, 1));
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i30 := $urem.i32($i27, $i29);
    call {:si_unique_call 47} {:cexpr "entry"} boogie_si_record_i32($i30);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(88, 1));
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i30);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p32, $mul.ref($i33, 8));
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $p0);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(72, 1));
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i37 := $zext.i32.i64($i30);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p41, $mul.ref(104, 1));
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 3176)), $mul.ref(1296, 1));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i60 := $zext.i32.i64($i59);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $i61 := dma_map_single_attrs($p55, $p57, $i60, 1, $0.ref);
    call {:si_unique_call 51} {:cexpr "tmp___3"} boogie_si_record_i64($i61);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i64.i32($i61);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p36, $mul.ref($i37, 16)), $mul.ref(8, 1));
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $i62);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i66 := $ule.i32($i65, 59);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i66 == 1);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i32.i16($i69);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p36, $mul.ref($i37, 16)), $mul.ref(6, 1));
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p71, $i70);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(44, 1));
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i74 := $sub.i32($i73, 1);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i75 := $ule.i32($i74, $i30);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i75 == 1);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} $i81 := cpu_to_edmac($p3, $sub.i32(0, 2147483648));
    call {:si_unique_call 55} {:cexpr "tmp___5"} boogie_si_record_i32($i81);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p36, $mul.ref($i37, 16)), $mul.ref(0, 1));
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i84 := $or.i32($i83, $i81);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p36, $mul.ref($i37, 16)), $mul.ref(0, 1));
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, $i84);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(176, 1));
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i88 := $add.i32($i87, 1);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(176, 1));
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p89, $i88);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $i90 := sh_eth_read($p1, 2);
    call {:si_unique_call 57} {:cexpr "tmp___7"} boogie_si_record_i64($i90);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} $i91 := sh_eth_get_edtrr_trns($p3);
    call {:si_unique_call 59} {:cexpr "tmp___8"} boogie_si_record_i64($i91);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i92 := $and.i64($i90, $i91);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i93 := $eq.i64($i92, 0);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb20:
    assume $i93 == 1;
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $i94 := sh_eth_get_edtrr_trns($p3);
    call {:si_unique_call 61} {:cexpr "tmp___6"} boogie_si_record_i64($i94);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} sh_eth_write($p1, $i94, 2);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i75 == 1;
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} $i76 := cpu_to_edmac($p3, $sub.i32(0, 1073741824));
    call {:si_unique_call 53} {:cexpr "tmp___4"} boogie_si_record_i32($i76);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p36, $mul.ref($i37, 16)), $mul.ref(0, 1));
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i79 := $or.i32($i78, $i76);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p36, $mul.ref($i37, 16)), $mul.ref(0, 1));
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p80, $i79);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i66 == 1;
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p36, $mul.ref($i37, 16)), $mul.ref(6, 1));
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p67, 60);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i45 == 1;
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p36, $mul.ref($i37, 16)), $mul.ref(8, 1));
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i47, 3);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i49 := $zext.i32.i64($i48);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $i50 := $and.i64($i49, 4294967292);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} $p51 := phys_to_virt($i50);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i53, 2);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} sh_eth_soft_swap($p51, $i54);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $i16 := sh_eth_txfree($p1);
    call {:si_unique_call 42} {:cexpr "tmp___1"} boogie_si_record_i32($i16);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(408, 1));
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 256);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} netif_stop_queue($p1);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(96, 1));
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} spin_unlock_irqrestore($p23, $i6);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i24 := 16;
    goto $bb8;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} vslice_dummy_var_30 := netdev_warn.ref.ref($p1, .str.47);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const sh_eth_set_multicast_list: ref;

axiom sh_eth_set_multicast_list == $sub.ref(0, 143430);

procedure sh_eth_set_multicast_list($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.4, $CurrAddr;



implementation sh_eth_set_multicast_list($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i27: i32;
  var $i28: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $i55: i1;
  var $i56: i8;
  var $i57: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i65: i1;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $i77: i1;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i78: i32;
  var $i48: i32;
  var $i80: i32;
  var $i81: i32;
  var $i79: i32;
  var $i29: i32;
  var $i82: i64;
  var $p83: ref;
  var vslice_dummy_var_31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $p1 := netdev_priv($p0);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(96, 1));
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} $p4 := spinlock_check($p3);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $i5 := _raw_spin_lock_irqsave($p4);
    call {:si_unique_call 66} {:cexpr "flags"} boogie_si_record_i64($i5);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} $i6 := sh_eth_read($p0, 28);
    call {:si_unique_call 68} {:cexpr "tmp___1"} boogie_si_record_i64($i6);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, $sub.i32(0, 8194));
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i8, 8192);
    call {:si_unique_call 69} {:cexpr "ecmr_bits"} boogie_si_record_i32($i9);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(520, 1));
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 4096);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(520, 1));
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 512);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i20, $i21 := $i9, $i14;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(520, 1));
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 256);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i25 == 1);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p32, $mul.ref(104, 1));
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i36 == 1);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i20, $sub.i32(0, 8194));
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i81 := $or.i32($i80, 8192);
    call {:si_unique_call 77} {:cexpr "ecmr_bits"} boogie_si_record_i32($i81);
    assume {:verifier.code 0} true;
    $i79 := $i81;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i29 := $i79;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i82 := $zext.i32.i64($i29);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} sh_eth_write($p0, $i82, 28);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(96, 1));
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} spin_unlock_irqrestore($p83, $i5);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i36 == 1;
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(688, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(688, 1)), $mul.ref(0, 1));
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i43, $i46);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i48 := $i20;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i79 := $i48;
    goto $bb33;

  $bb12:
    assume $i47 == 1;
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p49, $i50, $i51 := $p40, $i21, $i20;
    goto $bb15;

  $bb15:
    call $i52, $p53, $p54, $i55, $i56, $i57, $p61, $p62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $p58, $i59, $i60, $p72, $p73, $p74, $p75, $i76, $i77, $p49, $i50, $i51, $i78 := sh_eth_set_multicast_list_loop_$bb15($p0, $i46, $i52, $p53, $p54, $i55, $i56, $i57, $p61, $p62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $p58, $i59, $i60, $p72, $p73, $p74, $p75, $i76, $i77, $p49, $i50, $i51, $i78);
    goto $bb15_last;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i50, 0);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p49, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $i63 := sh_eth_tsu_add_entry($p0, $p62);
    call {:si_unique_call 81} {:cexpr "tmp___3"} boogie_si_record_i32($i63);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i63, 0);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    $i69, $i70 := $i51, $i50;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p58, $i59, $i60 := $p49, $i69, $i70;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p58, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p75);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i76, $i46);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i78 := $i59;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $i48 := $i78;
    goto $bb14;

  $bb30:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    $p49, $i50, $i51 := $p73, $i60, $i59;
    goto $bb30_dummy;

  $bb24:
    assume $i64 == 1;
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i50, 0);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i67, $i68 := $i51, $i50;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i69, $i70 := $i67, $i68;
    goto $bb29;

  $bb26:
    assume $i65 == 1;
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} sh_eth_tsu_purge_mcast($p0);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i51, $sub.i32(0, 8193));
    call {:si_unique_call 83} {:cexpr "ecmr_bits"} boogie_si_record_i32($i66);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i67, $i68 := $i66, 1;
    goto $bb28;

  $bb17:
    assume $i52 == 1;
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p49, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} $i55 := is_multicast_ether_addr($p54);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i56 := $zext.i1.i8($i55);
    call {:si_unique_call 79} {:cexpr "tmp___2"} boogie_si_record_i8($i56);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i8.i1($i56);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb19:
    assume $i57 == 1;
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p58, $i59, $i60 := $p49, $i51, $i50;
    goto $bb21;

  $bb7:
    assume $i25 == 1;
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} vslice_dummy_var_31 := sh_eth_tsu_purge_all($p0);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i20, $sub.i32(0, 8194));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i27, 1);
    call {:si_unique_call 74} {:cexpr "ecmr_bits"} boogie_si_record_i32($i28);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb9;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} sh_eth_tsu_purge_mcast($p0);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i9, $sub.i32(0, 8193));
    call {:si_unique_call 72} {:cexpr "ecmr_bits"} boogie_si_record_i32($i19);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $i20, $i21 := $i19, 1;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} sh_eth_tsu_purge_mcast($p0);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb3;

  $bb30_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_305;
}



const eth_mac_addr: ref;

axiom eth_mac_addr == $sub.ref(0, 144462);

procedure eth_mac_addr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation eth_mac_addr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 1} true;
    call {:si_unique_call 84} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 85} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const eth_validate_addr: ref;

axiom eth_validate_addr == $sub.ref(0, 145494);

procedure eth_validate_addr($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation eth_validate_addr($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 1} true;
    call {:si_unique_call 86} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 87} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const sh_eth_do_ioctl: ref;

axiom sh_eth_do_ioctl == $sub.ref(0, 146526);

procedure sh_eth_do_ioctl($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation sh_eth_do_ioctl($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} {:cexpr "sh_eth_do_ioctl:arg:cmd"} boogie_si_record_i32($i2);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $p3 := netdev_priv($p0);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(392, 1));
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $i7 := netif_running($p0);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 91} {:cexpr "tmp___0"} boogie_si_record_i8($i8);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p6);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} $i15 := phy_mii_ioctl($p6, $p1, $i2);
    call {:si_unique_call 93} {:cexpr "tmp___2"} boogie_si_record_i32($i15);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $i12 := $i15;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 19);
    goto $bb6;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;
}



const eth_change_mtu: ref;

axiom eth_change_mtu == $sub.ref(0, 147558);

procedure eth_change_mtu($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation eth_change_mtu($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 94} {:cexpr "eth_change_mtu:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 1} true;
    call {:si_unique_call 95} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 96} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const sh_eth_tx_timeout: ref;

axiom sh_eth_tx_timeout == $sub.ref(0, 148590);

procedure sh_eth_tx_timeout($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.2, $M.34, $M.35, $M.5, $M.4, $CurrAddr;



implementation sh_eth_tx_timeout($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $i8: i32;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $i19: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i49: i32;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} $p1 := netdev_priv($p0);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} netif_stop_queue($p0);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(408, 1));
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 8);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(40, 1));
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 1);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(40, 1));
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p15, $i13);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(40, 1));
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i18 := $ult.i32(0, $i17);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(44, 1));
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $i48 := $ult.i32(0, $i47);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} vslice_dummy_var_33 := sh_eth_dev_init($p0, 1);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    return;

  $bb15:
    assume $i48 == 1;
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i49 := 0;
    goto $bb18;

  $bb18:
    call $p50, $p51, $i52, $p53, $p54, $i55, $i56, $p57, $p58, $i59, $p60, $p61, $p62, $p63, $p64, $i65, $p66, $i67, $i68, $i69, $i49 := sh_eth_tx_timeout_loop_$bb18($p2, $p46, $p50, $p51, $i52, $p53, $p54, $i55, $i56, $p57, $p58, $i59, $p60, $p61, $p62, $p63, $p64, $i65, $p66, $i67, $i68, $i69, $i49);
    goto $bb18_last;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(88, 1));
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i49);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p51, $mul.ref($i52, 8));
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(88, 1));
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i49);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p64, $mul.ref($i65, 8));
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p66, $0.ref);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i49, 1);
    call {:si_unique_call 105} {:cexpr "i"} boogie_si_record_i32($i67);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p46);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i69 := $ult.i32($i67, $i68);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i69 == 1);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb23:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i49 := $i67;
    goto $bb23_dummy;

  $bb20:
    assume $i56 == 1;
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(88, 1));
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i49);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p58, $mul.ref($i59, 8));
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} ldv_skb_free($p62);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb7;

  $bb7:
    call $p20, $p21, $i22, $p24, $p25, $p26, $p27, $i28, $p29, $p30, $i31, $i32, $p33, $p34, $i35, $p36, $p37, $p38, $p39, $p40, $i41, $p42, $i43, $i44, $i45, $i19 := sh_eth_tx_timeout_loop_$bb7($p2, $p16, $p20, $p21, $i22, $p24, $p25, $p26, $p27, $i28, $p29, $p30, $i31, $i32, $p33, $p34, $i35, $p36, $p37, $p38, $p39, $p40, $i41, $p42, $i43, $i44, $i45, $i19);
    goto $bb7_last;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(64, 1));
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i19);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p21, $mul.ref($i22, 16)), $mul.ref(0, 1));
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 0);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p21, $mul.ref($i22, 16)), $mul.ref(8, 1));
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $sub.i32(0, 1159790384));
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(80, 1));
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i19);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p27, $mul.ref($i28, 8));
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(80, 1));
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i19);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p40, $mul.ref($i41, 8));
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, $0.ref);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i19, 1);
    call {:si_unique_call 103} {:cexpr "i"} boogie_si_record_i32($i43);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p16);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i45 := $ult.i32($i43, $i44);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i45 == 1);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb12:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i19 := $i43;
    goto $bb12_dummy;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(80, 1));
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i19);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p34, $mul.ref($i35, 8));
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} ldv_skb_free($p38);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $i7 := sh_eth_read($p0, 4);
    call {:si_unique_call 100} {:cexpr "tmp___0"} boogie_si_record_i64($i7);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} vslice_dummy_var_32 := netdev_err.ref.ref.i32($p0, .str.48, $i8);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb23_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_447;

  $bb12_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_403;
}



const sh_eth_get_stats: ref;

axiom sh_eth_get_stats == $sub.ref(0, 149622);

procedure sh_eth_get_stats($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation sh_eth_get_stats($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i12: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p18: ref;
  var $i19: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p25: ref;
  var $i26: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $p32: ref;
  var $i33: i1;
  var $i34: i8;
  var $i35: i1;
  var $i36: i64;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $p42: ref;
  var $i43: i64;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $p49: ref;
  var $i50: i64;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var $p7: ref;
  var vslice_dummy_var_34: i32;
  var vslice_dummy_var_35: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $p1 := netdev_priv($p0);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} $i3 := sh_eth_is_rz_fast_ether($p2);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 109} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(0, 1));
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} vslice_dummy_var_34 := pm_runtime_get_sync($p10);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $i12 := sh_eth_read($p0, 51);
    call {:si_unique_call 112} {:cexpr "tmp___1"} boogie_si_record_i64($i12);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(56, 1));
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, $i12);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(56, 1));
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p18, $i16);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} sh_eth_write($p0, 0, 51);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $i19 := sh_eth_read($p0, 52);
    call {:si_unique_call 115} {:cexpr "tmp___2"} boogie_si_record_i64($i19);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(72, 1));
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, $i19);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(72, 1));
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p25, $i23);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} sh_eth_write($p0, 0, 52);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $i26 := sh_eth_read($p0, 53);
    call {:si_unique_call 118} {:cexpr "tmp___3"} boogie_si_record_i64($i26);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(136, 1));
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, $i26);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(136, 1));
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p32, $i30);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} sh_eth_write($p0, 0, 53);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} $i33 := sh_eth_is_gether($p2);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i8($i33);
    call {:si_unique_call 121} {:cexpr "tmp___7"} boogie_si_record_i8($i34);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i34);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i35 == 1);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $i50 := sh_eth_read($p0, 54);
    call {:si_unique_call 129} {:cexpr "tmp___6"} boogie_si_record_i64($i50);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(136, 1));
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.0, $p52);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i54 := $add.i64($i53, $i50);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(136, 1));
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p56, $i54);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} sh_eth_write($p0, 0, 54);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(0, 1));
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} vslice_dummy_var_35 := pm_runtime_put_sync($p59);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $p7 := $p61;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb5:
    assume $i35 == 1;
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} $i36 := sh_eth_read($p0, 59);
    call {:si_unique_call 123} {:cexpr "tmp___4"} boogie_si_record_i64($i36);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(136, 1));
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p38);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i39, $i36);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(136, 1));
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p42, $i40);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} sh_eth_write($p0, 0, 59);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $i43 := sh_eth_read($p0, 60);
    call {:si_unique_call 126} {:cexpr "tmp___5"} boogie_si_record_i64($i43);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(136, 1));
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.0, $p45);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i47 := $add.i64($i46, $i43);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(136, 1));
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p49, $i47);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} sh_eth_write($p0, 0, 60);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1));
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const sh_eth_vlan_rx_add_vid: ref;

axiom sh_eth_vlan_rx_add_vid == $sub.ref(0, 150654);

procedure sh_eth_vlan_rx_add_vid($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation sh_eth_vlan_rx_add_vid($p0: ref, $i1: i16, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i64;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} {:cexpr "sh_eth_vlan_rx_add_vid:arg:proto"} boogie_si_record_i16($i1);
    call {:si_unique_call 133} {:cexpr "sh_eth_vlan_rx_add_vid:arg:vid"} boogie_si_record_i16($i2);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} $p3 := netdev_priv($p0);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $i5 := sh_eth_get_vtag_index($p4);
    call {:si_unique_call 136} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(104, 1));
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 138} {:cexpr "tmp___1"} boogie_si_record_i64($i15);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i2);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(424, 1));
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 1);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(424, 1));
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i22);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(424, 1));
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i26 := $sgt.i32($i25, 1);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i2);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 4095);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i28, $sub.i32(0, 2147483648));
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i29);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} sh_eth_tsu_write($p4, $i30, $i5);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} sh_eth_tsu_write($p4, 0, $i5);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 1);
    goto $bb3;
}



const sh_eth_vlan_rx_kill_vid: ref;

axiom sh_eth_vlan_rx_kill_vid == $sub.ref(0, 151686);

procedure sh_eth_vlan_rx_kill_vid($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation sh_eth_vlan_rx_kill_vid($p0: ref, $i1: i16, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} {:cexpr "sh_eth_vlan_rx_kill_vid:arg:proto"} boogie_si_record_i16($i1);
    call {:si_unique_call 142} {:cexpr "sh_eth_vlan_rx_kill_vid:arg:vid"} boogie_si_record_i16($i2);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} $p3 := netdev_priv($p0);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} $i5 := sh_eth_get_vtag_index($p4);
    call {:si_unique_call 145} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(104, 1));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 147} {:cexpr "tmp___1"} boogie_si_record_i64($i15);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i2);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(424, 1));
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32($i21, 1);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(424, 1));
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i22);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} sh_eth_tsu_write($p4, 0, $i5);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 1);
    goto $bb3;
}



const netdev_priv: ref;

axiom netdev_priv == $sub.ref(0, 152718);

procedure netdev_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(3264, 1));
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const sh_eth_get_vtag_index: ref;

axiom sh_eth_get_vtag_index == $sub.ref(0, 153750);

procedure sh_eth_get_vtag_index($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sh_eth_get_vtag_index($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(420, 1));
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i4 := 86;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i4 := 85;
    goto $bb3;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 154782);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 150} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const sh_eth_tsu_write: ref;

axiom sh_eth_tsu_write == $sub.ref(0, 155814);

procedure sh_eth_tsu_write($p0: ref, $i1: i64, $i2: i32);
  free requires assertsPassed;



implementation sh_eth_tsu_write($p0: ref, $i1: i64, $i2: i32)
{
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i16;
  var $i11: i64;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} {:cexpr "sh_eth_tsu_write:arg:data"} boogie_si_record_i64($i1);
    call {:si_unique_call 152} {:cexpr "sh_eth_tsu_write:arg:enum_index"} boogie_si_record_i32($i2);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i1);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(32, 1));
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(16, 1));
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i2);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p7, $mul.ref($i8, 2));
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i64($i10);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p5, $mul.ref($i11, 1));
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} iowrite32($i3, $p12);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    return;
}



const iowrite32: ref;

axiom iowrite32 == $sub.ref(0, 156846);

procedure iowrite32($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation iowrite32($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} {:cexpr "iowrite32:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    return;
}



const sh_eth_is_rz_fast_ether: ref;

axiom sh_eth_is_rz_fast_ether == $sub.ref(0, 157878);

procedure sh_eth_is_rz_fast_ether($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation sh_eth_is_rz_fast_ether($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(16, 1));
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $p2i.ref.i64(sh_eth_offset_fast_rz));
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pm_runtime_get_sync: ref;

axiom pm_runtime_get_sync == $sub.ref(0, 158910);

procedure pm_runtime_get_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pm_runtime_get_sync($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} $i1 := __pm_runtime_resume($p0, 4);
    call {:si_unique_call 156} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const sh_eth_read: ref;

axiom sh_eth_read == $sub.ref(0, 159942);

procedure sh_eth_read($p0: ref, $i1: i32) returns ($r: i64);
  free requires assertsPassed;



implementation sh_eth_read($p0: ref, $i1: i32) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i16;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} {:cexpr "sh_eth_read:arg:enum_index"} boogie_si_record_i32($i1);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} $p2 := netdev_priv($p0);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(24, 1));
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(16, 1));
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i1);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p7, $mul.ref($i8, 2));
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i64($i10);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p5, $mul.ref($i11, 1));
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $i13 := ioread32($p12);
    call {:si_unique_call 160} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i13);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;
}



const sh_eth_write: ref;

axiom sh_eth_write == $sub.ref(0, 160974);

procedure sh_eth_write($p0: ref, $i1: i64, $i2: i32);
  free requires assertsPassed;



implementation sh_eth_write($p0: ref, $i1: i64, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i16;
  var $i13: i64;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} {:cexpr "sh_eth_write:arg:data"} boogie_si_record_i64($i1);
    call {:si_unique_call 162} {:cexpr "sh_eth_write:arg:enum_index"} boogie_si_record_i32($i2);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $p3 := netdev_priv($p0);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i1);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(24, 1));
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(16, 1));
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i2);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p9, $mul.ref($i10, 2));
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i64($i12);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p7, $mul.ref($i13, 1));
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} iowrite32($i5, $p14);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    return;
}



const sh_eth_is_gether: ref;

axiom sh_eth_is_gether == $sub.ref(0, 162006);

procedure sh_eth_is_gether($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation sh_eth_is_gether($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(16, 1));
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $p2i.ref.i64(sh_eth_offset_gigabit));
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pm_runtime_put_sync: ref;

axiom pm_runtime_put_sync == $sub.ref(0, 163038);

procedure pm_runtime_put_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pm_runtime_put_sync($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $i1 := __pm_runtime_idle($p0, 4);
    call {:si_unique_call 166} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __pm_runtime_idle: ref;

axiom __pm_runtime_idle == $sub.ref(0, 164070);

procedure __pm_runtime_idle($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __pm_runtime_idle($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 167} {:cexpr "__pm_runtime_idle:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 1} true;
    call {:si_unique_call 168} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 169} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ioread32: ref;

axiom ioread32 == $sub.ref(0, 165102);

procedure ioread32($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ioread32($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 1} true;
    call {:si_unique_call 170} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 171} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __pm_runtime_resume: ref;

axiom __pm_runtime_resume == $sub.ref(0, 166134);

procedure __pm_runtime_resume($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __pm_runtime_resume($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 172} {:cexpr "__pm_runtime_resume:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 1} true;
    call {:si_unique_call 173} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 174} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const netif_stop_queue: ref;

axiom netif_stop_queue == $sub.ref(0, 167166);

procedure netif_stop_queue($p0: ref);
  free requires assertsPassed;



implementation netif_stop_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} netif_tx_stop_queue($p1);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    return;
}



const netdev_err: ref;

axiom netdev_err == $sub.ref(0, 168198);

procedure netdev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 1} true;
    call {:si_unique_call 177} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 178} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure netdev_err.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_err.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 1} true;
    call {:si_unique_call 179} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 180} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure netdev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 1} true;
    call {:si_unique_call 181} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 182} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure netdev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 1} true;
    call {:si_unique_call 183} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 184} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_skb_free: ref;

axiom ldv_skb_free == $sub.ref(0, 169230);

procedure ldv_skb_free($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.2;



implementation ldv_skb_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $p1 := $M.1;
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} ldv_set_remove($p1, $p2);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    return;
}



const sh_eth_dev_init: ref;

axiom sh_eth_dev_init == $sub.ref(0, 170262);

procedure sh_eth_dev_init($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.34, $M.35, $M.5, $M.4, $M.3, $M.2, $CurrAddr;



implementation sh_eth_dev_init($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $i57: i64;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i64;
  var $i65: i32;
  var $i66: i32;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i64;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i8;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i8;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i8;
  var $i112: i32;
  var $i113: i1;
  var $i114: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 186} {:cexpr "sh_eth_dev_init:arg:start"} boogie_si_record_i1($i1);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} $p3 := netdev_priv($p0);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $i5 := sh_eth_reset($p0);
    call {:si_unique_call 189} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(105, 1));
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} sh_eth_ring_format($p0);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref(104, 1));
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} sh_eth_write($p0, 0, 5);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref(104, 1));
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} sh_eth_write($p0, 0, 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 112)), $mul.ref(56, 1));
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} sh_eth_write($p0, $i35, 17);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} sh_eth_write($p0, 0, 16);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} sh_eth_write($p0, 1, 18);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} sh_eth_write($p0, 656, 14);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p38, $mul.ref(104, 1));
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.0, $p45);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} sh_eth_write($p0, $i46, 23);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p49, $mul.ref(105, 1));
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 0);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i55, 22);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i57 := $zext.i32.i64($i56);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} sh_eth_write($p0, $i57, 35);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} $i58 := sh_eth_read($p0, 4);
    call {:si_unique_call 205} {:cexpr "tmp___0"} boogie_si_record_i64($i58);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} sh_eth_write($p0, $i58, 4);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i8.i1($i2);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} $i64 := sh_eth_read($p0, 28);
    call {:si_unique_call 209} {:cexpr "tmp___1"} boogie_si_record_i64($i64);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i64.i32($i64);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i65, 2);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(416, 1));
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i70 := (if $i69 == 1 then 2 else 0);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i71 := $or.i32($i66, $i70);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i72 := $or.i32($i71, 524384);
    call {:si_unique_call 210} {:cexpr "val"} boogie_si_record_i32($i72);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i73 := $zext.i32.i64($i72);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} sh_eth_write($p0, $i73, 28);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 112)), $mul.ref(40, 1));
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i87 := $load.i64($M.0, $p86);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} sh_eth_write($p0, $i87, 29);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i8.i1($i2);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} update_mac_address($p0);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p95, $mul.ref(104, 1));
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.0, $p96);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i97);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 0);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($p102, $mul.ref(104, 1));
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i104 := $load.i8($M.0, $p103);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i105 := $zext.i8.i32($i104);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p108);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($p109, $mul.ref(104, 1));
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.0, $p110);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i112, 0);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i8.i1($i2);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb38:
    assume $i114 == 1;
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} sh_eth_write($p0, 1, 3);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} netif_start_queue($p0);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb35:
    assume $i113 == 1;
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} sh_eth_write($p0, 0, 43);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i106 == 1;
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} sh_eth_write($p0, 1, 38);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume $i99 == 1;
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} sh_eth_write($p0, 1, 37);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i88 == 1;
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p90, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i92 := $load.i64($M.0, $p91);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} sh_eth_write($p0, $i92, 30);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i79 == 1;
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    call {:si_unique_call 212} devirtbounce($p83, $p0);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i59 == 1;
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i63 := $load.i64($M.0, $p62);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} sh_eth_write($p0, $i63, 5);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i53 == 1;
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} sh_eth_write($p0, 0, 25);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i42 == 1;
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} sh_eth_write($p0, 2048, 48);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} sh_eth_write($p0, 64, 1);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 112)), $mul.ref(72, 1));
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} sh_eth_write($p0, $i24, 24);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} sh_eth_write($p0, 1, 22);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sh_eth_reset: ref;

axiom sh_eth_reset == $sub.ref(0, 171294);

procedure sh_eth_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sh_eth_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i64;
  var $i10: i64;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i1;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i28: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $p1 := netdev_priv($p0);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} $i3 := sh_eth_is_gether($p2);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 223} {:cexpr "tmp___4"} boogie_si_record_i8($i4);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $i6 := sh_eth_is_rz_fast_ether($p2);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 225} {:cexpr "tmp___5"} boogie_si_record_i8($i7);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} $i29 := sh_eth_read($p0, 1);
    call {:si_unique_call 233} {:cexpr "tmp___1"} boogie_si_record_i64($i29);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i30 := $or.i64($i29, 1);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} sh_eth_write($p0, $i30, 1);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb17, $bb18;

  $bb18:
    assume !(1 == 1);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} __const_udelay(4295000);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} __const_udelay(4295000);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} $i31 := sh_eth_read($p0, 1);
    call {:si_unique_call 247} {:cexpr "tmp___3"} boogie_si_record_i64($i31);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, $sub.i64(0, 2));
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} sh_eth_write($p0, $i32, 1);
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i13 := $i28;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb17:
    assume 1 == 1;
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} __const_udelay(12885000);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} sh_eth_write($p0, 3, 0);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $i9 := sh_eth_read($p0, 1);
    call {:si_unique_call 228} {:cexpr "tmp___0"} boogie_si_record_i64($i9);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i10 := $or.i64($i9, 3);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} sh_eth_write($p0, $i10, 1);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $i11 := sh_eth_check_reset($p0);
    call {:si_unique_call 231} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} sh_eth_write($p0, 0, 6);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} sh_eth_write($p0, 0, 7);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} sh_eth_write($p0, 0, 8);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} sh_eth_write($p0, 0, 9);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} sh_eth_write($p0, 0, 10);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} sh_eth_write($p0, 0, 11);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} sh_eth_write($p0, 0, 12);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} sh_eth_write($p0, 0, 13);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref(105, 1));
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref(105, 1));
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i28 := $i11;
    goto $bb16;

  $bb13:
    assume $i27 == 1;
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} sh_eth_select_mii($p0);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} sh_eth_write($p0, 0, 63);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    goto $bb8;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sh_eth_ring_format: ref;

axiom sh_eth_ring_format == $sub.ref(0, 172326);

procedure sh_eth_ring_format($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.2, $CurrAddr;



implementation sh_eth_ring_format($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $i37: i32;
  var $p38: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i64;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $i58: i64;
  var $i59: i32;
  var $p60: ref;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i16;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i16;
  var $p70: ref;
  var $i71: i1;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $i75: i8;
  var $i76: i1;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $i80: i8;
  var $i81: i1;
  var $p82: ref;
  var $i83: i64;
  var $i84: i32;
  var $i85: i32;
  var $i86: i1;
  var $p22: ref;
  var $i23: i32;
  var $i87: i32;
  var $p88: ref;
  var $i20: i32;
  var $p21: ref;
  var $i39: i32;
  var $p40: ref;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $p92: ref;
  var $i93: i32;
  var $p94: ref;
  var $i95: i32;
  var $i96: i32;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $p102: ref;
  var $i103: i32;
  var $i104: i1;
  var $p107: ref;
  var $p108: ref;
  var $i109: i64;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i64;
  var $p114: ref;
  var $i115: i32;
  var $p116: ref;
  var $p117: ref;
  var $i118: i1;
  var $p119: ref;
  var $i120: i64;
  var $i121: i1;
  var $i122: i8;
  var $i123: i1;
  var $p124: ref;
  var $i125: i64;
  var $i126: i1;
  var $i127: i8;
  var $i128: i1;
  var $p129: ref;
  var $i130: i64;
  var $i131: i32;
  var $i132: i32;
  var $i133: i1;
  var $i106: i32;
  var $p134: ref;
  var $p105: ref;
  var $i135: i32;
  var $p136: ref;
  var $i137: i32;
  var $i138: i32;
  var $p139: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var vslice_dummy_var_36: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $p1 := netdev_priv($p0);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(40, 1));
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i5 := $mul.i32($i4, 16);
    call {:si_unique_call 253} {:cexpr "rx_ringsize"} boogie_si_record_i32($i5);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(44, 1));
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i8 := $mul.i32($i7, 16);
    call {:si_unique_call 254} {:cexpr "tx_ringsize"} boogie_si_record_i32($i8);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(168, 1));
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(176, 1));
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 0);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(172, 1));
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 0);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(180, 1));
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(64, 1));
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i5);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    call {:si_unique_call 255} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p15, 0, $i16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_1;
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(40, 1));
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i19 := $ult.i32(0, $i18);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i20, $p21 := 0, $0.ref;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i39, $p40 := $i20, $p21;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(40, 1));
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i91 := $sub.i32($i39, $i90);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(172, 1));
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p92, $i91);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} $i93 := cpu_to_edmac($p2, 1073741824);
    call {:si_unique_call 258} {:cexpr "tmp___3"} boogie_si_record_i32($i93);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p40, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.0, $p94);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i96 := $or.i32($i95, $i93);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p40, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p97, $i96);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(72, 1));
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i101 := $sext.i32.i64($i8);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.0;
    call {:si_unique_call 259} cmdloc_dummy_var_3 := $memset.i8(cmdloc_dummy_var_2, $p100, 0, $i101, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_3;
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(44, 1));
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.0, $p102);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i104 := $ult.i32(0, $i103);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $p105 := $0.ref;
    assume {:branchcond $i104} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i104 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $i135 := cpu_to_edmac($p2, 1073741824);
    call {:si_unique_call 283} {:cexpr "tmp___6"} boogie_si_record_i32($i135);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p105, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.0, $p136);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i138 := $or.i32($i137, $i135);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p105, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p139, $i138);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    return;

  $bb22:
    assume $i104 == 1;
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i106 := 0;
    goto $bb25;

  $bb25:
    call $p107, $p108, $i109, $p110, $p111, $p112, $i113, $p114, $i115, $p116, $p117, $i118, $p119, $i120, $i121, $i122, $i123, $p124, $i125, $i126, $i127, $i128, $p129, $i130, $i131, $i132, $i133, $i106, $p134 := sh_eth_ring_format_loop_$bb25($p0, $p2, $p102, $p107, $p108, $i109, $p110, $p111, $p112, $i113, $p114, $i115, $p116, $p117, $i118, $p119, $i120, $i121, $i122, $i123, $p124, $i125, $i126, $i127, $i128, $p129, $i130, $i131, $i132, $i133, $i106, $p134);
    goto $bb25_last;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(88, 1));
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i109 := $sext.i32.i64($i106);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($p108, $mul.ref($i109, 8));
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p110, $0.ref);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(72, 1));
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i113 := $sext.i32.i64($i106);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($p112, $mul.ref($i113, 16));
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $i115 := cpu_to_edmac($p2, 805306368);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p112, $mul.ref($i113, 16)), $mul.ref(0, 1));
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p116, $i115);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p112, $mul.ref($i113, 16)), $mul.ref(6, 1));
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p117, 0);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i106, 0);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i131 := $add.i32($i106, 1);
    call {:si_unique_call 281} {:cexpr "i"} boogie_si_record_i32($i131);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.0, $p102);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i133 := $ult.i32($i131, $i132);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p134 := $p114;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p105 := $p134;
    goto $bb24;

  $bb36:
    assume $i133 == 1;
    assume {:verifier.code 0} true;
    $i106 := $i131;
    goto $bb36_dummy;

  $bb27:
    assume $i118 == 1;
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(56, 1));
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i120 := $load.i64($M.0, $p119);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} sh_eth_write($p0, $i120, 6);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $i121 := sh_eth_is_gether($p2);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i122 := $zext.i1.i8($i121);
    call {:si_unique_call 276} {:cexpr "tmp___4"} boogie_si_record_i8($i122);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i8.i1($i122);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i123 == 1);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $i126 := sh_eth_is_rz_fast_ether($p2);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i127 := $zext.i1.i8($i126);
    call {:si_unique_call 279} {:cexpr "tmp___5"} boogie_si_record_i8($i127);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i128 := $trunc.i8.i1($i127);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb32:
    assume $i128 == 1;
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(56, 1));
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i130 := $load.i64($M.0, $p129);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} sh_eth_write($p0, $i130, 7);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume $i123 == 1;
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(56, 1));
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i125 := $load.i64($M.0, $p124);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} sh_eth_write($p0, $i125, 7);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p22, $i23 := $0.ref, 0;
    goto $bb4;

  $bb4:
    call $p24, $p25, $i26, $p27, $p28, $i29, $p30, $p31, $p32, $i33, $p34, $i35, $i36, $i37, $p38, $p41, $p42, $p43, $p44, $i45, $i46, $p48, $p49, $i50, $p51, $p52, $p53, $i54, $i55, $i56, $p57, $i58, $i59, $p60, $i61, $p62, $p63, $i64, $i65, $i66, $i67, $i68, $i69, $p70, $i71, $p72, $i73, $i74, $i75, $i76, $p77, $i78, $i79, $i80, $i81, $p82, $i83, $i84, $i85, $i86, $p22, $i23, $i87, $p88, vslice_dummy_var_36 := sh_eth_ring_format_loop_$bb4($p0, $p2, $p17, $p24, $p25, $i26, $p27, $p28, $i29, $p30, $p31, $p32, $i33, $p34, $i35, $i36, $i37, $p38, $p41, $p42, $p43, $p44, $i45, $i46, $p48, $p49, $i50, $p51, $p52, $p53, $i54, $i55, $i56, $p57, $i58, $i59, $p60, $i61, $p62, $p63, $i64, $i65, $i66, $i67, $i68, $i69, $p70, $i71, $p72, $i73, $i74, $i75, $i76, $p77, $i78, $i79, $i80, $i81, $p82, $i83, $i84, $i85, $i86, $p22, $i23, $i87, $p88, vslice_dummy_var_36);
    goto $bb4_last;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(80, 1));
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i23);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p25, $mul.ref($i26, 8));
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $0.ref);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(184, 1));
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $p30 := ldv_netdev_alloc_skb_12($p0, $i29);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(80, 1));
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i23);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p32, $mul.ref($i33, 8));
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $p30);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p30);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i37, $p38 := $i23, $p22;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1296, 1));
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p30, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(184, 1));
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i46 := $zext.i32.i64($i45);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} vslice_dummy_var_36 := dma_map_single_attrs($p41, $p43, $i46, 2, $0.ref);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} sh_eth_set_receive_align($p30);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(64, 1));
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i23);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p49, $mul.ref($i50, 16));
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p30, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, 3);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i56 := $and.i64($i55, $sub.i64(0, 4));
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p57 := $i2p.i64.ref($i56);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $i58 := virt_to_phys($p57);
    call {:si_unique_call 263} {:cexpr "tmp___0"} boogie_si_record_i64($i58);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i64.i32($i58);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p49, $mul.ref($i50, 16)), $mul.ref(8, 1));
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $i61 := cpu_to_edmac($p2, $sub.i32(0, 1342177280));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p49, $mul.ref($i50, 16)), $mul.ref(0, 1));
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, $i61);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(184, 1));
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i16($i64);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i66 := $zext.i16.i32($i65);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i66, 15);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i67, 65520);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i16($i68);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p49, $mul.ref($i50, 16)), $mul.ref(6, 1));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p70, $i69);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i23, 0);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i84 := $add.i32($i23, 1);
    call {:si_unique_call 272} {:cexpr "i"} boogie_si_record_i32($i84);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p17);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $i86 := $ult.i32($i84, $i85);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $i87, $p88 := $i84, $p51;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i20, $p21 := $i87, $p88;
    goto $bb3;

  $bb19:
    assume $i86 == 1;
    assume {:verifier.code 0} true;
    $p22, $i23 := $p51, $i84;
    goto $bb19_dummy;

  $bb10:
    assume $i71 == 1;
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(48, 1));
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i73 := $load.i64($M.0, $p72);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} sh_eth_write($p0, $i73, 10);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} $i74 := sh_eth_is_gether($p2);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i75 := $zext.i1.i8($i74);
    call {:si_unique_call 267} {:cexpr "tmp___1"} boogie_si_record_i8($i75);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i8.i1($i75);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i76 == 1);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} $i79 := sh_eth_is_rz_fast_ether($p2);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i80 := $zext.i1.i8($i79);
    call {:si_unique_call 270} {:cexpr "tmp___2"} boogie_si_record_i8($i80);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i8.i1($i80);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i81 == 1;
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(48, 1));
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.0, $p82);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} sh_eth_write($p0, $i83, 11);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i76 == 1;
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(48, 1));
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i78 := $load.i64($M.0, $p77);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} sh_eth_write($p0, $i78, 11);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb6:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i39, $p40 := $i37, $p38;
    goto $bb8;

  $bb36_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1123;

  $bb19_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1015;
}



const update_mac_address: ref;

axiom update_mac_address == $sub.ref(0, 173358);

procedure update_mac_address($p0: ref);
  free requires assertsPassed;



implementation update_mac_address($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i32;
  var $i39: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i4, 24);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(1, 1));
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i11 := $shl.i32($i10, 16);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i5, $i11);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(2, 1));
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i18 := $shl.i32($i17, 8);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i12, $i18);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref(3, 1));
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i19, $i24);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} sh_eth_write($p0, $i26, 49);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p28, $mul.ref(4, 1));
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i32 := $shl.i32($i31, 8);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p34, $mul.ref(5, 1));
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i32, $i37);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i38);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} sh_eth_write($p0, $i39, 50);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    return;
}



const netif_start_queue: ref;

axiom netif_start_queue == $sub.ref(0, 174390);

procedure netif_start_queue($p0: ref);
  free requires assertsPassed;



implementation netif_start_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} netif_tx_start_queue($p1);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    return;
}



const netdev_get_tx_queue: ref;

axiom netdev_get_tx_queue == $sub.ref(0, 175422);

procedure netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} {:cexpr "netdev_get_tx_queue:arg:index"} boogie_si_record_i32($i1);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(920, 1));
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 496));
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const netif_tx_start_queue: ref;

axiom netif_tx_start_queue == $sub.ref(0, 176454);

procedure netif_tx_start_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_start_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} clear_bit(0, $p1);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 177486);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 291} devirtbounce.1(0, $p1, $i0, $p1);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 178518);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const ldv_netdev_alloc_skb_12: ref;

axiom ldv_netdev_alloc_skb_12 == $sub.ref(0, 179550);

procedure ldv_netdev_alloc_skb_12($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.3, $M.2, $M.0, $CurrAddr;



implementation ldv_netdev_alloc_skb_12($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} {:cexpr "ldv_netdev_alloc_skb_12:arg:length"} boogie_si_record_i32($i1);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $p2 := ldv_skb_alloc();
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const dma_map_single_attrs: ref;

axiom dma_map_single_attrs == $sub.ref(0, 180582);

procedure dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64);
  free requires assertsPassed;



implementation dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} {:cexpr "dma_map_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 295} {:cexpr "dma_map_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $p5 := get_dma_ops($p0);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i2);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} kmemcheck_mark_initialized($p1, $i6);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} $i7 := valid_dma_direction($i3);
    call {:si_unique_call 299} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 301} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} $i14 := __phys_addr($i13);
    call {:si_unique_call 304} {:cexpr "tmp___2"} boogie_si_record_i64($i14);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i64($i14, 12);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i17, 64));
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p1);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 4095);
    call {:si_unique_call 305} $i21 := devirtbounce.3($p16, $p0, $p18, $i20, $i2, $i3, $p4);
    call {:si_unique_call 306} {:cexpr "addr"} boogie_si_record_i64($i21);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p1);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} $i23 := __phys_addr($i22);
    call {:si_unique_call 308} {:cexpr "tmp___3"} boogie_si_record_i64($i23);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i24 := $lshr.i64($i23, 12);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i24, 64));
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p1);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 4095);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} debug_dma_map_page($p0, $p25, $i27, $i2, $i3, $i21, 1);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb1:
    assume $i12 == 1;
    call {:si_unique_call 302} devirtbounce.2(0, .str.1, 19, 12);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_map_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const sh_eth_set_receive_align: ref;

axiom sh_eth_set_receive_align == $sub.ref(0, 181614);

procedure sh_eth_set_receive_align($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation sh_eth_set_receive_align($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} skb_reserve($p0, 2);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    return;
}



const virt_to_phys: ref;

axiom virt_to_phys == $sub.ref(0, 182646);

procedure virt_to_phys($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation virt_to_phys($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} $i2 := __phys_addr($i1);
    call {:si_unique_call 312} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const cpu_to_edmac: ref;

axiom cpu_to_edmac == $sub.ref(0, 183678);

procedure cpu_to_edmac($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation cpu_to_edmac($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i8: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} {:cexpr "cpu_to_edmac:arg:x"} boogie_si_record_i32($i1);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(188, 1));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i3, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i7 := $i1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} $i8 := __fswab32($i1);
    call {:si_unique_call 315} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i7 := $i8;
    goto $bb9;

  $bb2:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i3, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb7:
    assume $i6 == 1;
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i7 := $i1;
    goto $bb9;
}



const __fswab32: ref;

axiom __fswab32 == $sub.ref(0, 184710);

procedure __fswab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __fswab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} {:cexpr "__fswab32:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $i1 := __arch_swab32($i0);
    call {:si_unique_call 318} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __arch_swab32: ref;

axiom __arch_swab32 == $sub.ref(0, 185742);

procedure __arch_swab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __arch_swab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} {:cexpr "__arch_swab32:arg:val"} boogie_si_record_i32($i0);
    call {:si_unique_call 320} $i1 := devirtbounce.4(0, $i0);
    call {:si_unique_call 321} {:cexpr "val"} boogie_si_record_i32($i1);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 186774);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 322} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 1} true;
    call {:si_unique_call 323} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 324} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const skb_reserve: ref;

axiom skb_reserve == $sub.ref(0, 187806);

procedure skb_reserve($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation skb_reserve($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} {:cexpr "skb_reserve:arg:len"} boogie_si_record_i32($i1);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 1));
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p5);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, $i1);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    return;
}



const get_dma_ops: ref;

axiom get_dma_ops == $sub.ref(0, 188838);

procedure get_dma_ops($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_dma_ops($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 327} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $p13 := $p16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, dma_ops);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const kmemcheck_mark_initialized: ref;

axiom kmemcheck_mark_initialized == $sub.ref(0, 189870);

procedure kmemcheck_mark_initialized($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation kmemcheck_mark_initialized($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} {:cexpr "kmemcheck_mark_initialized:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    return;
}



const valid_dma_direction: ref;

axiom valid_dma_direction == $sub.ref(0, 190902);

procedure valid_dma_direction($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation valid_dma_direction($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i1;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} {:cexpr "valid_dma_direction:arg:dma_direction"} boogie_si_record_i32($i0);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 1);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 2);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const debug_dma_map_page: ref;

axiom debug_dma_map_page == $sub.ref(0, 191934);

procedure debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1);
  free requires assertsPassed;



implementation debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} {:cexpr "debug_dma_map_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 331} {:cexpr "debug_dma_map_page:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 332} {:cexpr "debug_dma_map_page:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 333} {:cexpr "debug_dma_map_page:arg:arg5"} boogie_si_record_i64($i5);
    call {:si_unique_call 334} {:cexpr "debug_dma_map_page:arg:arg6"} boogie_si_record_i1($i6);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    return;
}



const ldv_skb_alloc: ref;

axiom ldv_skb_alloc == $sub.ref(0, 192966);

procedure ldv_skb_alloc() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.3, $M.2, $M.0, $CurrAddr;



implementation ldv_skb_alloc() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $p5: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $p0 := ldv_zalloc(232);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i3 := $ne.ref($p2, $0.ref);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $p5 := $M.1;
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} ldv_set_add($p5, $p2);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p4 := $p0;
    goto $bb3;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 193998);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 337} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 1} true;
    call {:si_unique_call 338} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 339} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 340} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $p4 := calloc(1, $i0);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 1} true;
    call {:si_unique_call 342} __VERIFIER_assume($i7);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const ldv_set_add: ref;

axiom ldv_set_add == $sub.ref(0, 195030);

procedure ldv_set_add($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.2;



implementation ldv_set_add($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i2 := $M.2;
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32(0, $i2);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $M.2;
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 15);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i15 == 1;
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i16 := $M.2;
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i17, 8));
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p18, $p1);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i19 := $M.2;
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, 1);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $M.2 := $i20;
    call {:si_unique_call 344} {:cexpr "last_index"} boogie_si_record_i32($i20);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $i4, $i5, $p6, $p7, $i8, $i9, $i10, $i11, $i12, $i13 := ldv_set_add_loop_$bb4($p1, $i4, $i5, $p6, $p7, $i8, $i9, $i10, $i11, $i12, $i13);
    goto $bb4_last;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i5, 8));
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.3, $p6);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i8, $i9);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i4, 1);
    call {:si_unique_call 343} {:cexpr "i"} boogie_si_record_i32($i11);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $i12 := $M.2;
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i11, $i12);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb6;

  $bb6:
    assume !($i13 == 1);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i11;
    goto $bb12_dummy;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1381;
}



const sh_eth_check_reset: ref;

axiom sh_eth_check_reset == $sub.ref(0, 196062);

procedure sh_eth_check_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sh_eth_check_reset($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $i48: i64;
  var $i49: i64;
  var $i50: i1;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $i54: i64;
  var $i55: i64;
  var $i56: i1;
  var $i57: i64;
  var $i58: i64;
  var $i59: i1;
  var $i60: i64;
  var $i61: i64;
  var $i62: i1;
  var $i63: i64;
  var $i64: i64;
  var $i65: i1;
  var $i66: i64;
  var $i67: i64;
  var $i68: i1;
  var $i69: i64;
  var $i70: i64;
  var $i71: i1;
  var $i72: i64;
  var $i73: i64;
  var $i74: i1;
  var $i75: i64;
  var $i76: i64;
  var $i77: i1;
  var $i78: i64;
  var $i79: i64;
  var $i80: i1;
  var $i81: i64;
  var $i82: i64;
  var $i83: i1;
  var $i84: i64;
  var $i85: i64;
  var $i86: i1;
  var $i87: i64;
  var $i88: i64;
  var $i89: i1;
  var $i90: i64;
  var $i91: i64;
  var $i92: i1;
  var $i93: i64;
  var $i94: i64;
  var $i95: i1;
  var $i96: i64;
  var $i97: i64;
  var $i98: i1;
  var $i99: i64;
  var $i100: i64;
  var $i101: i1;
  var $i102: i64;
  var $i103: i64;
  var $i104: i1;
  var $i105: i64;
  var $i106: i64;
  var $i107: i1;
  var $i108: i64;
  var $i109: i64;
  var $i110: i1;
  var $i111: i64;
  var $i112: i64;
  var $i113: i1;
  var $i114: i64;
  var $i115: i64;
  var $i116: i1;
  var $i117: i64;
  var $i118: i64;
  var $i119: i1;
  var $i120: i64;
  var $i121: i64;
  var $i122: i1;
  var $i123: i64;
  var $i124: i64;
  var $i125: i1;
  var $i126: i64;
  var $i127: i64;
  var $i128: i1;
  var $i129: i64;
  var $i130: i64;
  var $i131: i1;
  var $i132: i64;
  var $i133: i64;
  var $i134: i1;
  var $i135: i64;
  var $i136: i64;
  var $i137: i1;
  var $i138: i64;
  var $i139: i64;
  var $i140: i1;
  var $i141: i64;
  var $i142: i64;
  var $i143: i1;
  var $i144: i64;
  var $i145: i64;
  var $i146: i1;
  var $i147: i64;
  var $i148: i64;
  var $i149: i1;
  var $i150: i64;
  var $i151: i64;
  var $i152: i1;
  var $i153: i64;
  var $i154: i64;
  var $i155: i1;
  var $i156: i64;
  var $i157: i64;
  var $i158: i1;
  var $i159: i64;
  var $i160: i64;
  var $i161: i1;
  var $i162: i64;
  var $i163: i64;
  var $i164: i1;
  var $i165: i64;
  var $i166: i64;
  var $i167: i1;
  var $i168: i64;
  var $i169: i64;
  var $i170: i1;
  var $i171: i64;
  var $i172: i64;
  var $i173: i1;
  var $i174: i64;
  var $i175: i64;
  var $i176: i1;
  var $i177: i64;
  var $i178: i64;
  var $i179: i1;
  var $i180: i64;
  var $i181: i64;
  var $i182: i1;
  var $i183: i64;
  var $i184: i64;
  var $i185: i1;
  var $i186: i64;
  var $i187: i64;
  var $i188: i1;
  var $i189: i64;
  var $i190: i64;
  var $i191: i1;
  var $i192: i64;
  var $i193: i64;
  var $i194: i1;
  var $i195: i64;
  var $i196: i64;
  var $i197: i1;
  var $i198: i64;
  var $i199: i64;
  var $i200: i1;
  var $i201: i64;
  var $i202: i64;
  var $i203: i1;
  var $i204: i64;
  var $i205: i64;
  var $i206: i1;
  var $i207: i64;
  var $i208: i64;
  var $i209: i1;
  var $i210: i64;
  var $i211: i64;
  var $i212: i1;
  var $i213: i64;
  var $i214: i64;
  var $i215: i1;
  var $i216: i64;
  var $i217: i64;
  var $i218: i1;
  var $i219: i64;
  var $i220: i64;
  var $i221: i1;
  var $i222: i64;
  var $i223: i64;
  var $i224: i1;
  var $i225: i64;
  var $i226: i64;
  var $i227: i1;
  var $i228: i64;
  var $i229: i64;
  var $i230: i1;
  var $i231: i64;
  var $i232: i64;
  var $i233: i1;
  var $i234: i64;
  var $i235: i64;
  var $i236: i1;
  var $i237: i64;
  var $i238: i64;
  var $i239: i1;
  var $i240: i64;
  var $i241: i64;
  var $i242: i1;
  var $i243: i64;
  var $i244: i64;
  var $i245: i1;
  var $i246: i64;
  var $i247: i64;
  var $i248: i1;
  var $i249: i64;
  var $i250: i64;
  var $i251: i1;
  var $i252: i64;
  var $i253: i64;
  var $i254: i1;
  var $i255: i64;
  var $i256: i64;
  var $i257: i1;
  var $i258: i64;
  var $i259: i64;
  var $i260: i1;
  var $i261: i64;
  var $i262: i64;
  var $i263: i1;
  var $i264: i64;
  var $i265: i64;
  var $i266: i1;
  var $i267: i64;
  var $i268: i64;
  var $i269: i1;
  var $i270: i64;
  var $i271: i64;
  var $i272: i1;
  var $i273: i64;
  var $i274: i64;
  var $i275: i1;
  var $i276: i64;
  var $i277: i64;
  var $i278: i1;
  var $i279: i64;
  var $i280: i64;
  var $i281: i1;
  var $i282: i64;
  var $i283: i64;
  var $i284: i1;
  var $i285: i64;
  var $i286: i64;
  var $i287: i1;
  var $i288: i64;
  var $i289: i64;
  var $i290: i1;
  var $i291: i64;
  var $i292: i64;
  var $i293: i1;
  var $i294: i64;
  var $i295: i64;
  var $i296: i1;
  var $i297: i64;
  var $i298: i64;
  var $i299: i1;
  var $i300: i64;
  var $i301: i64;
  var $i302: i1;
  var $i303: i64;
  var $i304: i64;
  var $i305: i1;
  var vslice_dummy_var_37: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $i1 := sh_eth_read($p0, 1);
    call {:si_unique_call 346} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i2 := $and.i64($i1, 3);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i4 := 100;
    assume {:branchcond $i3} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb8, $bb9;

  $bb9:
    assume !(1 == 1);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $i9 := sh_eth_read($p0, 1);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i10 := $and.i64($i9, 3);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i4 := 99;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb22, $bb23;

  $bb23:
    assume !(1 == 1);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} $i12 := sh_eth_read($p0, 1);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i13 := $and.i64($i12, 3);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i4 := 98;
    assume {:branchcond $i14} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb32, $bb33;

  $bb33:
    assume !(1 == 1);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} $i15 := sh_eth_read($p0, 1);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 3);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i4 := 97;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb42, $bb43;

  $bb43:
    assume !(1 == 1);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $i18 := sh_eth_read($p0, 1);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 3);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i4 := 96;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb52, $bb53;

  $bb53:
    assume !(1 == 1);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $i21 := sh_eth_read($p0, 1);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 3);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i4 := 95;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb62, $bb63;

  $bb63:
    assume !(1 == 1);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $i24 := sh_eth_read($p0, 1);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 3);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i4 := 94;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb72, $bb73;

  $bb73:
    assume !(1 == 1);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $i27 := sh_eth_read($p0, 1);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i27, 3);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i4 := 93;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb82, $bb83;

  $bb83:
    assume !(1 == 1);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $i30 := sh_eth_read($p0, 1);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i31 := $and.i64($i30, 3);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, 0);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i4 := 92;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb92, $bb93;

  $bb93:
    assume !(1 == 1);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} $i33 := sh_eth_read($p0, 1);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i34 := $and.i64($i33, 3);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i34, 0);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i4 := 91;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb102, $bb103;

  $bb103:
    assume !(1 == 1);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $i36 := sh_eth_read($p0, 1);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i37 := $and.i64($i36, 3);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i4 := 90;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb112, $bb113;

  $bb113:
    assume !(1 == 1);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $i39 := sh_eth_read($p0, 1);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i40 := $and.i64($i39, 3);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i4 := 89;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb122, $bb123;

  $bb123:
    assume !(1 == 1);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $i42 := sh_eth_read($p0, 1);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i43 := $and.i64($i42, 3);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i43, 0);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i4 := 88;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb132, $bb133;

  $bb133:
    assume !(1 == 1);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} $i45 := sh_eth_read($p0, 1);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $i46 := $and.i64($i45, 3);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i4 := 87;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb142, $bb143;

  $bb143:
    assume !(1 == 1);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $i48 := sh_eth_read($p0, 1);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i49 := $and.i64($i48, 3);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i49, 0);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i4 := 86;
    assume {:branchcond $i50} true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb152, $bb153;

  $bb153:
    assume !(1 == 1);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} $i51 := sh_eth_read($p0, 1);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i52 := $and.i64($i51, 3);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i53 := $eq.i64($i52, 0);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i4 := 85;
    assume true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb162, $bb163;

  $bb163:
    assume !(1 == 1);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} $i54 := sh_eth_read($p0, 1);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i55 := $and.i64($i54, 3);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i56 := $eq.i64($i55, 0);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i4 := 84;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb172, $bb173;

  $bb173:
    assume !(1 == 1);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $i57 := sh_eth_read($p0, 1);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i58 := $and.i64($i57, 3);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i59 := $eq.i64($i58, 0);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i4 := 83;
    assume {:branchcond $i59} true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb182, $bb183;

  $bb183:
    assume !(1 == 1);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $i60 := sh_eth_read($p0, 1);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $i61 := $and.i64($i60, 3);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i62 := $eq.i64($i61, 0);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $i4 := 82;
    assume {:branchcond $i62} true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb192, $bb193;

  $bb193:
    assume !(1 == 1);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $i63 := sh_eth_read($p0, 1);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i64 := $and.i64($i63, 3);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i65 := $eq.i64($i64, 0);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i4 := 81;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb202, $bb203;

  $bb203:
    assume !(1 == 1);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $i66 := sh_eth_read($p0, 1);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i67 := $and.i64($i66, 3);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i68 := $eq.i64($i67, 0);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i4 := 80;
    assume {:branchcond $i68} true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb212, $bb213;

  $bb213:
    assume !(1 == 1);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} $i69 := sh_eth_read($p0, 1);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i70 := $and.i64($i69, 3);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i71 := $eq.i64($i70, 0);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i4 := 79;
    assume true;
    goto $bb219, $bb220;

  $bb220:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb222, $bb223;

  $bb223:
    assume !(1 == 1);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} $i72 := sh_eth_read($p0, 1);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i73 := $and.i64($i72, 3);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i74 := $eq.i64($i73, 0);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i4 := 78;
    assume {:branchcond $i74} true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb232, $bb233;

  $bb233:
    assume !(1 == 1);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} $i75 := sh_eth_read($p0, 1);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i76 := $and.i64($i75, 3);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i77 := $eq.i64($i76, 0);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i4 := 77;
    assume true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb242, $bb243;

  $bb243:
    assume !(1 == 1);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $i78 := sh_eth_read($p0, 1);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i79 := $and.i64($i78, 3);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i80 := $eq.i64($i79, 0);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i4 := 76;
    assume {:branchcond $i80} true;
    goto $bb249, $bb250;

  $bb250:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb252, $bb253;

  $bb253:
    assume !(1 == 1);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} $i81 := sh_eth_read($p0, 1);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i82 := $and.i64($i81, 3);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i83 := $eq.i64($i82, 0);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i4 := 75;
    assume true;
    goto $bb259, $bb260;

  $bb260:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb262, $bb263;

  $bb263:
    assume !(1 == 1);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $i84 := sh_eth_read($p0, 1);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i85 := $and.i64($i84, 3);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i86 := $eq.i64($i85, 0);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i4 := 74;
    assume true;
    goto $bb269, $bb270;

  $bb270:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb272, $bb273;

  $bb273:
    assume !(1 == 1);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $i87 := sh_eth_read($p0, 1);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i88 := $and.i64($i87, 3);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i89 := $eq.i64($i88, 0);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $i4 := 73;
    assume {:branchcond $i89} true;
    goto $bb279, $bb280;

  $bb280:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb282, $bb283;

  $bb283:
    assume !(1 == 1);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $i90 := sh_eth_read($p0, 1);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i91 := $and.i64($i90, 3);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i92 := $eq.i64($i91, 0);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i4 := 72;
    assume true;
    goto $bb289, $bb290;

  $bb290:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb292, $bb293;

  $bb293:
    assume !(1 == 1);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} $i93 := sh_eth_read($p0, 1);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i94 := $and.i64($i93, 3);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i95 := $eq.i64($i94, 0);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i4 := 71;
    assume {:branchcond $i95} true;
    goto $bb299, $bb300;

  $bb300:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb302, $bb303;

  $bb303:
    assume !(1 == 1);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $i96 := sh_eth_read($p0, 1);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i97 := $and.i64($i96, 3);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i98 := $eq.i64($i97, 0);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i4 := 70;
    assume true;
    goto $bb309, $bb310;

  $bb310:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb312, $bb313;

  $bb313:
    assume !(1 == 1);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $i99 := sh_eth_read($p0, 1);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i100 := $and.i64($i99, 3);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i101 := $eq.i64($i100, 0);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i4 := 69;
    assume {:branchcond $i101} true;
    goto $bb319, $bb320;

  $bb320:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb322, $bb323;

  $bb323:
    assume !(1 == 1);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $i102 := sh_eth_read($p0, 1);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i103 := $and.i64($i102, 3);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i104 := $eq.i64($i103, 0);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i4 := 68;
    assume {:branchcond $i104} true;
    goto $bb329, $bb330;

  $bb330:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb332, $bb333;

  $bb333:
    assume !(1 == 1);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $i105 := sh_eth_read($p0, 1);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $i106 := $and.i64($i105, 3);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i107 := $eq.i64($i106, 0);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i4 := 67;
    assume {:branchcond $i107} true;
    goto $bb339, $bb340;

  $bb340:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb342, $bb343;

  $bb343:
    assume !(1 == 1);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} $i108 := sh_eth_read($p0, 1);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $i109 := $and.i64($i108, 3);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i110 := $eq.i64($i109, 0);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i4 := 66;
    assume true;
    goto $bb349, $bb350;

  $bb350:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb352, $bb353;

  $bb353:
    assume !(1 == 1);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} $i111 := sh_eth_read($p0, 1);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i112 := $and.i64($i111, 3);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i113 := $eq.i64($i112, 0);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i4 := 65;
    assume true;
    goto $bb359, $bb360;

  $bb360:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb362, $bb363;

  $bb363:
    assume !(1 == 1);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} $i114 := sh_eth_read($p0, 1);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i115 := $and.i64($i114, 3);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i116 := $eq.i64($i115, 0);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $i4 := 64;
    assume true;
    goto $bb369, $bb370;

  $bb370:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb372, $bb373;

  $bb373:
    assume !(1 == 1);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $i117 := sh_eth_read($p0, 1);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i118 := $and.i64($i117, 3);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i119 := $eq.i64($i118, 0);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i4 := 63;
    assume {:branchcond $i119} true;
    goto $bb379, $bb380;

  $bb380:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb382, $bb383;

  $bb383:
    assume !(1 == 1);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} $i120 := sh_eth_read($p0, 1);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i121 := $and.i64($i120, 3);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i122 := $eq.i64($i121, 0);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i4 := 62;
    assume {:branchcond $i122} true;
    goto $bb389, $bb390;

  $bb390:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb392, $bb393;

  $bb393:
    assume !(1 == 1);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb397:
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} $i123 := sh_eth_read($p0, 1);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i124 := $and.i64($i123, 3);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i125 := $eq.i64($i124, 0);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i4 := 61;
    assume true;
    goto $bb399, $bb400;

  $bb400:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb402, $bb403;

  $bb403:
    assume !(1 == 1);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} $i126 := sh_eth_read($p0, 1);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i127 := $and.i64($i126, 3);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i128 := $eq.i64($i127, 0);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i4 := 60;
    assume true;
    goto $bb409, $bb410;

  $bb410:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb412, $bb413;

  $bb413:
    assume !(1 == 1);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb416:
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $i129 := sh_eth_read($p0, 1);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i130 := $and.i64($i129, 3);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i131 := $eq.i64($i130, 0);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i4 := 59;
    assume true;
    goto $bb419, $bb420;

  $bb420:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb421;

  $bb421:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb422, $bb423;

  $bb423:
    assume !(1 == 1);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb424:
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb427:
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} $i132 := sh_eth_read($p0, 1);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i133 := $and.i64($i132, 3);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i134 := $eq.i64($i133, 0);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i4 := 58;
    assume {:branchcond $i134} true;
    goto $bb429, $bb430;

  $bb430:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb431:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb432, $bb433;

  $bb433:
    assume !(1 == 1);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb436:
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb437:
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} $i135 := sh_eth_read($p0, 1);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i136 := $and.i64($i135, 3);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i137 := $eq.i64($i136, 0);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i4 := 57;
    assume {:branchcond $i137} true;
    goto $bb439, $bb440;

  $bb440:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb441:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb442, $bb443;

  $bb443:
    assume !(1 == 1);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb444:
    assume {:verifier.code 0} true;
    goto $bb445;

  $bb445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb447:
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} $i138 := sh_eth_read($p0, 1);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i139 := $and.i64($i138, 3);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i140 := $eq.i64($i139, 0);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i4 := 56;
    assume {:branchcond $i140} true;
    goto $bb449, $bb450;

  $bb450:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb451:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb452, $bb453;

  $bb453:
    assume !(1 == 1);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb456;

  $bb456:
    assume {:verifier.code 0} true;
    goto $bb457;

  $bb457:
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $i141 := sh_eth_read($p0, 1);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i142 := $and.i64($i141, 3);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i143 := $eq.i64($i142, 0);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i4 := 55;
    assume true;
    goto $bb459, $bb460;

  $bb460:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb461;

  $bb461:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb462, $bb463;

  $bb463:
    assume !(1 == 1);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    goto $bb464;

  $bb464:
    assume {:verifier.code 0} true;
    goto $bb465;

  $bb465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb467:
    assume {:verifier.code 0} true;
    goto $bb468;

  $bb468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $i144 := sh_eth_read($p0, 1);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i145 := $and.i64($i144, 3);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i146 := $eq.i64($i145, 0);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i4 := 54;
    assume {:branchcond $i146} true;
    goto $bb469, $bb470;

  $bb470:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb471;

  $bb471:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb472, $bb473;

  $bb473:
    assume !(1 == 1);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb474:
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb476:
    assume {:verifier.code 0} true;
    goto $bb477;

  $bb477:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $i147 := sh_eth_read($p0, 1);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i148 := $and.i64($i147, 3);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i149 := $eq.i64($i148, 0);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i4 := 53;
    assume {:branchcond $i149} true;
    goto $bb479, $bb480;

  $bb480:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb481;

  $bb481:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb482, $bb483;

  $bb483:
    assume !(1 == 1);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb484:
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb486;

  $bb486:
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb487:
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $i150 := sh_eth_read($p0, 1);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i151 := $and.i64($i150, 3);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i152 := $eq.i64($i151, 0);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i4 := 52;
    assume {:branchcond $i152} true;
    goto $bb489, $bb490;

  $bb490:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb491:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb492, $bb493;

  $bb493:
    assume !(1 == 1);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb494:
    assume {:verifier.code 0} true;
    goto $bb495;

  $bb495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb496;

  $bb496:
    assume {:verifier.code 0} true;
    goto $bb497;

  $bb497:
    assume {:verifier.code 0} true;
    goto $bb498;

  $bb498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $i153 := sh_eth_read($p0, 1);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i154 := $and.i64($i153, 3);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i155 := $eq.i64($i154, 0);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i4 := 51;
    assume true;
    goto $bb499, $bb500;

  $bb500:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb501;

  $bb501:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb502, $bb503;

  $bb503:
    assume !(1 == 1);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    goto $bb504;

  $bb504:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb506:
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb507:
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} $i156 := sh_eth_read($p0, 1);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i157 := $and.i64($i156, 3);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i158 := $eq.i64($i157, 0);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i4 := 50;
    assume true;
    goto $bb509, $bb510;

  $bb510:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb511;

  $bb511:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb512, $bb513;

  $bb513:
    assume !(1 == 1);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb514:
    assume {:verifier.code 0} true;
    goto $bb515;

  $bb515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb516;

  $bb516:
    assume {:verifier.code 0} true;
    goto $bb517;

  $bb517:
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $i159 := sh_eth_read($p0, 1);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i160 := $and.i64($i159, 3);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i161 := $eq.i64($i160, 0);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i4 := 49;
    assume true;
    goto $bb519, $bb520;

  $bb520:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb521:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb522, $bb523;

  $bb523:
    assume !(1 == 1);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    goto $bb524;

  $bb524:
    assume {:verifier.code 0} true;
    goto $bb525;

  $bb525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb526;

  $bb526:
    assume {:verifier.code 0} true;
    goto $bb527;

  $bb527:
    assume {:verifier.code 0} true;
    goto $bb528;

  $bb528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $i162 := sh_eth_read($p0, 1);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i163 := $and.i64($i162, 3);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i164 := $eq.i64($i163, 0);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i4 := 48;
    assume true;
    goto $bb529, $bb530;

  $bb530:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb531;

  $bb531:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb532, $bb533;

  $bb533:
    assume !(1 == 1);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    goto $bb534;

  $bb534:
    assume {:verifier.code 0} true;
    goto $bb535;

  $bb535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb536:
    assume {:verifier.code 0} true;
    goto $bb537;

  $bb537:
    assume {:verifier.code 0} true;
    goto $bb538;

  $bb538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} $i165 := sh_eth_read($p0, 1);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i166 := $and.i64($i165, 3);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i167 := $eq.i64($i166, 0);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i4 := 47;
    assume {:branchcond $i167} true;
    goto $bb539, $bb540;

  $bb540:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb541:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb542, $bb543;

  $bb543:
    assume !(1 == 1);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    goto $bb544;

  $bb544:
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb546;

  $bb546:
    assume {:verifier.code 0} true;
    goto $bb547;

  $bb547:
    assume {:verifier.code 0} true;
    goto $bb548;

  $bb548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $i168 := sh_eth_read($p0, 1);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i169 := $and.i64($i168, 3);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i170 := $eq.i64($i169, 0);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i4 := 46;
    assume true;
    goto $bb549, $bb550;

  $bb550:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb551;

  $bb551:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb552, $bb553;

  $bb553:
    assume !(1 == 1);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    goto $bb554;

  $bb554:
    assume {:verifier.code 0} true;
    goto $bb555;

  $bb555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb556;

  $bb556:
    assume {:verifier.code 0} true;
    goto $bb557;

  $bb557:
    assume {:verifier.code 0} true;
    goto $bb558;

  $bb558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} $i171 := sh_eth_read($p0, 1);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i172 := $and.i64($i171, 3);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i173 := $eq.i64($i172, 0);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i4 := 45;
    assume {:branchcond $i173} true;
    goto $bb559, $bb560;

  $bb560:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb561;

  $bb561:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb562, $bb563;

  $bb563:
    assume !(1 == 1);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    goto $bb564;

  $bb564:
    assume {:verifier.code 0} true;
    goto $bb565;

  $bb565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb566;

  $bb566:
    assume {:verifier.code 0} true;
    goto $bb567;

  $bb567:
    assume {:verifier.code 0} true;
    goto $bb568;

  $bb568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $i174 := sh_eth_read($p0, 1);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i175 := $and.i64($i174, 3);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i176 := $eq.i64($i175, 0);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i4 := 44;
    assume {:branchcond $i176} true;
    goto $bb569, $bb570;

  $bb570:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb571;

  $bb571:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb572, $bb573;

  $bb573:
    assume !(1 == 1);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    goto $bb574;

  $bb574:
    assume {:verifier.code 0} true;
    goto $bb575;

  $bb575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb576;

  $bb576:
    assume {:verifier.code 0} true;
    goto $bb577;

  $bb577:
    assume {:verifier.code 0} true;
    goto $bb578;

  $bb578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} $i177 := sh_eth_read($p0, 1);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i178 := $and.i64($i177, 3);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i179 := $eq.i64($i178, 0);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i4 := 43;
    assume {:branchcond $i179} true;
    goto $bb579, $bb580;

  $bb580:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb581;

  $bb581:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb582, $bb583;

  $bb583:
    assume !(1 == 1);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    goto $bb584;

  $bb584:
    assume {:verifier.code 0} true;
    goto $bb585;

  $bb585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb586:
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb587:
    assume {:verifier.code 0} true;
    goto $bb588;

  $bb588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} $i180 := sh_eth_read($p0, 1);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i181 := $and.i64($i180, 3);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i182 := $eq.i64($i181, 0);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i4 := 42;
    assume {:branchcond $i182} true;
    goto $bb589, $bb590;

  $bb590:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb591;

  $bb591:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb592, $bb593;

  $bb593:
    assume !(1 == 1);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    goto $bb594;

  $bb594:
    assume {:verifier.code 0} true;
    goto $bb595;

  $bb595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb596;

  $bb596:
    assume {:verifier.code 0} true;
    goto $bb597;

  $bb597:
    assume {:verifier.code 0} true;
    goto $bb598;

  $bb598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} $i183 := sh_eth_read($p0, 1);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i184 := $and.i64($i183, 3);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $i185 := $eq.i64($i184, 0);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i4 := 41;
    assume {:branchcond $i185} true;
    goto $bb599, $bb600;

  $bb600:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb601;

  $bb601:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb602, $bb603;

  $bb603:
    assume !(1 == 1);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    goto $bb604;

  $bb604:
    assume {:verifier.code 0} true;
    goto $bb605;

  $bb605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb606;

  $bb606:
    assume {:verifier.code 0} true;
    goto $bb607;

  $bb607:
    assume {:verifier.code 0} true;
    goto $bb608;

  $bb608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $i186 := sh_eth_read($p0, 1);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i187 := $and.i64($i186, 3);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i188 := $eq.i64($i187, 0);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i4 := 40;
    assume {:branchcond $i188} true;
    goto $bb609, $bb610;

  $bb610:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb611;

  $bb611:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb612, $bb613;

  $bb613:
    assume !(1 == 1);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    goto $bb614;

  $bb614:
    assume {:verifier.code 0} true;
    goto $bb615;

  $bb615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb616;

  $bb616:
    assume {:verifier.code 0} true;
    goto $bb617;

  $bb617:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} $i189 := sh_eth_read($p0, 1);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i190 := $and.i64($i189, 3);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i191 := $eq.i64($i190, 0);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i4 := 39;
    assume {:branchcond $i191} true;
    goto $bb619, $bb620;

  $bb620:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb621;

  $bb621:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb622, $bb623;

  $bb623:
    assume !(1 == 1);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    goto $bb624;

  $bb624:
    assume {:verifier.code 0} true;
    goto $bb625;

  $bb625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb626;

  $bb626:
    assume {:verifier.code 0} true;
    goto $bb627;

  $bb627:
    assume {:verifier.code 0} true;
    goto $bb628;

  $bb628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} $i192 := sh_eth_read($p0, 1);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i193 := $and.i64($i192, 3);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i194 := $eq.i64($i193, 0);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i4 := 38;
    assume {:branchcond $i194} true;
    goto $bb629, $bb630;

  $bb630:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb631;

  $bb631:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb632, $bb633;

  $bb633:
    assume !(1 == 1);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    goto $bb634;

  $bb634:
    assume {:verifier.code 0} true;
    goto $bb635;

  $bb635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb636;

  $bb636:
    assume {:verifier.code 0} true;
    goto $bb637;

  $bb637:
    assume {:verifier.code 0} true;
    goto $bb638;

  $bb638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $i195 := sh_eth_read($p0, 1);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i196 := $and.i64($i195, 3);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i197 := $eq.i64($i196, 0);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i4 := 37;
    assume true;
    goto $bb639, $bb640;

  $bb640:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb641;

  $bb641:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb642, $bb643;

  $bb643:
    assume !(1 == 1);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    goto $bb644;

  $bb644:
    assume {:verifier.code 0} true;
    goto $bb645;

  $bb645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb646;

  $bb646:
    assume {:verifier.code 0} true;
    goto $bb647;

  $bb647:
    assume {:verifier.code 0} true;
    goto $bb648;

  $bb648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} $i198 := sh_eth_read($p0, 1);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i199 := $and.i64($i198, 3);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i200 := $eq.i64($i199, 0);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i4 := 36;
    assume {:branchcond $i200} true;
    goto $bb649, $bb650;

  $bb650:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb651;

  $bb651:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb652, $bb653;

  $bb653:
    assume !(1 == 1);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    goto $bb654;

  $bb654:
    assume {:verifier.code 0} true;
    goto $bb655;

  $bb655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb656;

  $bb656:
    assume {:verifier.code 0} true;
    goto $bb657;

  $bb657:
    assume {:verifier.code 0} true;
    goto $bb658;

  $bb658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $i201 := sh_eth_read($p0, 1);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i202 := $and.i64($i201, 3);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i203 := $eq.i64($i202, 0);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i4 := 35;
    assume {:branchcond $i203} true;
    goto $bb659, $bb660;

  $bb660:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb661;

  $bb661:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb662, $bb663;

  $bb663:
    assume !(1 == 1);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    goto $bb664;

  $bb664:
    assume {:verifier.code 0} true;
    goto $bb665;

  $bb665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb666;

  $bb666:
    assume {:verifier.code 0} true;
    goto $bb667;

  $bb667:
    assume {:verifier.code 0} true;
    goto $bb668;

  $bb668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} $i204 := sh_eth_read($p0, 1);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i205 := $and.i64($i204, 3);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i206 := $eq.i64($i205, 0);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i4 := 34;
    assume true;
    goto $bb669, $bb670;

  $bb670:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb671;

  $bb671:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb672, $bb673;

  $bb673:
    assume !(1 == 1);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    goto $bb674;

  $bb674:
    assume {:verifier.code 0} true;
    goto $bb675;

  $bb675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb676;

  $bb676:
    assume {:verifier.code 0} true;
    goto $bb677;

  $bb677:
    assume {:verifier.code 0} true;
    goto $bb678;

  $bb678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} $i207 := sh_eth_read($p0, 1);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i208 := $and.i64($i207, 3);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i209 := $eq.i64($i208, 0);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i4 := 33;
    assume {:branchcond $i209} true;
    goto $bb679, $bb680;

  $bb680:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb681;

  $bb681:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb682, $bb683;

  $bb683:
    assume !(1 == 1);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    goto $bb684;

  $bb684:
    assume {:verifier.code 0} true;
    goto $bb685;

  $bb685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb686;

  $bb686:
    assume {:verifier.code 0} true;
    goto $bb687;

  $bb687:
    assume {:verifier.code 0} true;
    goto $bb688;

  $bb688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} $i210 := sh_eth_read($p0, 1);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i211 := $and.i64($i210, 3);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i212 := $eq.i64($i211, 0);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i4 := 32;
    assume true;
    goto $bb689, $bb690;

  $bb690:
    assume !($i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb691;

  $bb691:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb692, $bb693;

  $bb693:
    assume !(1 == 1);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    goto $bb694;

  $bb694:
    assume {:verifier.code 0} true;
    goto $bb695;

  $bb695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb696;

  $bb696:
    assume {:verifier.code 0} true;
    goto $bb697;

  $bb697:
    assume {:verifier.code 0} true;
    goto $bb698;

  $bb698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} $i213 := sh_eth_read($p0, 1);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i214 := $and.i64($i213, 3);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i215 := $eq.i64($i214, 0);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i4 := 31;
    assume {:branchcond $i215} true;
    goto $bb699, $bb700;

  $bb700:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb701;

  $bb701:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb702, $bb703;

  $bb703:
    assume !(1 == 1);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    goto $bb704;

  $bb704:
    assume {:verifier.code 0} true;
    goto $bb705;

  $bb705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb706;

  $bb706:
    assume {:verifier.code 0} true;
    goto $bb707;

  $bb707:
    assume {:verifier.code 0} true;
    goto $bb708;

  $bb708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} $i216 := sh_eth_read($p0, 1);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i217 := $and.i64($i216, 3);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i218 := $eq.i64($i217, 0);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i4 := 30;
    assume {:branchcond $i218} true;
    goto $bb709, $bb710;

  $bb710:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb711;

  $bb711:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb712, $bb713;

  $bb713:
    assume !(1 == 1);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    goto $bb714;

  $bb714:
    assume {:verifier.code 0} true;
    goto $bb715;

  $bb715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb716;

  $bb716:
    assume {:verifier.code 0} true;
    goto $bb717;

  $bb717:
    assume {:verifier.code 0} true;
    goto $bb718;

  $bb718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $i219 := sh_eth_read($p0, 1);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i220 := $and.i64($i219, 3);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i221 := $eq.i64($i220, 0);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $i4 := 29;
    assume {:branchcond $i221} true;
    goto $bb719, $bb720;

  $bb720:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb721;

  $bb721:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb722, $bb723;

  $bb723:
    assume !(1 == 1);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    goto $bb724;

  $bb724:
    assume {:verifier.code 0} true;
    goto $bb725;

  $bb725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb726:
    assume {:verifier.code 0} true;
    goto $bb727;

  $bb727:
    assume {:verifier.code 0} true;
    goto $bb728;

  $bb728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $i222 := sh_eth_read($p0, 1);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i223 := $and.i64($i222, 3);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i224 := $eq.i64($i223, 0);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i4 := 28;
    assume true;
    goto $bb729, $bb730;

  $bb730:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb731;

  $bb731:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb732, $bb733;

  $bb733:
    assume !(1 == 1);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    goto $bb734;

  $bb734:
    assume {:verifier.code 0} true;
    goto $bb735;

  $bb735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb736;

  $bb736:
    assume {:verifier.code 0} true;
    goto $bb737;

  $bb737:
    assume {:verifier.code 0} true;
    goto $bb738;

  $bb738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $i225 := sh_eth_read($p0, 1);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i226 := $and.i64($i225, 3);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i227 := $eq.i64($i226, 0);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i4 := 27;
    assume {:branchcond $i227} true;
    goto $bb739, $bb740;

  $bb740:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb741;

  $bb741:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb742, $bb743;

  $bb743:
    assume !(1 == 1);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    goto $bb744;

  $bb744:
    assume {:verifier.code 0} true;
    goto $bb745;

  $bb745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb746;

  $bb746:
    assume {:verifier.code 0} true;
    goto $bb747;

  $bb747:
    assume {:verifier.code 0} true;
    goto $bb748;

  $bb748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} $i228 := sh_eth_read($p0, 1);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i229 := $and.i64($i228, 3);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i230 := $eq.i64($i229, 0);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i4 := 26;
    assume {:branchcond $i230} true;
    goto $bb749, $bb750;

  $bb750:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb751;

  $bb751:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb752, $bb753;

  $bb753:
    assume !(1 == 1);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    goto $bb754;

  $bb754:
    assume {:verifier.code 0} true;
    goto $bb755;

  $bb755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb756;

  $bb756:
    assume {:verifier.code 0} true;
    goto $bb757;

  $bb757:
    assume {:verifier.code 0} true;
    goto $bb758;

  $bb758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} $i231 := sh_eth_read($p0, 1);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i232 := $and.i64($i231, 3);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i233 := $eq.i64($i232, 0);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i4 := 25;
    assume {:branchcond $i233} true;
    goto $bb759, $bb760;

  $bb760:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb761;

  $bb761:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb762, $bb763;

  $bb763:
    assume !(1 == 1);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    goto $bb764;

  $bb764:
    assume {:verifier.code 0} true;
    goto $bb765;

  $bb765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb766;

  $bb766:
    assume {:verifier.code 0} true;
    goto $bb767;

  $bb767:
    assume {:verifier.code 0} true;
    goto $bb768;

  $bb768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} $i234 := sh_eth_read($p0, 1);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i235 := $and.i64($i234, 3);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i236 := $eq.i64($i235, 0);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $i4 := 24;
    assume true;
    goto $bb769, $bb770;

  $bb770:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb771;

  $bb771:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb772, $bb773;

  $bb773:
    assume !(1 == 1);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    goto $bb774;

  $bb774:
    assume {:verifier.code 0} true;
    goto $bb775;

  $bb775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb776;

  $bb776:
    assume {:verifier.code 0} true;
    goto $bb777;

  $bb777:
    assume {:verifier.code 0} true;
    goto $bb778;

  $bb778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} $i237 := sh_eth_read($p0, 1);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i238 := $and.i64($i237, 3);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i239 := $eq.i64($i238, 0);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i4 := 23;
    assume true;
    goto $bb779, $bb780;

  $bb780:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb781;

  $bb781:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb782, $bb783;

  $bb783:
    assume !(1 == 1);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    goto $bb784;

  $bb784:
    assume {:verifier.code 0} true;
    goto $bb785;

  $bb785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb786;

  $bb786:
    assume {:verifier.code 0} true;
    goto $bb787;

  $bb787:
    assume {:verifier.code 0} true;
    goto $bb788;

  $bb788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $i240 := sh_eth_read($p0, 1);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i241 := $and.i64($i240, 3);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i242 := $eq.i64($i241, 0);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i4 := 22;
    assume true;
    goto $bb789, $bb790;

  $bb790:
    assume !($i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb791;

  $bb791:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb792, $bb793;

  $bb793:
    assume !(1 == 1);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    goto $bb794;

  $bb794:
    assume {:verifier.code 0} true;
    goto $bb795;

  $bb795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb796;

  $bb796:
    assume {:verifier.code 0} true;
    goto $bb797;

  $bb797:
    assume {:verifier.code 0} true;
    goto $bb798;

  $bb798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $i243 := sh_eth_read($p0, 1);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i244 := $and.i64($i243, 3);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i245 := $eq.i64($i244, 0);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i4 := 21;
    assume true;
    goto $bb799, $bb800;

  $bb800:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb801;

  $bb801:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb802, $bb803;

  $bb803:
    assume !(1 == 1);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    goto $bb804;

  $bb804:
    assume {:verifier.code 0} true;
    goto $bb805;

  $bb805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb806;

  $bb806:
    assume {:verifier.code 0} true;
    goto $bb807;

  $bb807:
    assume {:verifier.code 0} true;
    goto $bb808;

  $bb808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $i246 := sh_eth_read($p0, 1);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i247 := $and.i64($i246, 3);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i248 := $eq.i64($i247, 0);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i4 := 20;
    assume true;
    goto $bb809, $bb810;

  $bb810:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb811;

  $bb811:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb812, $bb813;

  $bb813:
    assume !(1 == 1);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    goto $bb814;

  $bb814:
    assume {:verifier.code 0} true;
    goto $bb815;

  $bb815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb816;

  $bb816:
    assume {:verifier.code 0} true;
    goto $bb817;

  $bb817:
    assume {:verifier.code 0} true;
    goto $bb818;

  $bb818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} $i249 := sh_eth_read($p0, 1);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i250 := $and.i64($i249, 3);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $i251 := $eq.i64($i250, 0);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i4 := 19;
    assume true;
    goto $bb819, $bb820;

  $bb820:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb821;

  $bb821:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb822, $bb823;

  $bb823:
    assume !(1 == 1);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    goto $bb824;

  $bb824:
    assume {:verifier.code 0} true;
    goto $bb825;

  $bb825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb826;

  $bb826:
    assume {:verifier.code 0} true;
    goto $bb827;

  $bb827:
    assume {:verifier.code 0} true;
    goto $bb828;

  $bb828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $i252 := sh_eth_read($p0, 1);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i253 := $and.i64($i252, 3);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i254 := $eq.i64($i253, 0);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i4 := 18;
    assume {:branchcond $i254} true;
    goto $bb829, $bb830;

  $bb830:
    assume !($i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb831;

  $bb831:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb832, $bb833;

  $bb833:
    assume !(1 == 1);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    goto $bb834;

  $bb834:
    assume {:verifier.code 0} true;
    goto $bb835;

  $bb835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb836;

  $bb836:
    assume {:verifier.code 0} true;
    goto $bb837;

  $bb837:
    assume {:verifier.code 0} true;
    goto $bb838;

  $bb838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} $i255 := sh_eth_read($p0, 1);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i256 := $and.i64($i255, 3);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i257 := $eq.i64($i256, 0);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i4 := 17;
    assume {:branchcond $i257} true;
    goto $bb839, $bb840;

  $bb840:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb841;

  $bb841:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb842, $bb843;

  $bb843:
    assume !(1 == 1);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    goto $bb844;

  $bb844:
    assume {:verifier.code 0} true;
    goto $bb845;

  $bb845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb846;

  $bb846:
    assume {:verifier.code 0} true;
    goto $bb847;

  $bb847:
    assume {:verifier.code 0} true;
    goto $bb848;

  $bb848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} $i258 := sh_eth_read($p0, 1);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i259 := $and.i64($i258, 3);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i260 := $eq.i64($i259, 0);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i4 := 16;
    assume {:branchcond $i260} true;
    goto $bb849, $bb850;

  $bb850:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb851;

  $bb851:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb852, $bb853;

  $bb853:
    assume !(1 == 1);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    goto $bb854;

  $bb854:
    assume {:verifier.code 0} true;
    goto $bb855;

  $bb855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb856;

  $bb856:
    assume {:verifier.code 0} true;
    goto $bb857;

  $bb857:
    assume {:verifier.code 0} true;
    goto $bb858;

  $bb858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} $i261 := sh_eth_read($p0, 1);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i262 := $and.i64($i261, 3);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i263 := $eq.i64($i262, 0);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i4 := 15;
    assume {:branchcond $i263} true;
    goto $bb859, $bb860;

  $bb860:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb861;

  $bb861:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb862, $bb863;

  $bb863:
    assume !(1 == 1);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    goto $bb864;

  $bb864:
    assume {:verifier.code 0} true;
    goto $bb865;

  $bb865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb866;

  $bb866:
    assume {:verifier.code 0} true;
    goto $bb867;

  $bb867:
    assume {:verifier.code 0} true;
    goto $bb868;

  $bb868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} $i264 := sh_eth_read($p0, 1);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i265 := $and.i64($i264, 3);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i266 := $eq.i64($i265, 0);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i4 := 14;
    assume true;
    goto $bb869, $bb870;

  $bb870:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb871;

  $bb871:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb872, $bb873;

  $bb873:
    assume !(1 == 1);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    goto $bb874;

  $bb874:
    assume {:verifier.code 0} true;
    goto $bb875;

  $bb875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb876;

  $bb876:
    assume {:verifier.code 0} true;
    goto $bb877;

  $bb877:
    assume {:verifier.code 0} true;
    goto $bb878;

  $bb878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $i267 := sh_eth_read($p0, 1);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i268 := $and.i64($i267, 3);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i269 := $eq.i64($i268, 0);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $i4 := 13;
    assume {:branchcond $i269} true;
    goto $bb879, $bb880;

  $bb880:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb881:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb882, $bb883;

  $bb883:
    assume !(1 == 1);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    goto $bb884;

  $bb884:
    assume {:verifier.code 0} true;
    goto $bb885;

  $bb885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb886;

  $bb886:
    assume {:verifier.code 0} true;
    goto $bb887;

  $bb887:
    assume {:verifier.code 0} true;
    goto $bb888;

  $bb888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} $i270 := sh_eth_read($p0, 1);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i271 := $and.i64($i270, 3);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i272 := $eq.i64($i271, 0);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i4 := 12;
    assume {:branchcond $i272} true;
    goto $bb889, $bb890;

  $bb890:
    assume !($i272 == 1);
    assume {:verifier.code 0} true;
    goto $bb891;

  $bb891:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb892, $bb893;

  $bb893:
    assume !(1 == 1);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    goto $bb894;

  $bb894:
    assume {:verifier.code 0} true;
    goto $bb895;

  $bb895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb896;

  $bb896:
    assume {:verifier.code 0} true;
    goto $bb897;

  $bb897:
    assume {:verifier.code 0} true;
    goto $bb898;

  $bb898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} $i273 := sh_eth_read($p0, 1);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i274 := $and.i64($i273, 3);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i275 := $eq.i64($i274, 0);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i4 := 11;
    assume {:branchcond $i275} true;
    goto $bb899, $bb900;

  $bb900:
    assume !($i275 == 1);
    assume {:verifier.code 0} true;
    goto $bb901;

  $bb901:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb902, $bb903;

  $bb903:
    assume !(1 == 1);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    goto $bb904;

  $bb904:
    assume {:verifier.code 0} true;
    goto $bb905;

  $bb905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb906;

  $bb906:
    assume {:verifier.code 0} true;
    goto $bb907;

  $bb907:
    assume {:verifier.code 0} true;
    goto $bb908;

  $bb908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $i276 := sh_eth_read($p0, 1);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i277 := $and.i64($i276, 3);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i278 := $eq.i64($i277, 0);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i4 := 10;
    assume true;
    goto $bb909, $bb910;

  $bb910:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb911;

  $bb911:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb912, $bb913;

  $bb913:
    assume !(1 == 1);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    goto $bb914;

  $bb914:
    assume {:verifier.code 0} true;
    goto $bb915;

  $bb915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb916;

  $bb916:
    assume {:verifier.code 0} true;
    goto $bb917;

  $bb917:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} $i279 := sh_eth_read($p0, 1);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i280 := $and.i64($i279, 3);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i281 := $eq.i64($i280, 0);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i4 := 9;
    assume {:branchcond $i281} true;
    goto $bb919, $bb920;

  $bb920:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb921;

  $bb921:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb922, $bb923;

  $bb923:
    assume !(1 == 1);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    goto $bb924;

  $bb924:
    assume {:verifier.code 0} true;
    goto $bb925;

  $bb925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb926;

  $bb926:
    assume {:verifier.code 0} true;
    goto $bb927;

  $bb927:
    assume {:verifier.code 0} true;
    goto $bb928;

  $bb928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} $i282 := sh_eth_read($p0, 1);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i283 := $and.i64($i282, 3);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i284 := $eq.i64($i283, 0);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i4 := 8;
    assume {:branchcond $i284} true;
    goto $bb929, $bb930;

  $bb930:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb931;

  $bb931:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb932, $bb933;

  $bb933:
    assume !(1 == 1);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    goto $bb934;

  $bb934:
    assume {:verifier.code 0} true;
    goto $bb935;

  $bb935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb936;

  $bb936:
    assume {:verifier.code 0} true;
    goto $bb937;

  $bb937:
    assume {:verifier.code 0} true;
    goto $bb938;

  $bb938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $i285 := sh_eth_read($p0, 1);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i286 := $and.i64($i285, 3);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i287 := $eq.i64($i286, 0);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $i4 := 7;
    assume {:branchcond $i287} true;
    goto $bb939, $bb940;

  $bb940:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb941;

  $bb941:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb942, $bb943;

  $bb943:
    assume !(1 == 1);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    goto $bb944;

  $bb944:
    assume {:verifier.code 0} true;
    goto $bb945;

  $bb945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb946;

  $bb946:
    assume {:verifier.code 0} true;
    goto $bb947;

  $bb947:
    assume {:verifier.code 0} true;
    goto $bb948;

  $bb948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $i288 := sh_eth_read($p0, 1);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i289 := $and.i64($i288, 3);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i290 := $eq.i64($i289, 0);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i4 := 6;
    assume true;
    goto $bb949, $bb950;

  $bb950:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb951;

  $bb951:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb952, $bb953;

  $bb953:
    assume !(1 == 1);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    goto $bb954;

  $bb954:
    assume {:verifier.code 0} true;
    goto $bb955;

  $bb955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb956;

  $bb956:
    assume {:verifier.code 0} true;
    goto $bb957;

  $bb957:
    assume {:verifier.code 0} true;
    goto $bb958;

  $bb958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $i291 := sh_eth_read($p0, 1);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i292 := $and.i64($i291, 3);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i293 := $eq.i64($i292, 0);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i4 := 5;
    assume {:branchcond $i293} true;
    goto $bb959, $bb960;

  $bb960:
    assume !($i293 == 1);
    assume {:verifier.code 0} true;
    goto $bb961;

  $bb961:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb962, $bb963;

  $bb963:
    assume !(1 == 1);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    goto $bb964;

  $bb964:
    assume {:verifier.code 0} true;
    goto $bb965;

  $bb965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb966;

  $bb966:
    assume {:verifier.code 0} true;
    goto $bb967;

  $bb967:
    assume {:verifier.code 0} true;
    goto $bb968;

  $bb968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} $i294 := sh_eth_read($p0, 1);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i295 := $and.i64($i294, 3);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i296 := $eq.i64($i295, 0);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i4 := 4;
    assume {:branchcond $i296} true;
    goto $bb969, $bb970;

  $bb970:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb971;

  $bb971:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb972, $bb973;

  $bb973:
    assume !(1 == 1);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    goto $bb974;

  $bb974:
    assume {:verifier.code 0} true;
    goto $bb975;

  $bb975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb976;

  $bb976:
    assume {:verifier.code 0} true;
    goto $bb977;

  $bb977:
    assume {:verifier.code 0} true;
    goto $bb978;

  $bb978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} $i297 := sh_eth_read($p0, 1);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i298 := $and.i64($i297, 3);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i299 := $eq.i64($i298, 0);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i4 := 3;
    assume {:branchcond $i299} true;
    goto $bb979, $bb980;

  $bb980:
    assume !($i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb981;

  $bb981:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb982, $bb983;

  $bb983:
    assume !(1 == 1);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    goto $bb984;

  $bb984:
    assume {:verifier.code 0} true;
    goto $bb985;

  $bb985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb986;

  $bb986:
    assume {:verifier.code 0} true;
    goto $bb987;

  $bb987:
    assume {:verifier.code 0} true;
    goto $bb988;

  $bb988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} $i300 := sh_eth_read($p0, 1);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i301 := $and.i64($i300, 3);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i302 := $eq.i64($i301, 0);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i4 := 2;
    assume true;
    goto $bb989, $bb990;

  $bb990:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb991;

  $bb991:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb992, $bb993;

  $bb993:
    assume !(1 == 1);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    goto $bb994;

  $bb994:
    assume {:verifier.code 0} true;
    goto $bb995;

  $bb995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb996;

  $bb996:
    assume {:verifier.code 0} true;
    goto $bb997;

  $bb997:
    assume {:verifier.code 0} true;
    goto $bb998;

  $bb998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $i303 := sh_eth_read($p0, 1);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i304 := $and.i64($i303, 3);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $i305 := $eq.i64($i304, 0);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume true;
    goto $bb999, $bb1000;

  $bb1000:
    assume !($i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb1001;

  $bb1001:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1002, $bb1003;

  $bb1003:
    assume !(1 == 1);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    goto $bb1004;

  $bb1004:
    assume {:verifier.code 0} true;
    goto $bb1005;

  $bb1005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1006;

  $bb1006:
    assume {:verifier.code 0} true;
    goto $bb1007;

  $bb1007:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $i6 := $sle.i32($i5, 0);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb16:
    assume $i6 == 1;
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} vslice_dummy_var_37 := netdev_err.ref.ref($p0, .str.38);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 110);
    goto $bb18;

  $bb1002:
    assume 1 == 1;
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} __const_udelay(4295000);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    goto $bb1007;

  $bb999:
    assume {:verifier.code 0} true;
    assume $i305 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb6;

  $bb992:
    assume 1 == 1;
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} __const_udelay(4295000);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    goto $bb997;

  $bb989:
    assume {:verifier.code 0} true;
    assume $i302 == 1;
    goto $bb4;

  $bb982:
    assume 1 == 1;
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} __const_udelay(4295000);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    goto $bb987;

  $bb979:
    assume {:verifier.code 0} true;
    assume $i299 == 1;
    goto $bb4;

  $bb972:
    assume 1 == 1;
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} __const_udelay(4295000);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    goto $bb977;

  $bb969:
    assume {:verifier.code 0} true;
    assume $i296 == 1;
    goto $bb4;

  $bb962:
    assume 1 == 1;
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} __const_udelay(4295000);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    goto $bb967;

  $bb959:
    assume {:verifier.code 0} true;
    assume $i293 == 1;
    goto $bb4;

  $bb952:
    assume 1 == 1;
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} __const_udelay(4295000);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    goto $bb957;

  $bb949:
    assume {:verifier.code 0} true;
    assume $i290 == 1;
    goto $bb4;

  $bb942:
    assume 1 == 1;
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} __const_udelay(4295000);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    goto $bb947;

  $bb939:
    assume {:verifier.code 0} true;
    assume $i287 == 1;
    goto $bb4;

  $bb932:
    assume 1 == 1;
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} __const_udelay(4295000);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    goto $bb937;

  $bb929:
    assume {:verifier.code 0} true;
    assume $i284 == 1;
    goto $bb4;

  $bb922:
    assume 1 == 1;
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} __const_udelay(4295000);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    goto $bb927;

  $bb919:
    assume {:verifier.code 0} true;
    assume $i281 == 1;
    goto $bb4;

  $bb912:
    assume 1 == 1;
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} __const_udelay(4295000);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    goto $bb917;

  $bb909:
    assume {:verifier.code 0} true;
    assume $i278 == 1;
    goto $bb4;

  $bb902:
    assume 1 == 1;
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} __const_udelay(4295000);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    goto $bb907;

  $bb899:
    assume {:verifier.code 0} true;
    assume $i275 == 1;
    goto $bb4;

  $bb892:
    assume 1 == 1;
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} __const_udelay(4295000);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    goto $bb897;

  $bb889:
    assume {:verifier.code 0} true;
    assume $i272 == 1;
    goto $bb4;

  $bb882:
    assume 1 == 1;
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} __const_udelay(4295000);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    goto $bb887;

  $bb879:
    assume {:verifier.code 0} true;
    assume $i269 == 1;
    goto $bb4;

  $bb872:
    assume 1 == 1;
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} __const_udelay(4295000);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    goto $bb877;

  $bb869:
    assume {:verifier.code 0} true;
    assume $i266 == 1;
    goto $bb4;

  $bb862:
    assume 1 == 1;
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} __const_udelay(4295000);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    goto $bb867;

  $bb859:
    assume {:verifier.code 0} true;
    assume $i263 == 1;
    goto $bb4;

  $bb852:
    assume 1 == 1;
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} __const_udelay(4295000);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    goto $bb857;

  $bb849:
    assume {:verifier.code 0} true;
    assume $i260 == 1;
    goto $bb4;

  $bb842:
    assume 1 == 1;
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} __const_udelay(4295000);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    goto $bb847;

  $bb839:
    assume {:verifier.code 0} true;
    assume $i257 == 1;
    goto $bb4;

  $bb832:
    assume 1 == 1;
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} __const_udelay(4295000);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    goto $bb837;

  $bb829:
    assume {:verifier.code 0} true;
    assume $i254 == 1;
    goto $bb4;

  $bb822:
    assume 1 == 1;
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} __const_udelay(4295000);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    goto $bb827;

  $bb819:
    assume {:verifier.code 0} true;
    assume $i251 == 1;
    goto $bb4;

  $bb812:
    assume 1 == 1;
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} __const_udelay(4295000);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    goto $bb817;

  $bb809:
    assume {:verifier.code 0} true;
    assume $i248 == 1;
    goto $bb4;

  $bb802:
    assume 1 == 1;
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} __const_udelay(4295000);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    goto $bb807;

  $bb799:
    assume {:verifier.code 0} true;
    assume $i245 == 1;
    goto $bb4;

  $bb792:
    assume 1 == 1;
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} __const_udelay(4295000);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    goto $bb797;

  $bb789:
    assume {:verifier.code 0} true;
    assume $i242 == 1;
    goto $bb4;

  $bb782:
    assume 1 == 1;
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} __const_udelay(4295000);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    goto $bb787;

  $bb779:
    assume {:verifier.code 0} true;
    assume $i239 == 1;
    goto $bb4;

  $bb772:
    assume 1 == 1;
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} __const_udelay(4295000);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    goto $bb777;

  $bb769:
    assume {:verifier.code 0} true;
    assume $i236 == 1;
    goto $bb4;

  $bb762:
    assume 1 == 1;
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} __const_udelay(4295000);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    goto $bb767;

  $bb759:
    assume {:verifier.code 0} true;
    assume $i233 == 1;
    goto $bb4;

  $bb752:
    assume 1 == 1;
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} __const_udelay(4295000);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    goto $bb757;

  $bb749:
    assume {:verifier.code 0} true;
    assume $i230 == 1;
    goto $bb4;

  $bb742:
    assume 1 == 1;
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} __const_udelay(4295000);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    goto $bb747;

  $bb739:
    assume {:verifier.code 0} true;
    assume $i227 == 1;
    goto $bb4;

  $bb732:
    assume 1 == 1;
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} __const_udelay(4295000);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    goto $bb737;

  $bb729:
    assume {:verifier.code 0} true;
    assume $i224 == 1;
    goto $bb4;

  $bb722:
    assume 1 == 1;
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} __const_udelay(4295000);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    goto $bb727;

  $bb719:
    assume {:verifier.code 0} true;
    assume $i221 == 1;
    goto $bb4;

  $bb712:
    assume 1 == 1;
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} __const_udelay(4295000);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    goto $bb717;

  $bb709:
    assume {:verifier.code 0} true;
    assume $i218 == 1;
    goto $bb4;

  $bb702:
    assume 1 == 1;
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} __const_udelay(4295000);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    goto $bb707;

  $bb699:
    assume {:verifier.code 0} true;
    assume $i215 == 1;
    goto $bb4;

  $bb692:
    assume 1 == 1;
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} __const_udelay(4295000);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    goto $bb697;

  $bb689:
    assume {:verifier.code 0} true;
    assume $i212 == 1;
    goto $bb4;

  $bb682:
    assume 1 == 1;
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} __const_udelay(4295000);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    goto $bb687;

  $bb679:
    assume {:verifier.code 0} true;
    assume $i209 == 1;
    goto $bb4;

  $bb672:
    assume 1 == 1;
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} __const_udelay(4295000);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    goto $bb677;

  $bb669:
    assume {:verifier.code 0} true;
    assume $i206 == 1;
    goto $bb4;

  $bb662:
    assume 1 == 1;
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} __const_udelay(4295000);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    goto $bb667;

  $bb659:
    assume {:verifier.code 0} true;
    assume $i203 == 1;
    goto $bb4;

  $bb652:
    assume 1 == 1;
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} __const_udelay(4295000);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    goto $bb657;

  $bb649:
    assume {:verifier.code 0} true;
    assume $i200 == 1;
    goto $bb4;

  $bb642:
    assume 1 == 1;
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} __const_udelay(4295000);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    goto $bb647;

  $bb639:
    assume {:verifier.code 0} true;
    assume $i197 == 1;
    goto $bb4;

  $bb632:
    assume 1 == 1;
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} __const_udelay(4295000);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    goto $bb637;

  $bb629:
    assume {:verifier.code 0} true;
    assume $i194 == 1;
    goto $bb4;

  $bb622:
    assume 1 == 1;
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} __const_udelay(4295000);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    goto $bb627;

  $bb619:
    assume {:verifier.code 0} true;
    assume $i191 == 1;
    goto $bb4;

  $bb612:
    assume 1 == 1;
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} __const_udelay(4295000);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    goto $bb617;

  $bb609:
    assume {:verifier.code 0} true;
    assume $i188 == 1;
    goto $bb4;

  $bb602:
    assume 1 == 1;
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} __const_udelay(4295000);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    goto $bb607;

  $bb599:
    assume {:verifier.code 0} true;
    assume $i185 == 1;
    goto $bb4;

  $bb592:
    assume 1 == 1;
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} __const_udelay(4295000);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    goto $bb597;

  $bb589:
    assume {:verifier.code 0} true;
    assume $i182 == 1;
    goto $bb4;

  $bb582:
    assume 1 == 1;
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} __const_udelay(4295000);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb579:
    assume {:verifier.code 0} true;
    assume $i179 == 1;
    goto $bb4;

  $bb572:
    assume 1 == 1;
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} __const_udelay(4295000);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    goto $bb577;

  $bb569:
    assume {:verifier.code 0} true;
    assume $i176 == 1;
    goto $bb4;

  $bb562:
    assume 1 == 1;
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} __const_udelay(4295000);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    goto $bb567;

  $bb559:
    assume {:verifier.code 0} true;
    assume $i173 == 1;
    goto $bb4;

  $bb552:
    assume 1 == 1;
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} __const_udelay(4295000);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    goto $bb557;

  $bb549:
    assume {:verifier.code 0} true;
    assume $i170 == 1;
    goto $bb4;

  $bb542:
    assume 1 == 1;
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} __const_udelay(4295000);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    goto $bb547;

  $bb539:
    assume {:verifier.code 0} true;
    assume $i167 == 1;
    goto $bb4;

  $bb532:
    assume 1 == 1;
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} __const_udelay(4295000);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    goto $bb537;

  $bb529:
    assume {:verifier.code 0} true;
    assume $i164 == 1;
    goto $bb4;

  $bb522:
    assume 1 == 1;
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} __const_udelay(4295000);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    goto $bb527;

  $bb519:
    assume {:verifier.code 0} true;
    assume $i161 == 1;
    goto $bb4;

  $bb512:
    assume 1 == 1;
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} __const_udelay(4295000);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    goto $bb517;

  $bb509:
    assume {:verifier.code 0} true;
    assume $i158 == 1;
    goto $bb4;

  $bb502:
    assume 1 == 1;
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} __const_udelay(4295000);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb499:
    assume {:verifier.code 0} true;
    assume $i155 == 1;
    goto $bb4;

  $bb492:
    assume 1 == 1;
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} __const_udelay(4295000);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    goto $bb497;

  $bb489:
    assume {:verifier.code 0} true;
    assume $i152 == 1;
    goto $bb4;

  $bb482:
    assume 1 == 1;
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} __const_udelay(4295000);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb479:
    assume {:verifier.code 0} true;
    assume $i149 == 1;
    goto $bb4;

  $bb472:
    assume 1 == 1;
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} __const_udelay(4295000);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    goto $bb477;

  $bb469:
    assume {:verifier.code 0} true;
    assume $i146 == 1;
    goto $bb4;

  $bb462:
    assume 1 == 1;
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} __const_udelay(4295000);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb459:
    assume {:verifier.code 0} true;
    assume $i143 == 1;
    goto $bb4;

  $bb452:
    assume 1 == 1;
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} __const_udelay(4295000);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    goto $bb457;

  $bb449:
    assume {:verifier.code 0} true;
    assume $i140 == 1;
    goto $bb4;

  $bb442:
    assume 1 == 1;
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} __const_udelay(4295000);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb439:
    assume {:verifier.code 0} true;
    assume $i137 == 1;
    goto $bb4;

  $bb432:
    assume 1 == 1;
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} __const_udelay(4295000);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb429:
    assume {:verifier.code 0} true;
    assume $i134 == 1;
    goto $bb4;

  $bb422:
    assume 1 == 1;
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} __const_udelay(4295000);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb419:
    assume {:verifier.code 0} true;
    assume $i131 == 1;
    goto $bb4;

  $bb412:
    assume 1 == 1;
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} __const_udelay(4295000);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb409:
    assume {:verifier.code 0} true;
    assume $i128 == 1;
    goto $bb4;

  $bb402:
    assume 1 == 1;
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} __const_udelay(4295000);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb399:
    assume {:verifier.code 0} true;
    assume $i125 == 1;
    goto $bb4;

  $bb392:
    assume 1 == 1;
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} __const_udelay(4295000);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb389:
    assume {:verifier.code 0} true;
    assume $i122 == 1;
    goto $bb4;

  $bb382:
    assume 1 == 1;
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} __const_udelay(4295000);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb379:
    assume {:verifier.code 0} true;
    assume $i119 == 1;
    goto $bb4;

  $bb372:
    assume 1 == 1;
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} __const_udelay(4295000);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb369:
    assume {:verifier.code 0} true;
    assume $i116 == 1;
    goto $bb4;

  $bb362:
    assume 1 == 1;
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} __const_udelay(4295000);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb359:
    assume {:verifier.code 0} true;
    assume $i113 == 1;
    goto $bb4;

  $bb352:
    assume 1 == 1;
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} __const_udelay(4295000);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb349:
    assume {:verifier.code 0} true;
    assume $i110 == 1;
    goto $bb4;

  $bb342:
    assume 1 == 1;
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} __const_udelay(4295000);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb339:
    assume {:verifier.code 0} true;
    assume $i107 == 1;
    goto $bb4;

  $bb332:
    assume 1 == 1;
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} __const_udelay(4295000);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb329:
    assume {:verifier.code 0} true;
    assume $i104 == 1;
    goto $bb4;

  $bb322:
    assume 1 == 1;
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} __const_udelay(4295000);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb319:
    assume {:verifier.code 0} true;
    assume $i101 == 1;
    goto $bb4;

  $bb312:
    assume 1 == 1;
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} __const_udelay(4295000);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb309:
    assume {:verifier.code 0} true;
    assume $i98 == 1;
    goto $bb4;

  $bb302:
    assume 1 == 1;
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} __const_udelay(4295000);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb299:
    assume {:verifier.code 0} true;
    assume $i95 == 1;
    goto $bb4;

  $bb292:
    assume 1 == 1;
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} __const_udelay(4295000);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb289:
    assume {:verifier.code 0} true;
    assume $i92 == 1;
    goto $bb4;

  $bb282:
    assume 1 == 1;
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} __const_udelay(4295000);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb279:
    assume {:verifier.code 0} true;
    assume $i89 == 1;
    goto $bb4;

  $bb272:
    assume 1 == 1;
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} __const_udelay(4295000);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb269:
    assume {:verifier.code 0} true;
    assume $i86 == 1;
    goto $bb4;

  $bb262:
    assume 1 == 1;
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} __const_udelay(4295000);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb259:
    assume {:verifier.code 0} true;
    assume $i83 == 1;
    goto $bb4;

  $bb252:
    assume 1 == 1;
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} __const_udelay(4295000);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb249:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb4;

  $bb242:
    assume 1 == 1;
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} __const_udelay(4295000);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb239:
    assume {:verifier.code 0} true;
    assume $i77 == 1;
    goto $bb4;

  $bb232:
    assume 1 == 1;
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} __const_udelay(4295000);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb229:
    assume {:verifier.code 0} true;
    assume $i74 == 1;
    goto $bb4;

  $bb222:
    assume 1 == 1;
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} __const_udelay(4295000);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb219:
    assume {:verifier.code 0} true;
    assume $i71 == 1;
    goto $bb4;

  $bb212:
    assume 1 == 1;
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} __const_udelay(4295000);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb209:
    assume {:verifier.code 0} true;
    assume $i68 == 1;
    goto $bb4;

  $bb202:
    assume 1 == 1;
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} __const_udelay(4295000);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb199:
    assume {:verifier.code 0} true;
    assume $i65 == 1;
    goto $bb4;

  $bb192:
    assume 1 == 1;
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} __const_udelay(4295000);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb189:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb4;

  $bb182:
    assume 1 == 1;
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} __const_udelay(4295000);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb179:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb4;

  $bb172:
    assume 1 == 1;
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} __const_udelay(4295000);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb169:
    assume {:verifier.code 0} true;
    assume $i56 == 1;
    goto $bb4;

  $bb162:
    assume 1 == 1;
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} __const_udelay(4295000);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb159:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb4;

  $bb152:
    assume 1 == 1;
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} __const_udelay(4295000);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb149:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb4;

  $bb142:
    assume 1 == 1;
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} __const_udelay(4295000);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb139:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb4;

  $bb132:
    assume 1 == 1;
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} __const_udelay(4295000);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb129:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb4;

  $bb122:
    assume 1 == 1;
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} __const_udelay(4295000);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb119:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb4;

  $bb112:
    assume 1 == 1;
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} __const_udelay(4295000);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb109:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb4;

  $bb102:
    assume 1 == 1;
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} __const_udelay(4295000);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb99:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb4;

  $bb92:
    assume 1 == 1;
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} __const_udelay(4295000);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb89:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb4;

  $bb82:
    assume 1 == 1;
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} __const_udelay(4295000);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb79:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb4;

  $bb72:
    assume 1 == 1;
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} __const_udelay(4295000);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb69:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb4;

  $bb62:
    assume 1 == 1;
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} __const_udelay(4295000);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb59:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb4;

  $bb52:
    assume 1 == 1;
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} __const_udelay(4295000);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb49:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb4;

  $bb42:
    assume 1 == 1;
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} __const_udelay(4295000);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb4;

  $bb32:
    assume 1 == 1;
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} __const_udelay(4295000);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb4;

  $bb22:
    assume 1 == 1;
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} __const_udelay(4295000);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb4;

  $bb8:
    assume 1 == 1;
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} __const_udelay(4295000);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb4;
}



const sh_eth_select_mii: ref;

axiom sh_eth_select_mii == $sub.ref(0, 197094);

procedure sh_eth_select_mii($p0: ref);
  free requires assertsPassed;



implementation sh_eth_select_mii($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i12: i64;
  var vslice_dummy_var_38: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} $p1 := netdev_priv($p0);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(404, 1));
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i4, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i4, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} vslice_dummy_var_38 := netdev_warn.ref.ref($p0, .str.39);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i10);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} sh_eth_write($p0, $i12, 64);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb13;

  $bb4:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb9:
    assume $i8 == 1;
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i10 := 2;
    goto $bb13;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb13;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 198126);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    return;
}



const netdev_warn: ref;

axiom netdev_warn == $sub.ref(0, 199158);

procedure netdev_warn.ref.ref.i64.i64($p0: ref, $p1: ref, p.2: i64, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_warn.ref.ref.i64.i64($p0: ref, $p1: ref, p.2: i64, p.3: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 1} true;
    call {:si_unique_call 651} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 652} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure netdev_warn.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_warn.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 1} true;
    call {:si_unique_call 653} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 654} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_set_remove: ref;

axiom ldv_set_remove == $sub.ref(0, 200190);

procedure ldv_set_remove($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.2;



implementation ldv_set_remove($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i5: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i2 := $M.2;
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32(0, $i2);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i16 == 1;
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i5, 1);
    call {:si_unique_call 656} {:cexpr "i"} boogie_si_record_i32($i17);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $i18 := $M.2;
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i17, $i18);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i30 := $M.2;
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32($i30, 1);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $M.2 := $i31;
    call {:si_unique_call 658} {:cexpr "last_index"} boogie_si_record_i32($i31);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i20 := $i17;
    goto $bb17;

  $bb17:
    call $i20, $i21, $p22, $p23, $i24, $i25, $p26, $i27, $i28, $i29 := ldv_set_remove_loop_$bb17($i20, $i21, $p22, $p23, $i24, $i25, $p26, $i27, $i28, $i29);
    goto $bb17_last;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i21, 8));
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.3, $p22);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i20, 1);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i25, 8));
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p26, $p23);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i20, 1);
    call {:si_unique_call 657} {:cexpr "i"} boogie_si_record_i32($i27);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i28 := $M.2;
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i27, $i28);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb19;

  $bb19:
    assume !($i29 == 1);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb21:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i20 := $i27;
    goto $bb21_dummy;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $i4, $i6, $p7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15 := ldv_set_remove_loop_$bb4($p1, $i4, $i6, $p7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15);
    goto $bb4_last;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i4);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i6, 8));
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.3, $p7);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p1);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i9, $i10);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i12 := $i4;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i4, 1);
    call {:si_unique_call 655} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i14 := $M.2;
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i13, $i14);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb6;

  $bb6:
    assume !($i15 == 1);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i13;
    goto $bb11_dummy;

  $bb8:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i5 := $i12;
    goto $bb7;

  $bb21_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2380;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2353;
}



const netif_tx_stop_queue: ref;

axiom netif_tx_stop_queue == $sub.ref(0, 201222);

procedure netif_tx_stop_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_stop_queue($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var vslice_dummy_var_39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    call {:si_unique_call 659} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i3);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 661} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i3, 0);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 664} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} set_bit(0, $p15);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} vslice_dummy_var_39 := printk.ref(.str.35);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} warn_slowpath_null(.str.34, 2212);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 202254);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 203286);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 1} true;
    call {:si_unique_call 668} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 669} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 204318);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 671} devirtbounce.1(0, $p1, $i0, $p1);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    return;
}



const netif_running: ref;

axiom netif_running == $sub.ref(0, 205350);

procedure netif_running($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_running($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(72, 1));
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 673} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const phy_mii_ioctl: ref;

axiom phy_mii_ioctl == $sub.ref(0, 206382);

procedure phy_mii_ioctl($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation phy_mii_ioctl($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 674} {:cexpr "phy_mii_ioctl:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 1} true;
    call {:si_unique_call 675} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 676} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 207414);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 208446);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 209478);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 1} true;
    call {:si_unique_call 678} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 679} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const sh_eth_tsu_purge_mcast: ref;

axiom sh_eth_tsu_purge_mcast == $sub.ref(0, 210510);

procedure sh_eth_tsu_purge_mcast($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr;



implementation sh_eth_tsu_purge_mcast($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i1;
  var $i21: i8;
  var $i22: i1;
  var $p23: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i1;
  var $i16: i32;
  var $p17: ref;
  var vslice_dummy_var_40: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} $p1 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $p2 := netdev_priv($p0);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $p4 := sh_eth_tsu_get_offset($p3, 93);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(104, 1));
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 684} {:cexpr "tmp___1"} boogie_si_record_i64($i14);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i16, $p17 := 0, $p4;
    goto $bb5;

  $bb5:
    call $p18, $p19, $i20, $i21, $i22, $p23, $i25, $p26, $i27, $i16, $p17, vslice_dummy_var_40 := sh_eth_tsu_purge_mcast_loop_$bb5($p0, $p1, $p18, $p19, $i20, $i21, $i22, $p23, $i25, $p26, $i27, $i16, $p17, vslice_dummy_var_40);
    goto $bb5_last;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p1);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} sh_eth_tsu_read_entry($p17, $p18);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p1);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $i20 := is_multicast_ether_addr($p19);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i8($i20);
    call {:si_unique_call 687} {:cexpr "tmp___2"} boogie_si_record_i8($i21);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i21);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i16, 1);
    call {:si_unique_call 689} {:cexpr "i"} boogie_si_record_i32($i25);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p17, $mul.ref(8, 1));
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i27 := $sle.i32($i25, 31);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i16, $p17 := $i25, $p26;
    goto $bb10_dummy;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p1);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} vslice_dummy_var_40 := sh_eth_tsu_del_entry($p0, $p23);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2475;
}



const sh_eth_tsu_purge_all: ref;

axiom sh_eth_tsu_purge_all == $sub.ref(0, 211542);

procedure sh_eth_tsu_purge_all($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.5, $CurrAddr;



implementation sh_eth_tsu_purge_all($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i15: i1;
  var $i16: i8;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i14: i32;
  var $i21: i1;
  var $i22: i8;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i1;
  var $i27: i8;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $i32: i8;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $i37: i8;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i41: i1;
  var $i42: i8;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i1;
  var $i47: i8;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $i51: i1;
  var $i52: i8;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $i56: i1;
  var $i57: i8;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $i61: i1;
  var $i62: i8;
  var $i63: i1;
  var $i64: i32;
  var $i65: i1;
  var $i66: i1;
  var $i67: i8;
  var $i68: i1;
  var $i69: i32;
  var $i70: i1;
  var $i71: i1;
  var $i72: i8;
  var $i73: i1;
  var $i74: i32;
  var $i75: i1;
  var $i76: i1;
  var $i77: i8;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $i81: i1;
  var $i82: i8;
  var $i83: i1;
  var $i84: i32;
  var $i85: i1;
  var $i86: i1;
  var $i87: i8;
  var $i88: i1;
  var $i89: i32;
  var $i90: i1;
  var $i91: i1;
  var $i92: i8;
  var $i93: i1;
  var $i94: i32;
  var $i95: i1;
  var $i96: i1;
  var $i97: i8;
  var $i98: i1;
  var $i99: i32;
  var $i100: i1;
  var $i101: i1;
  var $i102: i8;
  var $i103: i1;
  var $i104: i32;
  var $i105: i1;
  var $i106: i1;
  var $i107: i8;
  var $i108: i1;
  var $i109: i32;
  var $i110: i1;
  var $i111: i1;
  var $i112: i8;
  var $i113: i1;
  var $i114: i32;
  var $i115: i1;
  var $i116: i1;
  var $i117: i8;
  var $i118: i1;
  var $i119: i32;
  var $i120: i1;
  var $i121: i1;
  var $i122: i8;
  var $i123: i1;
  var $i124: i32;
  var $i125: i1;
  var $i126: i1;
  var $i127: i8;
  var $i128: i1;
  var $i129: i32;
  var $i130: i1;
  var $i131: i1;
  var $i132: i8;
  var $i133: i1;
  var $i134: i32;
  var $i135: i1;
  var $i136: i1;
  var $i137: i8;
  var $i138: i1;
  var $i139: i32;
  var $i140: i1;
  var $i141: i1;
  var $i142: i8;
  var $i143: i1;
  var $i144: i32;
  var $i145: i1;
  var $i146: i1;
  var $i147: i8;
  var $i148: i1;
  var $i149: i32;
  var $i150: i1;
  var $i151: i1;
  var $i152: i8;
  var $i153: i1;
  var $i154: i32;
  var $i155: i1;
  var $i156: i1;
  var $i157: i8;
  var $i158: i1;
  var $i159: i32;
  var $i160: i1;
  var $i161: i1;
  var $i162: i8;
  var $i163: i1;
  var $i164: i32;
  var $i165: i1;
  var $i166: i1;
  var $i167: i8;
  var $i168: i1;
  var $i169: i32;
  var $i170: i1;
  var $i171: i1;
  var $i172: i8;
  var $i173: i1;
  var $i174: i32;
  var $i175: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} $p1 := netdev_priv($p0);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(104, 1));
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 692} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $i15 := sh_eth_tsu_disable_cam_entry_post($p0, 0);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i8($i15);
    call {:si_unique_call 694} {:cexpr "tmp___1"} boogie_si_record_i8($i16);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} $i18 := sh_eth_tsu_disable_cam_entry_table($p0, 0);
    call {:si_unique_call 696} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 0);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i20 := $i18;
    assume {:branchcond $i19} true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $i21 := sh_eth_tsu_disable_cam_entry_post($p0, 1);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i8($i21);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i22);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $i24 := sh_eth_tsu_disable_cam_entry_table($p0, 1);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 0);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i20 := $i24;
    assume {:branchcond $i25} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} $i26 := sh_eth_tsu_disable_cam_entry_post($p0, 2);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i8($i26);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} $i29 := sh_eth_tsu_disable_cam_entry_table($p0, 2);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i29, 0);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i20 := $i29;
    assume {:branchcond $i30} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} $i31 := sh_eth_tsu_disable_cam_entry_post($p0, 3);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i8($i31);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1($i32);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} $i34 := sh_eth_tsu_disable_cam_entry_table($p0, 3);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i34, 0);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i20 := $i34;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} $i36 := sh_eth_tsu_disable_cam_entry_post($p0, 4);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i8($i36);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} $i39 := sh_eth_tsu_disable_cam_entry_table($p0, 4);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i39, 0);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $i20 := $i39;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $i41 := sh_eth_tsu_disable_cam_entry_post($p0, 5);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i8($i41);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i8.i1($i42);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} $i44 := sh_eth_tsu_disable_cam_entry_table($p0, 5);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i44, 0);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i20 := $i44;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $i46 := sh_eth_tsu_disable_cam_entry_post($p0, 6);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i8($i46);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i8.i1($i47);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $i49 := sh_eth_tsu_disable_cam_entry_table($p0, 6);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i49, 0);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i20 := $i49;
    assume {:branchcond $i50} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $i51 := sh_eth_tsu_disable_cam_entry_post($p0, 7);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i52 := $zext.i1.i8($i51);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i8.i1($i52);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} $i54 := sh_eth_tsu_disable_cam_entry_table($p0, 7);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i54, 0);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i20 := $i54;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $i56 := sh_eth_tsu_disable_cam_entry_post($p0, 8);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i57 := $zext.i1.i8($i56);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i8.i1($i57);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $i59 := sh_eth_tsu_disable_cam_entry_table($p0, 8);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i59, 0);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i20 := $i59;
    assume {:branchcond $i60} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} $i61 := sh_eth_tsu_disable_cam_entry_post($p0, 9);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i62 := $zext.i1.i8($i61);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i8.i1($i62);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} $i64 := sh_eth_tsu_disable_cam_entry_table($p0, 9);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i64, 0);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i20 := $i64;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $i66 := sh_eth_tsu_disable_cam_entry_post($p0, 10);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i67 := $zext.i1.i8($i66);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i8.i1($i67);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $i69 := sh_eth_tsu_disable_cam_entry_table($p0, 10);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i69, 0);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $i20 := $i69;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $i71 := sh_eth_tsu_disable_cam_entry_post($p0, 11);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i72 := $zext.i1.i8($i71);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i8.i1($i72);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $i74 := sh_eth_tsu_disable_cam_entry_table($p0, 11);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i74, 0);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i20 := $i74;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} $i76 := sh_eth_tsu_disable_cam_entry_post($p0, 12);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $i77 := $zext.i1.i8($i76);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i8.i1($i77);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} $i79 := sh_eth_tsu_disable_cam_entry_table($p0, 12);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i79, 0);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i20 := $i79;
    assume {:branchcond $i80} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $i81 := sh_eth_tsu_disable_cam_entry_post($p0, 13);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i82 := $zext.i1.i8($i81);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i8.i1($i82);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} $i84 := sh_eth_tsu_disable_cam_entry_table($p0, 13);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i85 := $slt.i32($i84, 0);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i20 := $i84;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} $i86 := sh_eth_tsu_disable_cam_entry_post($p0, 14);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i87 := $zext.i1.i8($i86);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i8.i1($i87);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} $i89 := sh_eth_tsu_disable_cam_entry_table($p0, 14);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i90 := $slt.i32($i89, 0);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i20 := $i89;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} $i91 := sh_eth_tsu_disable_cam_entry_post($p0, 15);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i92 := $zext.i1.i8($i91);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i8.i1($i92);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $i94 := sh_eth_tsu_disable_cam_entry_table($p0, 15);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i95 := $slt.i32($i94, 0);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i20 := $i94;
    assume {:branchcond $i95} true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} $i96 := sh_eth_tsu_disable_cam_entry_post($p0, 16);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $i97 := $zext.i1.i8($i96);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i8.i1($i97);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} $i99 := sh_eth_tsu_disable_cam_entry_table($p0, 16);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i99, 0);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i20 := $i99;
    assume {:branchcond $i100} true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} $i101 := sh_eth_tsu_disable_cam_entry_post($p0, 17);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i102 := $zext.i1.i8($i101);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i8.i1($i102);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $i104 := sh_eth_tsu_disable_cam_entry_table($p0, 17);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i105 := $slt.i32($i104, 0);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i20 := $i104;
    assume {:branchcond $i105} true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} $i106 := sh_eth_tsu_disable_cam_entry_post($p0, 18);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i107 := $zext.i1.i8($i106);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i8.i1($i107);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $i109 := sh_eth_tsu_disable_cam_entry_table($p0, 18);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i110 := $slt.i32($i109, 0);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i20 := $i109;
    assume true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} $i111 := sh_eth_tsu_disable_cam_entry_post($p0, 19);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i112 := $zext.i1.i8($i111);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i8.i1($i112);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} $i114 := sh_eth_tsu_disable_cam_entry_table($p0, 19);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i115 := $slt.i32($i114, 0);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i20 := $i114;
    assume {:branchcond $i115} true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} $i116 := sh_eth_tsu_disable_cam_entry_post($p0, 20);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i117 := $zext.i1.i8($i116);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i8.i1($i117);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} $i119 := sh_eth_tsu_disable_cam_entry_table($p0, 20);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i120 := $slt.i32($i119, 0);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i20 := $i119;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} $i121 := sh_eth_tsu_disable_cam_entry_post($p0, 21);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i122 := $zext.i1.i8($i121);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i8.i1($i122);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} $i124 := sh_eth_tsu_disable_cam_entry_table($p0, 21);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $i125 := $slt.i32($i124, 0);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i20 := $i124;
    assume true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} $i126 := sh_eth_tsu_disable_cam_entry_post($p0, 22);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i127 := $zext.i1.i8($i126);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i128 := $trunc.i8.i1($i127);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} $i129 := sh_eth_tsu_disable_cam_entry_table($p0, 22);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i130 := $slt.i32($i129, 0);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i20 := $i129;
    assume true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $i131 := sh_eth_tsu_disable_cam_entry_post($p0, 23);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i132 := $zext.i1.i8($i131);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i133 := $trunc.i8.i1($i132);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} $i134 := sh_eth_tsu_disable_cam_entry_table($p0, 23);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i135 := $slt.i32($i134, 0);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i20 := $i134;
    assume {:branchcond $i135} true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} $i136 := sh_eth_tsu_disable_cam_entry_post($p0, 24);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i137 := $zext.i1.i8($i136);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i138 := $trunc.i8.i1($i137);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} $i139 := sh_eth_tsu_disable_cam_entry_table($p0, 24);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i140 := $slt.i32($i139, 0);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i20 := $i139;
    assume {:branchcond $i140} true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} $i141 := sh_eth_tsu_disable_cam_entry_post($p0, 25);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i142 := $zext.i1.i8($i141);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i143 := $trunc.i8.i1($i142);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $i144 := sh_eth_tsu_disable_cam_entry_table($p0, 25);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i145 := $slt.i32($i144, 0);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i20 := $i144;
    assume true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} $i146 := sh_eth_tsu_disable_cam_entry_post($p0, 26);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i147 := $zext.i1.i8($i146);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i148 := $trunc.i8.i1($i147);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} $i149 := sh_eth_tsu_disable_cam_entry_table($p0, 26);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i150 := $slt.i32($i149, 0);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i20 := $i149;
    assume {:branchcond $i150} true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $i151 := sh_eth_tsu_disable_cam_entry_post($p0, 27);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i152 := $zext.i1.i8($i151);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $i153 := $trunc.i8.i1($i152);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} $i154 := sh_eth_tsu_disable_cam_entry_table($p0, 27);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i155 := $slt.i32($i154, 0);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i20 := $i154;
    assume true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} $i156 := sh_eth_tsu_disable_cam_entry_post($p0, 28);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i157 := $zext.i1.i8($i156);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i158 := $trunc.i8.i1($i157);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $i159 := sh_eth_tsu_disable_cam_entry_table($p0, 28);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i160 := $slt.i32($i159, 0);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i20 := $i159;
    assume true;
    goto $bb236, $bb237;

  $bb237:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} $i161 := sh_eth_tsu_disable_cam_entry_post($p0, 29);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i162 := $zext.i1.i8($i161);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i8.i1($i162);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} $i164 := sh_eth_tsu_disable_cam_entry_table($p0, 29);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i165 := $slt.i32($i164, 0);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i20 := $i164;
    assume {:branchcond $i165} true;
    goto $bb244, $bb245;

  $bb245:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} $i166 := sh_eth_tsu_disable_cam_entry_post($p0, 30);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i167 := $zext.i1.i8($i166);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i168 := $trunc.i8.i1($i167);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb249, $bb250;

  $bb250:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} $i169 := sh_eth_tsu_disable_cam_entry_table($p0, 30);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i170 := $slt.i32($i169, 0);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i20 := $i169;
    assume true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} $i171 := sh_eth_tsu_disable_cam_entry_post($p0, 31);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i172 := $zext.i1.i8($i171);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i173 := $trunc.i8.i1($i172);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    assume {:branchcond $i173} true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $i174 := sh_eth_tsu_disable_cam_entry_table($p0, 31);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i175 := $slt.i32($i174, 0);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i20 := $i174;
    assume true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb260:
    assume {:verifier.code 0} true;
    assume $i175 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i14 := $i20;
    goto $bb3;

  $bb257:
    assume $i173 == 1;
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb252:
    assume {:verifier.code 0} true;
    assume $i170 == 1;
    goto $bb12;

  $bb249:
    assume $i168 == 1;
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb244:
    assume {:verifier.code 0} true;
    assume $i165 == 1;
    goto $bb12;

  $bb241:
    assume $i163 == 1;
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb236:
    assume {:verifier.code 0} true;
    assume $i160 == 1;
    goto $bb12;

  $bb233:
    assume $i158 == 1;
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb228:
    assume {:verifier.code 0} true;
    assume $i155 == 1;
    goto $bb12;

  $bb225:
    assume $i153 == 1;
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb220:
    assume {:verifier.code 0} true;
    assume $i150 == 1;
    goto $bb12;

  $bb217:
    assume $i148 == 1;
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb212:
    assume {:verifier.code 0} true;
    assume $i145 == 1;
    goto $bb12;

  $bb209:
    assume $i143 == 1;
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb204:
    assume {:verifier.code 0} true;
    assume $i140 == 1;
    goto $bb12;

  $bb201:
    assume $i138 == 1;
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb196:
    assume {:verifier.code 0} true;
    assume $i135 == 1;
    goto $bb12;

  $bb193:
    assume $i133 == 1;
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb188:
    assume {:verifier.code 0} true;
    assume $i130 == 1;
    goto $bb12;

  $bb185:
    assume $i128 == 1;
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb180:
    assume {:verifier.code 0} true;
    assume $i125 == 1;
    goto $bb12;

  $bb177:
    assume $i123 == 1;
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb172:
    assume {:verifier.code 0} true;
    assume $i120 == 1;
    goto $bb12;

  $bb169:
    assume $i118 == 1;
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb164:
    assume {:verifier.code 0} true;
    assume $i115 == 1;
    goto $bb12;

  $bb161:
    assume $i113 == 1;
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb156:
    assume {:verifier.code 0} true;
    assume $i110 == 1;
    goto $bb12;

  $bb153:
    assume $i108 == 1;
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb148:
    assume {:verifier.code 0} true;
    assume $i105 == 1;
    goto $bb12;

  $bb145:
    assume $i103 == 1;
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb140:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb12;

  $bb137:
    assume $i98 == 1;
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb132:
    assume {:verifier.code 0} true;
    assume $i95 == 1;
    goto $bb12;

  $bb129:
    assume $i93 == 1;
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb124:
    assume {:verifier.code 0} true;
    assume $i90 == 1;
    goto $bb12;

  $bb121:
    assume $i88 == 1;
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb116:
    assume {:verifier.code 0} true;
    assume $i85 == 1;
    goto $bb12;

  $bb113:
    assume $i83 == 1;
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb108:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb12;

  $bb105:
    assume $i78 == 1;
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb100:
    assume {:verifier.code 0} true;
    assume $i75 == 1;
    goto $bb12;

  $bb97:
    assume $i73 == 1;
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb92:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb12;

  $bb89:
    assume $i68 == 1;
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb84:
    assume {:verifier.code 0} true;
    assume $i65 == 1;
    goto $bb12;

  $bb81:
    assume $i63 == 1;
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb12;

  $bb73:
    assume $i58 == 1;
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb68:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb12;

  $bb65:
    assume $i53 == 1;
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb60:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb12;

  $bb57:
    assume $i48 == 1;
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb12;

  $bb49:
    assume $i43 == 1;
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb12;

  $bb41:
    assume $i38 == 1;
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb12;

  $bb33:
    assume $i33 == 1;
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb12;

  $bb25:
    assume $i28 == 1;
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb12;

  $bb17:
    assume $i23 == 1;
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb12;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;
}



const is_multicast_ether_addr: ref;

axiom is_multicast_ether_addr == $sub.ref(0, 212574);

procedure is_multicast_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_multicast_ether_addr($p0: ref) returns ($r: i1)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.0, $p0);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const sh_eth_tsu_add_entry: ref;

axiom sh_eth_tsu_add_entry == $sub.ref(0, 213606);

procedure sh_eth_tsu_add_entry($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.0, $CurrAddr;



implementation sh_eth_tsu_add_entry($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i64;
  var $i23: i32;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} $p2 := netdev_priv($p0);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $p4 := sh_eth_tsu_get_offset($p3, 93);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(104, 1));
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} $i13 := sh_eth_tsu_find_entry($p0, $p1);
    call {:si_unique_call 762} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i27 := $i13;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} sh_eth_tsu_enable_cam_entry_post($p0, $i27);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} $i15 := sh_eth_tsu_find_empty($p0);
    call {:si_unique_call 764} {:cexpr "i"} boogie_si_record_i32($i15);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i17 := $mul.i32($i15, 8);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p4, $mul.ref($i18, 1));
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} $i20 := sh_eth_tsu_write_entry($p0, $p19, $p1);
    call {:si_unique_call 766} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 0);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} $i22 := sh_eth_tsu_read($p3, 88);
    call {:si_unique_call 768} {:cexpr "tmp___1"} boogie_si_record_i64($i22);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(31, $i15);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i24 := $shl.i32(1, $i23);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $i26 := $or.i64($i22, $i25);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} sh_eth_tsu_write($p3, $i26, 88);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i27 := $i15;
    goto $bb13;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i12 := $i20;
    goto $bb3;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 214638);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 215670);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    return;
}



const sh_eth_tsu_get_offset: ref;

axiom sh_eth_tsu_get_offset == $sub.ref(0, 216702);

procedure sh_eth_tsu_get_offset($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation sh_eth_tsu_get_offset($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i16;
  var $i9: i64;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} {:cexpr "sh_eth_tsu_get_offset:arg:enum_index"} boogie_si_record_i32($i1);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(32, 1));
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(16, 1));
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i1);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p5, $mul.ref($i6, 2));
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i64($i8);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p3, $mul.ref($i9, 1));
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;
}



const sh_eth_tsu_find_entry: ref;

axiom sh_eth_tsu_find_entry == $sub.ref(0, 217734);

procedure sh_eth_tsu_find_entry($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation sh_eth_tsu_find_entry($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i8;
  var $i12: i1;
  var $i13: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i1;
  var $i6: i32;
  var $p7: ref;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} $p2 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} $p3 := netdev_priv($p0);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $p5 := sh_eth_tsu_get_offset($p4, 93);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i6, $p7 := 0, $p5;
    goto $bb1;

  $bb1:
    call $p8, $p9, $i10, $i11, $i12, $i13, $i15, $p16, $i17, $i6, $p7 := sh_eth_tsu_find_entry_loop_$bb1($p1, $p2, $p8, $p9, $i10, $i11, $i12, $i13, $i15, $p16, $i17, $i6, $p7);
    goto $bb1_last;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} sh_eth_tsu_read_entry($p7, $p8);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $i10 := ether_addr_equal($p1, $p9);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i10);
    call {:si_unique_call 780} {:cexpr "tmp___1"} boogie_si_record_i8($i11);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i13 := $i6;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i6, 1);
    call {:si_unique_call 781} {:cexpr "i"} boogie_si_record_i32($i15);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p7, $mul.ref(8, 1));
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i17 := $sle.i32($i15, 31);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 2);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb7:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i6, $p7 := $i15, $p16;
    goto $bb7_dummy;

  $bb3:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb5;

  $bb7_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2873;
}



const sh_eth_tsu_find_empty: ref;

axiom sh_eth_tsu_find_empty == $sub.ref(0, 218766);

procedure sh_eth_tsu_find_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.0, $CurrAddr;



implementation sh_eth_tsu_find_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $p1 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_4 := $M.4;
    call {:si_unique_call 783} cmdloc_dummy_var_5 := $memset.i8(cmdloc_dummy_var_4, $p2, 0, 6, $zext.i32.i64(1), 0 == 1);
    $M.4 := cmdloc_dummy_var_5;
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} $i4 := sh_eth_tsu_find_entry($p0, $p3);
    call {:si_unique_call 785} {:cexpr "entry"} boogie_si_record_i32($i4);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i5 := $sge.i32($i4, 0);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;
}



const sh_eth_tsu_write_entry: ref;

axiom sh_eth_tsu_write_entry == $sub.ref(0, 219798);

procedure sh_eth_tsu_write_entry($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sh_eth_tsu_write_entry($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i4, 24);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i9 := $shl.i32($i8, 16);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i5, $i9);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p2, $mul.ref(2, 1));
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i14 := $shl.i32($i13, 8);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i10, $i14);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p2, $mul.ref(3, 1));
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i15, $i18);
    call {:si_unique_call 786} {:cexpr "val"} boogie_si_record_i32($i19);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} iowrite32($i19, $p1);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} $i20 := sh_eth_tsu_busy($p0);
    call {:si_unique_call 789} {:cexpr "tmp"} boogie_si_record_i32($i20);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 0);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p2, $mul.ref(4, 1));
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i26 := $shl.i32($i25, 8);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p2, $mul.ref(5, 1));
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i26, $i29);
    call {:si_unique_call 790} {:cexpr "val"} boogie_si_record_i32($i30);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} iowrite32($i30, $p31);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $i32 := sh_eth_tsu_busy($p0);
    call {:si_unique_call 793} {:cexpr "tmp___0"} boogie_si_record_i32($i32);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, 0);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb5:
    assume $i33 == 1;
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 16);
    goto $bb3;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 16);
    goto $bb3;
}



const sh_eth_tsu_read: ref;

axiom sh_eth_tsu_read == $sub.ref(0, 220830);

procedure sh_eth_tsu_read($p0: ref, $i1: i32) returns ($r: i64);
  free requires assertsPassed;



implementation sh_eth_tsu_read($p0: ref, $i1: i32) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i16;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} {:cexpr "sh_eth_tsu_read:arg:enum_index"} boogie_si_record_i32($i1);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(32, 1));
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(16, 1));
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i1);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p5, $mul.ref($i6, 2));
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i64($i8);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p3, $mul.ref($i9, 1));
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $i11 := ioread32($p10);
    call {:si_unique_call 796} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const sh_eth_tsu_enable_cam_entry_post: ref;

axiom sh_eth_tsu_enable_cam_entry_post == $sub.ref(0, 221862);

procedure sh_eth_tsu_enable_cam_entry_post($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation sh_eth_tsu_enable_cam_entry_post($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} {:cexpr "sh_eth_tsu_enable_cam_entry_post:arg:entry"} boogie_si_record_i32($i1);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} $p2 := netdev_priv($p0);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} $p4 := sh_eth_tsu_get_post_reg_offset($p3, $i1);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} $i5 := ioread32($p4);
    call {:si_unique_call 801} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $i6 := sh_eth_tsu_get_post_bit($p3, $i1);
    call {:si_unique_call 803} {:cexpr "tmp___1"} boogie_si_record_i32($i6);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, $i5);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} iowrite32($i7, $p4);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    return;
}



const sh_eth_tsu_get_post_reg_offset: ref;

axiom sh_eth_tsu_get_post_reg_offset == $sub.ref(0, 222894);

procedure sh_eth_tsu_get_post_reg_offset($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation sh_eth_tsu_get_post_reg_offset($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} {:cexpr "sh_eth_tsu_get_post_reg_offset:arg:entry"} boogie_si_record_i32($i1);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $p2 := sh_eth_tsu_get_offset($p0, 89);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $i3 := $sdiv.i32($i1, 8);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i4 := $mul.i32($i3, 4);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const sh_eth_tsu_get_post_bit: ref;

axiom sh_eth_tsu_get_post_bit == $sub.ref(0, 223926);

procedure sh_eth_tsu_get_post_bit($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation sh_eth_tsu_get_post_bit($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} {:cexpr "sh_eth_tsu_get_post_bit:arg:entry"} boogie_si_record_i32($i1);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(420, 1));
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 1);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i5 := $ashr.i32(8, $i4);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i6 := $srem.i32($i1, 8);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(7, $i6);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i8 := $mul.i32($i7, 4);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i9 := $shl.i32($i5, $i8);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const sh_eth_tsu_busy: ref;

axiom sh_eth_tsu_busy == $sub.ref(0, 224958);

procedure sh_eth_tsu_busy($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sh_eth_tsu_busy($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i1;
  var $i12: i64;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i7: i32;
  var $i11: i32;
  var vslice_dummy_var_41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} $p1 := netdev_priv($p0);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} $i3 := sh_eth_tsu_read($p2, 87);
    call {:si_unique_call 810} {:cexpr "tmp___0"} boogie_si_record_i64($i3);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 1);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i7 := 50000;
    goto $bb4;

  $bb4:
    call $i8, $i9, $i12, $i13, $i14, $i15, $i7 := sh_eth_tsu_busy_loop_$bb4($p2, $i8, $i9, $i12, $i13, $i14, $i15, $i7);
    goto $bb4_last;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} __const_udelay(42950);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32($i7, 1);
    call {:si_unique_call 812} {:cexpr "timeout"} boogie_si_record_i32($i8);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i9 := $sle.i32($i8, 0);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $i12 := sh_eth_tsu_read($p2, 87);
    call {:si_unique_call 815} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i12);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 1);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i8;
    goto $bb10_dummy;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} vslice_dummy_var_41 := netdev_err.ref.ref.ref($p0, .str.40, .str.41);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 110);
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2993;
}



const sh_eth_tsu_read_entry: ref;

axiom sh_eth_tsu_read_entry == $sub.ref(0, 225990);

procedure sh_eth_tsu_read_entry($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation sh_eth_tsu_read_entry($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i8;
  var $i5: i32;
  var $i6: i8;
  var $p7: ref;
  var $i8: i32;
  var $i9: i8;
  var $p10: ref;
  var $i11: i8;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i8;
  var $p17: ref;
  var $i18: i8;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} $i2 := ioread32($p0);
    call {:si_unique_call 817} {:cexpr "val"} boogie_si_record_i32($i2);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i3 := $lshr.i32($i2, 24);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, $i4);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i32($i2, 16);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, $i6);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i32($i2, 8);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, $i9);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i2);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p1, $mul.ref(3, 1));
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, $i11);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p0, $mul.ref(4, 1));
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $i14 := ioread32($p13);
    call {:si_unique_call 819} {:cexpr "val"} boogie_si_record_i32($i14);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i15 := $lshr.i32($i14, 8);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, $i16);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i14);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p1, $mul.ref(5, 1));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $i18);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    return;
}



const ether_addr_equal: ref;

axiom ether_addr_equal == $sub.ref(0, 227022);

procedure ether_addr_equal($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ether_addr_equal($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i6 := $xor.i32($i3, $i5);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(4, 2));
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(4, 2));
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i15 := $xor.i32($i10, $i14);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i6, $i15);
    call {:si_unique_call 820} {:cexpr "fold"} boogie_si_record_i32($i16);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;
}



const sh_eth_tsu_disable_cam_entry_post: ref;

axiom sh_eth_tsu_disable_cam_entry_post == $sub.ref(0, 228054);

procedure sh_eth_tsu_disable_cam_entry_post($p0: ref, $i1: i32) returns ($r: i1);
  free requires assertsPassed;



implementation sh_eth_tsu_disable_cam_entry_post($p0: ref, $i1: i32) returns ($r: i1)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} {:cexpr "sh_eth_tsu_disable_cam_entry_post:arg:entry"} boogie_si_record_i32($i1);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $p2 := netdev_priv($p0);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $p4 := sh_eth_tsu_get_post_reg_offset($p3, $i1);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $i5 := sh_eth_tsu_get_post_mask($i1);
    call {:si_unique_call 825} {:cexpr "post_mask"} boogie_si_record_i32($i5);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} $i6 := sh_eth_tsu_get_post_bit($p3, $i1);
    call {:si_unique_call 827} {:cexpr "tmp___1"} boogie_si_record_i32($i6);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i7 := $xor.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i6, $i7);
    call {:si_unique_call 828} {:cexpr "ref_mask"} boogie_si_record_i32($i8);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $i9 := ioread32($p4);
    call {:si_unique_call 830} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i10 := $xor.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, $i9);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} iowrite32($i11, $p4);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i9, $i8);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;
}



const sh_eth_tsu_disable_cam_entry_table: ref;

axiom sh_eth_tsu_disable_cam_entry_table == $sub.ref(0, 229086);

procedure sh_eth_tsu_disable_cam_entry_table($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.5, $CurrAddr;



implementation sh_eth_tsu_disable_cam_entry_table($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} $p2 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    call {:si_unique_call 833} {:cexpr "sh_eth_tsu_disable_cam_entry_table:arg:entry"} boogie_si_record_i32($i1);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} $p3 := netdev_priv($p0);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $p5 := sh_eth_tsu_get_offset($p4, 93);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} $i6 := sh_eth_tsu_read($p4, 88);
    call {:si_unique_call 837} {:cexpr "tmp___1"} boogie_si_record_i64($i6);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(31, $i1);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $i8 := $shl.i32(1, $i7);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i9 := $xor.i32($i8, $sub.i32(0, 1));
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i11 := $and.i64($i6, $i10);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} sh_eth_tsu_write($p4, $i11, 88);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.5;
    call {:si_unique_call 839} cmdloc_dummy_var_7 := $memset.i8(cmdloc_dummy_var_6, $p12, 0, 6, $zext.i32.i64(1), 0 == 1);
    $M.5 := cmdloc_dummy_var_7;
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i13 := $mul.i32($i1, 8);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p5, $mul.ref($i14, 1));
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p2);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $i17 := sh_eth_tsu_write_entry($p0, $p15, $p16);
    call {:si_unique_call 841} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i19 := $i17;
    goto $bb3;
}



const sh_eth_tsu_get_post_mask: ref;

axiom sh_eth_tsu_get_post_mask == $sub.ref(0, 230118);

procedure sh_eth_tsu_get_post_mask($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation sh_eth_tsu_get_post_mask($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} {:cexpr "sh_eth_tsu_get_post_mask:arg:entry"} boogie_si_record_i32($i0);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i1 := $srem.i32($i0, 8);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(7, $i1);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i3 := $mul.i32($i2, 4);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32(15, $i3);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const sh_eth_tsu_del_entry: ref;

axiom sh_eth_tsu_del_entry == $sub.ref(0, 231150);

procedure sh_eth_tsu_del_entry($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.5, $M.0, $CurrAddr;



implementation sh_eth_tsu_del_entry($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i8;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $p2 := netdev_priv($p0);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(104, 1));
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} $i12 := sh_eth_tsu_find_entry($p0, $p1);
    call {:si_unique_call 845} {:cexpr "i"} boogie_si_record_i32($i12);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} $i14 := sh_eth_tsu_disable_cam_entry_post($p0, $i12);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i8($i14);
    call {:si_unique_call 847} {:cexpr "tmp___0"} boogie_si_record_i8($i15);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} $i17 := sh_eth_tsu_disable_cam_entry_table($p0, $i12);
    call {:si_unique_call 849} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i11 := $i17;
    goto $bb3;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;
}



const sh_eth_txfree: ref;

axiom sh_eth_txfree == $sub.ref(0, 232182);

procedure sh_eth_txfree($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation sh_eth_txfree($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i64;
  var $p37: ref;
  var $i38: i16;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i64;
  var $p67: ref;
  var $p69: ref;
  var $i70: i64;
  var $p71: ref;
  var $i72: i16;
  var $i73: i64;
  var $i74: i64;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i9: i32;
  var $i84: i32;
  var $i8: i32;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} $p1 := netdev_priv($p0);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(176, 1));
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(180, 1));
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i4, $i6);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i8 := 0;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i25 := $i8;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb4;

  $bb4:
    call $p10, $i11, $p12, $i13, $i14, $p15, $p16, $i17, $i19, $p20, $i21, $i22, $i23, $i24, $p26, $p27, $i28, $p29, $p30, $i31, $i32, $p33, $p34, $i35, $i36, $p37, $i38, $i39, $p40, $p41, $i42, $p43, $p44, $p45, $p46, $i47, $p48, $i49, $i50, $i51, $p52, $p53, $i54, $i55, $i56, $i57, $p58, $i59, $i60, $p61, $p63, $i64, $i65, $p67, $p69, $i70, $p71, $i72, $i73, $i74, $p76, $p77, $i78, $i79, $p80, $i81, $i82, $i83, $i9, $i84 := sh_eth_txfree_loop_$bb4($p0, $p2, $p3, $p5, $p10, $i11, $p12, $i13, $i14, $p15, $p16, $i17, $i19, $p20, $i21, $i22, $i23, $i24, $p26, $p27, $i28, $p29, $p30, $i31, $i32, $p33, $p34, $i35, $i36, $p37, $i38, $i39, $p40, $p41, $i42, $p43, $p44, $p45, $p46, $i47, $p48, $i49, $i50, $i51, $p52, $p53, $i54, $i55, $i56, $i57, $p58, $i59, $i60, $p61, $p63, $i64, $i65, $p67, $p69, $i70, $p71, $i72, $i73, $i74, $p76, $p77, $i78, $i79, $p80, $i81, $i82, $i83, $i9, $i84);
    goto $bb4_last;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(180, 1));
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(44, 1));
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i14 := $urem.i32($i11, $i13);
    call {:si_unique_call 851} {:cexpr "entry"} boogie_si_record_i32($i14);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(72, 1));
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i14);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $i19 := cpu_to_edmac($p2, $sub.i32(0, 2147483648));
    call {:si_unique_call 853} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p16, $mul.ref($i17, 16)), $mul.ref(0, 1));
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, $i19);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i24 := $i9;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(88, 1));
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i14);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p27, $mul.ref($i28, 8));
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i50 := $i9;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} $i51 := cpu_to_edmac($p2, 805306368);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p16, $mul.ref($i17, 16)), $mul.ref(0, 1));
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, $i51);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(44, 1));
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32($i54, 1);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i56 := $uge.i32($i14, $i55);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(8, 1));
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $i64 := $load.i64($M.0, $p63);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i65 := $add.i64($i64, 1);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(8, 1));
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p67, $i65);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(24, 1));
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i70 := $load.i64($M.0, $p69);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p16, $mul.ref($i17, 16)), $mul.ref(6, 1));
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i72 := $load.i16($M.0, $p71);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i73 := $zext.i16.i64($i72);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i74 := $add.i64($i70, $i73);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(24, 1));
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p76, $i74);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(180, 1));
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i78, 1);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(180, 1));
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p80, $i79);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p3);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p5);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i81, $i82);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i84 := $i50;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i8 := $i84;
    goto $bb3;

  $bb16:
    assume $i83 == 1;
    assume {:verifier.code 0} true;
    $i9 := $i50;
    goto $bb16_dummy;

  $bb13:
    assume $i56 == 1;
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} $i57 := cpu_to_edmac($p2, 1073741824);
    call {:si_unique_call 859} {:cexpr "tmp___1"} boogie_si_record_i32($i57);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p16, $mul.ref($i17, 16)), $mul.ref(0, 1));
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $i60 := $or.i32($i59, $i57);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p16, $mul.ref($i17, 16)), $mul.ref(0, 1));
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, $i60);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i32 == 1;
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1296, 1));
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p16, $mul.ref($i17, 16)), $mul.ref(8, 1));
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i36 := $zext.i32.i64($i35);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p16, $mul.ref($i17, 16)), $mul.ref(6, 1));
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.0, $p37);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i64($i38);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} dma_unmap_single_attrs($p33, $i36, $i39, 1, $0.ref);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(88, 1));
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i14);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p41, $mul.ref($i42, 8));
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} dev_kfree_skb_irq($p44);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(88, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i14);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p46, $mul.ref($i47, 8));
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, $0.ref);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i9, 1);
    call {:si_unique_call 856} {:cexpr "free_num"} boogie_si_record_i32($i49);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i50 := $i49;
    goto $bb12;

  $bb6:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb8;

  $bb16_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3141;
}



const phys_to_virt: ref;

axiom phys_to_virt == $sub.ref(0, 233214);

procedure phys_to_virt($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation phys_to_virt($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} {:cexpr "phys_to_virt:arg:address"} boogie_si_record_i64($i0);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i1 := $add.i64($i0, $sub.i64(0, 131941395333120));
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const sh_eth_soft_swap: ref;

axiom sh_eth_soft_swap == $sub.ref(0, 234246);

procedure sh_eth_soft_swap($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation sh_eth_soft_swap($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} {:cexpr "sh_eth_soft_swap:arg:len"} boogie_si_record_i32($i1);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    return;
}



const sh_eth_get_edtrr_trns: ref;

axiom sh_eth_get_edtrr_trns == $sub.ref(0, 235278);

procedure sh_eth_get_edtrr_trns($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation sh_eth_get_edtrr_trns($p0: ref) returns ($r: i64)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} $i1 := sh_eth_is_gether($p0);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 863} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} $i5 := sh_eth_is_rz_fast_ether($p0);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 865} {:cexpr "tmp___0"} boogie_si_record_i8($i6);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i4 := 3;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i4 := 3;
    goto $bb3;
}



const dma_unmap_single_attrs: ref;

axiom dma_unmap_single_attrs == $sub.ref(0, 236310);

procedure dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref);
  free requires assertsPassed;



implementation dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} {:cexpr "dma_unmap_single_attrs:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 867} {:cexpr "dma_unmap_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 868} {:cexpr "dma_unmap_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} $p5 := get_dma_ops($p0);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $i6 := valid_dma_direction($i3);
    call {:si_unique_call 871} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 873} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} debug_dma_unmap_page($p0, $i1, $i2, $i3, 1);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    call {:si_unique_call 875} devirtbounce.5($p17, $p0, $i1, $i2, $i3, $p4);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 874} devirtbounce.2(0, .str.1, 36, 12);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_unmap_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const dev_kfree_skb_irq: ref;

axiom dev_kfree_skb_irq == $sub.ref(0, 237342);

procedure dev_kfree_skb_irq($p0: ref);
  free requires assertsPassed;



implementation dev_kfree_skb_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} __dev_kfree_skb_irq($p0, 1);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    return;
}



const __dev_kfree_skb_irq: ref;

axiom __dev_kfree_skb_irq == $sub.ref(0, 238374);

procedure __dev_kfree_skb_irq($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __dev_kfree_skb_irq($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} {:cexpr "__dev_kfree_skb_irq:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    return;
}



const debug_dma_unmap_page: ref;

axiom debug_dma_unmap_page == $sub.ref(0, 239406);

procedure debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1);
  free requires assertsPassed;



implementation debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} {:cexpr "debug_dma_unmap_page:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 880} {:cexpr "debug_dma_unmap_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 881} {:cexpr "debug_dma_unmap_page:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 882} {:cexpr "debug_dma_unmap_page:arg:arg4"} boogie_si_record_i1($i4);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    return;
}



const phy_stop: ref;

axiom phy_stop == $sub.ref(0, 240438);

procedure phy_stop($p0: ref);
  free requires assertsPassed;



implementation phy_stop($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    return;
}



const phy_disconnect: ref;

axiom phy_disconnect == $sub.ref(0, 241470);

procedure phy_disconnect($p0: ref);
  free requires assertsPassed;



implementation phy_disconnect($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_irq_16: ref;

axiom ldv_free_irq_16 == $sub.ref(0, 242502);

procedure ldv_free_irq_16($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.7, $M.9, $M.11, $M.13;



implementation ldv_free_irq_16($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} {:cexpr "ldv_free_irq_16:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} free_irq($i0, $p1);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} disable_suitable_irq_1($i0, $p1);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    return;
}



const napi_disable: ref;

axiom napi_disable == $sub.ref(0, 243534);

procedure napi_disable($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation napi_disable($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} __might_sleep(.str.34, 476, 0);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} set_bit(1, $p1);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} $i3 := test_and_set_bit(0, $p2);
    call {:si_unique_call 889} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} clear_bit(1, $p7);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i5, $i6 := napi_disable_loop_$bb4($p2, $i5, $i6);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} msleep(1);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} $i5 := test_and_set_bit(0, $p2);
    call {:si_unique_call 892} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const sh_eth_ring_free: ref;

axiom sh_eth_ring_free == $sub.ref(0, 244566);

procedure sh_eth_ring_free($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.2;



implementation sh_eth_ring_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i10: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $i38: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} $p1 := netdev_priv($p0);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(80, 1));
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(80, 1));
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} kfree($p29);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(80, 1));
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $0.ref);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(88, 1));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(88, 1));
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} kfree($p57);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(88, 1));
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p58, $0.ref);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    return;

  $bb15:
    assume $i34 == 1;
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(44, 1));
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i37 := $ult.i32(0, $i36);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb17:
    assume $i37 == 1;
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb20;

  $bb20:
    call $p39, $p40, $i41, $p42, $p43, $i44, $i45, $p46, $p47, $i48, $p49, $p50, $p51, $i52, $i53, $i54, $i38 := sh_eth_ring_free_loop_$bb20($p2, $p35, $p39, $p40, $i41, $p42, $p43, $i44, $i45, $p46, $p47, $i48, $p49, $p50, $p51, $i52, $i53, $i54, $i38);
    goto $bb20_last;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(88, 1));
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i38);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p40, $mul.ref($i41, 8));
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i38, 1);
    call {:si_unique_call 899} {:cexpr "i"} boogie_si_record_i32($i52);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p35);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i54 := $ult.i32($i52, $i53);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i54 == 1);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb25:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i38 := $i52;
    goto $bb25_dummy;

  $bb22:
    assume $i45 == 1;
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(88, 1));
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i38);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p47, $mul.ref($i48, 8));
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} ldv_skb_free($p51);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(40, 1));
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i9 := $ult.i32(0, $i8);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb6;

  $bb6:
    call $p11, $p12, $i13, $p14, $p15, $i16, $i17, $p18, $p19, $i20, $p21, $p22, $p23, $i24, $i25, $i26, $i10 := sh_eth_ring_free_loop_$bb6($p2, $p7, $p11, $p12, $i13, $p14, $p15, $i16, $i17, $p18, $p19, $i20, $p21, $p22, $p23, $i24, $i25, $i26, $i10);
    goto $bb6_last;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(80, 1));
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i10);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p12, $mul.ref($i13, 8));
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i10, 1);
    call {:si_unique_call 896} {:cexpr "i"} boogie_si_record_i32($i24);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p7);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i26 := $ult.i32($i24, $i25);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i24;
    goto $bb11_dummy;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(80, 1));
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i10);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p19, $mul.ref($i20, 8));
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} ldv_skb_free($p23);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb25_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3371;

  $bb11_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3328;
}



const sh_eth_free_dma_buffer: ref;

axiom sh_eth_free_dma_buffer == $sub.ref(0, 245598);

procedure sh_eth_free_dma_buffer($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation sh_eth_free_dma_buffer($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(64, 1));
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(72, 1));
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(44, 1));
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $i21 := $mul.i32($i20, 16);
    call {:si_unique_call 903} {:cexpr "ringsize"} boogie_si_record_i32($i21);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(72, 1));
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(56, 1));
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} dma_free_attrs($0.ref, $i22, $p25, $i27, $0.ref);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(72, 1));
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $0.ref);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(40, 1));
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i7 := $mul.i32($i6, 16);
    call {:si_unique_call 901} {:cexpr "ringsize"} boogie_si_record_i32($i7);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(64, 1));
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(48, 1));
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} dma_free_attrs($0.ref, $i8, $p11, $i13, $0.ref);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(64, 1));
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $0.ref);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dma_free_attrs: ref;

axiom dma_free_attrs == $sub.ref(0, 246630);

procedure dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;



implementation dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref)
{
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var vslice_dummy_var_42: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} {:cexpr "dma_free_attrs:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 906} {:cexpr "dma_free_attrs:arg:bus"} boogie_si_record_i64($i3);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $p5 := get_dma_ops($p0);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} $i6 := arch_local_save_flags();
    call {:si_unique_call 909} {:cexpr "_flags"} boogie_si_record_i64($i6);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} $i7 := arch_irqs_disabled_flags($i6);
    call {:si_unique_call 911} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 912} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i9);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 914} {:cexpr "tmp___1"} boogie_si_record_i64($i13);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i9, 0);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} vslice_dummy_var_42 := ldv__builtin_expect($i17, 0);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} debug_dma_free_coherent($p0, $i1, $p2, $i3);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    call {:si_unique_call 918} devirtbounce.6($p24, $p0, $i1, $p2, $i3, $p4);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} warn_slowpath_null(.str.36, 166);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const arch_local_save_flags: ref;

axiom arch_local_save_flags == $sub.ref(0, 247662);

procedure arch_local_save_flags() returns ($r: i64);
  free requires assertsPassed;



implementation arch_local_save_flags() returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, pv_irq_ops);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 920} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 922} $i7 := devirtbounce.7(0, 44, pv_irq_ops, 1);
    call {:si_unique_call 923} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 921} devirtbounce.2(0, .str.37, 804, 12);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_save_flags_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const arch_irqs_disabled_flags: ref;

axiom arch_irqs_disabled_flags == $sub.ref(0, 248694);

procedure arch_irqs_disabled_flags($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation arch_irqs_disabled_flags($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} {:cexpr "arch_irqs_disabled_flags:arg:flags"} boogie_si_record_i64($i0);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i1 := $and.i64($i0, 512);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const debug_dma_free_coherent: ref;

axiom debug_dma_free_coherent == $sub.ref(0, 249726);

procedure debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} {:cexpr "debug_dma_free_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 926} {:cexpr "debug_dma_free_coherent:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 250758);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} free_($p0);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 251790);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 928} $free($p0);
    return;
}



const __might_sleep: ref;

axiom __might_sleep == $sub.ref(0, 252822);

procedure __might_sleep($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation __might_sleep($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} {:cexpr "__might_sleep:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 930} {:cexpr "__might_sleep:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 253854);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    return;
}



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 254886);

procedure test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 933} {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 934} devirtbounce.8(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.6, $p2);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 255918);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    return;
}



const disable_suitable_irq_1: ref;

axiom disable_suitable_irq_1 == $sub.ref(0, 256950);

procedure disable_suitable_irq_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.7, $M.9, $M.11, $M.13;



implementation disable_suitable_irq_1($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} {:cexpr "disable_suitable_irq_1:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i2 := $M.7;
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.9;
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := $M.11;
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i14 := $M.13;
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i16 := $M.14;
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i0, $i16);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb22;

  $bb23:
    assume $i17 == 1;
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $M.13 := 0;
    call {:si_unique_call 940} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i11 == 1;
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i12 := $M.12;
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i0, $i12);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb16;

  $bb17:
    assume $i13 == 1;
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $M.11 := 0;
    call {:si_unique_call 939} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i8 := $M.10;
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, $i8);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $M.9 := 0;
    call {:si_unique_call 938} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i4 := $M.8;
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, $i4);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $M.7 := 0;
    call {:si_unique_call 937} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const napi_enable: ref;

axiom napi_enable == $sub.ref(0, 257982);

procedure napi_enable($p0: ref);
  free requires assertsPassed;



implementation napi_enable($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 942} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 944} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 946} devirtbounce.9(0);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} clear_bit(0, $p8);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    call {:si_unique_call 945} devirtbounce.2(0, .str.34, 492, 12);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call napi_enable_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const sh_eth_interrupt: ref;

axiom sh_eth_interrupt == $sub.ref(0, 259014);

procedure sh_eth_interrupt($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation sh_eth_interrupt($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i1;
  var $i25: i8;
  var $i26: i1;
  var $i27: i64;
  var $p28: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $i43: i64;
  var $i44: i64;
  var $i45: i32;
  var $i20: i32;
  var $p46: ref;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} {:cexpr "sh_eth_interrupt:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} $p3 := netdev_priv($p2);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(96, 1));
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} spin_lock($p7);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} $i8 := sh_eth_read($p2, 4);
    call {:si_unique_call 952} {:cexpr "intr_status"} boogie_si_record_i64($i8);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} $i9 := sh_eth_read($p2, 5);
    call {:si_unique_call 954} {:cexpr "intr_enable"} boogie_si_record_i64($i9);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i10 := $or.i64($i9, 4194304);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i11 := $and.i64($i10, $i8);
    call {:si_unique_call 955} {:cexpr "intr_status"} boogie_si_record_i64($i11);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 112)), $mul.ref(80, 1));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i16 := $or.i64($i13, $i15);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i17 := $or.i64($i16, 262303);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, $i11);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(96, 1));
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} spin_unlock($p46);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i11, 262303);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p6, $mul.ref(0, 112)), $mul.ref(80, 1));
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, $i11);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p6, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p38);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i40 := $and.i64($i39, $i11);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i20 := 1;
    goto $bb4;

  $bb14:
    assume $i41 == 1;
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p6, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i44 := $and.i64($i43, $i11);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} sh_eth_write($p2, $i44, 4);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i64.i32($i11);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} sh_eth_error($p2, $i45);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i33 == 1;
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p6, $mul.ref(0, 112)), $mul.ref(80, 1));
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i36 := $and.i64($i35, $i11);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} sh_eth_write($p2, $i36, 4);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} vslice_dummy_var_44 := sh_eth_txfree($p2);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} netif_wake_queue($p2);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(192, 1));
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} $i24 := napi_schedule_prep($p23);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i8($i24);
    call {:si_unique_call 958} {:cexpr "tmp___0"} boogie_si_record_i8($i25);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i25);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i26 == 1);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} vslice_dummy_var_43 := netdev_warn.ref.ref.i64.i64($p2, .str, $i11, $i9);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i26 == 1;
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i9, $sub.i64(0, 262304));
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} sh_eth_write($p2, $i27, 5);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(192, 1));
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} __napi_schedule($p28);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    goto $bb9;
}



const ldv_request_irq_14: ref;

axiom ldv_request_irq_14 == $sub.ref(0, 260046);

procedure ldv_request_irq_14($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.16, $M.7, $M.10, $M.17, $M.9, $M.12, $M.18, $M.11, $M.14, $M.19, $M.13;



implementation ldv_request_irq_14($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} {:cexpr "ldv_request_irq_14:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 968} {:cexpr "ldv_request_irq_14:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 970} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} $i6 := reg_check_1($p1);
    call {:si_unique_call 972} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} activate_suitable_irq_1($i0, $p4);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const sh_eth_ring_init: ref;

axiom sh_eth_ring_init == $sub.ref(0, 261078);

procedure sh_eth_ring_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.2, $CurrAddr;



implementation sh_eth_ring_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i64;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i64;
  var $p61: ref;
  var $p62: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $i69: i64;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $p75: ref;
  var $p76: ref;
  var $i33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} $p1 := netdev_priv($p0);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i4, 1492);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i11 := 1538;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(184, 1));
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref(104, 1));
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(40, 1));
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} $p26 := kmalloc_array($i25, 8, 208);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(80, 1));
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $p26);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(80, 1));
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, 0);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(44, 1));
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i36 := $zext.i32.i64($i35);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} $p37 := kmalloc_array($i36, 8, 208);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(88, 1));
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, $p37);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(88, 1));
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(40, 1));
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i46 := $mul.i32($i45, 16);
    call {:si_unique_call 978} {:cexpr "rx_ringsize"} boogie_si_record_i32($i46);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i46);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(48, 1));
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} $p49 := dma_alloc_attrs($0.ref, $i47, $p48, 208, $0.ref);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(64, 1));
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p51, $p49);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(64, 1));
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i55 := $eq.i64($i54, 0);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(172, 1));
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, 0);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(44, 1));
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $i59 := $mul.i32($i58, 16);
    call {:si_unique_call 981} {:cexpr "tx_ringsize"} boogie_si_record_i32($i59);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i59);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(56, 1));
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} $p62 := dma_alloc_attrs($0.ref, $i60, $p61, 208, $0.ref);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(72, 1));
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p64, $p62);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(72, 1));
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i68 := $eq.i64($i67, 0);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb19:
    assume $i68 == 1;
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i46);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(64, 1));
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(48, 1));
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.0, $p73);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} dma_free_attrs($0.ref, $i69, $p72, $i74, $0.ref);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} sh_eth_ring_free($p0);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(72, 1));
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p75, $0.ref);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(64, 1));
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p76, $0.ref);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 12);
    goto $bb9;

  $bb15:
    assume $i55 == 1;
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i43 == 1;
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume $i32 == 1;
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 12);
    goto $bb9;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(184, 1));
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(184, 1));
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, 33);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, $sub.i32(0, 8));
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 18);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const sh_eth_phy_start: ref;

axiom sh_eth_phy_start == $sub.ref(0, 262110);

procedure sh_eth_phy_start($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation sh_eth_phy_start($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} $p1 := netdev_priv($p0);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} $i3 := sh_eth_phy_init($p0);
    call {:si_unique_call 985} {:cexpr "ret"} boogie_si_record_i32($i3);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(392, 1));
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} phy_start($p7);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;
}



const ldv_free_irq_15: ref;

axiom ldv_free_irq_15 == $sub.ref(0, 263142);

procedure ldv_free_irq_15($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.7, $M.9, $M.11, $M.13;



implementation ldv_free_irq_15($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} {:cexpr "ldv_free_irq_15:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} free_irq($i0, $p1);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} disable_suitable_irq_1($i0, $p1);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    return;
}



const sh_eth_phy_init: ref;

axiom sh_eth_phy_init == $sub.ref(0, 264174);

procedure sh_eth_phy_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation sh_eth_phy_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p23: ref;
  var $p36: ref;
  var $i37: i1;
  var $i38: i8;
  var $i39: i1;
  var $p41: ref;
  var $i42: i64;
  var $i43: i32;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p54: ref;
  var $i44: i32;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} $p1 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(1296, 1)), $mul.ref(0, 1));
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1424)), $mul.ref(1240, 1));
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} $p7 := netdev_priv($p0);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 432)), $mul.ref(400, 1));
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref(0, 432)), $mul.ref(412, 1));
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 0);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 432)), $mul.ref(416, 1));
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $sub.i32(0, 1));
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p6);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p1);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p8, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 1944)), $mul.ref(8, 1));
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p8, $mul.ref(0, 432)), $mul.ref(376, 1));
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} vslice_dummy_var_45 := snprintf.ref.i64.ref.ref.i32($p24, 20, .str.44, $p28, $i30);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p1);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p8, $mul.ref(0, 432)), $mul.ref(404, 1));
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} $p35 := phy_connect($p0, $p32, sh_eth_adjust_link, $i34);
    assume {:verifier.code 0} true;
    $p23 := $p35;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p23);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} $i37 := IS_ERR($p36);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $i38 := $zext.i1.i8($i37);
    call {:si_unique_call 998} {:cexpr "tmp___2"} boogie_si_record_i8($i38);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i8.i1($i38);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p23, $mul.ref(0, 2056)), $mul.ref(1496, 1));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p23, $mul.ref(0, 2056)), $mul.ref(1544, 1));
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p23, $mul.ref(0, 2056)), $mul.ref(0, 1));
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 304)), $mul.ref(8, 1));
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} vslice_dummy_var_47 := netdev_info.ref.ref.i32.i32.ref($p0, .str.46, $i46, $i48, $p52);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p8, $mul.ref(0, 432)), $mul.ref(392, 1));
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p54, $p23);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $r := $i44;
    return;

  $bb7:
    assume $i39 == 1;
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} vslice_dummy_var_46 := netdev_err.ref.ref($p0, .str.45);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p23);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} $i42 := PTR_ERR($p41);
    call {:si_unique_call 1001} {:cexpr "tmp___1"} boogie_si_record_i64($i42);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i64.i32($i42);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i44 := $i43;
    goto $bb9;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} $p14 := of_parse_phandle($p6, .str.43, 0);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref(0, 432)), $mul.ref(404, 1));
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} $p17 := of_phy_connect($p0, $p14, sh_eth_adjust_link, 0, $i16);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $p22 := $p17;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $p23 := $p22;
    goto $bb6;

  $bb3:
    assume $i19 == 1;
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} $p20 := ERR_PTR($sub.i64(0, 2));
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $p22 := $p20;
    goto $bb5;
}



const phy_start: ref;

axiom phy_start == $sub.ref(0, 265206);

procedure phy_start($p0: ref);
  free requires assertsPassed;



implementation phy_start($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    return;
}



const of_parse_phandle: ref;

axiom of_parse_phandle == $sub.ref(0, 266238);

procedure of_parse_phandle($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation of_parse_phandle($p0: ref, $p1: ref, $i2: i32) returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} {:cexpr "of_parse_phandle:arg:index"} boogie_si_record_i32($i2);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;
}



const sh_eth_adjust_link: ref;

axiom sh_eth_adjust_link == $sub.ref(0, 267270);

procedure sh_eth_adjust_link($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.34, $M.35, $M.5, $M.4, $M.3, $M.2, $CurrAddr;



implementation sh_eth_adjust_link($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i49: i64;
  var $i50: i64;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i8;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $i65: i1;
  var $i66: i32;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i8;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $i83: i8;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i67: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} $p1 := netdev_priv($p0);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(392, 1));
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2056)), $mul.ref(1516, 1));
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(400, 1));
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i86 := 0;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i67 := $i86;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i67, 0);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    return;

  $bb34:
    assume $i87 == 1;
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(408, 1));
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i89, 4);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb36;

  $bb37:
    assume $i91 == 1;
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} phy_print_status($p4);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb25:
    assume $i70 == 1;
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(400, 1));
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, 0);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(412, 1));
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, 0);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(416, 1));
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, $sub.i32(0, 1));
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p76, $mul.ref(104, 1));
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.0, $p77);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb27, $bb29;

  $bb29:
    assume !($i80 == 1);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p2);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p81, $mul.ref(428, 1));
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.0, $p82);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i86 := 1;
    goto $bb33;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i85 == 1;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} sh_eth_rcv_snd_disable($p0);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb28;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 2056)), $mul.ref(1504, 1));
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(416, 1));
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i9, $i11);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 2056)), $mul.ref(1500, 1));
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(412, 1));
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i28, $i30);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i45 := $i26;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(400, 1));
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i66 := $i45;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $i67 := $i66;
    goto $bb24;

  $bb15:
    assume $i48 == 1;
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} $i49 := sh_eth_read($p0, 28);
    call {:si_unique_call 1008} {:cexpr "tmp___0"} boogie_si_record_i64($i49);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i50 := $and.i64($i49, $sub.i64(0, 65537));
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} sh_eth_write($p0, $i50, 28);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 2056)), $mul.ref(1516, 1));
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(400, 1));
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i52);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p56, $mul.ref(104, 1));
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i60 == 1);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p2);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref(428, 1));
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i66 := 1;
    goto $bb23;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i65 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} sh_eth_rcv_snd_enable($p0);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb18;

  $bb9:
    assume $i31 == 1;
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 2056)), $mul.ref(1500, 1));
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(412, 1));
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i33);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i45 := 1;
    goto $bb14;

  $bb11:
    assume $i40 == 1;
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    call {:si_unique_call 1006} devirtbounce($p44, $p0);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 2056)), $mul.ref(1504, 1));
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(416, 1));
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 112)), $mul.ref(8, 1));
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i26 := 1;
    goto $bb8;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 112)), $mul.ref(8, 1));
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    call {:si_unique_call 1005} devirtbounce($p25, $p0);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const of_phy_connect: ref;

axiom of_phy_connect == $sub.ref(0, 268302);

procedure of_phy_connect($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32) returns ($r: ref);
  free requires assertsPassed;



implementation of_phy_connect($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32) returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} {:cexpr "of_phy_connect:arg:flags"} boogie_si_record_i32($i3);
    call {:si_unique_call 1014} {:cexpr "of_phy_connect:arg:iface"} boogie_si_record_i32($i4);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;
}



const ERR_PTR: ref;

axiom ERR_PTR == $sub.ref(0, 269334);

procedure ERR_PTR($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_PTR($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} {:cexpr "ERR_PTR:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} $p1 := ldv_err_ptr($i0);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 270366);

procedure snprintf.ref.i64.ref.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: i32) returns ($r: i32);



const phy_connect: ref;

axiom phy_connect == $sub.ref(0, 271398);

procedure phy_connect($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: ref);
  free requires assertsPassed;



implementation phy_connect($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} {:cexpr "phy_connect:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} $p4 := external_alloc();
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 272430);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} $i1 := ldv_is_err($p0);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1020} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 273462);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 1022} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const netdev_info: ref;

axiom netdev_info == $sub.ref(0, 274494);

procedure netdev_info.ref.ref.i32.ref.i32($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_info.ref.ref.i32.ref.i32($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1023} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1024} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure netdev_info.ref.ref.i32.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_info.ref.ref.i32.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1025} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1026} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 275526);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(2012, $i1);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 276558);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 277590);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1027} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 1028} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_err_ptr: ref;

axiom ldv_err_ptr == $sub.ref(0, 278622);

procedure ldv_err_ptr($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_err_ptr($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} {:cexpr "ldv_err_ptr:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64(2012, $i0);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const sh_eth_rcv_snd_enable: ref;

axiom sh_eth_rcv_snd_enable == $sub.ref(0, 279654);

procedure sh_eth_rcv_snd_enable($p0: ref);
  free requires assertsPassed;



implementation sh_eth_rcv_snd_enable($p0: ref)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} $i1 := sh_eth_read($p0, 28);
    call {:si_unique_call 1031} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $i2 := $or.i64($i1, 96);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} sh_eth_write($p0, $i2, 28);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    return;
}



const sh_eth_rcv_snd_disable: ref;

axiom sh_eth_rcv_snd_disable == $sub.ref(0, 280686);

procedure sh_eth_rcv_snd_disable($p0: ref);
  free requires assertsPassed;



implementation sh_eth_rcv_snd_disable($p0: ref)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} $i1 := sh_eth_read($p0, 28);
    call {:si_unique_call 1034} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i2 := $and.i64($i1, $sub.i64(0, 97));
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} sh_eth_write($p0, $i2, 28);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    return;
}



const phy_print_status: ref;

axiom phy_print_status == $sub.ref(0, 281718);

procedure phy_print_status($p0: ref);
  free requires assertsPassed;



implementation phy_print_status($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    return;
}



const kmalloc_array: ref;

axiom kmalloc_array == $sub.ref(0, 282750);

procedure kmalloc_array($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc_array($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $i7: i64;
  var $p8: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} {:cexpr "kmalloc_array:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 1037} {:cexpr "kmalloc_array:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1038} {:cexpr "kmalloc_array:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i1, 0);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} $p8 := __kmalloc($i7, $i2);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $p6 := $p8;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i4 := $udiv.i64($sub.i64(0, 1), $i1);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i5 := $ult.i64($i4, $i0);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb6;
}



const dma_alloc_attrs: ref;

axiom dma_alloc_attrs == $sub.ref(0, 283782);

procedure dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} {:cexpr "dma_alloc_attrs:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1041} {:cexpr "dma_alloc_attrs:arg:gfp"} boogie_si_record_i32($i3);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} $p5 := get_dma_ops($p0);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i3, $sub.i32(0, 8));
    call {:si_unique_call 1043} {:cexpr "gfp"} boogie_si_record_i32($i6);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $p9 := $p0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} $i10 := is_device_dma_capable($p9);
    call {:si_unique_call 1045} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} $i17 := dma_alloc_coherent_gfp_flags($p9, $i6);
    call {:si_unique_call 1047} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    call {:si_unique_call 1048} $p20 := devirtbounce.10($p19, $p9, $i1, $p2, $i17, $p4);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p2);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} debug_dma_alloc_coherent($p9, $i1, $i21, $p20);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $p12 := $p20;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb6;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $p9 := x86_dma_fallback_dev;
    goto $bb3;
}



const is_device_dma_capable: ref;

axiom is_device_dma_capable == $sub.ref(0, 284814);

procedure is_device_dma_capable($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation is_device_dma_capable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i5: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1160, 1));
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i5);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1160, 1));
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    assume {:verifier.code 0} true;
    $i5 := $i9;
    goto $bb3;
}



const dma_alloc_coherent_gfp_flags: ref;

axiom dma_alloc_coherent_gfp_flags == $sub.ref(0, 285846);

procedure dma_alloc_coherent_gfp_flags($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dma_alloc_coherent_gfp_flags($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} {:cexpr "dma_alloc_coherent_gfp_flags:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $i2 := dma_alloc_coherent_mask($p0, $i1);
    call {:si_unique_call 1052} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i3 := $ule.i64($i2, 16777215);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i5 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i6 := $ule.i64($i2, 4294967295);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i10 := $i5;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i5, 1);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i5, 4);
    call {:si_unique_call 1054} {:cexpr "gfp"} boogie_si_record_i32($i9);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i1, 1);
    call {:si_unique_call 1053} {:cexpr "gfp"} boogie_si_record_i32($i4);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const debug_dma_alloc_coherent: ref;

axiom debug_dma_alloc_coherent == $sub.ref(0, 286878);

procedure debug_dma_alloc_coherent($p0: ref, $i1: i64, $i2: i64, $p3: ref);
  free requires assertsPassed;



implementation debug_dma_alloc_coherent($p0: ref, $i1: i64, $i2: i64, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} {:cexpr "debug_dma_alloc_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1056} {:cexpr "debug_dma_alloc_coherent:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    return;
}



const dma_alloc_coherent_mask: ref;

axiom dma_alloc_coherent_mask == $sub.ref(0, 287910);

procedure dma_alloc_coherent_mask($p0: ref, $i1: i32) returns ($r: i64);
  free requires assertsPassed;



implementation dma_alloc_coherent_mask($p0: ref, $i1: i32) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} {:cexpr "dma_alloc_coherent_mask:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1168, 1));
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    call {:si_unique_call 1058} {:cexpr "dma_mask"} boogie_si_record_i64($i3);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i8 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i1, 1);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i7 := (if $i6 == 1 then 16777215 else 4294967295);
    call {:si_unique_call 1059} {:cexpr "dma_mask"} boogie_si_record_i64($i7);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const request_irq: ref;

axiom request_irq == $sub.ref(0, 288942);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} {:cexpr "request_irq:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 1061} {:cexpr "request_irq:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
    call {:si_unique_call 1063} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const reg_check_1: ref;

axiom reg_check_1 == $sub.ref(0, 289974);

procedure reg_check_1($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation reg_check_1($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, $p2i.ref.i64(sh_eth_interrupt));
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb3;
}



const activate_suitable_irq_1: ref;

axiom activate_suitable_irq_1 == $sub.ref(0, 291006);

procedure activate_suitable_irq_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.8, $M.16, $M.7, $M.10, $M.17, $M.9, $M.12, $M.18, $M.11, $M.14, $M.19, $M.13;



implementation activate_suitable_irq_1($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} {:cexpr "activate_suitable_irq_1:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i2 := $M.7;
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.9;
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.11;
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.13;
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $M.14 := $i0;
    call {:si_unique_call 1071} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32($i0);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $M.19 := $p1;
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $M.13 := 1;
    call {:si_unique_call 1072} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $M.12 := $i0;
    call {:si_unique_call 1069} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32($i0);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $M.18 := $p1;
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $M.11 := 1;
    call {:si_unique_call 1070} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $M.10 := $i0;
    call {:si_unique_call 1067} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32($i0);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $M.17 := $p1;
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 1068} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $M.8 := $i0;
    call {:si_unique_call 1065} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32($i0);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $M.16 := $p1;
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 1066} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 292038);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1073} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1074} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1075} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1076} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 293070);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} _raw_spin_lock($p2);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    return;
}



const napi_schedule_prep: ref;

axiom napi_schedule_prep == $sub.ref(0, 294102);

procedure napi_schedule_prep($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation napi_schedule_prep($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $i1 := napi_disable_pending($p0);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1079} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} $i7 := test_and_set_bit(0, $p6);
    call {:si_unique_call 1081} {:cexpr "tmp___1"} boogie_si_record_i32($i7);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb9;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const __napi_schedule: ref;

axiom __napi_schedule == $sub.ref(0, 295134);

procedure __napi_schedule($p0: ref);
  free requires assertsPassed;



implementation __napi_schedule($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    return;
}



const netif_wake_queue: ref;

axiom netif_wake_queue == $sub.ref(0, 296166);

procedure netif_wake_queue($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation netif_wake_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} netif_tx_wake_queue($p1);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    return;
}



const sh_eth_error: ref;

axiom sh_eth_error == $sub.ref(0, 297198);

procedure sh_eth_error($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation sh_eth_error($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i64;
  var $i7: i32;
  var $i8: i64;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $i31: i64;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i64;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i65: i1;
  var $p67: ref;
  var $i68: i64;
  var $i69: i64;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $i77: i32;
  var $i78: i1;
  var $p80: ref;
  var $i81: i64;
  var $i82: i64;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $i90: i32;
  var $i91: i1;
  var $p93: ref;
  var $i94: i64;
  var $i95: i64;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i32;
  var $i101: i1;
  var $i103: i32;
  var $i104: i1;
  var $p106: ref;
  var $i107: i64;
  var $i108: i64;
  var $p110: ref;
  var $p111: ref;
  var $i112: i32;
  var $i113: i32;
  var $i114: i1;
  var $i116: i32;
  var $i117: i1;
  var $p119: ref;
  var $i120: i64;
  var $i121: i64;
  var $p123: ref;
  var $p124: ref;
  var $i125: i32;
  var $i126: i32;
  var $i127: i1;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i8;
  var $i134: i32;
  var $i135: i1;
  var $i136: i32;
  var $i137: i1;
  var $p139: ref;
  var $i140: i64;
  var $i141: i64;
  var $p143: ref;
  var $p144: ref;
  var $i145: i32;
  var $i146: i32;
  var $i147: i1;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $i153: i8;
  var $i154: i32;
  var $i155: i1;
  var $i156: i32;
  var $i157: i32;
  var $i158: i32;
  var $i159: i1;
  var $i160: i64;
  var $i161: i32;
  var $p162: ref;
  var $i163: i32;
  var $p164: ref;
  var $i165: i32;
  var $p166: ref;
  var $i167: i64;
  var $i168: i32;
  var $i171: i64;
  var $i172: i64;
  var $i173: i1;
  var $i174: i64;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} {:cexpr "sh_eth_error:arg:intr_status"} boogie_si_record_i32($i1);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} $p2 := netdev_priv($p0);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i1, 4194304);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i1, 1073741824);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i1, 33554432);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i77 := $and.i32($i1, 1048576);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i1, 524288);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i103 := $and.i32($i1, 131072);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i103, 0);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i116 := $and.i32($i1, 65536);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.0, $p129);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p130);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($p131, $mul.ref(105, 1));
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i133 := $load.i8($M.0, $p132);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i134 := $zext.i8.i32($i133);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 0);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i135 == 1);
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $p151 := $bitcast.ref.ref($p150);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($p151, $mul.ref(105, 1));
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i153 := $load.i8($M.0, $p152);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i154 := $zext.i8.i32($i153);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i155 := $ne.i32($i154, 0);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    $i157 := 1150812160;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i158 := $and.i32($i1, $i157);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i159 := $ne.i32($i158, 0);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    return;

  $bb77:
    assume $i159 == 1;
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} $i160 := sh_eth_read($p0, 2);
    call {:si_unique_call 1114} {:cexpr "tmp___5"} boogie_si_record_i64($i160);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i161 := $trunc.i64.i32($i160);
    call {:si_unique_call 1115} {:cexpr "edtrr"} boogie_si_record_i32($i161);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(176, 1));
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, $p162);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(180, 1));
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i165 := $load.i32($M.0, $p164);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(72, 1));
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $i167 := $load.i64($M.0, $p166);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $i168 := $trunc.i64.i32($i167);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} vslice_dummy_var_55 := netdev_err.ref.ref.i32.i32.i32.i32.i32($p0, .str.9, $i1, $i163, $i165, $i168, $i161);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} vslice_dummy_var_56 := sh_eth_txfree($p0);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} $i171 := sh_eth_get_edtrr_trns($p3);
    call {:si_unique_call 1119} {:cexpr "tmp___7"} boogie_si_record_i64($i171);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i172 := $zext.i32.i64($i161);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i173 := $ne.i64($i172, $i171);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    assume {:branchcond $i173} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} netif_wake_queue($p0);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb79:
    assume $i173 == 1;
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} $i174 := sh_eth_get_edtrr_trns($p3);
    call {:si_unique_call 1121} {:cexpr "tmp___6"} boogie_si_record_i64($i174);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} sh_eth_write($p0, $i174, 2);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb74:
    assume $i155 == 1;
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i156 := $and.i32(1150812160, $sub.i32(0, 8388609));
    call {:si_unique_call 1112} {:cexpr "mask"} boogie_si_record_i32($i156);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i157 := $i156;
    goto $bb76;

  $bb65:
    assume $i135 == 1;
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i136 := $and.i32($i1, 8388608);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i137 := $ne.i32($i136, 0);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i137} true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i137 == 1);
    goto $bb67;

  $bb68:
    assume $i137 == 1;
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(144, 1));
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i140 := $load.i64($M.0, $p139);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i141 := $add.i64($i140, 1);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(144, 1));
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p143, $i141);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(408, 1));
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.0, $p144);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $i146 := $and.i32($i145, 128);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i147 := $ne.i32($i146, 0);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i147} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb70:
    assume $i147 == 1;
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} vslice_dummy_var_54 := netdev_err.ref.ref($p0, .str.8);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb59:
    assume $i117 == 1;
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(112, 1));
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i120 := $load.i64($M.0, $p119);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i121 := $add.i64($i120, 1);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(112, 1));
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p123, $i121);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(408, 1));
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i126 := $and.i32($i125, 64);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb61:
    assume $i127 == 1;
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} vslice_dummy_var_53 := netdev_err.ref.ref($p0, .str.7);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb53:
    assume $i104 == 1;
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(88, 1));
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $i107 := $load.i64($M.0, $p106);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i108 := $add.i64($i107, 1);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(88, 1));
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p110, $i108);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(408, 1));
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.0, $p111);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i113 := $and.i32($i112, 64);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i114 := $ne.i32($i113, 0);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb55:
    assume $i114 == 1;
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} vslice_dummy_var_52 := netdev_err.ref.ref($p0, .str.6);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb47:
    assume $i91 == 1;
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(144, 1));
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i94 := $load.i64($M.0, $p93);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i95 := $add.i64($i94, 1);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(144, 1));
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p97, $i95);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(408, 1));
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p98);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i100 := $and.i32($i99, 128);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb49:
    assume $i101 == 1;
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} vslice_dummy_var_51 := netdev_err.ref.ref($p0, .str.5);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb41:
    assume $i78 == 1;
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(144, 1));
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $i81 := $load.i64($M.0, $p80);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $i82 := $add.i64($i81, 1);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(144, 1));
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p84, $i82);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(408, 1));
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i87 := $and.i32($i86, 128);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb43:
    assume $i88 == 1;
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} vslice_dummy_var_50 := netdev_err.ref.ref($p0, .str.4);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb32:
    assume $i63 == 1;
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i1, 16777216);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb34:
    assume $i65 == 1;
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(104, 1));
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i68 := $load.i64($M.0, $p67);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $i69 := $add.i64($i68, 1);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(104, 1));
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p71, $i69);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(408, 1));
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i74 := $and.i32($i73, 64);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb36:
    assume $i75 == 1;
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} vslice_dummy_var_49 := netdev_err.ref.ref($p0, .str.3);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb23:
    assume $i48 == 1;
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i1, 67108864);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb25:
    assume $i50 == 1;
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(128, 1));
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.0, $p52);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $i54 := $add.i64($i53, 1);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(128, 1));
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p56, $i54);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(408, 1));
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i58, 128);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i60 == 1;
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} vslice_dummy_var_48 := netdev_err.ref.ref($p0, .str.2);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} $i6 := sh_eth_read($p0, 29);
    call {:si_unique_call 1087} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    call {:si_unique_call 1088} {:cexpr "felic_stat"} boogie_si_record_i32($i7);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} sh_eth_write($p0, $i8, 29);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i7, 1);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i7, 4);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref(104, 1));
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i25 == 1);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p3);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref(428, 1));
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} $i31 := sh_eth_read($p0, 32);
    call {:si_unique_call 1091} {:cexpr "tmp___1"} boogie_si_record_i64($i31);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i64.i32($i31);
    call {:si_unique_call 1092} {:cexpr "link_stat"} boogie_si_record_i32($i32);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p3);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p33, $mul.ref(428, 1));
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i39 := $i32;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 1);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i41 == 1);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} $i42 := sh_eth_read($p0, 5);
    call {:si_unique_call 1096} {:cexpr "tmp___2"} boogie_si_record_i64($i42);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i43 := $and.i64($i42, $sub.i64(0, 4194305));
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} sh_eth_write($p0, $i43, 5);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} $i44 := sh_eth_read($p0, 29);
    call {:si_unique_call 1099} {:cexpr "tmp___3"} boogie_si_record_i64($i44);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} sh_eth_write($p0, $i44, 29);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} $i45 := sh_eth_read($p0, 5);
    call {:si_unique_call 1102} {:cexpr "tmp___4"} boogie_si_record_i64($i45);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $i46 := $or.i64($i45, 4194304);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} sh_eth_write($p0, $i46, 5);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} sh_eth_rcv_snd_enable($p0);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i41 == 1;
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} sh_eth_rcv_snd_disable($p0);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb14:
    assume $i37 == 1;
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i38 := $xor.i32($i32, $sub.i32(0, 1));
    call {:si_unique_call 1093} {:cexpr "link_stat"} boogie_si_record_i32($i38);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb16;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb9;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(136, 1));
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 1);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(136, 1));
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p16, $i14);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 298230);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} _raw_spin_unlock($p2);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 299262);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    return;
}



const netif_tx_wake_queue: ref;

axiom netif_tx_wake_queue == $sub.ref(0, 300294);

procedure netif_tx_wake_queue($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation netif_tx_wake_queue($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} $i2 := test_and_clear_bit(0, $p1);
    call {:si_unique_call 1126} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(8, 1));
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} __netif_schedule($p5);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const test_and_clear_bit: ref;

axiom test_and_clear_bit == $sub.ref(0, 301326);

procedure test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 1129} {:cexpr "test_and_clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1130} devirtbounce.8(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.6, $p2);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const __netif_schedule: ref;

axiom __netif_schedule == $sub.ref(0, 302358);

procedure __netif_schedule($p0: ref);
  free requires assertsPassed;



implementation __netif_schedule($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    return;
}



const napi_disable_pending: ref;

axiom napi_disable_pending == $sub.ref(0, 303390);

procedure napi_disable_pending($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation napi_disable_pending($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} $i2 := constant_test_bit(1, $p1);
    call {:si_unique_call 1132} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 304422);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    return;
}



const sh_eth_get_settings: ref;

axiom sh_eth_get_settings == $sub.ref(0, 305454);

procedure sh_eth_get_settings($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sh_eth_get_settings($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} $p2 := netdev_priv($p0);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(96, 1));
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} $p5 := spinlock_check($p4);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 1136} {:cexpr "flags"} boogie_si_record_i64($i6);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(392, 1));
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} $i9 := phy_ethtool_gset($p8, $p1);
    call {:si_unique_call 1138} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(96, 1));
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} spin_unlock_irqrestore($p10, $i6);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const sh_eth_set_settings: ref;

axiom sh_eth_set_settings == $sub.ref(0, 306486);

procedure sh_eth_set_settings($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.34, $M.35, $M.5, $M.4, $M.3, $M.2, $CurrAddr;



implementation sh_eth_set_settings($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} $p2 := netdev_priv($p0);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(96, 1));
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} $p5 := spinlock_check($p4);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 1143} {:cexpr "flags"} boogie_si_record_i64($i6);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} sh_eth_rcv_snd_disable($p0);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(392, 1));
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} $i9 := phy_ethtool_sset($p8, $p1);
    call {:si_unique_call 1146} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(14, 1));
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 1);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(416, 1));
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 0);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 112)), $mul.ref(8, 1));
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb11, $bb12;

  $bb12:
    assume !(1 == 1);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} sh_eth_rcv_snd_enable($p0);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(96, 1));
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} spin_unlock_irqrestore($p27, $i6);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb11:
    assume 1 == 1;
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} __const_udelay(4295000);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 112)), $mul.ref(8, 1));
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    call {:si_unique_call 1147} devirtbounce($p26, $p0);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(416, 1));
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 1);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sh_eth_get_msglevel: ref;

axiom sh_eth_get_msglevel == $sub.ref(0, 307518);

procedure sh_eth_get_msglevel($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sh_eth_get_msglevel($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} $p1 := netdev_priv($p0);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(408, 1));
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const sh_eth_set_msglevel: ref;

axiom sh_eth_set_msglevel == $sub.ref(0, 308550);

procedure sh_eth_set_msglevel($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation sh_eth_set_msglevel($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} {:cexpr "sh_eth_set_msglevel:arg:value"} boogie_si_record_i32($i1);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} $p2 := netdev_priv($p0);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(408, 1));
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i1);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    return;
}



const sh_eth_nway_reset: ref;

axiom sh_eth_nway_reset == $sub.ref(0, 309582);

procedure sh_eth_nway_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sh_eth_nway_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} $p1 := netdev_priv($p0);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(96, 1));
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} $p4 := spinlock_check($p3);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} $i5 := _raw_spin_lock_irqsave($p4);
    call {:si_unique_call 1158} {:cexpr "flags"} boogie_si_record_i64($i5);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(392, 1));
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} $i8 := phy_start_aneg($p7);
    call {:si_unique_call 1160} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(96, 1));
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} spin_unlock_irqrestore($p9, $i5);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const ethtool_op_get_link: ref;

axiom ethtool_op_get_link == $sub.ref(0, 310614);

procedure ethtool_op_get_link($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ethtool_op_get_link($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1162} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1163} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const sh_eth_get_ringparam: ref;

axiom sh_eth_get_ringparam == $sub.ref(0, 311646);

procedure sh_eth_get_ringparam($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation sh_eth_get_ringparam($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} $p2 := netdev_priv($p0);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(4, 1));
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 1024);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 1024);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(40, 1));
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(20, 1));
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(44, 1));
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(32, 1));
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    return;
}



const sh_eth_set_ringparam: ref;

axiom sh_eth_set_ringparam == $sub.ref(0, 312678);

procedure sh_eth_set_ringparam($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.2, $M.34, $M.35, $M.7, $M.9, $M.11, $M.13, $M.21, $M.5, $M.4, $CurrAddr, $M.8, $M.16, $M.10, $M.17, $M.12, $M.18, $M.14, $M.19, $M.26;



implementation sh_eth_set_ringparam($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i8;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i37: i32;
  var $i38: i1;
  var $i40: i1;
  var $i41: i8;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i16: i32;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} $p2 := netdev_priv($p0);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(32, 1));
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i32($i5, 1024);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(20, 1));
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i9 := $ugt.i32($i8, 1024);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(32, 1));
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $i12 := $ule.i32($i11, 63);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(20, 1));
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $i15 := $ule.i32($i14, 63);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(24, 1));
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i19 == 1);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(28, 1));
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} $i23 := netif_running($p0);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i8($i23);
    call {:si_unique_call 1167} {:cexpr "tmp___0"} boogie_si_record_i8($i24);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i24);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} sh_eth_ring_free($p0);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} sh_eth_free_dma_buffer($p3);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(20, 1));
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(40, 1));
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i29);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(32, 1));
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(44, 1));
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} $i34 := sh_eth_ring_init($p0);
    call {:si_unique_call 1176} {:cexpr "ret"} boogie_si_record_i32($i34);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i34, 0);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} $i37 := sh_eth_dev_init($p0, 0);
    call {:si_unique_call 1179} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 0);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} $i40 := netif_running($p0);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i8($i40);
    call {:si_unique_call 1182} {:cexpr "tmp___1"} boogie_si_record_i8($i41);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1($i41);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb27:
    assume $i42 == 1;
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.0, $p45);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} sh_eth_write($p0, $i46, 5);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} sh_eth_write($p0, 1, 3);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} netif_wake_queue($p0);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i38 == 1;
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} vslice_dummy_var_58 := netdev_err.ref.ref.ref($p0, .str.33, .str.32);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $i16 := $i37;
    goto $bb10;

  $bb21:
    assume $i35 == 1;
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} vslice_dummy_var_57 := netdev_err.ref.ref.ref($p0, .str.31, .str.32);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i16 := $i34;
    goto $bb10;

  $bb18:
    assume $i25 == 1;
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} netif_tx_disable($p0);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} sh_eth_write($p0, 0, 5);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} sh_eth_write($p0, 0, 2);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} sh_eth_write($p0, 0, 3);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(64, 1));
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} synchronize_irq($i27);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb10;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb13;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb10;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const sh_eth_get_strings: ref;

axiom sh_eth_get_strings == $sub.ref(0, 313710);

procedure sh_eth_get_strings($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation sh_eth_get_strings($p0: ref, $i1: i32, $p2: ref)
{
  var $i3: i1;
  var $i4: i1;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;

  $bb0:
    call {:si_unique_call 1186} {:cexpr "sh_eth_get_strings:arg:stringset"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i3 == 1;
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $i4 := $ugt.i64(128, 63);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.0;
    cmdloc_dummy_var_12 := $M.0;
    call {:si_unique_call 1188} cmdloc_dummy_var_13 := $memcpy.i8(cmdloc_dummy_var_11, cmdloc_dummy_var_12, $p2, sh_eth_gstrings_stats, 128, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_13;
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.0;
    cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 1187} cmdloc_dummy_var_10 := $memcpy.i8(cmdloc_dummy_var_8, cmdloc_dummy_var_9, $p2, sh_eth_gstrings_stats, 128, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_10;
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const sh_eth_get_ethtool_stats: ref;

axiom sh_eth_get_ethtool_stats == $sub.ref(0, 314742);

procedure sh_eth_get_ethtool_stats($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation sh_eth_get_ethtool_stats($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} $p3 := netdev_priv($p0);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i5 := $add.i32(0, 1);
    call {:si_unique_call 1190} {:cexpr "i"} boogie_si_record_i32($i5);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(168, 1));
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64(0);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p2, $mul.ref($i9, 8));
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p10, $i8);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i5, 1);
    call {:si_unique_call 1191} {:cexpr "i"} boogie_si_record_i32($i11);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(176, 1));
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i13);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i5);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p2, $mul.ref($i15, 8));
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p16, $i14);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i11, 1);
    call {:si_unique_call 1192} {:cexpr "i"} boogie_si_record_i32($i17);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(172, 1));
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i19);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i11);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p2, $mul.ref($i21, 8));
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p22, $i20);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(180, 1));
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i17);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p2, $mul.ref($i26, 8));
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p27, $i25);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    return;
}



const sh_eth_get_sset_count: ref;

axiom sh_eth_get_sset_count == $sub.ref(0, 315774);

procedure sh_eth_get_sset_count($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation sh_eth_get_sset_count($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i32;

  $bb0:
    call {:si_unique_call 1193} {:cexpr "sh_eth_get_sset_count:arg:sset"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 95);
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb2:
    assume $i2 == 1;
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $i3 := 4;
    goto $bb4;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 316806);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const netif_tx_disable: ref;

axiom netif_tx_disable == $sub.ref(0, 317838);

procedure netif_tx_disable($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.7, $M.9, $M.11, $M.13, $M.34, $M.35, $M.21, $M.8, $M.16, $M.10, $M.17, $M.12, $M.18, $M.14, $M.19, $M.3, $M.2, $CurrAddr, $M.26, $M.5, $M.4;



implementation netif_tx_disable($p0: ref)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i9: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} local_bh_disable();
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} __bad_size_call_parameter();
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i9 := $u0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(928, 1));
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i32($i14, 0);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} local_bh_enable();
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume $i15 == 1;
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb26;

  $bb26:
    call $p17, $i18, $i19, $i20, $i16 := netif_tx_disable_loop_$bb26($p0, $i9, $p13, $p17, $i18, $i19, $i20, $i16);
    goto $bb26_last;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} $p17 := netdev_get_tx_queue($p0, $i16);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} __netif_tx_lock($p17, $i9);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} netif_tx_stop_queue($p17);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} __netif_tx_unlock($p17);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i16, 1);
    call {:si_unique_call 1208} {:cexpr "i"} boogie_si_record_i32($i18);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p13);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i20 := $ugt.i32($i19, $i18);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i20 == 1);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb28:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i16 := $i18;
    goto $bb28_dummy;

  $bb6:
    assume $i3 == 1;
    call {:si_unique_call 1195} $i12 := devirtbounce.11(0, cpu_number);
    call {:si_unique_call 1196} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i12);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i9 := $i12;
    goto $bb18;

  $bb4:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i4 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb8;

  $bb9:
    assume $i4 == 1;
    call {:si_unique_call 1197} $i11 := devirtbounce.11(0, cpu_number);
    call {:si_unique_call 1198} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i11);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i9 := $i11;
    goto $bb18;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb13:
    assume $i6 == 1;
    call {:si_unique_call 1199} $i10 := devirtbounce.11(0, cpu_number);
    call {:si_unique_call 1200} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i10);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb18;

  $bb11:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb15:
    assume $i7 == 1;
    call {:si_unique_call 1201} $i8 := devirtbounce.11(0, cpu_number);
    call {:si_unique_call 1202} {:cexpr "pfo_ret__"} boogie_si_record_i32($i8);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb18;

  $bb28_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4718;
}



const synchronize_irq: ref;

axiom synchronize_irq == $sub.ref(0, 318870);

procedure synchronize_irq($i0: i32);
  free requires assertsPassed;



implementation synchronize_irq($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} {:cexpr "synchronize_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    return;
}



const local_bh_disable: ref;

axiom local_bh_disable == $sub.ref(0, 319902);

procedure local_bh_disable();
  free requires assertsPassed;



implementation local_bh_disable()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} __local_bh_disable_ip(0, 512);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    return;
}



const __bad_size_call_parameter: ref;

axiom __bad_size_call_parameter == $sub.ref(0, 320934);

procedure __bad_size_call_parameter();



const __netif_tx_lock: ref;

axiom __netif_tx_lock == $sub.ref(0, 321966);

procedure __netif_tx_lock($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __netif_tx_lock($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} {:cexpr "__netif_tx_lock:arg:cpu"} boogie_si_record_i32($i1);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(328, 1));
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} spin_lock($p2);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(400, 1));
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i1);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    return;
}



const __netif_tx_unlock: ref;

axiom __netif_tx_unlock == $sub.ref(0, 322998);

procedure __netif_tx_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __netif_tx_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(400, 1));
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $sub.i32(0, 1));
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(328, 1));
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} spin_unlock($p2);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    return;
}



const local_bh_enable: ref;

axiom local_bh_enable == $sub.ref(0, 324030);

procedure local_bh_enable();
  free requires assertsPassed;



implementation local_bh_enable()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} __local_bh_enable_ip(0, 512);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    return;
}



const __local_bh_enable_ip: ref;

axiom __local_bh_enable_ip == $sub.ref(0, 325062);

procedure __local_bh_enable_ip($i0: i64, $i1: i32);
  free requires assertsPassed;



implementation __local_bh_enable_ip($i0: i64, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} {:cexpr "__local_bh_enable_ip:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 1217} {:cexpr "__local_bh_enable_ip:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    return;
}



const __local_bh_disable_ip: ref;

axiom __local_bh_disable_ip == $sub.ref(0, 326094);

procedure __local_bh_disable_ip($i0: i64, $i1: i32);
  free requires assertsPassed;



implementation __local_bh_disable_ip($i0: i64, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} {:cexpr "__local_bh_disable_ip:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 1219} {:cexpr "__local_bh_disable_ip:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    return;
}



const phy_start_aneg: ref;

axiom phy_start_aneg == $sub.ref(0, 327126);

procedure phy_start_aneg($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation phy_start_aneg($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1220} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1221} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const phy_ethtool_sset: ref;

axiom phy_ethtool_sset == $sub.ref(0, 328158);

procedure phy_ethtool_sset($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation phy_ethtool_sset($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1222} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1223} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const phy_ethtool_gset: ref;

axiom phy_ethtool_gset == $sub.ref(0, 329190);

procedure phy_ethtool_gset($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation phy_ethtool_gset($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1224} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1225} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const sh_mdc_ctrl: ref;

axiom sh_mdc_ctrl == $sub.ref(0, 330222);

procedure sh_mdc_ctrl($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.34, $M.35, $M.5, $M.4, $M.3, $M.2, $CurrAddr;



implementation sh_mdc_ctrl($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} {:cexpr "sh_mdc_ctrl:arg:bit"} boogie_si_record_i32($i1);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 48)), $mul.ref(0, 1));
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i1, 0);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 48)), $mul.ref(24, 1));
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 48)), $mul.ref(44, 1));
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} bb_clr($p18, $i20);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 48)), $mul.ref(24, 1));
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 48)), $mul.ref(44, 1));
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} bb_set($p14, $i16);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 48)), $mul.ref(0, 1));
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 48)), $mul.ref(24, 1));
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    call {:si_unique_call 1227} devirtbounce.12($p9, $p11);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sh_mmd_ctrl: ref;

axiom sh_mmd_ctrl == $sub.ref(0, 331254);

procedure sh_mmd_ctrl($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.34, $M.35, $M.5, $M.4, $M.3, $M.2, $CurrAddr;



implementation sh_mmd_ctrl($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} {:cexpr "sh_mmd_ctrl:arg:bit"} boogie_si_record_i32($i1);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 48)), $mul.ref(0, 1));
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i1, 0);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 48)), $mul.ref(24, 1));
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 48)), $mul.ref(32, 1));
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} bb_clr($p18, $i20);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 48)), $mul.ref(24, 1));
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 48)), $mul.ref(32, 1));
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} bb_set($p14, $i16);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 48)), $mul.ref(0, 1));
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 48)), $mul.ref(24, 1));
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    call {:si_unique_call 1231} devirtbounce.12($p9, $p11);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sh_set_mdio: ref;

axiom sh_set_mdio == $sub.ref(0, 332286);

procedure sh_set_mdio($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.34, $M.35, $M.5, $M.4, $M.3, $M.2, $CurrAddr;



implementation sh_set_mdio($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} {:cexpr "sh_set_mdio:arg:bit"} boogie_si_record_i32($i1);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 48)), $mul.ref(0, 1));
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i1, 0);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 48)), $mul.ref(24, 1));
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 48)), $mul.ref(36, 1));
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} bb_clr($p18, $i20);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 48)), $mul.ref(24, 1));
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 48)), $mul.ref(36, 1));
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} bb_set($p14, $i16);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 48)), $mul.ref(0, 1));
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 8), 48)), $mul.ref(24, 1));
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    call {:si_unique_call 1235} devirtbounce.12($p9, $p11);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sh_get_mdio: ref;

axiom sh_get_mdio == $sub.ref(0, 333318);

procedure sh_get_mdio($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.34, $M.35, $M.5, $M.4, $M.3, $M.2, $CurrAddr;



implementation sh_get_mdio($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 48)), $mul.ref(0, 1));
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 48)), $mul.ref(24, 1));
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 48)), $mul.ref(40, 1));
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} $i15 := bb_read($p12, $i14);
    call {:si_unique_call 1240} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 48)), $mul.ref(0, 1));
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 8), 48)), $mul.ref(24, 1));
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    call {:si_unique_call 1238} devirtbounce.12($p8, $p10);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bb_read: ref;

axiom bb_read == $sub.ref(0, 334350);

procedure bb_read($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation bb_read($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} {:cexpr "bb_read:arg:msk"} boogie_si_record_i32($i1);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} $i2 := ioread32($p0);
    call {:si_unique_call 1243} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, $i1);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const bb_set: ref;

axiom bb_set == $sub.ref(0, 335382);

procedure bb_set($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation bb_set($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} {:cexpr "bb_set:arg:msk"} boogie_si_record_i32($i1);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} $i2 := ioread32($p0);
    call {:si_unique_call 1246} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, $i1);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} iowrite32($i3, $p0);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    return;
}



const bb_clr: ref;

axiom bb_clr == $sub.ref(0, 336414);

procedure bb_clr($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation bb_clr($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} {:cexpr "bb_clr:arg:msk"} boogie_si_record_i32($i1);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} $i2 := ioread32($p0);
    call {:si_unique_call 1250} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $i3 := $xor.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i2, $i3);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} iowrite32($i4, $p0);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    return;
}



const sh_eth_drv_probe: ref;

axiom sh_eth_drv_probe == $sub.ref(0, 337446);

procedure sh_eth_drv_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.34, $M.35, $M.21, $CurrAddr, $M.26, $M.5, $M.4, $M.3, $M.2;



implementation sh_eth_drv_probe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i1;
  var $i48: i8;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i32;
  var $p54: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $i82: i8;
  var $i83: i8;
  var $p84: ref;
  var $i85: i8;
  var $i86: i8;
  var $i87: i8;
  var $i88: i8;
  var $p89: ref;
  var $i90: i8;
  var $i91: i8;
  var $i92: i8;
  var $p93: ref;
  var $i94: i8;
  var $i95: i8;
  var $i96: i8;
  var $i97: i8;
  var $i98: i8;
  var $i99: i64;
  var $i100: i1;
  var $p101: ref;
  var $i102: i64;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i32;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $i120: i1;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i32;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i8;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i1;
  var $i146: i8;
  var $i147: i1;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $i156: i8;
  var $i157: i32;
  var $i158: i1;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $i165: i1;
  var $i166: i8;
  var $i167: i1;
  var $p168: ref;
  var $p169: ref;
  var $i170: i64;
  var $i171: i32;
  var $i172: i32;
  var $p173: ref;
  var $p174: ref;
  var $i175: i1;
  var $p176: ref;
  var $p177: ref;
  var $i178: i8;
  var $i179: i32;
  var $i180: i1;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $i185: i64;
  var $i186: i1;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $i195: i8;
  var $i196: i32;
  var $i197: i1;
  var $i198: i32;
  var $i199: i1;
  var $p200: ref;
  var $p202: ref;
  var $i203: i32;
  var $i204: i1;
  var $p205: ref;
  var $i206: i64;
  var $i207: i32;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $i211: i32;
  var $p213: ref;
  var $p215: ref;
  var $p216: ref;
  var $i33: i32;
  var $i218: i64;
  var $i219: i1;
  var $p220: ref;
  var $p222: ref;
  var $i16: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: ref;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} $p3 := dev_get_platdata($p2);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(1456, 1));
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} $p7 := platform_get_resource($p0, 512, 0);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 1256} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} $p17 := alloc_etherdev_mqs(432, 1, 1);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} pm_runtime_enable($p20);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} vslice_dummy_var_60 := pm_runtime_get_sync($p21);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p17, $mul.ref(0, 3176)), $mul.ref(56, 1));
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p25, $i24);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(8, 1));
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    call {:si_unique_call 1261} {:cexpr "devno"} boogie_si_record_i32($i27);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 0);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $i27;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p17, $mul.ref(0, 3176)), $mul.ref(535, 1));
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, $sub.i8(0, 1));
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} $i31 := platform_get_irq($p0, 0);
    call {:si_unique_call 1263} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, 0);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p17, $mul.ref(0, 3176)), $mul.ref(64, 1));
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i31);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 3176)), $mul.ref(1296, 1)), $mul.ref(0, 1));
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $p35);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} $p38 := netdev_priv($p17);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 432)), $mul.ref(44, 1));
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, 64);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p39, $mul.ref(0, 432)), $mul.ref(40, 1));
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, 64);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} $p43 := devm_ioremap_resource($p42, $p7);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p39, $mul.ref(0, 432)), $mul.ref(24, 1));
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, $p43);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p39, $mul.ref(0, 432)), $mul.ref(24, 1));
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} $i47 := IS_ERR($p46);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i48 := $zext.i1.i8($i47);
    call {:si_unique_call 1267} {:cexpr "tmp___3"} boogie_si_record_i8($i48);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i8.i1($i48);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p39, $mul.ref(0, 432)), $mul.ref(96, 1));
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} vslice_dummy_var_61 := spinlock_check($p54);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p39, $mul.ref(0, 432)), $mul.ref(96, 1)), $mul.ref(0, 1));
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} __raw_spin_lock_init($p58, .str.11, $p1);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p39, $mul.ref(0, 432)), $mul.ref(0, 1));
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p59, $p0);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1)), $mul.ref(1240, 1));
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    $p67 := $p3;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $i69 := $eq.i64($i68, 0);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p67, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p39, $mul.ref(0, 432)), $mul.ref(376, 1));
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, $i73);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p67, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p39, $mul.ref(0, 432)), $mul.ref(404, 1));
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p77, $i76);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p67, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p39, $mul.ref(0, 432)), $mul.ref(188, 1));
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p80, $i79);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p67, $mul.ref(0, 32)), $mul.ref(30, 1));
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.0, $p81);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i83 := $and.i8($i82, 1);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p39, $mul.ref(0, 432)), $mul.ref(428, 1));
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.0, $p84);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $i86 := $and.i8($i83, 1);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $i87 := $and.i8($i85, $sub.i8(0, 2));
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $i88 := $or.i8($i87, $i86);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p84, $i88);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p67, $mul.ref(0, 32)), $mul.ref(30, 1));
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.0, $p89);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i91 := $lshr.i8($i90, 1);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i92 := $and.i8($i91, 1);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p39, $mul.ref(0, 432)), $mul.ref(428, 1));
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.0, $p93);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $i95 := $and.i8($i92, 1);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $i96 := $shl.i8($i95, 1);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i97 := $and.i8($i94, $sub.i8(0, 3));
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $i98 := $or.i8($i97, $i96);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p93, $i98);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p6);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $i100 := $ne.i64($i99, 0);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i100 == 1);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} $p106 := __of_match_device($0.ref, $p105);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p106, $mul.ref(0, 200)), $mul.ref(192, 1));
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.20, $p107);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p39, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p110, $p108);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p39, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p112, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} $p115 := sh_eth_get_register_offset($i114);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p39, $mul.ref(0, 432)), $mul.ref(16, 1));
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p116, $p115);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p39, $mul.ref(0, 432)), $mul.ref(16, 1));
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $i119 := $p2i.ref.i64($p118);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $i120 := $eq.i64($i119, 0);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p39, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} sh_eth_set_default_cpu_data($p128);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p39, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.0, $p129);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p130);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($p131, $mul.ref(104, 1));
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i133 := $load.i8($M.0, $p132);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $i134 := $zext.i8.i32($i133);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i135 := $ne.i32($i134, 0);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i135 == 1);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p17, $mul.ref(0, 3176)), $mul.ref(488, 1));
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p137, sh_eth_netdev_ops);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p17, $mul.ref(0, 3176)), $mul.ref(496, 1));
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p138, sh_eth_ethtool_ops);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p17, $mul.ref(0, 3176)), $mul.ref(1048, 1));
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p139, 1250);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p39, $mul.ref(0, 432)), $mul.ref(408, 1));
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p140, 204);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p67, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $p142 := $bitcast.ref.ref($p141);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} read_mac_address($p17, $p142);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p17, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.0, $p143);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} $i145 := is_valid_ether_addr($p144);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $i146 := $zext.i1.i8($i145);
    call {:si_unique_call 1281} {:cexpr "tmp___4"} boogie_si_record_i8($i146);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i147 := $trunc.i8.i1($i146);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    assume {:branchcond $i147} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    $i148 := 1;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $i149 := $ne.i32($i148, 0);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p39, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.0, $p152);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $p154 := $bitcast.ref.ref($p153);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($p154, $mul.ref(104, 1));
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $i156 := $load.i8($M.0, $p155);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $i157 := $zext.i8.i32($i156);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i158 := $ne.i32($i157, 0);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i175 := $eq.i32($i29, 0);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb47;

  $bb47:
    assume !($i175 == 1);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $p176 := $bitcast.ref.ref($p67);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($p176, $mul.ref(30, 1));
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i178 := $load.i8($M.0, $p177);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $i179 := $zext.i8.i32($i178);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $i180 := $ne.i32($i179, 0);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    assume {:branchcond $i180} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} $i198 := sh_mdio_init($p39, $p67);
    call {:si_unique_call 1294} {:cexpr "ret"} boogie_si_record_i32($i198);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $i199 := $ne.i32($i198, 0);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i199} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p39, $mul.ref(0, 432)), $mul.ref(192, 1));
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} netif_napi_add($p17, $p202, sh_eth_poll, 64);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} $i203 := ldv_register_netdev_17($p17);
    call {:si_unique_call 1298} {:cexpr "ret"} boogie_si_record_i32($i203);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i204 := $ne.i32($i203, 0);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    assume {:branchcond $i204} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p17, $mul.ref(0, 3176)), $mul.ref(56, 1));
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $i206 := $load.i64($M.0, $p205);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $i207 := $trunc.i64.i32($i206);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p17, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $p209 := $load.ref($M.0, $p208);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p17, $mul.ref(0, 3176)), $mul.ref(64, 1));
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $i211 := $load.i32($M.0, $p210);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} vslice_dummy_var_67 := netdev_info.ref.ref.i32.ref.i32($p17, .str.16, $i207, $p209, $i211);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} vslice_dummy_var_68 := pm_runtime_put($p213);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $p215 := $bitcast.ref.ref($p17);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} platform_set_drvdata($p0, $p215);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $i16 := $i203;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb60:
    assume $i204 == 1;
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p39, $mul.ref(0, 432)), $mul.ref(192, 1));
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} netif_napi_del($p216);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} vslice_dummy_var_66 := sh_mdio_release($p39);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $i33 := $i203;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i218 := $p2i.ref.i64($p17);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i219 := $ne.i64($i218, 0);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    assume {:branchcond $i219} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} vslice_dummy_var_69 := pm_runtime_put($p220);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} pm_runtime_disable($p222);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $i16 := $i33;
    goto $bb3;

  $bb64:
    assume $i219 == 1;
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} ldv_free_netdev_18($p17);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb57:
    assume $i199 == 1;
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p17, $mul.ref(0, 3176)), $mul.ref(1296, 1));
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} vslice_dummy_var_65 := dev_err.ref.ref($p200, .str.15);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i33 := $i198;
    goto $bb13;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i180 == 1;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p39, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $p182 := $load.ref($M.0, $p181);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p182, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.0, $p183);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $i185 := $p2i.ref.i64($p184);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $i186 := $ne.i64($i185, 0);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p39, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.0, $p191);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $p193 := $bitcast.ref.ref($p192);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($p193, $mul.ref(104, 1));
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i195 := $load.i8($M.0, $p194);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $i196 := $zext.i8.i32($i195);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $i197 := $ne.i32($i196, 0);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb53:
    assume $i197 == 1;
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} sh_eth_tsu_init($p39);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb50:
    assume $i186 == 1;
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p39, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $p188 := $load.ref($M.0, $p187);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p188, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.0, $p189);
    call {:si_unique_call 1291} devirtbounce($p190, $p17);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i175 == 1;
    goto $bb46;

  $bb39:
    assume $i158 == 1;
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} $p159 := platform_get_resource($p0, 512, 1);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} $p161 := devm_ioremap_resource($p160, $p159);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p39, $mul.ref(0, 432)), $mul.ref(32, 1));
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p162, $p161);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p39, $mul.ref(0, 432)), $mul.ref(32, 1));
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.0, $p163);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} $i165 := IS_ERR($p164);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $i166 := $zext.i1.i8($i165);
    call {:si_unique_call 1287} {:cexpr "tmp___7"} boogie_si_record_i8($i166);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $i167 := $trunc.i8.i1($i166);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    assume {:branchcond $i167} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i172 := $srem.i32($i29, 2);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p39, $mul.ref(0, 432)), $mul.ref(420, 1));
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p173, $i172);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p17, $mul.ref(0, 3176)), $mul.ref(208, 1));
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p174, 512);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume $i167 == 1;
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p39, $mul.ref(0, 432)), $mul.ref(32, 1));
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $p169 := $load.ref($M.0, $p168);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} $i170 := PTR_ERR($p169);
    call {:si_unique_call 1289} {:cexpr "tmp___6"} boogie_si_record_i64($i170);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i171 := $trunc.i64.i32($i170);
    call {:si_unique_call 1290} {:cexpr "ret"} boogie_si_record_i32($i171);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i33 := $i171;
    goto $bb13;

  $bb36:
    assume $i149 == 1;
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} vslice_dummy_var_64 := dev_warn.ref.ref($p150, .str.14);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} eth_hw_addr_random($p17);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb33:
    assume $i147 == 1;
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i148 := 0;
    goto $bb35;

  $bb30:
    assume $i135 == 1;
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p17, $mul.ref(0, 3176)), $mul.ref(488, 1));
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p136, sh_eth_netdev_ops_tsu);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i120 == 1;
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p39, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p123, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} vslice_dummy_var_63 := dev_err.ref.ref.i32($p121, .str.13, $i125);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 22);
    goto $bb13;

  $bb24:
    assume $i100 == 1;
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p6, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $i102 := $load.i64($M.0, $p101);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $p103 := $i2p.i64.ref($i102);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p39, $mul.ref(0, 432)), $mul.ref(8, 1));
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p104, $p103);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i69 == 1;
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} vslice_dummy_var_62 := dev_err.ref.ref($p70, .str.12);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 22);
    goto $bb13;

  $bb18:
    assume $i64 == 1;
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} $p66 := sh_eth_parse_dt($p65);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $p67 := $p66;
    goto $bb20;

  $bb15:
    assume $i49 == 1;
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p39, $mul.ref(0, 432)), $mul.ref(24, 1));
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} $i52 := PTR_ERR($p51);
    call {:si_unique_call 1269} {:cexpr "tmp___2"} boogie_si_record_i64($i52);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i64.i32($i52);
    call {:si_unique_call 1270} {:cexpr "ret"} boogie_si_record_i32($i53);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $i33 := $i53;
    goto $bb13;

  $bb11:
    assume $i32 == 1;
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 19);
    goto $bb13;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb10;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} vslice_dummy_var_59 := dev_err.ref.ref($p14, .str.10);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb3;
}



const sh_eth_drv_remove: ref;

axiom sh_eth_drv_remove == $sub.ref(0, 338478);

procedure sh_eth_drv_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.21;



implementation sh_eth_drv_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var vslice_dummy_var_70: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} $p1 := platform_get_drvdata($p0);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} $p3 := netdev_priv($p2);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} ldv_unregister_netdev_19($p2);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 432)), $mul.ref(192, 1));
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} netif_napi_del($p5);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} vslice_dummy_var_70 := sh_mdio_release($p4);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} pm_runtime_disable($p7);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} ldv_free_netdev_20($p2);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const platform_get_drvdata: ref;

axiom platform_get_drvdata == $sub.ref(0, 339510);

procedure platform_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation platform_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_unregister_netdev_19: ref;

axiom ldv_unregister_netdev_19 == $sub.ref(0, 340542);

procedure ldv_unregister_netdev_19($p0: ref);
  free requires assertsPassed;
  modifies $M.21;



implementation ldv_unregister_netdev_19($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} unregister_netdev($p0);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $M.21 := 0;
    call {:si_unique_call 1316} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    return;
}



const netif_napi_del: ref;

axiom netif_napi_del == $sub.ref(0, 341574);

procedure netif_napi_del($p0: ref);
  free requires assertsPassed;



implementation netif_napi_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    return;
}



const sh_mdio_release: ref;

axiom sh_mdio_release == $sub.ref(0, 342606);

procedure sh_mdio_release($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sh_mdio_release($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} mdiobus_unregister($p2);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} free_mdio_bitbang($p4);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const pm_runtime_disable: ref;

axiom pm_runtime_disable == $sub.ref(0, 343638);

procedure pm_runtime_disable($p0: ref);
  free requires assertsPassed;



implementation pm_runtime_disable($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} __pm_runtime_disable($p0, 1);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_netdev_20: ref;

axiom ldv_free_netdev_20 == $sub.ref(0, 344670);

procedure ldv_free_netdev_20($p0: ref);
  free requires assertsPassed;
  modifies $M.21;



implementation ldv_free_netdev_20($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} free_netdev($p0);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $M.21 := 0;
    call {:si_unique_call 1321} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    return;
}



const free_netdev: ref;

axiom free_netdev == $sub.ref(0, 345702);

procedure free_netdev($p0: ref);
  free requires assertsPassed;



implementation free_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    return;
}



const __pm_runtime_disable: ref;

axiom __pm_runtime_disable == $sub.ref(0, 346734);

procedure __pm_runtime_disable($p0: ref, $i1: i1);
  free requires assertsPassed;



implementation __pm_runtime_disable($p0: ref, $i1: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} {:cexpr "__pm_runtime_disable:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    return;
}



const mdiobus_unregister: ref;

axiom mdiobus_unregister == $sub.ref(0, 347766);

procedure mdiobus_unregister($p0: ref);
  free requires assertsPassed;



implementation mdiobus_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    return;
}



const free_mdio_bitbang: ref;

axiom free_mdio_bitbang == $sub.ref(0, 348798);

procedure free_mdio_bitbang($p0: ref);
  free requires assertsPassed;



implementation free_mdio_bitbang($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    return;
}



const unregister_netdev: ref;

axiom unregister_netdev == $sub.ref(0, 349830);

procedure unregister_netdev($p0: ref);
  free requires assertsPassed;



implementation unregister_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 350862);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_get_platdata: ref;

axiom dev_get_platdata == $sub.ref(0, 351894);

procedure dev_get_platdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_platdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const platform_get_resource: ref;

axiom platform_get_resource == $sub.ref(0, 352926);

procedure platform_get_resource($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation platform_get_resource($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} {:cexpr "platform_get_resource:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1324} {:cexpr "platform_get_resource:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} $p3 := external_alloc();
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 353958);

procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1326} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1327} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1328} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1329} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const alloc_etherdev_mqs: ref;

axiom alloc_etherdev_mqs == $sub.ref(0, 354990);

procedure alloc_etherdev_mqs($i0: i32, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_etherdev_mqs($i0: i32, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} {:cexpr "alloc_etherdev_mqs:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1331} {:cexpr "alloc_etherdev_mqs:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1332} {:cexpr "alloc_etherdev_mqs:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} $p3 := external_alloc();
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const pm_runtime_enable: ref;

axiom pm_runtime_enable == $sub.ref(0, 356022);

procedure pm_runtime_enable($p0: ref);
  free requires assertsPassed;



implementation pm_runtime_enable($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    return;
}



const platform_get_irq: ref;

axiom platform_get_irq == $sub.ref(0, 357054);

procedure platform_get_irq($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation platform_get_irq($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1334} {:cexpr "platform_get_irq:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1335} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1336} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const devm_ioremap_resource: ref;

axiom devm_ioremap_resource == $sub.ref(0, 358086);

procedure devm_ioremap_resource($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devm_ioremap_resource($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} $p2 := external_alloc();
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 359118);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    return;
}



const sh_eth_parse_dt: ref;

axiom sh_eth_parse_dt == $sub.ref(0, 360150);

procedure sh_eth_parse_dt($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation sh_eth_parse_dt($p0: ref) returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;
}



const __of_match_device: ref;

axiom __of_match_device == $sub.ref(0, 361182);

procedure __of_match_device($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __of_match_device($p0: ref, $p1: ref) returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;
}



const sh_eth_get_register_offset: ref;

axiom sh_eth_get_register_offset == $sub.ref(0, 362214);

procedure sh_eth_get_register_offset($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation sh_eth_get_register_offset($i0: i32) returns ($r: ref)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    call {:si_unique_call 1338} {:cexpr "sh_eth_get_register_offset:arg:register_type"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i0, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb8:
    assume $i4 == 1;
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $p7 := sh_eth_offset_fast_sh3_sh2;
    goto $bb15;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $p7 := sh_eth_offset_fast_sh4;
    goto $bb15;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $p7 := sh_eth_offset_fast_rcar;
    goto $bb15;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i5 == 1);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $p7 := sh_eth_offset_fast_rz;
    goto $bb15;

  $bb11:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb10;

  $bb13:
    assume $i6 == 1;
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $p7 := sh_eth_offset_gigabit;
    goto $bb15;
}



const sh_eth_set_default_cpu_data: ref;

axiom sh_eth_set_default_cpu_data == $sub.ref(0, 363246);

procedure sh_eth_set_default_cpu_data($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation sh_eth_set_default_cpu_data($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(40, 1));
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(56, 1));
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(80, 1));
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i23 == 1;
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p24, 1205534720);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(80, 1));
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, 2100992);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(56, 1));
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p16, 1799);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(64, 1));
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p12, 458759);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p8, 55);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(40, 1));
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, 55);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const read_mac_address: ref;

axiom read_mac_address == $sub.ref(0, 364278);

procedure read_mac_address($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation read_mac_address($p0: ref, $p1: ref)
{
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i8;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $i37: i8;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i64;
  var $i43: i8;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i8;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i64;
  var $i54: i8;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i8;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p1, $mul.ref(3, 1));
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p1, $mul.ref(5, 1));
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i24 == 1);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} $i30 := sh_eth_read($p0, 49);
    call {:si_unique_call 1340} {:cexpr "tmp"} boogie_si_record_i64($i30);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $i31 := $lshr.i64($i30, 24);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i64.i8($i31);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, $i32);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} $i35 := sh_eth_read($p0, 49);
    call {:si_unique_call 1342} {:cexpr "tmp___0"} boogie_si_record_i64($i35);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i36 := $lshr.i64($i35, 16);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i64.i8($i36);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p39, $mul.ref(1, 1));
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, $i37);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} $i41 := sh_eth_read($p0, 49);
    call {:si_unique_call 1344} {:cexpr "tmp___1"} boogie_si_record_i64($i41);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i42 := $lshr.i64($i41, 8);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i64.i8($i42);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p45, $mul.ref(2, 1));
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, $i43);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} $i47 := sh_eth_read($p0, 49);
    call {:si_unique_call 1346} {:cexpr "tmp___2"} boogie_si_record_i64($i47);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i64.i8($i47);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p50, $mul.ref(3, 1));
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p51, $i48);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} $i52 := sh_eth_read($p0, 50);
    call {:si_unique_call 1348} {:cexpr "tmp___3"} boogie_si_record_i64($i52);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $i53 := $lshr.i64($i52, 8);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i64.i8($i53);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p56, $mul.ref(4, 1));
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p57, $i54);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} $i58 := sh_eth_read($p0, 50);
    call {:si_unique_call 1350} {:cexpr "tmp___4"} boogie_si_record_i64($i58);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i64.i8($i58);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref(5, 1));
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, $i59);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i25 := $ugt.i64(6, 63);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i25 == 1);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.0;
    cmdloc_dummy_var_18 := $M.0;
    call {:si_unique_call 1352} cmdloc_dummy_var_19 := $memcpy.i8(cmdloc_dummy_var_17, cmdloc_dummy_var_18, $p29, $p1, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_19;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i25 == 1;
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.0;
    cmdloc_dummy_var_15 := $M.0;
    call {:si_unique_call 1351} cmdloc_dummy_var_16 := $memcpy.i8(cmdloc_dummy_var_14, cmdloc_dummy_var_15, $p27, $p1, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_16;
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb2;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const is_valid_ether_addr: ref;

axiom is_valid_ether_addr == $sub.ref(0, 365310);

procedure is_valid_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_valid_ether_addr($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} $i1 := is_multicast_ether_addr($p0);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1354} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} $i6 := is_zero_ether_addr($p0);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 1356} {:cexpr "tmp___1"} boogie_si_record_i8($i7);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb12;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb11;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 366342);

procedure dev_warn.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1357} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1358} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const eth_hw_addr_random: ref;

axiom eth_hw_addr_random == $sub.ref(0, 367374);

procedure eth_hw_addr_random($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation eth_hw_addr_random($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(580, 1));
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 1);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} eth_random_addr($p3);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    return;
}



const sh_eth_tsu_init: ref;

axiom sh_eth_tsu_init == $sub.ref(0, 368406);

procedure sh_eth_tsu_init($p0: ref);
  free requires assertsPassed;



implementation sh_eth_tsu_init($p0: ref)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} $i1 := sh_eth_is_rz_fast_ether($p0);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1361} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} sh_eth_tsu_write($p0, 0, 67);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} sh_eth_tsu_write($p0, 0, 68);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} sh_eth_tsu_write($p0, 0, 69);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} sh_eth_tsu_write($p0, 12, 70);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} sh_eth_tsu_write($p0, 12, 71);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} sh_eth_tsu_write($p0, 0, 72);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} sh_eth_tsu_write($p0, 0, 73);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} sh_eth_tsu_write($p0, 0, 74);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} sh_eth_tsu_write($p0, 0, 75);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} sh_eth_tsu_write($p0, 12288, 76);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} $i4 := sh_eth_is_gether($p0);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 1374} {:cexpr "tmp___0"} boogie_si_record_i8($i5);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} sh_eth_tsu_write($p0, 0, 79);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} sh_eth_tsu_write($p0, 0, 80);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} sh_eth_tsu_write($p0, 0, 81);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} sh_eth_tsu_write($p0, 0, 82);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} sh_eth_tsu_write($p0, 0, 88);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} sh_eth_tsu_write($p0, 0, 89);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} sh_eth_tsu_write($p0, 0, 90);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} sh_eth_tsu_write($p0, 0, 91);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} sh_eth_tsu_write($p0, 0, 92);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} sh_eth_tsu_write($p0, 0, 77);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} sh_eth_tsu_write($p0, 0, 78);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} sh_eth_tsu_write($p0, 0, 88);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sh_mdio_init: ref;

axiom sh_mdio_init == $sub.ref(0, 369438);

procedure sh_mdio_init($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation sh_mdio_init($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p52: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $i82: i32;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $i89: i64;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i73: i32;
  var $i94: i1;
  var $i63: i32;
  var $p95: ref;
  var $p96: ref;
  var $i11: i32;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(0, 1));
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(0, 1));
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} $p7 := devm_kzalloc($p6, 48, 208);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(24, 1));
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(16, 1));
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref(31, 2));
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i64($i17);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p13, $mul.ref($i18, 1));
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p8, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p19);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p8, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p22);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p8, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 8);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p8, $mul.ref(0, 48)), $mul.ref(36, 1));
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 4);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p8, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 2);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p8, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 1);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 48)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, bb_ops);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p8, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} $p31 := alloc_mdio_bitbang($p30);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $p31);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 1944)), $mul.ref(0, 1));
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, .str.17);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 1944)), $mul.ref(232, 1));
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, $p6);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 1944)), $mul.ref(8, 1));
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 1472)), $mul.ref(0, 1));
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 1472)), $mul.ref(8, 1));
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} vslice_dummy_var_71 := snprintf.ref.i64.ref.ref.i32($p46, 17, .str.18, $p48, $i50);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} $p52 := devm_kmalloc_array($p6, 32, 4, 208);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, $p52);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i62 := $eq.i64($i61, 0);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    $p64 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1472)), $mul.ref(16, 1)), $mul.ref(1240, 1));
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p65);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i67 == 1);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p77, $sub.i32(0, 1));
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p98, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($p100, $mul.ref(1, 4));
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p101, $sub.i32(0, 1));
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p103, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($p105, $mul.ref(2, 4));
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p106, $sub.i32(0, 1));
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p108, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p110, $mul.ref(3, 4));
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p111, $sub.i32(0, 1));
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p113, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($p115, $mul.ref(4, 4));
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p116, $sub.i32(0, 1));
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p118, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p120, $mul.ref(5, 4));
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p121, $sub.i32(0, 1));
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p123, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.0, $p124);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($p125, $mul.ref(6, 4));
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p126, $sub.i32(0, 1));
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p128, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.0, $p129);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($p130, $mul.ref(7, 4));
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p131, $sub.i32(0, 1));
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p132);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p133, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.0, $p134);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($p135, $mul.ref(8, 4));
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p136, $sub.i32(0, 1));
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p138, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $p140 := $load.ref($M.0, $p139);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($p140, $mul.ref(9, 4));
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p141, $sub.i32(0, 1));
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p143, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $p145 := $load.ref($M.0, $p144);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($p145, $mul.ref(10, 4));
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p146, $sub.i32(0, 1));
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.0, $p147);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p148, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($p150, $mul.ref(11, 4));
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p151, $sub.i32(0, 1));
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.0, $p152);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p153, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.0, $p154);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($p155, $mul.ref(12, 4));
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p156, $sub.i32(0, 1));
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $p158 := $load.ref($M.0, $p157);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p158, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $p160 := $load.ref($M.0, $p159);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($p160, $mul.ref(13, 4));
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p161, $sub.i32(0, 1));
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $p163 := $load.ref($M.0, $p162);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p163, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $p165 := $load.ref($M.0, $p164);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($p165, $mul.ref(14, 4));
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p166, $sub.i32(0, 1));
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $p168 := $load.ref($M.0, $p167);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p168, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $p170 := $load.ref($M.0, $p169);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($p170, $mul.ref(15, 4));
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p171, $sub.i32(0, 1));
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $p173 := $load.ref($M.0, $p172);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p173, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $p175 := $load.ref($M.0, $p174);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($p175, $mul.ref(16, 4));
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p176, $sub.i32(0, 1));
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $p178 := $load.ref($M.0, $p177);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p178, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $p180 := $load.ref($M.0, $p179);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($p180, $mul.ref(17, 4));
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p181, $sub.i32(0, 1));
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.0, $p182);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p183, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $p185 := $load.ref($M.0, $p184);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($p185, $mul.ref(18, 4));
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p186, $sub.i32(0, 1));
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $p188 := $load.ref($M.0, $p187);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p188, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.0, $p189);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($p190, $mul.ref(19, 4));
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p191, $sub.i32(0, 1));
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $p193 := $load.ref($M.0, $p192);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p193, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $p195 := $load.ref($M.0, $p194);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($p195, $mul.ref(20, 4));
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p196, $sub.i32(0, 1));
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $p198 := $load.ref($M.0, $p197);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p198, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $p200 := $load.ref($M.0, $p199);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($p200, $mul.ref(21, 4));
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p201, $sub.i32(0, 1));
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $p203 := $load.ref($M.0, $p202);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p203, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $p205 := $load.ref($M.0, $p204);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($p205, $mul.ref(22, 4));
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p206, $sub.i32(0, 1));
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.0, $p207);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p208, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $p210 := $load.ref($M.0, $p209);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($p210, $mul.ref(23, 4));
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p211, $sub.i32(0, 1));
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $p213 := $load.ref($M.0, $p212);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p213, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $p215 := $load.ref($M.0, $p214);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($p215, $mul.ref(24, 4));
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p216, $sub.i32(0, 1));
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.0, $p217);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p218, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $p220 := $load.ref($M.0, $p219);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($p220, $mul.ref(25, 4));
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p221, $sub.i32(0, 1));
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $p223 := $load.ref($M.0, $p222);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p223, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $p225 := $load.ref($M.0, $p224);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($p225, $mul.ref(26, 4));
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p226, $sub.i32(0, 1));
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $p228 := $load.ref($M.0, $p227);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p228, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $p230 := $load.ref($M.0, $p229);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($p230, $mul.ref(27, 4));
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p231, $sub.i32(0, 1));
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $p233 := $load.ref($M.0, $p232);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p233, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $p235 := $load.ref($M.0, $p234);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($p235, $mul.ref(28, 4));
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p236, $sub.i32(0, 1));
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $p238 := $load.ref($M.0, $p237);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p238, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $p240 := $load.ref($M.0, $p239);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($p240, $mul.ref(29, 4));
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p241, $sub.i32(0, 1));
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $p243 := $load.ref($M.0, $p242);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p243, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $p245 := $load.ref($M.0, $p244);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($p245, $mul.ref(30, 4));
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p246, $sub.i32(0, 1));
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $p248 := $load.ref($M.0, $p247);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p248, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $p250 := $load.ref($M.0, $p249);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($p250, $mul.ref(31, 4));
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p251, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $i80 := $sgt.i32($i79, 0);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} $i93 := mdiobus_register($p92);
    call {:si_unique_call 1394} {:cexpr "ret"} boogie_si_record_i32($i93);
    assume {:verifier.code 0} true;
    $i73 := $i93;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i73, 0);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb22:
    assume $i94 == 1;
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i63 := $i73;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} free_mdio_bitbang($p96);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $i11 := $i63;
    goto $bb3;

  $bb19:
    assume $i80 == 1;
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 1944)), $mul.ref(1936, 1));
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $i89 := $sext.i32.i64($i88);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($p86, $mul.ref($i89, 4));
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p90, $i82);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb12:
    assume $i67 == 1;
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 432)), $mul.ref(384, 1));
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    $p70 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1472)), $mul.ref(16, 1)), $mul.ref(1240, 1));
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} $i72 := of_mdiobus_register($p69, $p71);
    call {:si_unique_call 1392} {:cexpr "ret"} boogie_si_record_i32($i72);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $i73 := $i72;
    goto $bb14;

  $bb8:
    assume $i62 == 1;
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $i63 := $sub.i32(0, 12);
    goto $bb10;

  $bb5:
    assume $i36 == 1;
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb3;
}



const sh_eth_poll: ref;

axiom sh_eth_poll == $sub.ref(0, 370470);

procedure sh_eth_poll($p0: ref, $i1: i32) returns ($r: i32);



const netif_napi_add: ref;

axiom netif_napi_add == $sub.ref(0, 371502);

procedure netif_napi_add($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation netif_napi_add($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} {:cexpr "netif_napi_add:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    return;
}



const ldv_register_netdev_17: ref;

axiom ldv_register_netdev_17 == $sub.ref(0, 372534);

procedure ldv_register_netdev_17($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.21, $M.26, $M.0, $CurrAddr;



implementation ldv_register_netdev_17($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} $i1 := register_netdev($p0);
    call {:si_unique_call 1397} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 1398} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} ldv_net_device_ops_4();
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pm_runtime_put: ref;

axiom pm_runtime_put == $sub.ref(0, 373566);

procedure pm_runtime_put($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pm_runtime_put($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} $i1 := __pm_runtime_idle($p0, 5);
    call {:si_unique_call 1401} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const platform_set_drvdata: ref;

axiom platform_set_drvdata == $sub.ref(0, 374598);

procedure platform_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation platform_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} dev_set_drvdata($p2, $p1);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_netdev_18: ref;

axiom ldv_free_netdev_18 == $sub.ref(0, 375630);

procedure ldv_free_netdev_18($p0: ref);
  free requires assertsPassed;
  modifies $M.21;



implementation ldv_free_netdev_18($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} free_netdev($p0);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $M.21 := 0;
    call {:si_unique_call 1404} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 376662);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    return;
}



const register_netdev: ref;

axiom register_netdev == $sub.ref(0, 377694);

procedure register_netdev($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_netdev($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1405} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1406} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_net_device_ops_4: ref;

axiom ldv_net_device_ops_4 == $sub.ref(0, 378726);

procedure ldv_net_device_ops_4();
  free requires assertsPassed;
  modifies $M.26, $M.0, $CurrAddr;



implementation ldv_net_device_ops_4()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} $p0 := ldv_zalloc(3264);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $M.26 := $p0;
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    return;
}



const sh_eth_rx: ref;

axiom sh_eth_rx == $sub.ref(0, 379758);

procedure sh_eth_rx($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);



const napi_complete: ref;

axiom napi_complete == $sub.ref(0, 380790);

procedure napi_complete($p0: ref);



const dma_sync_single_for_cpu: ref;

axiom dma_sync_single_for_cpu == $sub.ref(0, 381822);

procedure dma_sync_single_for_cpu($p0: ref, $i1: i64, $i2: i64, $i3: i32);



const skb_put: ref;

axiom skb_put == $sub.ref(0, 382854);

procedure skb_put($p0: ref, $i1: i32) returns ($r: ref);



const eth_type_trans: ref;

axiom eth_type_trans == $sub.ref(0, 383886);

procedure eth_type_trans($p0: ref, $p1: ref) returns ($r: i16);



const netif_receive_skb: ref;

axiom netif_receive_skb == $sub.ref(0, 384918);

procedure netif_receive_skb($p0: ref) returns ($r: i32);



const skb_checksum_none_assert: ref;

axiom skb_checksum_none_assert == $sub.ref(0, 385950);

procedure skb_checksum_none_assert($p0: ref);



const debug_dma_sync_single_for_cpu: ref;

axiom debug_dma_sync_single_for_cpu == $sub.ref(0, 386982);

procedure debug_dma_sync_single_for_cpu($p0: ref, $i1: i64, $i2: i64, $i3: i32);



const devm_kzalloc: ref;

axiom devm_kzalloc == $sub.ref(0, 388014);

procedure devm_kzalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devm_kzalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} {:cexpr "devm_kzalloc:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1409} {:cexpr "devm_kzalloc:arg:gfp"} boogie_si_record_i32($i2);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 32768);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} $p4 := devm_kmalloc($p0, $i1, $i3);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const alloc_mdio_bitbang: ref;

axiom alloc_mdio_bitbang == $sub.ref(0, 389046);

procedure alloc_mdio_bitbang($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_mdio_bitbang($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} $p1 := external_alloc();
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const devm_kmalloc_array: ref;

axiom devm_kmalloc_array == $sub.ref(0, 390078);

procedure devm_kmalloc_array($p0: ref, $i1: i64, $i2: i64, $i3: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devm_kmalloc_array($p0: ref, $i1: i64, $i2: i64, $i3: i32) returns ($r: ref)
{
  var $i4: i1;
  var $i5: i64;
  var $i6: i1;
  var $i8: i64;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} {:cexpr "devm_kmalloc_array:arg:n"} boogie_si_record_i64($i1);
    call {:si_unique_call 1413} {:cexpr "devm_kmalloc_array:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 1414} {:cexpr "devm_kmalloc_array:arg:flags"} boogie_si_record_i32($i3);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i2, 0);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $mul.i64($i1, $i2);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} $p9 := devm_kmalloc($p0, $i8, $i3);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $i5 := $udiv.i64($sub.i64(0, 1), $i2);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $i6 := $ult.i64($i5, $i1);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb6;
}



const of_mdiobus_register: ref;

axiom of_mdiobus_register == $sub.ref(0, 391110);

procedure of_mdiobus_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation of_mdiobus_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} $i2 := mdiobus_register($p0);
    call {:si_unique_call 1417} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mdiobus_register: ref;

axiom mdiobus_register == $sub.ref(0, 392142);

procedure mdiobus_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mdiobus_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1418} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1419} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const devm_kmalloc: ref;

axiom devm_kmalloc == $sub.ref(0, 393174);

procedure devm_kmalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devm_kmalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} {:cexpr "devm_kmalloc:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1421} {:cexpr "devm_kmalloc:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} $p3 := external_alloc();
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const eth_random_addr: ref;

axiom eth_random_addr == $sub.ref(0, 394206);

procedure eth_random_addr($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation eth_random_addr($p0: ref)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $i4: i8;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} get_random_bytes($p0, 6);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.0, $p0);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 254);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p0, $i4);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p0);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 2);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p0, $i8);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    return;
}



const get_random_bytes: ref;

axiom get_random_bytes == $sub.ref(0, 395238);

procedure get_random_bytes($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation get_random_bytes($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} {:cexpr "get_random_bytes:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    return;
}



const is_zero_ether_addr: ref;

axiom is_zero_ether_addr == $sub.ref(0, 396270);

procedure is_zero_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_zero_ether_addr($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(4, 2));
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i2, $i6);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const sh_eth_runtime_nop: ref;

axiom sh_eth_runtime_nop == $sub.ref(0, 397302);

procedure sh_eth_runtime_nop($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sh_eth_runtime_nop($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const sh_eth_set_duplex: ref;

axiom sh_eth_set_duplex == $sub.ref(0, 398334);

procedure sh_eth_set_duplex($p0: ref);
  free requires assertsPassed;



implementation sh_eth_set_duplex($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} $p1 := netdev_priv($p0);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(416, 1));
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} $i8 := sh_eth_read($p0, 28);
    call {:si_unique_call 1430} {:cexpr "tmp___1"} boogie_si_record_i64($i8);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $i9 := $and.i64($i8, $sub.i64(0, 3));
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} sh_eth_write($p0, $i9, 28);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} $i6 := sh_eth_read($p0, 28);
    call {:si_unique_call 1427} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $i7 := $or.i64($i6, 2);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} sh_eth_write($p0, $i7, 28);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sh_eth_set_rate_sh7724: ref;

axiom sh_eth_set_rate_sh7724 == $sub.ref(0, 399366);

procedure sh_eth_set_rate_sh7724($p0: ref);
  free requires assertsPassed;



implementation sh_eth_set_rate_sh7724($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} $p1 := netdev_priv($p0);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(412, 1));
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 100);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i4, 100);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} $i10 := sh_eth_read($p0, 28);
    call {:si_unique_call 1434} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $i11 := $or.i64($i10, 16);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} sh_eth_write($p0, $i11, 28);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i4, 10);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb6;

  $bb7:
    assume $i7 == 1;
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} $i8 := sh_eth_read($p0, 28);
    call {:si_unique_call 1437} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $i9 := $and.i64($i8, $sub.i64(0, 17));
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} sh_eth_write($p0, $i9, 28);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    goto $bb9;
}



const sh_eth_chip_reset: ref;

axiom sh_eth_chip_reset == $sub.ref(0, 400398);

procedure sh_eth_chip_reset($p0: ref);
  free requires assertsPassed;



implementation sh_eth_chip_reset($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} $p1 := netdev_priv($p0);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} sh_eth_tsu_write($p2, 1, 65);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !(1 == 1);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume 1 == 1;
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} __const_udelay(4295000);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sh_eth_set_rate_gether: ref;

axiom sh_eth_set_rate_gether == $sub.ref(0, 401430);

procedure sh_eth_set_rate_gether($p0: ref);
  free requires assertsPassed;



implementation sh_eth_set_rate_gether($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} $p1 := netdev_priv($p0);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(412, 1));
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 100);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i4, 1000);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i4, 1000);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} sh_eth_write($p0, 1, 47);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i4, 100);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb9:
    assume $i8 == 1;
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} sh_eth_write($p0, 4, 47);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i4, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} sh_eth_write($p0, 0, 47);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const sh_eth_set_rate_sh7757: ref;

axiom sh_eth_set_rate_sh7757 == $sub.ref(0, 402462);

procedure sh_eth_set_rate_sh7757($p0: ref);
  free requires assertsPassed;



implementation sh_eth_set_rate_sh7757($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} $p1 := netdev_priv($p0);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(412, 1));
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 100);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i4, 100);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} sh_eth_write($p0, 1, 62);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i4, 10);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb6;

  $bb7:
    assume $i7 == 1;
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} sh_eth_write($p0, 0, 62);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    goto $bb9;
}



const sh_eth_chip_reset_giga: ref;

axiom sh_eth_chip_reset_giga == $sub.ref(0, 403494);

procedure sh_eth_chip_reset_giga($p0: ref);
  free requires assertsPassed;
  modifies $M.34, $M.35, $CurrAddr;



implementation sh_eth_chip_reset_giga($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i64;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i32;
  var $p12: ref;
  var $i13: i64;
  var $i14: i32;
  var $p15: ref;
  var $i16: i64;
  var $i17: i32;
  var $p18: ref;
  var $i19: i64;
  var $i20: i32;
  var $i21: i32;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} $i3 := ioread32($i2p.i64.ref(4276094408));
    call {:si_unique_call 1453} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i3);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 8));
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $M.34 := $store.i64($M.34, $p5, $i4);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} $i6 := ioread32($i2p.i64.ref(4276094400));
    call {:si_unique_call 1455} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 8));
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $M.35 := $store.i64($M.35, $p8, $i7);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} $i21 := ioread32($i2p.i64.ref(4276096456));
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 8));
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $M.34 := $store.i64($M.34, $p23, $i22);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} $i24 := ioread32($i2p.i64.ref(4276096448));
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 8));
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $M.35 := $store.i64($M.35, $p26, $i25);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} iowrite32(1, $i2p.i64.ref(4276099072));
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb5, $bb6;

  $bb6:
    assume !(1 == 1);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 8));
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.34, $p9);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} iowrite32($i11, $i2p.i64.ref(4276094408));
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 8));
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.35, $p12);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i13);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} iowrite32($i14, $i2p.i64.ref(4276094400));
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 8));
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.34, $p15);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i16);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} iowrite32($i17, $i2p.i64.ref(4276096456));
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 8));
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.35, $p18);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i19);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} iowrite32($i20, $i2p.i64.ref(4276096448));
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume 1 == 1;
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} __const_udelay(4295000);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const sh_eth_set_rate_giga: ref;

axiom sh_eth_set_rate_giga == $sub.ref(0, 404526);

procedure sh_eth_set_rate_giga($p0: ref);
  free requires assertsPassed;



implementation sh_eth_set_rate_giga($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} $p1 := netdev_priv($p0);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(412, 1));
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 100);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i4, 1000);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i4, 1000);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} sh_eth_write($p0, 32, 47);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i4, 100);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb9:
    assume $i8 == 1;
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} sh_eth_write($p0, 16, 47);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i4, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} sh_eth_write($p0, 0, 47);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const sh_eth_chip_reset_r8a7740: ref;

axiom sh_eth_chip_reset_r8a7740 == $sub.ref(0, 405558);

procedure sh_eth_chip_reset_r8a7740($p0: ref);
  free requires assertsPassed;



implementation sh_eth_chip_reset_r8a7740($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} $p1 := netdev_priv($p0);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} sh_eth_tsu_write($p2, 1, 65);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !(1 == 1);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} sh_eth_select_mii($p0);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume 1 == 1;
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} __const_udelay(4295000);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sh_eth_set_rate_r8a777x: ref;

axiom sh_eth_set_rate_r8a777x == $sub.ref(0, 406590);

procedure sh_eth_set_rate_r8a777x($p0: ref);
  free requires assertsPassed;



implementation sh_eth_set_rate_r8a777x($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} $p1 := netdev_priv($p0);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 432)), $mul.ref(412, 1));
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 100);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i4, 100);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} $i10 := sh_eth_read($p0, 28);
    call {:si_unique_call 1476} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $i11 := $or.i64($i10, 4);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} sh_eth_write($p0, $i11, 28);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i4, 10);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb6;

  $bb7:
    assume $i7 == 1;
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} $i8 := sh_eth_read($p0, 28);
    call {:si_unique_call 1479} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $i9 := $and.i64($i8, $sub.i64(0, 5));
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} sh_eth_write($p0, $i9, 28);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    goto $bb9;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 407622);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1481} __VERIFIER_error();
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const ldv_initialize_sh_eth_cpu_data_13: ref;

axiom ldv_initialize_sh_eth_cpu_data_13 == $sub.ref(0, 408654);

procedure ldv_initialize_sh_eth_cpu_data_13();
  free requires assertsPassed;
  modifies $M.36, $M.0, $CurrAddr;



implementation ldv_initialize_sh_eth_cpu_data_13()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} $p0 := ldv_zalloc(3264);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $M.36 := $p0;
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_sh_eth_cpu_data_11: ref;

axiom ldv_initialize_sh_eth_cpu_data_11 == $sub.ref(0, 409686);

procedure ldv_initialize_sh_eth_cpu_data_11();
  free requires assertsPassed;
  modifies $M.37, $M.0, $CurrAddr;



implementation ldv_initialize_sh_eth_cpu_data_11()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} $p0 := ldv_zalloc(3264);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $M.37 := $p0;
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_platform_driver_2: ref;

axiom ldv_initialize_platform_driver_2 == $sub.ref(0, 410718);

procedure ldv_initialize_platform_driver_2();
  free requires assertsPassed;
  modifies $M.38, $M.0, $CurrAddr;



implementation ldv_initialize_platform_driver_2()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} $p0 := ldv_zalloc(1464);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $M.38 := $p0;
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_sh_eth_cpu_data_10: ref;

axiom ldv_initialize_sh_eth_cpu_data_10 == $sub.ref(0, 411750);

procedure ldv_initialize_sh_eth_cpu_data_10();
  free requires assertsPassed;
  modifies $M.39, $M.0, $CurrAddr;



implementation ldv_initialize_sh_eth_cpu_data_10()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} $p0 := ldv_zalloc(3264);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $M.39 := $p0;
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_ethtool_ops_6: ref;

axiom ldv_initialize_ethtool_ops_6 == $sub.ref(0, 412782);

procedure ldv_initialize_ethtool_ops_6();
  free requires assertsPassed;
  modifies $M.40, $M.41, $M.42, $M.0, $CurrAddr;



implementation ldv_initialize_ethtool_ops_6()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} $p0 := ldv_zalloc(44);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $M.40 := $p0;
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} $p2 := ldv_zalloc(36);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $M.41 := $p2;
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} $p4 := ldv_zalloc(3264);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $M.42 := $p4;
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    return;
}



const choose_interrupt_1: ref;

axiom choose_interrupt_1 == $sub.ref(0, 413814);

procedure choose_interrupt_1();
  free requires assertsPassed;
  modifies $M.7, $M.0, $CurrAddr;



implementation choose_interrupt_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1489} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1490} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1491} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} ldv_stop();
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $i18 := $M.13;
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $i19 := $M.14;
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $p20 := $M.19;
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} $i21 := ldv_irq_1($i18, $i19, $p20);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $M.7 := $i21;
    call {:si_unique_call 1495} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i21);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i14 := $M.11;
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $i15 := $M.12;
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $p16 := $M.18;
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} $i17 := ldv_irq_1($i14, $i15, $p16);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $M.7 := $i17;
    call {:si_unique_call 1493} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i17);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $i10 := $M.9;
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $i11 := $M.10;
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $p12 := $M.17;
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} $i13 := ldv_irq_1($i10, $i11, $p12);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $M.7 := $i13;
    call {:si_unique_call 1497} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i13);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $i6 := $M.7;
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $i7 := $M.8;
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $p8 := $M.16;
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} $i9 := ldv_irq_1($i6, $i7, $p8);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $M.7 := $i9;
    call {:si_unique_call 1499} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i9);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const ldv_irq_1: ref;

axiom ldv_irq_1 == $sub.ref(0, 414846);

procedure ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} {:cexpr "ldv_irq_1:arg:state"} boogie_si_record_i32($i0);
    call {:si_unique_call 1502} {:cexpr "ldv_irq_1:arg:line"} boogie_si_record_i32($i1);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1503} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1504} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 1505} {:cexpr "tmp"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} ldv_stop();
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 1);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} $i7 := sh_eth_interrupt($i1, $p2);
    call {:si_unique_call 1508} {:cexpr "irq_retval"} boogie_si_record_i32($i7);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 415878);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_initialize_sh_eth_cpu_data_9: ref;

axiom ldv_initialize_sh_eth_cpu_data_9 == $sub.ref(0, 416910);

procedure ldv_initialize_sh_eth_cpu_data_9();
  free requires assertsPassed;
  modifies $M.44, $M.0, $CurrAddr;



implementation ldv_initialize_sh_eth_cpu_data_9()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} $p0 := ldv_zalloc(3264);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $M.44 := $p0;
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_mdiobb_ops_7: ref;

axiom ldv_initialize_mdiobb_ops_7 == $sub.ref(0, 417942);

procedure ldv_initialize_mdiobb_ops_7();
  free requires assertsPassed;
  modifies $M.45, $M.0, $CurrAddr;



implementation ldv_initialize_mdiobb_ops_7()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} $p0 := ldv_zalloc(16);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $M.45 := $p0;
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_sh_eth_cpu_data_8: ref;

axiom ldv_initialize_sh_eth_cpu_data_8 == $sub.ref(0, 418974);

procedure ldv_initialize_sh_eth_cpu_data_8();
  free requires assertsPassed;
  modifies $M.46, $M.0, $CurrAddr;



implementation ldv_initialize_sh_eth_cpu_data_8()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} $p0 := ldv_zalloc(3264);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $M.46 := $p0;
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_sh_eth_cpu_data_15: ref;

axiom ldv_initialize_sh_eth_cpu_data_15 == $sub.ref(0, 420006);

procedure ldv_initialize_sh_eth_cpu_data_15();
  free requires assertsPassed;
  modifies $M.47, $M.0, $CurrAddr;



implementation ldv_initialize_sh_eth_cpu_data_15()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} $p0 := ldv_zalloc(3264);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $M.47 := $p0;
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_sh_eth_cpu_data_16: ref;

axiom ldv_initialize_sh_eth_cpu_data_16 == $sub.ref(0, 421038);

procedure ldv_initialize_sh_eth_cpu_data_16();
  free requires assertsPassed;
  modifies $M.48, $M.0, $CurrAddr;



implementation ldv_initialize_sh_eth_cpu_data_16()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} $p0 := ldv_zalloc(3264);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $M.48 := $p0;
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_sh_eth_cpu_data_12: ref;

axiom ldv_initialize_sh_eth_cpu_data_12 == $sub.ref(0, 422070);

procedure ldv_initialize_sh_eth_cpu_data_12();
  free requires assertsPassed;
  modifies $M.49, $M.0, $CurrAddr;



implementation ldv_initialize_sh_eth_cpu_data_12()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} $p0 := ldv_zalloc(3264);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $M.49 := $p0;
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dev_pm_ops_3: ref;

axiom ldv_dev_pm_ops_3 == $sub.ref(0, 423102);

procedure ldv_dev_pm_ops_3();
  free requires assertsPassed;
  modifies $M.50, $M.0, $CurrAddr;



implementation ldv_dev_pm_ops_3()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} $p0 := ldv_zalloc(1416);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $M.50 := $p0;
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_sh_eth_cpu_data_14: ref;

axiom ldv_initialize_sh_eth_cpu_data_14 == $sub.ref(0, 424134);

procedure ldv_initialize_sh_eth_cpu_data_14();
  free requires assertsPassed;
  modifies $M.51, $M.0, $CurrAddr;



implementation ldv_initialize_sh_eth_cpu_data_14()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} $p0 := ldv_zalloc(3264);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $M.51 := $p0;
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 425166);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.21, $M.69, $M.70, $M.0, $M.71, $M.7, $M.72, $M.36, $M.39, $M.48, $M.46, $M.51, $M.47, $M.49, $M.44, $M.45, $M.50, $M.37, $M.40, $M.41, $M.42, $M.73, $M.74, $M.34, $M.35, $M.75, $M.76, $M.78, $M.79, $M.13, $M.11, $M.9, $M.38, $M.26, $M.8, $M.16, $M.10, $M.17, $M.12, $M.18, $M.14, $M.19, $M.77, $M.2, $M.1, $M.80, $M.3, $M.246, $M.292, $M.293, $CurrAddr, assertsPassed, $M.5, $M.4;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i16;
  var $i15: i16;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $i105: i32;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $i109: i32;
  var $i110: i1;
  var $i111: i32;
  var $i112: i1;
  var $i113: i1;
  var $i114: i1;
  var $i115: i32;
  var $i116: i1;
  var $i117: i32;
  var $i118: i1;
  var $i119: i32;
  var $i120: i1;
  var $i121: i32;
  var $i122: i32;
  var $i123: i1;
  var $i124: i32;
  var $i125: i1;
  var $i126: i32;
  var $i127: i1;
  var $i128: i32;
  var $i129: i1;
  var $i130: i1;
  var $i131: i1;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $i138: i32;
  var $i139: i1;
  var $i140: i32;
  var $i141: i1;
  var $i142: i1;
  var $i143: i1;
  var $i144: i32;
  var $i145: i1;
  var $p146: ref;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $i150: i32;
  var $i151: i1;
  var $i152: i32;
  var $i153: i1;
  var $i154: i1;
  var $i155: i1;
  var $i156: i1;
  var $i157: i1;
  var $i158: i1;
  var $i159: i1;
  var $i160: i1;
  var $i161: i1;
  var $i162: i1;
  var $i163: i1;
  var $i164: i1;
  var $i165: i32;
  var $i166: i1;
  var $p167: ref;
  var $i169: i32;
  var $i170: i1;
  var $p171: ref;
  var $p172: ref;
  var $i174: i32;
  var $i175: i1;
  var $p176: ref;
  var $i177: i32;
  var $i178: i1;
  var $p179: ref;
  var $p180: ref;
  var $i182: i32;
  var $i183: i1;
  var $p184: ref;
  var $i185: i32;
  var $i186: i1;
  var $p187: ref;
  var $i188: i32;
  var $i189: i1;
  var $p190: ref;
  var $i192: i32;
  var $i193: i1;
  var $p194: ref;
  var $p195: ref;
  var $i196: i32;
  var $i197: i1;
  var $p198: ref;
  var $i200: i32;
  var $i201: i1;
  var $p202: ref;
  var $p203: ref;
  var $i205: i32;
  var $i206: i1;
  var $p207: ref;
  var $i209: i32;
  var $i210: i1;
  var $i211: i32;
  var $i212: i1;
  var $i213: i1;
  var $i214: i1;
  var $i215: i32;
  var $i216: i1;
  var $p217: ref;
  var $i218: i32;
  var $i219: i32;
  var $i220: i1;
  var $i221: i32;
  var $i222: i32;
  var $i223: i32;
  var $i224: i1;
  var $p225: ref;
  var $i226: i32;
  var $i227: i32;
  var $i228: i1;
  var $i229: i32;
  var $i230: i32;
  var $i231: i32;
  var $i232: i1;
  var $i233: i32;
  var $i234: i1;
  var $i235: i1;
  var $i236: i1;
  var $i237: i1;
  var $i238: i32;
  var $i239: i1;
  var $p240: ref;
  var $i241: i32;
  var $i242: i1;
  var $p243: ref;
  var $i244: i32;
  var $i245: i1;
  var $p246: ref;
  var $i247: i32;
  var $i248: i1;
  var $i249: i32;
  var $i250: i1;
  var $i251: i1;
  var $i252: i1;
  var $i253: i1;
  var $i254: i32;
  var $i255: i1;
  var $p256: ref;
  var $i257: i32;
  var $i258: i1;
  var $p259: ref;
  var $i260: i32;
  var $i261: i1;
  var $p262: ref;
  var $i263: i32;
  var $i264: i1;
  var $i265: i32;
  var $i266: i1;
  var $i267: i1;
  var $i268: i1;
  var $i269: i32;
  var $i270: i1;
  var $p271: ref;
  var $i272: i32;
  var $i273: i1;
  var $p274: ref;
  var $i275: i32;
  var $i276: i1;
  var $i277: i32;
  var $i278: i1;
  var $i279: i1;
  var $i280: i1;
  var $i281: i32;
  var $i282: i1;
  var $p283: ref;
  var $i284: i32;
  var $i285: i1;
  var $p286: ref;
  var $i287: i32;
  var $i288: i1;
  var $i289: i32;
  var $i290: i1;
  var $i291: i1;
  var $i292: i1;
  var $i293: i32;
  var $i294: i1;
  var $p295: ref;
  var $i296: i32;
  var $i297: i1;
  var $p298: ref;
  var $i299: i32;
  var $i300: i1;
  var $i301: i32;
  var $i302: i1;
  var $i303: i1;
  var $i304: i1;
  var $i305: i1;
  var $i306: i1;
  var $i307: i1;
  var $i308: i1;
  var $i309: i1;
  var $i310: i1;
  var $i311: i1;
  var $i312: i1;
  var $i313: i1;
  var $i314: i1;
  var $i315: i1;
  var $i316: i1;
  var $i317: i32;
  var $i318: i1;
  var $p319: ref;
  var $i321: i32;
  var $i322: i1;
  var $p323: ref;
  var $i324: i32;
  var $i325: i1;
  var $p326: ref;
  var $i327: i32;
  var $i328: i1;
  var $p329: ref;
  var $i330: i32;
  var $i331: i1;
  var $p332: ref;
  var $i334: i32;
  var $i335: i1;
  var $p336: ref;
  var $i338: i32;
  var $i339: i1;
  var $p340: ref;
  var $i342: i32;
  var $i343: i1;
  var $p344: ref;
  var $i345: i16;
  var $i346: i32;
  var $i347: i16;
  var $i348: i32;
  var $i349: i16;
  var $i351: i32;
  var $i352: i1;
  var $p353: ref;
  var $i354: i16;
  var $i355: i32;
  var $i356: i16;
  var $i357: i32;
  var $i358: i16;
  var $i360: i32;
  var $i361: i1;
  var $p362: ref;
  var $i363: i16;
  var $i364: i32;
  var $i365: i16;
  var $i366: i32;
  var $i367: i16;
  var $i369: i32;
  var $i370: i1;
  var $p371: ref;
  var $i373: i32;
  var $i374: i1;
  var $p375: ref;
  var $i377: i32;
  var $i378: i1;
  var $p379: ref;
  var $i381: i32;
  var $i382: i1;
  var $p383: ref;
  var $i384: i16;
  var $i385: i32;
  var $i386: i16;
  var $i387: i32;
  var $i388: i16;
  var $i390: i32;
  var $i391: i1;
  var $p392: ref;
  var $i393: i16;
  var $i394: i32;
  var $i395: i16;
  var $i396: i32;
  var $i397: i16;
  var $i399: i32;
  var $i400: i1;
  var $p401: ref;
  var $i402: i16;
  var $i403: i32;
  var $i404: i16;
  var $i405: i32;
  var $i406: i16;
  var $i408: i32;
  var $i409: i1;
  var $p410: ref;
  var $i412: i32;
  var $i413: i1;
  var $p414: ref;
  var $i416: i32;
  var $i417: i1;
  var $p418: ref;
  var $i420: i32;
  var $i421: i1;
  var $p422: ref;
  var $i424: i32;
  var $i425: i1;
  var $p426: ref;
  var $i428: i32;
  var $i429: i1;
  var $p430: ref;
  var $i431: i32;
  var $i432: i32;
  var $i433: i1;
  var $i434: i32;
  var $i435: i1;
  var $p436: ref;
  var $i438: i32;
  var $i439: i1;
  var $p440: ref;
  var $i442: i32;
  var $i443: i1;
  var $p444: ref;
  var $i446: i32;
  var $i447: i1;
  var $p448: ref;
  var $i450: i32;
  var $i451: i1;
  var $p452: ref;
  var $i453: i32;
  var $i454: i1;
  var $p455: ref;
  var $i456: i32;
  var $i457: i1;
  var $p458: ref;
  var $i459: i32;
  var $i460: i1;
  var $i462: i32;
  var $i463: i32;
  var $i464: i32;
  var $i465: i1;
  var $i466: i32;
  var $i467: i32;
  var $i468: i1;
  var $i469: i32;
  var $i470: i32;
  var $i471: i32;
  var $i472: i1;
  var $i473: i32;
  var $i474: i1;
  var $i475: i1;
  var $i476: i1;
  var $i477: i1;
  var $i478: i32;
  var $i479: i1;
  var $p480: ref;
  var $i481: i32;
  var $i482: i1;
  var $p483: ref;
  var $i484: i32;
  var $i485: i1;
  var $p486: ref;
  var $i487: i32;
  var $i488: i1;
  var $i489: i32;
  var $i490: i1;
  var $i491: i1;
  var $i492: i1;
  var $i493: i1;
  var $i494: i1;
  var $i495: i1;
  var $i496: i1;
  var $i497: i1;
  var $i498: i1;
  var $i499: i1;
  var $i500: i1;
  var $i501: i1;
  var $i502: i32;
  var $i503: i1;
  var $p504: ref;
  var $i506: i32;
  var $i507: i1;
  var $p508: ref;
  var $i510: i32;
  var $i511: i1;
  var $p512: ref;
  var $i514: i32;
  var $i515: i1;
  var $p516: ref;
  var $i518: i32;
  var $i519: i1;
  var $p520: ref;
  var $i522: i32;
  var $i523: i1;
  var $p524: ref;
  var $i526: i32;
  var $i527: i1;
  var $p528: ref;
  var $i530: i32;
  var $i531: i1;
  var $p532: ref;
  var $i534: i32;
  var $i535: i1;
  var $p536: ref;
  var $i538: i32;
  var $i539: i1;
  var $p540: ref;
  var $i542: i32;
  var $i543: i1;
  var $p544: ref;
  var $i546: i32;
  var $i547: i1;
  var $p548: ref;
  var $i550: i32;
  var $i551: i1;
  var $p552: ref;
  var $i553: i32;
  var $i554: i32;
  var $i555: i1;
  var $i556: i32;
  var $i557: i1;
  var $p558: ref;
  var $i560: i32;
  var $i561: i1;
  var $p562: ref;
  var $i564: i32;
  var $i565: i1;
  var $p566: ref;
  var $i568: i32;
  var $i569: i1;
  var $p570: ref;
  var $i572: i32;
  var $i573: i1;
  var $p574: ref;
  var $i575: i32;
  var $i576: i1;
  var $p577: ref;
  var $i578: i32;
  var $i579: i1;
  var $p580: ref;
  var $i581: i32;
  var $i582: i1;
  var $i584: i32;
  var $i585: i32;
  var $i586: i32;
  var $i587: i1;
  var $i588: i32;
  var $i589: i32;
  var $i590: i1;
  var $i591: i32;
  var $i592: i32;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: ref;
  var vslice_dummy_var_95: ref;
  var vslice_dummy_var_96: ref;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: ref;
  var vslice_dummy_var_112: ref;
  var vslice_dummy_var_113: ref;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;

  $bb0:
    call {:si_unique_call 1519} $initialize();
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1520} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} $p0 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1523} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1524} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1525} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1526} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1527} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 1528} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1529} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1530} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 1531} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1532} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1533} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1534} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1535} $i6 := __VERIFIER_nondet_u32();
    call {:si_unique_call 1536} {:cexpr "smack:ext:__VERIFIER_nondet_u32"} boogie_si_record_i32($i6);
    call {:si_unique_call 1537} {:cexpr "tmp___3"} boogie_si_record_i32($i6);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1538} $i7 := __VERIFIER_nondet_u32();
    call {:si_unique_call 1539} {:cexpr "smack:ext:__VERIFIER_nondet_u32"} boogie_si_record_i32($i7);
    call {:si_unique_call 1540} {:cexpr "tmp___4"} boogie_si_record_i32($i7);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} $p8 := ldv_zalloc(1);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} $p9 := ldv_zalloc(8);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} $p11 := ldv_zalloc(8);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1544} $i13 := __VERIFIER_nondet_int();
    call {:si_unique_call 1545} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i13);
    call {:si_unique_call 1546} {:cexpr "tmp___8"} boogie_si_record_i32($i13);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1547} $i14 := __VERIFIER_nondet_u16();
    call {:si_unique_call 1548} {:cexpr "smack:ext:__VERIFIER_nondet_u16"} boogie_si_record_i16($i14);
    call {:si_unique_call 1549} {:cexpr "tmp___9"} boogie_si_record_i16($i14);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1550} $i15 := __VERIFIER_nondet_u16();
    call {:si_unique_call 1551} {:cexpr "smack:ext:__VERIFIER_nondet_u16"} boogie_si_record_i16($i15);
    call {:si_unique_call 1552} {:cexpr "tmp___10"} boogie_si_record_i16($i15);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} $p16 := ldv_zalloc(40);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1554} $i18 := __VERIFIER_nondet_int();
    call {:si_unique_call 1555} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i18);
    call {:si_unique_call 1556} {:cexpr "tmp___12"} boogie_si_record_i32($i18);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} $p19 := ldv_zalloc(232);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} $p21 := ldv_zalloc(1);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1559} $i22 := __VERIFIER_nondet_int();
    call {:si_unique_call 1560} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i22);
    call {:si_unique_call 1561} {:cexpr "tmp___15"} boogie_si_record_i32($i22);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} $p23 := ldv_zalloc(1);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1563} $i24 := __VERIFIER_nondet_int();
    call {:si_unique_call 1564} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i24);
    call {:si_unique_call 1565} {:cexpr "tmp___17"} boogie_si_record_i32($i24);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} $p25 := ldv_zalloc(40);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} $p27 := ldv_zalloc(232);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} ldv_initialize();
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p0);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.52;
    call {:si_unique_call 1569} cmdloc_dummy_var_21 := $memset.i8(cmdloc_dummy_var_20, $p29, 0, 2, $zext.i32.i64(2), 0 == 1);
    $M.52 := cmdloc_dummy_var_21;
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p1);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_22 := $M.53;
    call {:si_unique_call 1570} cmdloc_dummy_var_23 := $memset.i8(cmdloc_dummy_var_22, $p30, 0, 2, $zext.i32.i64(2), 0 == 1);
    $M.53 := cmdloc_dummy_var_23;
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $M.54 := 0;
    call {:si_unique_call 1571} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $M.55 := 0;
    call {:si_unique_call 1572} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $M.56 := 0;
    call {:si_unique_call 1573} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1574} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $M.58 := 0;
    call {:si_unique_call 1575} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1576} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $M.60 := 0;
    call {:si_unique_call 1577} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(0);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $M.61 := 0;
    call {:si_unique_call 1578} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $M.62 := 0;
    call {:si_unique_call 1579} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $M.63 := 0;
    call {:si_unique_call 1580} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $M.64 := 0;
    call {:si_unique_call 1581} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $M.65 := 0;
    call {:si_unique_call 1582} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $M.66 := 0;
    call {:si_unique_call 1583} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(0);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $M.67 := 0;
    call {:si_unique_call 1584} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(0);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $M.68 := 0;
    call {:si_unique_call 1585} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $M.21 := 0;
    call {:si_unique_call 1586} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $M.69 := 0;
    call {:si_unique_call 1587} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $M.70 := 0;
    call {:si_unique_call 1588} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $p59, $i60, $i61, $p62, $i63, $i64, $p65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $p76, $i77, $i78, $p79, $i80, $i81, $p82, $i84, $i85, $p86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $p95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $p103, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $p134, $i135, $i136, $p137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $p146, $i147, $i148, $p149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $p167, $i169, $i170, $p171, $p172, $i174, $i175, $p176, $i177, $i178, $p179, $p180, $i182, $i183, $p184, $i185, $i186, $p187, $i188, $i189, $p190, $i192, $i193, $p194, $p195, $i196, $i197, $p198, $i200, $i201, $p202, $p203, $i205, $i206, $p207, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $p217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $p225, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $p240, $i241, $i242, $p243, $i244, $i245, $p246, $i247, $i248, $i249, $i250, $i251, $i252, $i253, $i254, $i255, $p256, $i257, $i258, $p259, $i260, $i261, $p262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $p271, $i272, $i273, $p274, $i275, $i276, $i277, $i278, $i279, $i280, $i281, $i282, $p283, $i284, $i285, $p286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $i294, $p295, $i296, $i297, $p298, $i299, $i300, $i301, $i302, $i303, $i304, $i305, $i306, $i307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, $i315, $i316, $i317, $i318, $p319, $i321, $i322, $p323, $i324, $i325, $p326, $i327, $i328, $p329, $i330, $i331, $p332, $i334, $i335, $p336, $i338, $i339, $p340, $i342, $i343, $p344, $i345, $i346, $i347, $i348, $i349, $i351, $i352, $p353, $i354, $i355, $i356, $i357, $i358, $i360, $i361, $p362, $i363, $i364, $i365, $i366, $i367, $i369, $i370, $p371, $i373, $i374, $p375, $i377, $i378, $p379, $i381, $i382, $p383, $i384, $i385, $i386, $i387, $i388, $i390, $i391, $p392, $i393, $i394, $i395, $i396, $i397, $i399, $i400, $p401, $i402, $i403, $i404, $i405, $i406, $i408, $i409, $p410, $i412, $i413, $p414, $i416, $i417, $p418, $i420, $i421, $p422, $i424, $i425, $p426, $i428, $i429, $p430, $i431, $i432, $i433, $i434, $i435, $p436, $i438, $i439, $p440, $i442, $i443, $p444, $i446, $i447, $p448, $i450, $i451, $p452, $i453, $i454, $p455, $i456, $i457, $p458, $i459, $i460, $i462, $i463, $i464, $i465, $i466, $i467, $i468, $i469, $i470, $i471, $i472, $i473, $i474, $i475, $i476, $i477, $i478, $i479, $p480, $i481, $i482, $p483, $i484, $i485, $p486, $i487, $i488, $i489, $i490, $i491, $i492, $i493, $i494, $i495, $i496, $i497, $i498, $i499, $i500, $i501, $i502, $i503, $p504, $i506, $i507, $p508, $i510, $i511, $p512, $i514, $i515, $p516, $i518, $i519, $p520, $i522, $i523, $p524, $i526, $i527, $p528, $i530, $i531, $p532, $i534, $i535, $p536, $i538, $i539, $p540, $i542, $i543, $p544, $i546, $i547, $p548, $i550, $i551, $p552, $i553, $i554, $i555, $i556, $i557, $p558, $i560, $i561, $p562, $i564, $i565, $p566, $i568, $i569, $p570, $i572, $i573, $p574, $i575, $i576, $p577, $i578, $i579, $p580, $i581, $i582, $i584, $i585, $i586, $i587, $i588, $i589, $i590, $i591, $i592, vslice_dummy_var_72, vslice_dummy_var_73, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78, vslice_dummy_var_79, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119, vslice_dummy_var_120 := main_loop_$bb1($p0, $p1, $i2, $i3, $i4, $i5, $i6, $i7, $p8, $p10, $p12, $i13, $i14, $i15, $p17, $i18, $p20, $p21, $i22, $p23, $i24, $p26, $p28, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $p59, $i60, $i61, $p62, $i63, $i64, $p65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $p76, $i77, $i78, $p79, $i80, $i81, $p82, $i84, $i85, $p86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $p95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $p103, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $p134, $i135, $i136, $p137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $p146, $i147, $i148, $p149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $p167, $i169, $i170, $p171, $p172, $i174, $i175, $p176, $i177, $i178, $p179, $p180, $i182, $i183, $p184, $i185, $i186, $p187, $i188, $i189, $p190, $i192, $i193, $p194, $p195, $i196, $i197, $p198, $i200, $i201, $p202, $p203, $i205, $i206, $p207, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $p217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $p225, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $p240, $i241, $i242, $p243, $i244, $i245, $p246, $i247, $i248, $i249, $i250, $i251, $i252, $i253, $i254, $i255, $p256, $i257, $i258, $p259, $i260, $i261, $p262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $p271, $i272, $i273, $p274, $i275, $i276, $i277, $i278, $i279, $i280, $i281, $i282, $p283, $i284, $i285, $p286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $i294, $p295, $i296, $i297, $p298, $i299, $i300, $i301, $i302, $i303, $i304, $i305, $i306, $i307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, $i315, $i316, $i317, $i318, $p319, $i321, $i322, $p323, $i324, $i325, $p326, $i327, $i328, $p329, $i330, $i331, $p332, $i334, $i335, $p336, $i338, $i339, $p340, $i342, $i343, $p344, $i345, $i346, $i347, $i348, $i349, $i351, $i352, $p353, $i354, $i355, $i356, $i357, $i358, $i360, $i361, $p362, $i363, $i364, $i365, $i366, $i367, $i369, $i370, $p371, $i373, $i374, $p375, $i377, $i378, $p379, $i381, $i382, $p383, $i384, $i385, $i386, $i387, $i388, $i390, $i391, $p392, $i393, $i394, $i395, $i396, $i397, $i399, $i400, $p401, $i402, $i403, $i404, $i405, $i406, $i408, $i409, $p410, $i412, $i413, $p414, $i416, $i417, $p418, $i420, $i421, $p422, $i424, $i425, $p426, $i428, $i429, $p430, $i431, $i432, $i433, $i434, $i435, $p436, $i438, $i439, $p440, $i442, $i443, $p444, $i446, $i447, $p448, $i450, $i451, $p452, $i453, $i454, $p455, $i456, $i457, $p458, $i459, $i460, $i462, $i463, $i464, $i465, $i466, $i467, $i468, $i469, $i470, $i471, $i472, $i473, $i474, $i475, $i476, $i477, $i478, $i479, $p480, $i481, $i482, $p483, $i484, $i485, $p486, $i487, $i488, $i489, $i490, $i491, $i492, $i493, $i494, $i495, $i496, $i497, $i498, $i499, $i500, $i501, $i502, $i503, $p504, $i506, $i507, $p508, $i510, $i511, $p512, $i514, $i515, $p516, $i518, $i519, $p520, $i522, $i523, $p524, $i526, $i527, $p528, $i530, $i531, $p532, $i534, $i535, $p536, $i538, $i539, $p540, $i542, $i543, $p544, $i546, $i547, $p548, $i550, $i551, $p552, $i553, $i554, $i555, $i556, $i557, $p558, $i560, $i561, $p562, $i564, $i565, $p566, $i568, $i569, $p570, $i572, $i573, $p574, $i575, $i576, $p577, $i578, $i579, $p580, $i581, $i582, $i584, $i585, $i586, $i587, $i588, $i589, $i590, $i591, $i592, vslice_dummy_var_72, vslice_dummy_var_73, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78, vslice_dummy_var_79, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119, vslice_dummy_var_120);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i31, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i31, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i31, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i31, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i31, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb659;

  $bb659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} ldv_stop();
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    goto $bb660;

  $bb660:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb65_dummy;

  $bb13:
    assume $i37 == 1;
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $i487 := $M.70;
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $i488 := $ne.i32($i487, 0);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb555, $bb556;

  $bb556:
    assume !($i488 == 1);
    assume {:verifier.code 0} true;
    goto $bb658;

  $bb658:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb555:
    assume $i488 == 1;
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1839} $i489 := __VERIFIER_nondet_int();
    call {:si_unique_call 1840} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i489);
    call {:si_unique_call 1841} {:cexpr "tmp___36"} boogie_si_record_i32($i489);
    assume {:verifier.code 0} true;
    goto $bb557;

  $bb557:
    assume {:verifier.code 0} true;
    $i490 := $slt.i32($i489, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb558, $bb559;

  $bb559:
    assume !($i490 == 1);
    assume {:verifier.code 0} true;
    $i491 := $slt.i32($i489, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb560, $bb561;

  $bb561:
    assume !($i491 == 1);
    assume {:verifier.code 0} true;
    $i492 := $slt.i32($i489, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb562, $bb563;

  $bb563:
    assume !($i492 == 1);
    assume {:verifier.code 0} true;
    $i493 := $slt.i32($i489, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb564, $bb565;

  $bb565:
    assume !($i493 == 1);
    assume {:verifier.code 0} true;
    $i494 := $eq.i32($i489, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb566, $bb567;

  $bb567:
    assume {:verifier.code 0} true;
    assume !($i494 == 1);
    goto $bb568;

  $bb568:
    assume {:verifier.code 0} true;
    goto $bb656;

  $bb656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1890} ldv_stop();
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    goto $bb657;

  $bb657:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb586:
    assume {:verifier.code 0} true;
    goto $bb658;

  $bb566:
    assume $i494 == 1;
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $i586 := $M.70;
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $i587 := $eq.i32($i586, 1);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb650, $bb651;

  $bb651:
    assume !($i587 == 1);
    assume {:verifier.code 0} true;
    goto $bb655;

  $bb655:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb650:
    assume $i587 == 1;
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} $i588 := ldv_ndo_init_5();
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $M.79 := $i588;
    call {:si_unique_call 1887} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i588);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $i589 := $M.79;
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $i590 := $eq.i32($i589, 0);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb652, $bb653;

  $bb653:
    assume !($i590 == 1);
    assume {:verifier.code 0} true;
    goto $bb654;

  $bb654:
    assume {:verifier.code 0} true;
    goto $bb655;

  $bb652:
    assume $i590 == 1;
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1888} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $i591 := $M.58;
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $i592 := $add.i32($i591, 1);
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $M.58 := $i592;
    call {:si_unique_call 1889} {:cexpr "ref_cnt"} boogie_si_record_i32($i592);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    goto $bb654;

  $bb564:
    assume $i493 == 1;
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $i581 := $M.70;
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $i582 := $eq.i32($i581, 2);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb647, $bb648;

  $bb648:
    assume !($i582 == 1);
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb649:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb647:
    assume $i582 == 1;
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} vslice_dummy_var_120 := ldv_ndo_uninit_5();
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1884} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $i584 := $M.58;
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $i585 := $sub.i32($i584, 1);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $M.58 := $i585;
    call {:si_unique_call 1885} {:cexpr "ref_cnt"} boogie_si_record_i32($i585);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb562:
    assume $i492 == 1;
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $i572 := $M.70;
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $i573 := $eq.i32($i572, 1);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb638, $bb639;

  $bb639:
    assume !($i573 == 1);
    assume {:verifier.code 0} true;
    goto $bb640;

  $bb640:
    assume {:verifier.code 0} true;
    $i575 := $M.70;
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $i576 := $eq.i32($i575, 3);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb641, $bb642;

  $bb642:
    assume !($i576 == 1);
    assume {:verifier.code 0} true;
    goto $bb643;

  $bb643:
    assume {:verifier.code 0} true;
    $i578 := $M.70;
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $i579 := $eq.i32($i578, 2);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb644, $bb645;

  $bb645:
    assume !($i579 == 1);
    assume {:verifier.code 0} true;
    goto $bb646;

  $bb646:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb644:
    assume $i579 == 1;
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $p580 := $M.77;
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} sh_eth_tx_timeout($p580);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1882} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    goto $bb646;

  $bb641:
    assume $i576 == 1;
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $p577 := $M.77;
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} sh_eth_tx_timeout($p577);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1880} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    goto $bb643;

  $bb638:
    assume $i573 == 1;
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $p574 := $M.77;
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} sh_eth_tx_timeout($p574);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1878} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    goto $bb640;

  $bb560:
    assume $i491 == 1;
    assume {:verifier.code 0} true;
    $i495 := $slt.i32($i489, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb569, $bb570;

  $bb570:
    assume !($i495 == 1);
    assume {:verifier.code 0} true;
    $i496 := $slt.i32($i489, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb571, $bb572;

  $bb572:
    assume !($i496 == 1);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $i560 := $M.70;
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $i561 := $eq.i32($i560, 1);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb629, $bb630;

  $bb630:
    assume !($i561 == 1);
    assume {:verifier.code 0} true;
    goto $bb631;

  $bb631:
    assume {:verifier.code 0} true;
    $i564 := $M.70;
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $i565 := $eq.i32($i564, 3);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb632, $bb633;

  $bb633:
    assume !($i565 == 1);
    assume {:verifier.code 0} true;
    goto $bb634;

  $bb634:
    assume {:verifier.code 0} true;
    $i568 := $M.70;
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $i569 := $eq.i32($i568, 2);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb635, $bb636;

  $bb636:
    assume !($i569 == 1);
    assume {:verifier.code 0} true;
    goto $bb637;

  $bb637:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb635:
    assume $i569 == 1;
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $p570 := $M.77;
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} vslice_dummy_var_119 := eth_mac_addr($p570, $p23);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1876} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    goto $bb637;

  $bb632:
    assume $i565 == 1;
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $p566 := $M.77;
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} vslice_dummy_var_118 := eth_mac_addr($p566, $p23);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1874} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    goto $bb634;

  $bb629:
    assume $i561 == 1;
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $p562 := $M.77;
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} vslice_dummy_var_117 := eth_mac_addr($p562, $p23);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1872} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    goto $bb631;

  $bb571:
    assume $i496 == 1;
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $i556 := $M.70;
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $i557 := $eq.i32($i556, 3);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb626, $bb627;

  $bb627:
    assume !($i557 == 1);
    assume {:verifier.code 0} true;
    goto $bb628;

  $bb628:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb626:
    assume $i557 == 1;
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $p558 := $M.77;
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1869} vslice_dummy_var_116 := sh_eth_start_xmit($p28, $p558);
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1870} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    goto $bb628;

  $bb569:
    assume $i495 == 1;
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $i550 := $M.70;
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $i551 := $eq.i32($i550, 2);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb620, $bb621;

  $bb621:
    assume !($i551 == 1);
    assume {:verifier.code 0} true;
    goto $bb625;

  $bb625:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb620:
    assume $i551 == 1;
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $p552 := $M.77;
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} $i553 := sh_eth_open($p552);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $M.78 := $i553;
    call {:si_unique_call 1867} {:cexpr "ldv_retval_7"} boogie_si_record_i32($i553);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $i554 := $M.78;
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $i555 := $eq.i32($i554, 0);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb622, $bb623;

  $bb623:
    assume !($i555 == 1);
    assume {:verifier.code 0} true;
    goto $bb624;

  $bb624:
    assume {:verifier.code 0} true;
    goto $bb625;

  $bb622:
    assume $i555 == 1;
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1868} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    goto $bb624;

  $bb558:
    assume $i490 == 1;
    assume {:verifier.code 0} true;
    $i497 := $slt.i32($i489, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb573, $bb574;

  $bb574:
    assume !($i497 == 1);
    assume {:verifier.code 0} true;
    $i498 := $slt.i32($i489, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb575, $bb576;

  $bb576:
    assume !($i498 == 1);
    assume {:verifier.code 0} true;
    $i499 := $slt.i32($i489, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb577, $bb578;

  $bb578:
    assume !($i499 == 1);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $i542 := $M.70;
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $i543 := $eq.i32($i542, 3);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb614, $bb615;

  $bb615:
    assume !($i543 == 1);
    assume {:verifier.code 0} true;
    goto $bb616;

  $bb616:
    assume {:verifier.code 0} true;
    $i546 := $M.70;
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $i547 := $eq.i32($i546, 2);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb617, $bb618;

  $bb618:
    assume !($i547 == 1);
    assume {:verifier.code 0} true;
    goto $bb619;

  $bb619:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb617:
    assume $i547 == 1;
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $p548 := $M.77;
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1864} vslice_dummy_var_115 := eth_change_mtu($p548, $i24);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1865} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    goto $bb619;

  $bb614:
    assume $i543 == 1;
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $p544 := $M.77;
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} vslice_dummy_var_114 := eth_change_mtu($p544, $i24);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1863} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    goto $bb616;

  $bb577:
    assume $i499 == 1;
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $i530 := $M.70;
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $i531 := $eq.i32($i530, 1);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb605, $bb606;

  $bb606:
    assume !($i531 == 1);
    assume {:verifier.code 0} true;
    goto $bb607;

  $bb607:
    assume {:verifier.code 0} true;
    $i534 := $M.70;
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $i535 := $eq.i32($i534, 3);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb608, $bb609;

  $bb609:
    assume !($i535 == 1);
    assume {:verifier.code 0} true;
    goto $bb610;

  $bb610:
    assume {:verifier.code 0} true;
    $i538 := $M.70;
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $i539 := $eq.i32($i538, 2);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb611, $bb612;

  $bb612:
    assume !($i539 == 1);
    assume {:verifier.code 0} true;
    goto $bb613;

  $bb613:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb611:
    assume $i539 == 1;
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $p540 := $M.77;
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} vslice_dummy_var_113 := sh_eth_get_stats($p540);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1861} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    goto $bb613;

  $bb608:
    assume $i535 == 1;
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $p536 := $M.77;
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} vslice_dummy_var_112 := sh_eth_get_stats($p536);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1859} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    goto $bb610;

  $bb605:
    assume $i531 == 1;
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $p532 := $M.77;
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} vslice_dummy_var_111 := sh_eth_get_stats($p532);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1857} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    goto $bb607;

  $bb575:
    assume $i498 == 1;
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $i518 := $M.70;
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $i519 := $eq.i32($i518, 1);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb596, $bb597;

  $bb597:
    assume !($i519 == 1);
    assume {:verifier.code 0} true;
    goto $bb598;

  $bb598:
    assume {:verifier.code 0} true;
    $i522 := $M.70;
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $i523 := $eq.i32($i522, 3);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb599, $bb600;

  $bb600:
    assume !($i523 == 1);
    assume {:verifier.code 0} true;
    goto $bb601;

  $bb601:
    assume {:verifier.code 0} true;
    $i526 := $M.70;
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $i527 := $eq.i32($i526, 2);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb602, $bb603;

  $bb603:
    assume !($i527 == 1);
    assume {:verifier.code 0} true;
    goto $bb604;

  $bb604:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb602:
    assume $i527 == 1;
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $p528 := $M.77;
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} vslice_dummy_var_110 := sh_eth_do_ioctl($p528, $p26, $i22);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1855} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    goto $bb604;

  $bb599:
    assume $i523 == 1;
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $p524 := $M.77;
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1852} vslice_dummy_var_109 := sh_eth_do_ioctl($p524, $p26, $i22);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1853} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    goto $bb601;

  $bb596:
    assume $i519 == 1;
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $p520 := $M.77;
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} vslice_dummy_var_108 := sh_eth_do_ioctl($p520, $p26, $i22);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1851} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    goto $bb598;

  $bb573:
    assume $i497 == 1;
    assume {:verifier.code 0} true;
    $i500 := $slt.i32($i489, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb579, $bb580;

  $bb580:
    assume !($i500 == 1);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $i506 := $M.70;
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $i507 := $eq.i32($i506, 1);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb587, $bb588;

  $bb588:
    assume !($i507 == 1);
    assume {:verifier.code 0} true;
    goto $bb589;

  $bb589:
    assume {:verifier.code 0} true;
    $i510 := $M.70;
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $i511 := $eq.i32($i510, 3);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb590, $bb591;

  $bb591:
    assume !($i511 == 1);
    assume {:verifier.code 0} true;
    goto $bb592;

  $bb592:
    assume {:verifier.code 0} true;
    $i514 := $M.70;
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $i515 := $eq.i32($i514, 2);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb593, $bb594;

  $bb594:
    assume !($i515 == 1);
    assume {:verifier.code 0} true;
    goto $bb595;

  $bb595:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb593:
    assume $i515 == 1;
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $p516 := $M.77;
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} vslice_dummy_var_107 := eth_validate_addr($p516);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1849} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    goto $bb595;

  $bb590:
    assume $i511 == 1;
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $p512 := $M.77;
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} vslice_dummy_var_106 := eth_validate_addr($p512);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1847} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    goto $bb592;

  $bb587:
    assume $i507 == 1;
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $p508 := $M.77;
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} vslice_dummy_var_105 := eth_validate_addr($p508);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1845} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    goto $bb589;

  $bb579:
    assume $i500 == 1;
    assume {:verifier.code 0} true;
    $i501 := $eq.i32($i489, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb581, $bb582;

  $bb582:
    assume {:verifier.code 0} true;
    assume !($i501 == 1);
    goto $bb568;

  $bb581:
    assume $i501 == 1;
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $i502 := $M.70;
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $i503 := $eq.i32($i502, 3);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb583, $bb584;

  $bb584:
    assume !($i503 == 1);
    assume {:verifier.code 0} true;
    goto $bb585;

  $bb585:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb583:
    assume $i503 == 1;
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $p504 := $M.77;
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} vslice_dummy_var_104 := sh_eth_close($p504);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1843} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    goto $bb585;

  $bb11:
    assume $i36 == 1;
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $i471 := $M.69;
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i472 := $ne.i32($i471, 0);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb530, $bb531;

  $bb531:
    assume !($i472 == 1);
    assume {:verifier.code 0} true;
    goto $bb554;

  $bb554:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb530:
    assume $i472 == 1;
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1829} $i473 := __VERIFIER_nondet_int();
    call {:si_unique_call 1830} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i473);
    call {:si_unique_call 1831} {:cexpr "tmp___35"} boogie_si_record_i32($i473);
    assume {:verifier.code 0} true;
    goto $bb532;

  $bb532:
    assume {:verifier.code 0} true;
    $i474 := $slt.i32($i473, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb533, $bb534;

  $bb534:
    assume !($i474 == 1);
    assume {:verifier.code 0} true;
    $i475 := $slt.i32($i473, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb535, $bb536;

  $bb536:
    assume !($i475 == 1);
    assume {:verifier.code 0} true;
    $i476 := $eq.i32($i473, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb537, $bb538;

  $bb538:
    assume {:verifier.code 0} true;
    assume !($i476 == 1);
    goto $bb539;

  $bb539:
    assume {:verifier.code 0} true;
    goto $bb552;

  $bb552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} ldv_stop();
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    goto $bb553;

  $bb553:
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb545:
    assume {:verifier.code 0} true;
    goto $bb554;

  $bb537:
    assume $i476 == 1;
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $i484 := $M.69;
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $i485 := $eq.i32($i484, 1);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb549, $bb550;

  $bb550:
    assume !($i485 == 1);
    assume {:verifier.code 0} true;
    goto $bb551;

  $bb551:
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb549:
    assume $i485 == 1;
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $p486 := $M.39;
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1836} sh_eth_set_duplex($p486);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1837} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    goto $bb551;

  $bb535:
    assume $i475 == 1;
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $i481 := $M.69;
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $i482 := $eq.i32($i481, 1);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb546, $bb547;

  $bb547:
    assume !($i482 == 1);
    assume {:verifier.code 0} true;
    goto $bb548;

  $bb548:
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb546:
    assume $i482 == 1;
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $p483 := $M.39;
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} sh_eth_set_rate_gether($p483);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1835} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    goto $bb548;

  $bb533:
    assume $i474 == 1;
    assume {:verifier.code 0} true;
    $i477 := $eq.i32($i473, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb540, $bb541;

  $bb541:
    assume {:verifier.code 0} true;
    assume !($i477 == 1);
    goto $bb539;

  $bb540:
    assume $i477 == 1;
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $i478 := $M.69;
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $i479 := $eq.i32($i478, 1);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb542, $bb543;

  $bb543:
    assume !($i479 == 1);
    assume {:verifier.code 0} true;
    goto $bb544;

  $bb544:
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb542:
    assume $i479 == 1;
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $p480 := $M.39;
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} sh_eth_chip_reset($p480);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1833} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    goto $bb544;

  $bb9:
    assume $i35 == 1;
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $i299 := $M.21;
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $i300 := $ne.i32($i299, 0);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb393, $bb394;

  $bb394:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb529;

  $bb529:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb393:
    assume $i300 == 1;
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1759} $i301 := __VERIFIER_nondet_int();
    call {:si_unique_call 1760} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i301);
    call {:si_unique_call 1761} {:cexpr "tmp___34"} boogie_si_record_i32($i301);
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    $i302 := $slt.i32($i301, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb396, $bb397;

  $bb397:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    $i303 := $slt.i32($i301, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb398, $bb399;

  $bb399:
    assume !($i303 == 1);
    assume {:verifier.code 0} true;
    $i304 := $slt.i32($i301, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb400, $bb401;

  $bb401:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    $i305 := $slt.i32($i301, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb402, $bb403;

  $bb403:
    assume !($i305 == 1);
    assume {:verifier.code 0} true;
    $i306 := $eq.i32($i301, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb404, $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    assume !($i306 == 1);
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    goto $bb527;

  $bb527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} ldv_stop();
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    goto $bb528;

  $bb528:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    goto $bb529;

  $bb404:
    assume $i306 == 1;
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $i464 := $M.21;
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $i465 := $eq.i32($i464, 1);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb521, $bb522;

  $bb522:
    assume !($i465 == 1);
    assume {:verifier.code 0} true;
    goto $bb526;

  $bb526:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb521:
    assume $i465 == 1;
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} $i466 := ldv_ndo_init_4();
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $M.76 := $i466;
    call {:si_unique_call 1825} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i466);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $i467 := $M.76;
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $i468 := $eq.i32($i467, 0);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb523, $bb524;

  $bb524:
    assume !($i468 == 1);
    assume {:verifier.code 0} true;
    goto $bb525;

  $bb525:
    assume {:verifier.code 0} true;
    goto $bb526;

  $bb523:
    assume $i468 == 1;
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $M.21 := 2;
    call {:si_unique_call 1826} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $i469 := $M.58;
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $i470 := $add.i32($i469, 1);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $M.58 := $i470;
    call {:si_unique_call 1827} {:cexpr "ref_cnt"} boogie_si_record_i32($i470);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    goto $bb525;

  $bb402:
    assume $i305 == 1;
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $i459 := $M.21;
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $i460 := $eq.i32($i459, 2);
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb518, $bb519;

  $bb519:
    assume !($i460 == 1);
    assume {:verifier.code 0} true;
    goto $bb520;

  $bb520:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb518:
    assume $i460 == 1;
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} vslice_dummy_var_103 := ldv_ndo_uninit_4();
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 1822} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $i462 := $M.58;
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $i463 := $sub.i32($i462, 1);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $M.58 := $i463;
    call {:si_unique_call 1823} {:cexpr "ref_cnt"} boogie_si_record_i32($i463);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    goto $bb520;

  $bb400:
    assume $i304 == 1;
    assume {:verifier.code 0} true;
    $i307 := $slt.i32($i301, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb407, $bb408;

  $bb408:
    assume !($i307 == 1);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $i450 := $M.21;
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $i451 := $eq.i32($i450, 1);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb509, $bb510;

  $bb510:
    assume !($i451 == 1);
    assume {:verifier.code 0} true;
    goto $bb511;

  $bb511:
    assume {:verifier.code 0} true;
    $i453 := $M.21;
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $i454 := $eq.i32($i453, 3);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb512, $bb513;

  $bb513:
    assume !($i454 == 1);
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb514:
    assume {:verifier.code 0} true;
    $i456 := $M.21;
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $i457 := $eq.i32($i456, 2);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb515, $bb516;

  $bb516:
    assume !($i457 == 1);
    assume {:verifier.code 0} true;
    goto $bb517;

  $bb517:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb515:
    assume $i457 == 1;
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $p458 := $M.26;
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} sh_eth_tx_timeout($p458);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $M.21 := 2;
    call {:si_unique_call 1820} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    goto $bb517;

  $bb512:
    assume $i454 == 1;
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $p455 := $M.26;
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} sh_eth_tx_timeout($p455);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $M.21 := 3;
    call {:si_unique_call 1818} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb509:
    assume $i451 == 1;
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $p452 := $M.26;
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} sh_eth_tx_timeout($p452);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 1816} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    goto $bb511;

  $bb407:
    assume $i307 == 1;
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $i438 := $M.21;
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $i439 := $eq.i32($i438, 1);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb500, $bb501;

  $bb501:
    assume !($i439 == 1);
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb502:
    assume {:verifier.code 0} true;
    $i442 := $M.21;
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $i443 := $eq.i32($i442, 3);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb503, $bb504;

  $bb504:
    assume !($i443 == 1);
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb505:
    assume {:verifier.code 0} true;
    $i446 := $M.21;
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $i447 := $eq.i32($i446, 2);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb506, $bb507;

  $bb507:
    assume !($i447 == 1);
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb508:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb506:
    assume $i447 == 1;
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $p448 := $M.26;
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} vslice_dummy_var_102 := eth_mac_addr($p448, $p21);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $M.21 := 2;
    call {:si_unique_call 1814} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb503:
    assume $i443 == 1;
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $p444 := $M.26;
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} vslice_dummy_var_101 := eth_mac_addr($p444, $p21);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $M.21 := 3;
    call {:si_unique_call 1812} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb500:
    assume $i439 == 1;
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $p440 := $M.26;
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} vslice_dummy_var_100 := eth_mac_addr($p440, $p21);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 1810} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb398:
    assume $i303 == 1;
    assume {:verifier.code 0} true;
    $i308 := $slt.i32($i301, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb409, $bb410;

  $bb410:
    assume !($i308 == 1);
    assume {:verifier.code 0} true;
    $i309 := $slt.i32($i301, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb411, $bb412;

  $bb412:
    assume !($i309 == 1);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $i434 := $M.21;
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $i435 := $eq.i32($i434, 3);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb497, $bb498;

  $bb498:
    assume !($i435 == 1);
    assume {:verifier.code 0} true;
    goto $bb499;

  $bb499:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb497:
    assume $i435 == 1;
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $p436 := $M.26;
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} vslice_dummy_var_99 := sh_eth_start_xmit($p20, $p436);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $M.21 := 3;
    call {:si_unique_call 1808} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    goto $bb499;

  $bb411:
    assume $i309 == 1;
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $i428 := $M.21;
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $i429 := $eq.i32($i428, 2);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb491, $bb492;

  $bb492:
    assume !($i429 == 1);
    assume {:verifier.code 0} true;
    goto $bb496;

  $bb496:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb491:
    assume $i429 == 1;
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $p430 := $M.26;
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} $i431 := sh_eth_open($p430);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $M.75 := $i431;
    call {:si_unique_call 1805} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i431);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $i432 := $M.75;
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $i433 := $eq.i32($i432, 0);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb493, $bb494;

  $bb494:
    assume !($i433 == 1);
    assume {:verifier.code 0} true;
    goto $bb495;

  $bb495:
    assume {:verifier.code 0} true;
    goto $bb496;

  $bb493:
    assume $i433 == 1;
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $M.21 := 3;
    call {:si_unique_call 1806} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    goto $bb495;

  $bb409:
    assume $i308 == 1;
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $i420 := $M.21;
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $i421 := $eq.i32($i420, 3);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb485, $bb486;

  $bb486:
    assume !($i421 == 1);
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb487:
    assume {:verifier.code 0} true;
    $i424 := $M.21;
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $i425 := $eq.i32($i424, 2);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb488, $bb489;

  $bb489:
    assume !($i425 == 1);
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb490:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb488:
    assume $i425 == 1;
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $p426 := $M.26;
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} vslice_dummy_var_98 := eth_change_mtu($p426, $i13);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $M.21 := 2;
    call {:si_unique_call 1803} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb485:
    assume $i421 == 1;
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $p422 := $M.26;
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} vslice_dummy_var_97 := eth_change_mtu($p422, $i13);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $M.21 := 3;
    call {:si_unique_call 1801} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb396:
    assume $i302 == 1;
    assume {:verifier.code 0} true;
    $i310 := $slt.i32($i301, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb413, $bb414;

  $bb414:
    assume !($i310 == 1);
    assume {:verifier.code 0} true;
    $i311 := $slt.i32($i301, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb415, $bb416;

  $bb416:
    assume !($i311 == 1);
    assume {:verifier.code 0} true;
    $i312 := $slt.i32($i301, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb417, $bb418;

  $bb418:
    assume !($i312 == 1);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $i408 := $M.21;
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $i409 := $eq.i32($i408, 1);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb476, $bb477;

  $bb477:
    assume !($i409 == 1);
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb478:
    assume {:verifier.code 0} true;
    $i412 := $M.21;
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $i413 := $eq.i32($i412, 3);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb479, $bb480;

  $bb480:
    assume !($i413 == 1);
    assume {:verifier.code 0} true;
    goto $bb481;

  $bb481:
    assume {:verifier.code 0} true;
    $i416 := $M.21;
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $i417 := $eq.i32($i416, 2);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb482, $bb483;

  $bb483:
    assume !($i417 == 1);
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb484:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb482:
    assume $i417 == 1;
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $p418 := $M.26;
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} vslice_dummy_var_96 := sh_eth_get_stats($p418);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $M.21 := 2;
    call {:si_unique_call 1799} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb479:
    assume $i413 == 1;
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $p414 := $M.26;
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} vslice_dummy_var_95 := sh_eth_get_stats($p414);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $M.21 := 3;
    call {:si_unique_call 1797} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    goto $bb481;

  $bb476:
    assume $i409 == 1;
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $p410 := $M.26;
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} vslice_dummy_var_94 := sh_eth_get_stats($p410);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 1795} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb417:
    assume $i312 == 1;
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $i381 := $M.21;
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i382 := $eq.i32($i381, 1);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb467, $bb468;

  $bb468:
    assume !($i382 == 1);
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb469:
    assume {:verifier.code 0} true;
    $i390 := $M.21;
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $i391 := $eq.i32($i390, 3);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb470, $bb471;

  $bb471:
    assume !($i391 == 1);
    assume {:verifier.code 0} true;
    goto $bb472;

  $bb472:
    assume {:verifier.code 0} true;
    $i399 := $M.21;
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $i400 := $eq.i32($i399, 2);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb473, $bb474;

  $bb474:
    assume !($i400 == 1);
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb473:
    assume $i400 == 1;
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $p401 := $M.26;
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $i402 := $load.i16($M.53, $p1);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $i403 := $zext.i16.i32($i402);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $i404 := $trunc.i32.i16($i403);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $i405 := $zext.i16.i32($i14);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $i406 := $trunc.i32.i16($i405);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} vslice_dummy_var_93 := sh_eth_vlan_rx_add_vid($p401, $i404, $i406);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $M.21 := 2;
    call {:si_unique_call 1793} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb470:
    assume $i391 == 1;
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $p392 := $M.26;
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $i393 := $load.i16($M.53, $p1);
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $i394 := $zext.i16.i32($i393);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $i395 := $trunc.i32.i16($i394);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $i396 := $zext.i16.i32($i14);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $i397 := $trunc.i32.i16($i396);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} vslice_dummy_var_92 := sh_eth_vlan_rx_add_vid($p392, $i395, $i397);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $M.21 := 3;
    call {:si_unique_call 1791} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    goto $bb472;

  $bb467:
    assume $i382 == 1;
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $p383 := $M.26;
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $i384 := $load.i16($M.53, $p1);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $i385 := $zext.i16.i32($i384);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $i386 := $trunc.i32.i16($i385);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $i387 := $zext.i16.i32($i14);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $i388 := $trunc.i32.i16($i387);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} vslice_dummy_var_91 := sh_eth_vlan_rx_add_vid($p383, $i386, $i388);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 1789} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb415:
    assume $i311 == 1;
    assume {:verifier.code 0} true;
    $i313 := $slt.i32($i301, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb419, $bb420;

  $bb420:
    assume !($i313 == 1);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $i369 := $M.21;
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $i370 := $eq.i32($i369, 1);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb458, $bb459;

  $bb459:
    assume !($i370 == 1);
    assume {:verifier.code 0} true;
    goto $bb460;

  $bb460:
    assume {:verifier.code 0} true;
    $i373 := $M.21;
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $i374 := $eq.i32($i373, 3);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb461, $bb462;

  $bb462:
    assume !($i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb463;

  $bb463:
    assume {:verifier.code 0} true;
    $i377 := $M.21;
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $i378 := $eq.i32($i377, 2);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb464, $bb465;

  $bb465:
    assume !($i378 == 1);
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb464:
    assume $i378 == 1;
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $p379 := $M.26;
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} vslice_dummy_var_90 := sh_eth_do_ioctl($p379, $p17, $i18);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $M.21 := 2;
    call {:si_unique_call 1787} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb461:
    assume $i374 == 1;
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $p375 := $M.26;
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} vslice_dummy_var_89 := sh_eth_do_ioctl($p375, $p17, $i18);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $M.21 := 3;
    call {:si_unique_call 1785} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    goto $bb463;

  $bb458:
    assume $i370 == 1;
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $p371 := $M.26;
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} vslice_dummy_var_88 := sh_eth_do_ioctl($p371, $p17, $i18);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 1783} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    goto $bb460;

  $bb419:
    assume $i313 == 1;
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $i342 := $M.21;
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $i343 := $eq.i32($i342, 1);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb449, $bb450;

  $bb450:
    assume !($i343 == 1);
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb451:
    assume {:verifier.code 0} true;
    $i351 := $M.21;
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $i352 := $eq.i32($i351, 3);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb452, $bb453;

  $bb453:
    assume !($i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    $i360 := $M.21;
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $i361 := $eq.i32($i360, 2);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb455, $bb456;

  $bb456:
    assume !($i361 == 1);
    assume {:verifier.code 0} true;
    goto $bb457;

  $bb457:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb455:
    assume $i361 == 1;
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $p362 := $M.26;
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $i363 := $load.i16($M.52, $p0);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $i364 := $zext.i16.i32($i363);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $i365 := $trunc.i32.i16($i364);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $i366 := $zext.i16.i32($i15);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $i367 := $trunc.i32.i16($i366);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} vslice_dummy_var_87 := sh_eth_vlan_rx_kill_vid($p362, $i365, $i367);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $M.21 := 2;
    call {:si_unique_call 1781} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    goto $bb457;

  $bb452:
    assume $i352 == 1;
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $p353 := $M.26;
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $i354 := $load.i16($M.52, $p0);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $i355 := $zext.i16.i32($i354);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $i356 := $trunc.i32.i16($i355);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $i357 := $zext.i16.i32($i15);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $i358 := $trunc.i32.i16($i357);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} vslice_dummy_var_86 := sh_eth_vlan_rx_kill_vid($p353, $i356, $i358);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $M.21 := 3;
    call {:si_unique_call 1779} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb449:
    assume $i343 == 1;
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $p344 := $M.26;
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $i345 := $load.i16($M.52, $p0);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $i346 := $zext.i16.i32($i345);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $i347 := $trunc.i32.i16($i346);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $i348 := $zext.i16.i32($i15);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $i349 := $trunc.i32.i16($i348);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} vslice_dummy_var_85 := sh_eth_vlan_rx_kill_vid($p344, $i347, $i349);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 1777} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb413:
    assume $i310 == 1;
    assume {:verifier.code 0} true;
    $i314 := $slt.i32($i301, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb421, $bb422;

  $bb422:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    $i315 := $slt.i32($i301, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb423, $bb424;

  $bb424:
    assume !($i315 == 1);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $i330 := $M.21;
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $i331 := $eq.i32($i330, 1);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb440, $bb441;

  $bb441:
    assume !($i331 == 1);
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb442:
    assume {:verifier.code 0} true;
    $i334 := $M.21;
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $i335 := $eq.i32($i334, 3);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb443, $bb444;

  $bb444:
    assume !($i335 == 1);
    assume {:verifier.code 0} true;
    goto $bb445;

  $bb445:
    assume {:verifier.code 0} true;
    $i338 := $M.21;
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $i339 := $eq.i32($i338, 2);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb446, $bb447;

  $bb447:
    assume !($i339 == 1);
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb448:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb446:
    assume $i339 == 1;
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $p340 := $M.26;
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} vslice_dummy_var_84 := eth_validate_addr($p340);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $M.21 := 2;
    call {:si_unique_call 1775} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb443:
    assume $i335 == 1;
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $p336 := $M.26;
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} vslice_dummy_var_83 := eth_validate_addr($p336);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $M.21 := 3;
    call {:si_unique_call 1773} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    goto $bb445;

  $bb440:
    assume $i331 == 1;
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $p332 := $M.26;
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} vslice_dummy_var_82 := eth_validate_addr($p332);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 1771} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb423:
    assume $i315 == 1;
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $i321 := $M.21;
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $i322 := $eq.i32($i321, 1);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb431, $bb432;

  $bb432:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb433;

  $bb433:
    assume {:verifier.code 0} true;
    $i324 := $M.21;
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $i325 := $eq.i32($i324, 3);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb434, $bb435;

  $bb435:
    assume !($i325 == 1);
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb436:
    assume {:verifier.code 0} true;
    $i327 := $M.21;
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $i328 := $eq.i32($i327, 2);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb437, $bb438;

  $bb438:
    assume !($i328 == 1);
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb439:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb437:
    assume $i328 == 1;
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $p329 := $M.26;
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} sh_eth_set_multicast_list($p329);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $M.21 := 2;
    call {:si_unique_call 1769} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb434:
    assume $i325 == 1;
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $p326 := $M.26;
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} sh_eth_set_multicast_list($p326);
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $M.21 := 3;
    call {:si_unique_call 1767} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb431:
    assume $i322 == 1;
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $p323 := $M.26;
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} sh_eth_set_multicast_list($p323);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 1765} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    goto $bb433;

  $bb421:
    assume $i314 == 1;
    assume {:verifier.code 0} true;
    $i316 := $eq.i32($i301, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb425, $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    assume !($i316 == 1);
    goto $bb406;

  $bb425:
    assume $i316 == 1;
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $i317 := $M.21;
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $i318 := $eq.i32($i317, 3);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb427, $bb428;

  $bb428:
    assume !($i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb429:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb427:
    assume $i318 == 1;
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $p319 := $M.26;
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} vslice_dummy_var_81 := sh_eth_close($p319);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $M.21 := 2;
    call {:si_unique_call 1763} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb7:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i31, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i38 == 1);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $i287 := $M.68;
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $i288 := $ne.i32($i287, 0);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb373, $bb374;

  $bb374:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb373:
    assume $i288 == 1;
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1751} $i289 := __VERIFIER_nondet_int();
    call {:si_unique_call 1752} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i289);
    call {:si_unique_call 1753} {:cexpr "tmp___33"} boogie_si_record_i32($i289);
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    $i290 := $slt.i32($i289, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb376, $bb377;

  $bb377:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    $i291 := $eq.i32($i289, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb378, $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    assume !($i291 == 1);
    goto $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} ldv_stop();
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb378:
    assume $i291 == 1;
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $i296 := $M.68;
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $i297 := $eq.i32($i296, 1);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb387, $bb388;

  $bb388:
    assume !($i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb387:
    assume $i297 == 1;
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $p298 := $M.46;
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} sh_eth_set_duplex($p298);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 1757} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb376:
    assume $i290 == 1;
    assume {:verifier.code 0} true;
    $i292 := $eq.i32($i289, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb381, $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    assume !($i292 == 1);
    goto $bb380;

  $bb381:
    assume $i292 == 1;
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $i293 := $M.68;
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $i294 := $eq.i32($i293, 1);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb383, $bb384;

  $bb384:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb383:
    assume $i294 == 1;
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $p295 := $M.46;
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} sh_eth_chip_reset($p295);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 1755} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb16:
    assume $i38 == 1;
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $i275 := $M.67;
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $i276 := $ne.i32($i275, 0);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb353, $bb354;

  $bb354:
    assume !($i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb353:
    assume $i276 == 1;
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1743} $i277 := __VERIFIER_nondet_int();
    call {:si_unique_call 1744} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i277);
    call {:si_unique_call 1745} {:cexpr "tmp___32"} boogie_si_record_i32($i277);
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    $i278 := $slt.i32($i277, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  $bb357:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    $i279 := $eq.i32($i277, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb358, $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    assume !($i279 == 1);
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} ldv_stop();
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb358:
    assume $i279 == 1;
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $i284 := $M.67;
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $i285 := $eq.i32($i284, 1);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb367, $bb368;

  $bb368:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb367:
    assume $i285 == 1;
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $p286 := $M.47;
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} sh_eth_set_duplex($p286);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1749} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb356:
    assume $i278 == 1;
    assume {:verifier.code 0} true;
    $i280 := $eq.i32($i277, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb361, $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    assume !($i280 == 1);
    goto $bb360;

  $bb361:
    assume $i280 == 1;
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $i281 := $M.67;
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $i282 := $eq.i32($i281, 1);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb363, $bb364;

  $bb364:
    assume !($i282 == 1);
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb363:
    assume $i282 == 1;
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $p283 := $M.47;
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} sh_eth_set_rate_r8a777x($p283);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1747} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb5:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i31, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i31, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i40 == 1);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $i263 := $M.66;
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $i264 := $ne.i32($i263, 0);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb333, $bb334;

  $bb334:
    assume !($i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb333:
    assume $i264 == 1;
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1735} $i265 := __VERIFIER_nondet_int();
    call {:si_unique_call 1736} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i265);
    call {:si_unique_call 1737} {:cexpr "tmp___31"} boogie_si_record_i32($i265);
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    $i266 := $slt.i32($i265, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb336, $bb337;

  $bb337:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    $i267 := $eq.i32($i265, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    assume !($i267 == 1);
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} ldv_stop();
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb338:
    assume $i267 == 1;
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $i272 := $M.66;
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $i273 := $eq.i32($i272, 1);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb347, $bb348;

  $bb348:
    assume !($i273 == 1);
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb347:
    assume $i273 == 1;
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $p274 := $M.51;
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} sh_eth_set_duplex($p274);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 1741} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb336:
    assume $i266 == 1;
    assume {:verifier.code 0} true;
    $i268 := $eq.i32($i265, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    assume !($i268 == 1);
    goto $bb340;

  $bb341:
    assume $i268 == 1;
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $i269 := $M.66;
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $i270 := $eq.i32($i269, 1);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb343, $bb344;

  $bb344:
    assume !($i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb343:
    assume $i270 == 1;
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $p271 := $M.51;
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} sh_eth_set_rate_sh7724($p271);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 1739} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb20:
    assume $i40 == 1;
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $i247 := $M.65;
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $i248 := $ne.i32($i247, 0);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  $bb309:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb308:
    assume $i248 == 1;
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1725} $i249 := __VERIFIER_nondet_int();
    call {:si_unique_call 1726} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i249);
    call {:si_unique_call 1727} {:cexpr "tmp___30"} boogie_si_record_i32($i249);
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    $i250 := $slt.i32($i249, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  $bb312:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    $i251 := $slt.i32($i249, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  $bb314:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    $i252 := $eq.i32($i249, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb315, $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    assume !($i252 == 1);
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} ldv_stop();
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb315:
    assume $i252 == 1;
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $i260 := $M.65;
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $i261 := $eq.i32($i260, 1);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb327, $bb328;

  $bb328:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb327:
    assume $i261 == 1;
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $p262 := $M.49;
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} sh_eth_set_duplex($p262);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1733} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb313:
    assume $i251 == 1;
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $i257 := $M.65;
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i258 := $eq.i32($i257, 1);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb324, $bb325;

  $bb325:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb324:
    assume $i258 == 1;
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $p259 := $M.49;
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} sh_eth_set_rate_giga($p259);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1731} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb311:
    assume $i250 == 1;
    assume {:verifier.code 0} true;
    $i253 := $eq.i32($i249, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb318, $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    assume !($i253 == 1);
    goto $bb317;

  $bb318:
    assume $i253 == 1;
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $i254 := $M.65;
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $i255 := $eq.i32($i254, 1);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  $bb321:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb320:
    assume $i255 == 1;
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $p256 := $M.49;
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} sh_eth_chip_reset_giga($p256);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1729} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb18:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i31, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i41 == 1);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i231 := $M.64;
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i232 := $ne.i32($i231, 0);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  $bb284:
    assume !($i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb283:
    assume $i232 == 1;
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1715} $i233 := __VERIFIER_nondet_int();
    call {:si_unique_call 1716} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i233);
    call {:si_unique_call 1717} {:cexpr "tmp___29"} boogie_si_record_i32($i233);
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    $i234 := $slt.i32($i233, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb286, $bb287;

  $bb287:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    $i235 := $slt.i32($i233, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb288, $bb289;

  $bb289:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    $i236 := $eq.i32($i233, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    assume !($i236 == 1);
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} ldv_stop();
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb290:
    assume $i236 == 1;
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $i244 := $M.64;
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $i245 := $eq.i32($i244, 1);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  $bb303:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb302:
    assume $i245 == 1;
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $p246 := $M.44;
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} sh_eth_set_duplex($p246);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 1723} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb288:
    assume $i235 == 1;
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $i241 := $M.64;
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $i242 := $eq.i32($i241, 1);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  $bb300:
    assume !($i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb299:
    assume $i242 == 1;
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $p243 := $M.44;
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} sh_eth_set_rate_gether($p243);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 1721} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb286:
    assume $i234 == 1;
    assume {:verifier.code 0} true;
    $i237 := $eq.i32($i233, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    assume !($i237 == 1);
    goto $bb292;

  $bb293:
    assume $i237 == 1;
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $i238 := $M.64;
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $i239 := $eq.i32($i238, 1);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  $bb296:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb295:
    assume $i239 == 1;
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $p240 := $M.44;
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} sh_eth_chip_reset_r8a7740($p240);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 1719} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb22:
    assume $i41 == 1;
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $i209 := $M.63;
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $i210 := $ne.i32($i209, 0);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb257:
    assume $i210 == 1;
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1703} $i211 := __VERIFIER_nondet_int();
    call {:si_unique_call 1704} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i211);
    call {:si_unique_call 1705} {:cexpr "tmp___28"} boogie_si_record_i32($i211);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    $i212 := $slt.i32($i211, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i212 == 1);
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i211, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262, $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    assume !($i213 == 1);
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} ldv_stop();
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb262:
    assume $i213 == 1;
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $i223 := $M.63;
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $i224 := $eq.i32($i223, 1);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  $bb275:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb274:
    assume $i224 == 1;
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $p225 := $M.50;
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} $i226 := sh_eth_runtime_nop($p225);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $M.74 := $i226;
    call {:si_unique_call 1711} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i226);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $i227 := $M.74;
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $i228 := $eq.i32($i227, 0);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb276, $bb277;

  $bb277:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb276:
    assume $i228 == 1;
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1712} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $i229 := $M.58;
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $i230 := $add.i32($i229, 1);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $M.58 := $i230;
    call {:si_unique_call 1713} {:cexpr "ref_cnt"} boogie_si_record_i32($i230);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb260:
    assume $i212 == 1;
    assume {:verifier.code 0} true;
    $i214 := $eq.i32($i211, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb265, $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    assume !($i214 == 1);
    goto $bb264;

  $bb265:
    assume $i214 == 1;
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $i215 := $M.63;
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $i216 := $eq.i32($i215, 2);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  $bb268:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb267:
    assume $i216 == 1;
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $p217 := $M.50;
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} $i218 := sh_eth_runtime_nop($p217);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $M.73 := $i218;
    call {:si_unique_call 1707} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i218);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $i219 := $M.73;
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $i220 := $eq.i32($i219, 0);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  $bb270:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb269:
    assume $i220 == 1;
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1708} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $i221 := $M.58;
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $i222 := $sub.i32($i221, 1);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $M.58 := $i222;
    call {:si_unique_call 1709} {:cexpr "ref_cnt"} boogie_si_record_i32($i222);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb3:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i31, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i31, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i31, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i44 == 1);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $i150 := $M.62;
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $i151 := $ne.i32($i150, 0);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb192:
    assume $i151 == 1;
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1677} $i152 := __VERIFIER_nondet_int();
    call {:si_unique_call 1678} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i152);
    call {:si_unique_call 1679} {:cexpr "tmp___27"} boogie_si_record_i32($i152);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $i153 := $slt.i32($i152, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    $i154 := $slt.i32($i152, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    $i155 := $slt.i32($i152, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    $i156 := $slt.i32($i152, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    $i157 := $eq.i32($i152, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    assume !($i157 == 1);
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} ldv_stop();
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb203:
    assume $i157 == 1;
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $i205 := $M.62;
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $i206 := $eq.i32($i205, 1);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb251:
    assume $i206 == 1;
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $p207 := $M.42;
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} vslice_dummy_var_80 := ethtool_op_get_link($p207);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1701} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb201:
    assume $i156 == 1;
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $i200 := $M.62;
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $i201 := $eq.i32($i200, 1);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb248:
    assume $i201 == 1;
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $p202 := $M.42;
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $p203 := $M.41;
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} vslice_dummy_var_79 := sh_eth_set_ringparam($p202, $p203);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1699} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb199:
    assume $i155 == 1;
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $i196 := $M.62;
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $i197 := $eq.i32($i196, 1);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb245:
    assume $i197 == 1;
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $p198 := $M.42;
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} vslice_dummy_var_78 := sh_eth_get_msglevel($p198);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1697} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb197:
    assume $i154 == 1;
    assume {:verifier.code 0} true;
    $i158 := $slt.i32($i152, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb207:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    $i159 := $slt.i32($i152, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i159 == 1);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $i192 := $M.62;
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $i193 := $eq.i32($i192, 1);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb242:
    assume $i193 == 1;
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $p194 := $M.42;
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $p195 := $M.41;
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} sh_eth_get_ringparam($p194, $p195);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1695} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb208:
    assume $i159 == 1;
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $i188 := $M.62;
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i188, 1);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb239:
    assume $i189 == 1;
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $p190 := $M.42;
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} vslice_dummy_var_77 := sh_eth_nway_reset($p190);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1693} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb206:
    assume $i158 == 1;
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $i185 := $M.62;
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $i186 := $eq.i32($i185, 1);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  $bb237:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb236:
    assume $i186 == 1;
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $p187 := $M.42;
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} sh_eth_get_strings($p187, $i7, $p8);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1691} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb195:
    assume $i153 == 1;
    assume {:verifier.code 0} true;
    $i160 := $slt.i32($i152, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    $i161 := $slt.i32($i152, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    $i162 := $slt.i32($i152, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i162 == 1);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $i182 := $M.62;
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i182, 1);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb233:
    assume $i183 == 1;
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $p184 := $M.42;
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} sh_eth_get_ethtool_stats($p184, $p12, $p10);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1689} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb214:
    assume $i162 == 1;
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $i177 := $M.62;
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $i178 := $eq.i32($i177, 1);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb230:
    assume $i178 == 1;
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $p179 := $M.42;
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $p180 := $M.40;
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} vslice_dummy_var_76 := sh_eth_set_settings($p179, $p180);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1687} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb212:
    assume $i161 == 1;
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $i174 := $M.62;
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $i175 := $eq.i32($i174, 1);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb227:
    assume $i175 == 1;
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $p176 := $M.42;
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} sh_eth_set_msglevel($p176, $i6);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1685} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb210:
    assume $i160 == 1;
    assume {:verifier.code 0} true;
    $i163 := $slt.i32($i152, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  $bb217:
    assume !($i163 == 1);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $i169 := $M.62;
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i170 := $eq.i32($i169, 1);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  $bb225:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb224:
    assume $i170 == 1;
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $p171 := $M.42;
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $p172 := $M.40;
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} vslice_dummy_var_75 := sh_eth_get_settings($p171, $p172);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1683} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb216:
    assume $i163 == 1;
    assume {:verifier.code 0} true;
    $i164 := $eq.i32($i152, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    assume !($i164 == 1);
    goto $bb205;

  $bb218:
    assume $i164 == 1;
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $i165 := $M.62;
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i165, 1);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb220:
    assume $i166 == 1;
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $p167 := $M.42;
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} vslice_dummy_var_74 := sh_eth_get_sset_count($p167, $i5);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1681} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb28:
    assume $i44 == 1;
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $i138 := $M.61;
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $i139 := $ne.i32($i138, 0);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb172:
    assume $i139 == 1;
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1669} $i140 := __VERIFIER_nondet_int();
    call {:si_unique_call 1670} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i140);
    call {:si_unique_call 1671} {:cexpr "tmp___26"} boogie_si_record_i32($i140);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $i141 := $slt.i32($i140, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i140, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    assume !($i142 == 1);
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} ldv_stop();
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb177:
    assume $i142 == 1;
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $i147 := $M.61;
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i147, 1);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb186:
    assume $i148 == 1;
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $p149 := $M.36;
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} sh_eth_set_duplex($p149);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1675} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb175:
    assume $i141 == 1;
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i140, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    assume !($i143 == 1);
    goto $bb179;

  $bb180:
    assume $i143 == 1;
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $i144 := $M.61;
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i144, 1);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb182:
    assume $i145 == 1;
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $p146 := $M.36;
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} sh_eth_set_rate_sh7757($p146);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1673} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb26:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i31, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i45 == 1);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $i126 := $M.60;
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb152:
    assume $i127 == 1;
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1661} $i128 := __VERIFIER_nondet_int();
    call {:si_unique_call 1662} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i128);
    call {:si_unique_call 1663} {:cexpr "tmp___25"} boogie_si_record_i32($i128);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $i129 := $slt.i32($i128, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i128, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    assume !($i130 == 1);
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} ldv_stop();
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb157:
    assume $i130 == 1;
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $i135 := $M.60;
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i135, 1);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb166:
    assume $i136 == 1;
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $p137 := $M.48;
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} sh_eth_set_duplex($p137);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1667} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb155:
    assume $i129 == 1;
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i128, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    assume !($i131 == 1);
    goto $bb159;

  $bb160:
    assume $i131 == 1;
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $i132 := $M.60;
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i132, 1);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb162:
    assume $i133 == 1;
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $p134 := $M.48;
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} sh_eth_set_rate_r8a777x($p134);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1665} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb30:
    assume $i45 == 1;
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $i109 := $M.59;
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $i110 := $ne.i32($i109, 0);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb122:
    assume $i110 == 1;
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1626} $i111 := __VERIFIER_nondet_int();
    call {:si_unique_call 1627} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i111);
    call {:si_unique_call 1628} {:cexpr "tmp___24"} boogie_si_record_i32($i111);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $i112 := $slt.i32($i111, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i111, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    assume !($i113 == 1);
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} ldv_stop();
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb127:
    assume $i113 == 1;
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $i119 := $M.59;
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 1);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb140:
    assume $i120 == 1;
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} $i121 := sh_eth_driver_init();
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $M.72 := $i121;
    call {:si_unique_call 1633} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i121);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $i122 := $M.72;
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, 0);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $i124 := $M.72;
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i124, 0);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb145:
    assume $i125 == 1;
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $M.59 := 2;
    call {:si_unique_call 1659} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} ldv_check_final_state();
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb142:
    assume $i123 == 1;
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $M.59 := 3;
    call {:si_unique_call 1634} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1635} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} ldv_initialize_sh_eth_cpu_data_13();
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1637} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} ldv_initialize_sh_eth_cpu_data_10();
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1639} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} ldv_initialize_sh_eth_cpu_data_16();
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 1641} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} ldv_initialize_sh_eth_cpu_data_8();
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 1643} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} ldv_initialize_sh_eth_cpu_data_14();
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1645} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} ldv_initialize_sh_eth_cpu_data_15();
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1647} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} ldv_initialize_sh_eth_cpu_data_12();
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 1649} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} ldv_initialize_sh_eth_cpu_data_9();
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1651} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} ldv_initialize_mdiobb_ops_7();
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1653} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} ldv_dev_pm_ops_3();
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1655} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} ldv_initialize_sh_eth_cpu_data_11();
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1657} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} ldv_initialize_ethtool_ops_6();
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb125:
    assume $i112 == 1;
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i111, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    assume !($i114 == 1);
    goto $bb129;

  $bb130:
    assume $i114 == 1;
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $i115 := $M.59;
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i115, 3);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    assume !($i116 == 1);
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb132:
    assume $i116 == 1;
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $i117 := $M.58;
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, 0);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    assume !($i118 == 1);
    goto $bb134;

  $bb135:
    assume $i118 == 1;
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} sh_eth_driver_exit();
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $M.59 := 2;
    call {:si_unique_call 1630} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb24:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i31, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i31, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i47 == 1);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $i107 := $M.57;
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i107, 0);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb119:
    assume $i108 == 1;
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} choose_interrupt_1();
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb34:
    assume $i47 == 1;
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $i87 := $M.56;
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb96:
    assume $i88 == 1;
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1614} $i89 := __VERIFIER_nondet_int();
    call {:si_unique_call 1615} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i89);
    call {:si_unique_call 1616} {:cexpr "tmp___23"} boogie_si_record_i32($i89);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $i90 := $slt.i32($i89, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i89, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} ldv_stop();
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb101:
    assume $i91 == 1;
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $i101 := $M.56;
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 2);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb113:
    assume $i102 == 1;
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $p103 := $M.38;
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} vslice_dummy_var_73 := sh_eth_drv_remove($p103);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 1622} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $i105 := $M.58;
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $i106 := $sub.i32($i105, 1);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $M.58 := $i106;
    call {:si_unique_call 1623} {:cexpr "ref_cnt"} boogie_si_record_i32($i106);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb99:
    assume $i90 == 1;
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i89, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb103;

  $bb104:
    assume $i92 == 1;
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $i93 := $M.56;
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 1);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb106:
    assume $i94 == 1;
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $p95 := $M.38;
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} $i96 := sh_eth_drv_probe($p95);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $M.71 := $i96;
    call {:si_unique_call 1618} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i96);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $i97 := $M.71;
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 0);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb108:
    assume $i98 == 1;
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $M.56 := 2;
    call {:si_unique_call 1619} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $i99 := $M.58;
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $i100 := $add.i32($i99, 1);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $M.58 := $i100;
    call {:si_unique_call 1620} {:cexpr "ref_cnt"} boogie_si_record_i32($i100);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb32:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i31, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i48 == 1);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $i66 := $M.55;
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb66:
    assume $i67 == 1;
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1602} $i68 := __VERIFIER_nondet_int();
    call {:si_unique_call 1603} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i68);
    call {:si_unique_call 1604} {:cexpr "tmp___22"} boogie_si_record_i32($i68);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i68, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i68, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i68, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} ldv_stop();
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb73:
    assume $i71 == 1;
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $i84 := $M.55;
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 1);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb90:
    assume $i85 == 1;
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $p86 := $M.45;
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} sh_mdc_ctrl($p86, $i3);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1612} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb71:
    assume $i70 == 1;
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $i80 := $M.55;
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 1);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb87:
    assume $i81 == 1;
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $p82 := $M.45;
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} vslice_dummy_var_72 := sh_get_mdio($p82);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1610} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb69:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i68, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i72 == 1);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $i77 := $M.55;
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, 1);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb84:
    assume $i78 == 1;
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $p79 := $M.45;
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} sh_set_mdio($p79, $i2);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1608} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb76:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i68, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb75;

  $bb78:
    assume $i73 == 1;
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $i74 := $M.55;
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 1);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb80:
    assume $i75 == 1;
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $p76 := $M.45;
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} sh_mmd_ctrl($p76, $i4);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1606} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb36:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i31, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb15;

  $bb38:
    assume $i49 == 1;
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $i50 := $M.54;
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb40:
    assume $i51 == 1;
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1592} $i52 := __VERIFIER_nondet_int();
    call {:si_unique_call 1593} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i52);
    call {:si_unique_call 1594} {:cexpr "tmp___21"} boogie_si_record_i32($i52);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i52, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i52, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i52, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} ldv_stop();
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb47:
    assume $i55 == 1;
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $i63 := $M.54;
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 1);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb59:
    assume $i64 == 1;
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $p65 := $M.37;
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} sh_eth_set_duplex($p65);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1600} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb45:
    assume $i54 == 1;
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $i60 := $M.54;
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 1);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb56:
    assume $i61 == 1;
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $p62 := $M.37;
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} sh_eth_set_rate_gether($p62);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1598} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb43:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i52, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb49;

  $bb50:
    assume $i56 == 1;
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $i57 := $M.54;
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 1);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb52:
    assume $i58 == 1;
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $p59 := $M.37;
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} sh_eth_chip_reset($p59);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1596} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb65_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1589} $i31 := __VERIFIER_nondet_int();
    call {:si_unique_call 1590} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i31);
    call {:si_unique_call 1591} {:cexpr "tmp___20"} boogie_si_record_i32($i31);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const __VERIFIER_nondet_u32: ref;

axiom __VERIFIER_nondet_u32 == $sub.ref(0, 426198);

procedure __VERIFIER_nondet_u32() returns ($r: i32);



const __VERIFIER_nondet_u16: ref;

axiom __VERIFIER_nondet_u16 == $sub.ref(0, 427230);

procedure __VERIFIER_nondet_u16() returns ($r: i16);



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 428262);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.2;



implementation ldv_initialize()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $p0 := $M.1;
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1892} ldv_set_init($p0);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    return;
}



const sh_eth_driver_exit: ref;

axiom sh_eth_driver_exit == $sub.ref(0, 429294);

procedure sh_eth_driver_exit();
  free requires assertsPassed;
  modifies $M.56;



implementation sh_eth_driver_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} ldv_platform_driver_unregister_22(sh_eth_driver);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    return;
}



const sh_eth_driver_init: ref;

axiom sh_eth_driver_init == $sub.ref(0, 430326);

procedure sh_eth_driver_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.56, $M.38, $M.0, $CurrAddr;



implementation sh_eth_driver_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1894} $i0 := ldv___platform_driver_register_21(sh_eth_driver, __this_module);
    call {:si_unique_call 1895} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_ndo_uninit_4: ref;

axiom ldv_ndo_uninit_4 == $sub.ref(0, 431358);

procedure ldv_ndo_uninit_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_uninit_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1896} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1897} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_ndo_init_4: ref;

axiom ldv_ndo_init_4 == $sub.ref(0, 432390);

procedure ldv_ndo_init_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_init_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1898} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1899} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_ndo_uninit_5: ref;

axiom ldv_ndo_uninit_5 == $sub.ref(0, 433422);

procedure ldv_ndo_uninit_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_uninit_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1900} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1901} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_ndo_init_5: ref;

axiom ldv_ndo_init_5 == $sub.ref(0, 434454);

procedure ldv_ndo_init_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_init_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1902} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1903} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 435486);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $p0 := $M.1;
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} $i1 := ldv_set_is_empty($p0);
    call {:si_unique_call 1905} {:cexpr "tmp___7"} boogie_si_record_i32($i1);
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} ldv_error();
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_set_is_empty: ref;

axiom ldv_set_is_empty == $sub.ref(0, 436518);

procedure ldv_set_is_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_set_is_empty($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $i1 := $M.2;
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv___platform_driver_register_21: ref;

axiom ldv___platform_driver_register_21 == $sub.ref(0, 437550);

procedure ldv___platform_driver_register_21($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.56, $M.38, $M.0, $CurrAddr;



implementation ldv___platform_driver_register_21($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} $i2 := __platform_driver_register($p0, $p1);
    call {:si_unique_call 1908} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 1909} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} ldv_initialize_platform_driver_2();
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __platform_driver_register: ref;

axiom __platform_driver_register == $sub.ref(0, 438582);

procedure __platform_driver_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __platform_driver_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1911} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1912} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_platform_driver_unregister_22: ref;

axiom ldv_platform_driver_unregister_22 == $sub.ref(0, 439614);

procedure ldv_platform_driver_unregister_22($p0: ref);
  free requires assertsPassed;
  modifies $M.56;



implementation ldv_platform_driver_unregister_22($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1913} platform_driver_unregister($p0);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $M.56 := 0;
    call {:si_unique_call 1914} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    return;
}



const platform_driver_unregister: ref;

axiom platform_driver_unregister == $sub.ref(0, 440646);

procedure platform_driver_unregister($p0: ref);
  free requires assertsPassed;



implementation platform_driver_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    return;
}



const ldv_set_init: ref;

axiom ldv_set_init == $sub.ref(0, 441678);

procedure ldv_set_init($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation ldv_set_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    $M.2 := 0;
    call {:si_unique_call 1915} {:cexpr "last_index"} boogie_si_record_i32(0);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 442710);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1916} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 1} true;
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 443742);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 444774);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 445806);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 446838);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 447870);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 448902);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 449934);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 450966);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 451998);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 453030);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __VERIFIER_nondet_unsigned_short: ref;

axiom __VERIFIER_nondet_unsigned_short == $sub.ref(0, 454062);

procedure __VERIFIER_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 455094);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 456126);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 457158);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1917} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1918} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1919} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1920} __VERIFIER_assume($i4);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 458190);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 459222);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 460254);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 461286);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1921} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1922} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1923} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1924} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1925} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1926} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1927} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1928} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1929} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1930} __VERIFIER_assume($i7);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1931} __VERIFIER_assume($i11);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 462318);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 463350);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 464382);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 465414);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 466446);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 467478);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1932} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1933} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1934} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1935} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1936} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1937} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1938} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1939} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1940} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1941} __VERIFIER_assume($i7);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1942} __VERIFIER_assume($i11);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 468510);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 469542);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 470574);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 471606);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 472638);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 473670);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 474702);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 475734);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_ushort: ref;

axiom __VERIFIER_nondet_ushort == $sub.ref(0, 476766);

procedure __VERIFIER_nondet_ushort() returns ($r: i16);



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 477798);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1943} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1944} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1945} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 478830);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1946} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1947} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1948} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 479862);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1949} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1950} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 480894);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 481926);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1951} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1952} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 482958);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 483990);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 485022);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1953} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1954} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1955} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1956} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} $p6 := malloc($i5);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.0;
    call {:si_unique_call 1958} cmdloc_dummy_var_25 := $memset.i8(cmdloc_dummy_var_24, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_25;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 486054);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 487086);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.13, $M.7, $M.11, $M.9, $M.36, $M.37, $M.38, $M.26, $M.39, $M.40, $M.41, $M.42, $M.8, $M.16, $M.10, $M.17, $M.12, $M.18, $M.14, $M.19, $M.44, $M.77, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.21, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.78, $M.79, $M.2, $M.1, $M.80, $M.3, $M.0, $M.246, $M.292, $M.293;



implementation __SMACK_static_init()
{

  $bb0:
    $M.13 := 0;
    call {:si_unique_call 1959} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    $M.7 := 0;
    call {:si_unique_call 1960} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    $M.11 := 0;
    call {:si_unique_call 1961} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    call {:si_unique_call 1962} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.9 := 0;
    call {:si_unique_call 1963} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    $M.36 := $0.ref;
    $M.37 := $0.ref;
    $M.38 := $0.ref;
    $M.26 := $0.ref;
    $M.39 := $0.ref;
    $M.40 := $0.ref;
    $M.41 := $0.ref;
    $M.42 := $0.ref;
    $M.8 := 0;
    call {:si_unique_call 1964} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32(0);
    $M.16 := $0.ref;
    $M.10 := 0;
    call {:si_unique_call 1965} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32(0);
    $M.17 := $0.ref;
    $M.12 := 0;
    call {:si_unique_call 1966} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32(0);
    $M.18 := $0.ref;
    $M.14 := 0;
    call {:si_unique_call 1967} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32(0);
    $M.19 := $0.ref;
    $M.44 := $0.ref;
    $M.77 := $0.ref;
    $M.45 := $0.ref;
    $M.46 := $0.ref;
    $M.47 := $0.ref;
    $M.48 := $0.ref;
    $M.49 := $0.ref;
    $M.50 := $0.ref;
    $M.51 := $0.ref;
    $M.54 := 0;
    call {:si_unique_call 1968} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    $M.55 := 0;
    call {:si_unique_call 1969} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.56 := 0;
    call {:si_unique_call 1970} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.57 := 0;
    call {:si_unique_call 1971} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.58 := 0;
    call {:si_unique_call 1972} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.59 := 0;
    call {:si_unique_call 1973} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.60 := 0;
    call {:si_unique_call 1974} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(0);
    $M.61 := 0;
    call {:si_unique_call 1975} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    $M.62 := 0;
    call {:si_unique_call 1976} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.63 := 0;
    call {:si_unique_call 1977} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.64 := 0;
    call {:si_unique_call 1978} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    $M.65 := 0;
    call {:si_unique_call 1979} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    $M.66 := 0;
    call {:si_unique_call 1980} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(0);
    $M.67 := 0;
    call {:si_unique_call 1981} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(0);
    $M.68 := 0;
    call {:si_unique_call 1982} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.21 := 0;
    call {:si_unique_call 1983} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.69 := 0;
    call {:si_unique_call 1984} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    $M.70 := 0;
    call {:si_unique_call 1985} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.71 := 0;
    call {:si_unique_call 1986} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.72 := 0;
    call {:si_unique_call 1987} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.73 := 0;
    call {:si_unique_call 1988} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.74 := 0;
    call {:si_unique_call 1989} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.75 := 0;
    call {:si_unique_call 1990} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.76 := 0;
    call {:si_unique_call 1991} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.78 := 0;
    call {:si_unique_call 1992} {:cexpr "ldv_retval_7"} boogie_si_record_i32(0);
    $M.79 := 0;
    call {:si_unique_call 1993} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.2 := 0;
    call {:si_unique_call 1994} {:cexpr "last_index"} boogie_si_record_i32(0);
    $M.1 := $0.ref;
    $M.80 := $store.i8($M.80, __mod_platform__sh_eth_id_table_device_table, 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(__mod_platform__sh_eth_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(__mod_platform__sh_eth_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(__mod_platform__sh_eth_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(__mod_platform__sh_eth_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(__mod_platform__sh_eth_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(__mod_platform__sh_eth_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(__mod_platform__sh_eth_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(__mod_platform__sh_eth_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(__mod_platform__sh_eth_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(__mod_platform__sh_eth_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(__mod_platform__sh_eth_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(__mod_platform__sh_eth_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(__mod_platform__sh_eth_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(__mod_platform__sh_eth_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(__mod_platform__sh_eth_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(__mod_platform__sh_eth_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(__mod_platform__sh_eth_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(__mod_platform__sh_eth_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(__mod_platform__sh_eth_id_table_device_table, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.80 := $store.i64($M.80, $add.ref($add.ref(__mod_platform__sh_eth_id_table_device_table, $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.3 := $store.ref($M.3, set_impl, $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(1, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(2, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(3, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(4, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(5, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(6, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(7, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(8, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(9, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(10, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(11, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(12, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(13, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(14, 8)), $0.ref);
    $M.0 := $store.i8($M.0, sh_eth_gstrings_stats, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(0, 32)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(0, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(1, 32)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(7, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(2, 32)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(0, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(7, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(sh_eth_gstrings_stats, $mul.ref(0, 128)), $mul.ref(3, 32)), $mul.ref(31, 1)), 0);
    $M.246 := $store.i8($M.246, sh_eth_id_table, 115);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 104);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 55);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 54);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 57);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 45);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 101);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 116);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 104);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 101);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 114);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.246 := $store.i64($M.246, $add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(0, 32)), $mul.ref(24, 1)), $p2i.ref.i64(sh7619_data));
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 115);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 104);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 55);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 55);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 49);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 120);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 45);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 101);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 116);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 104);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 101);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 114);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.246 := $store.i64($M.246, $add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(1, 32)), $mul.ref(24, 1)), $p2i.ref.i64(sh771x_data));
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 115);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 104);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 55);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 55);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 50);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 52);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 45);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 101);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 116);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 104);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 101);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 114);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.246 := $store.i64($M.246, $add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(2, 32)), $mul.ref(24, 1)), $p2i.ref.i64(sh7724_data));
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 115);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 104);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 55);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 55);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 51);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 52);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 45);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 103);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 101);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 116);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 104);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 101);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 114);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.246 := $store.i64($M.246, $add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(3, 32)), $mul.ref(24, 1)), $p2i.ref.i64(sh7734_data));
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 115);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 104);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 55);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 55);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 53);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 55);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 45);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 101);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 116);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 104);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 101);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 114);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.246 := $store.i64($M.246, $add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(4, 32)), $mul.ref(24, 1)), $p2i.ref.i64(sh7757_data));
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 115);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 104);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 55);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 55);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 53);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 55);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 45);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 103);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 101);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 116);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 104);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 101);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 114);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(5, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.246 := $store.i64($M.246, $add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(5, 32)), $mul.ref(24, 1)), $p2i.ref.i64(sh7757_data_giga));
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 115);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 104);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 55);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 55);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 54);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 51);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 45);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 103);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 101);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 116);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 104);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 101);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 114);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(6, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.246 := $store.i64($M.246, $add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(6, 32)), $mul.ref(24, 1)), $p2i.ref.i64(sh7763_data));
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 55);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 115);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 55);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 50);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 49);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 48);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 45);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 101);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 116);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 104);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 101);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 114);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(7, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.246 := $store.i64($M.246, $add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(7, 32)), $mul.ref(24, 1)), $p2i.ref.i64(r7s72100_data));
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 56);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 97);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 55);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 55);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 52);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 45);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 103);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 101);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 116);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 104);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 101);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 114);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(8, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.246 := $store.i64($M.246, $add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(8, 32)), $mul.ref(24, 1)), $p2i.ref.i64(r8a7740_data));
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 56);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 97);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 55);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 55);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 55);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 120);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 45);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 101);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 116);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 104);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 101);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 114);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(9, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.246 := $store.i64($M.246, $add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(9, 32)), $mul.ref(24, 1)), $p2i.ref.i64(r8a777x_data));
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 56);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 97);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 55);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 55);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 57);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 45);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 101);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 116);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 104);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 101);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 114);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(10, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.246 := $store.i64($M.246, $add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(10, 32)), $mul.ref(24, 1)), $p2i.ref.i64(r8a779x_data));
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 56);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 97);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 55);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 55);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 57);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 45);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 101);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 116);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 104);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 101);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 114);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(11, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.246 := $store.i64($M.246, $add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(11, 32)), $mul.ref(24, 1)), $p2i.ref.i64(r8a779x_data));
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.246 := $store.i8($M.246, $add.ref($add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(12, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.246 := $store.i64($M.246, $add.ref($add.ref($add.ref(sh_eth_id_table, $mul.ref(0, 416)), $mul.ref(12, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.ref($M.0, bb_ops, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(bb_ops, $mul.ref(0, 40)), $mul.ref(8, 1)), sh_mdc_ctrl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(bb_ops, $mul.ref(0, 40)), $mul.ref(16, 1)), sh_mmd_ctrl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(bb_ops, $mul.ref(0, 40)), $mul.ref(24, 1)), sh_set_mdio);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(bb_ops, $mul.ref(0, 40)), $mul.ref(32, 1)), sh_get_mdio);
    $M.0 := $store.ref($M.0, sh_eth_ethtool_ops, sh_eth_get_settings);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(8, 1)), sh_eth_set_settings);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(56, 1)), sh_eth_get_msglevel);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(64, 1)), sh_eth_set_msglevel);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(72, 1)), sh_eth_nway_reset);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(80, 1)), ethtool_op_get_link);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(128, 1)), sh_eth_get_ringparam);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(136, 1)), sh_eth_set_ringparam);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(168, 1)), sh_eth_get_strings);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(184, 1)), sh_eth_get_ethtool_stats);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(224, 1)), sh_eth_get_sset_count);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_ethtool_ops, $mul.ref(0, 376)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, sh_eth_netdev_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(16, 1)), sh_eth_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(24, 1)), sh_eth_close);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(32, 1)), sh_eth_start_xmit);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(64, 1)), eth_mac_addr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(72, 1)), eth_validate_addr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(80, 1)), sh_eth_do_ioctl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(96, 1)), eth_change_mtu);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(112, 1)), sh_eth_tx_timeout);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(128, 1)), sh_eth_get_stats);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(400, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(408, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(416, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(424, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(432, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(440, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(448, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(456, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(464, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops, $mul.ref(0, 480)), $mul.ref(472, 1)), $0.ref);
    $M.0 := $store.ref($M.0, sh_eth_netdev_ops_tsu, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(16, 1)), sh_eth_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(24, 1)), sh_eth_close);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(32, 1)), sh_eth_start_xmit);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(56, 1)), sh_eth_set_multicast_list);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(64, 1)), eth_mac_addr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(72, 1)), eth_validate_addr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(80, 1)), sh_eth_do_ioctl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(96, 1)), eth_change_mtu);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(112, 1)), sh_eth_tx_timeout);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(128, 1)), sh_eth_get_stats);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(136, 1)), sh_eth_vlan_rx_add_vid);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(144, 1)), sh_eth_vlan_rx_kill_vid);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(400, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(408, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(416, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(424, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(432, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(440, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(448, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(456, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(464, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(sh_eth_netdev_ops_tsu, $mul.ref(0, 480)), $mul.ref(472, 1)), $0.ref);
    $M.0 := $store.i16($M.0, sh_eth_offset_fast_sh3_sh2, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(1, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(2, 2)), 4);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(3, 2)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(4, 2)), 20);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(5, 2)), 24);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(6, 2)), 12);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(7, 2)), 80);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(8, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(9, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(10, 2)), 16);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(11, 2)), 68);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(12, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(13, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(14, 2)), 28);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(15, 2)), 32);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(16, 2)), 36);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(17, 2)), 40);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(18, 2)), 44);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(19, 2)), 48);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(20, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(21, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(22, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(23, 2)), 52);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(24, 2)), 56);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(25, 2)), 60);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(26, 2)), 64);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(27, 2)), 76);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(28, 2)), 352);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(29, 2)), 356);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(30, 2)), 360);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(31, 2)), 364);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(32, 2)), 380);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(33, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(34, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(35, 2)), 376);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(36, 2)), 436);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(37, 2)), 440);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(38, 2)), 444);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(39, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(40, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(41, 2)), 420);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(42, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(43, 2)), 452);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(44, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(45, 2)), 460);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(46, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(47, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(48, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(49, 2)), 368);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(50, 2)), 372);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(51, 2)), 384);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(52, 2)), 388);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(53, 2)), 392);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(54, 2)), 396);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(55, 2)), 404);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(56, 2)), 408);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(57, 2)), 412);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(58, 2)), 416);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(59, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(60, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(61, 2)), 424);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(62, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(63, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(64, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(65, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(66, 2)), 4);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(67, 2)), 16);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(68, 2)), 20);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(69, 2)), 24);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(70, 2)), 32);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(71, 2)), 36);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(72, 2)), 40);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(73, 2)), 44);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(74, 2)), 48);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(75, 2)), 52);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(76, 2)), 56);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(77, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(78, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(79, 2)), 64);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(80, 2)), 68);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(81, 2)), 80);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(82, 2)), 84);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(83, 2)), 72);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(84, 2)), 76);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(85, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(86, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(87, 2)), 96);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(88, 2)), 100);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(89, 2)), 112);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(90, 2)), 116);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(91, 2)), 120);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(92, 2)), 124);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(93, 2)), 256);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(94, 2)), 260);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(95, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(96, 2)), 508);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(97, 2)), 128);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(98, 2)), 132);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(99, 2)), 136);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(100, 2)), 140);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(101, 2)), 144);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(102, 2)), 148);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(103, 2)), 160);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(104, 2)), 160);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(105, 2)), 168);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(106, 2)), 172);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(107, 2)), 176);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh3_sh2, $mul.ref(0, 218)), $mul.ref(108, 2)), 180);
    $M.0 := $store.i16($M.0, sh_eth_offset_fast_sh4, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(1, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(2, 2)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(3, 2)), 16);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(4, 2)), 40);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(5, 2)), 48);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(6, 2)), 24);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(7, 2)), 216);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(8, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(9, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(10, 2)), 32);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(11, 2)), 204);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(12, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(13, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(14, 2)), 56);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(15, 2)), 64);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(16, 2)), 72);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(17, 2)), 80);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(18, 2)), 88);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(19, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(20, 2)), 100);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(21, 2)), 104);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(22, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(23, 2)), 112);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(24, 2)), 120);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(25, 2)), 124);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(26, 2)), 200);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(27, 2)), 212);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(28, 2)), 256);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(29, 2)), 272);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(30, 2)), 280);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(31, 2)), 288);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(32, 2)), 296);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(33, 2)), 320);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(34, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(35, 2)), 264);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(36, 2)), 336);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(37, 2)), 340);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(38, 2)), 344);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(39, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(40, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(41, 2)), 500);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(42, 2)), 352);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(43, 2)), 356);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(44, 2)), 360);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(45, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(46, 2)), 364);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(47, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(48, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(49, 2)), 448);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(50, 2)), 456);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(51, 2)), 464);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(52, 2)), 468);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(53, 2)), 472);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(54, 2)), 476);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(55, 2)), 484);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(56, 2)), 488);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(57, 2)), 492);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(58, 2)), 496);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(59, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(60, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(61, 2)), 504);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(62, 2)), 508);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(63, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(64, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(65, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(66, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(67, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(68, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(69, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(70, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(71, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(72, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(73, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(74, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(75, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(76, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(77, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(78, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(79, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(80, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(81, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(82, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(83, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(84, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(85, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(86, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(87, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(88, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(89, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(90, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(91, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(92, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(93, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(94, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(95, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(96, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(97, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(98, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(99, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(100, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(101, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(102, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(103, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(104, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(105, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(106, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(107, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_sh4, $mul.ref(0, 218)), $mul.ref(108, 2)), 0);
    $M.0 := $store.i16($M.0, sh_eth_offset_fast_rcar, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(1, 2)), 512);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(2, 2)), 520);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(3, 2)), 528);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(4, 2)), 552);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(5, 2)), 560);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(6, 2)), 536);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(7, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(8, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(9, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(10, 2)), 544);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(11, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(12, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(13, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(14, 2)), 568);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(15, 2)), 576);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(16, 2)), 584);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(17, 2)), 592);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(18, 2)), 600);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(19, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(20, 2)), 612);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(21, 2)), 616);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(22, 2)), 620);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(23, 2)), 624);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(24, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(25, 2)), 636);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(26, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(27, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(28, 2)), 768);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(29, 2)), 784);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(30, 2)), 792);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(31, 2)), 800);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(32, 2)), 808);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(33, 2)), 832);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(34, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(35, 2)), 776);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(36, 2)), 848);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(37, 2)), 852);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(38, 2)), 856);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(39, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(40, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(41, 2)), 1012);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(42, 2)), 864);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(43, 2)), 868);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(44, 2)), 872);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(45, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(46, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(47, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(48, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(49, 2)), 960);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(50, 2)), 968);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(51, 2)), 976);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(52, 2)), 980);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(53, 2)), 984);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(54, 2)), 988);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(55, 2)), 996);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(56, 2)), 1000);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(57, 2)), 1004);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(58, 2)), 1008);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(59, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(60, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(61, 2)), 1016);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(62, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(63, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(64, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(65, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(66, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(67, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(68, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(69, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(70, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(71, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(72, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(73, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(74, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(75, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(76, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(77, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(78, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(79, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(80, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(81, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(82, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(83, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(84, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(85, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(86, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(87, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(88, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(89, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(90, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(91, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(92, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(93, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(94, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(95, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(96, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(97, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(98, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(99, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(100, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(101, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(102, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(103, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(104, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(105, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(106, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(107, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rcar, $mul.ref(0, 218)), $mul.ref(108, 2)), 0);
    $M.0 := $store.i16($M.0, sh_eth_offset_fast_rz, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(1, 2)), 1024);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(2, 2)), 1032);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(3, 2)), 1040);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(4, 2)), 1064);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(5, 2)), 1072);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(6, 2)), 16);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(7, 2)), 20);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(8, 2)), 24);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(9, 2)), 28);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(10, 2)), 48);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(11, 2)), 52);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(12, 2)), 56);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(13, 2)), 60);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(14, 2)), 1080);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(15, 2)), 1088);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(16, 2)), 1096);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(17, 2)), 1104);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(18, 2)), 1112);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(19, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(20, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(21, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(22, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(23, 2)), 1128);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(24, 2)), 1120);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(25, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(26, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(27, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(28, 2)), 1280);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(29, 2)), 1296);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(30, 2)), 1304);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(31, 2)), 1312);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(32, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(33, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(34, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(35, 2)), 1288);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(36, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(37, 2)), 1364);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(38, 2)), 1368);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(39, 2)), 1372);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(40, 2)), 1376);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(41, 2)), 1888);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(42, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(43, 2)), 1380);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(44, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(45, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(46, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(47, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(48, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(49, 2)), 1472);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(50, 2)), 1480);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(51, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(52, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(53, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(54, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(55, 2)), 1856);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(56, 2)), 1864);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(57, 2)), 1872);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(58, 2)), 1880);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(59, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(60, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(61, 2)), 1912);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(62, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(63, 2)), 1252);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(64, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(65, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(66, 2)), 4);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(67, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(68, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(69, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(70, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(71, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(72, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(73, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(74, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(75, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(76, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(77, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(78, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(79, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(80, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(81, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(82, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(83, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(84, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(85, 2)), 88);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(86, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(87, 2)), 96);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(88, 2)), 100);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(89, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(90, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(91, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(92, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(93, 2)), 256);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(94, 2)), 260);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(95, 2)), 504);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(96, 2)), 508);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(97, 2)), 128);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(98, 2)), 132);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(99, 2)), 136);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(100, 2)), 140);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(101, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(102, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(103, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(104, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(105, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(106, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(107, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_fast_rz, $mul.ref(0, 218)), $mul.ref(108, 2)), 0);
    $M.0 := $store.i16($M.0, sh_eth_offset_gigabit, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(1, 2)), 1024);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(2, 2)), 1032);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(3, 2)), 1040);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(4, 2)), 1064);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(5, 2)), 1072);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(6, 2)), 16);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(7, 2)), 20);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(8, 2)), 24);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(9, 2)), 28);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(10, 2)), 48);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(11, 2)), 52);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(12, 2)), 56);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(13, 2)), 60);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(14, 2)), 1080);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(15, 2)), 1088);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(16, 2)), 1096);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(17, 2)), 1104);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(18, 2)), 1112);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(19, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(20, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(21, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(22, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(23, 2)), 1128);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(24, 2)), 1120);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(25, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(26, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(27, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(28, 2)), 1280);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(29, 2)), 1296);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(30, 2)), 1304);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(31, 2)), 1312);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(32, 2)), 1320);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(33, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(34, 2)), 1324);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(35, 2)), 1288);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(36, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(37, 2)), 1364);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(38, 2)), 1368);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(39, 2)), 1372);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(40, 2)), 1376);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(41, 2)), 1888);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(42, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(43, 2)), 1380);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(44, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(45, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(46, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(47, 2)), 1456);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(48, 2)), 1460);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(49, 2)), 1472);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(50, 2)), 1480);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(51, 2)), 1792);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(52, 2)), 1800);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(53, 2)), 1808);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(54, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(55, 2)), 1856);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(56, 2)), 1864);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(57, 2)), 1872);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(58, 2)), 1880);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(59, 2)), 1896);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(60, 2)), 1904);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(61, 2)), 1912);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(62, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(63, 2)), 1252);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(64, 2)), 1936);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(65, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(66, 2)), 4);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(67, 2)), 16);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(68, 2)), 20);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(69, 2)), 24);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(70, 2)), 32);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(71, 2)), 36);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(72, 2)), 40);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(73, 2)), 44);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(74, 2)), 48);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(75, 2)), 52);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(76, 2)), 56);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(77, 2)), 64);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(78, 2)), 68);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(79, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(80, 2)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(81, 2)), 80);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(82, 2)), 84);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(83, 2)), 72);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(84, 2)), 76);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(85, 2)), 88);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(86, 2)), 92);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(87, 2)), 96);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(88, 2)), 100);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(89, 2)), 112);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(90, 2)), 116);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(91, 2)), 120);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(92, 2)), 124);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(93, 2)), 256);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(94, 2)), 260);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(95, 2)), 504);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(96, 2)), 508);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(97, 2)), 128);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(98, 2)), 132);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(99, 2)), 136);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(100, 2)), 140);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(101, 2)), 144);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(102, 2)), 148);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(103, 2)), 160);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(104, 2)), 160);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(105, 2)), 168);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(106, 2)), 172);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(107, 2)), 176);
    $M.0 := $store.i16($M.0, $add.ref($add.ref(sh_eth_offset_gigabit, $mul.ref(0, 218)), $mul.ref(108, 2)), 180);
    $M.292 := $store.i8($M.292, .str.44, 37);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.44, $mul.ref(0, 8)), $mul.ref(1, 1)), 115);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.44, $mul.ref(0, 8)), $mul.ref(2, 1)), 58);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.44, $mul.ref(0, 8)), $mul.ref(3, 1)), 37);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.44, $mul.ref(0, 8)), $mul.ref(4, 1)), 48);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.44, $mul.ref(0, 8)), $mul.ref(5, 1)), 50);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.44, $mul.ref(0, 8)), $mul.ref(6, 1)), 120);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.44, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.17, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 7)), $mul.ref(1, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 7)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 7)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 7)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 7)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.17, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.293 := $store.i8($M.293, .str.18, 37);
    $M.293 := $store.i8($M.293, $add.ref($add.ref(.str.18, $mul.ref(0, 6)), $mul.ref(1, 1)), 115);
    $M.293 := $store.i8($M.293, $add.ref($add.ref(.str.18, $mul.ref(0, 6)), $mul.ref(2, 1)), 45);
    $M.293 := $store.i8($M.293, $add.ref($add.ref(.str.18, $mul.ref(0, 6)), $mul.ref(3, 1)), 37);
    $M.293 := $store.i8($M.293, $add.ref($add.ref(.str.18, $mul.ref(0, 6)), $mul.ref(4, 1)), 120);
    $M.293 := $store.i8($M.293, $add.ref($add.ref(.str.18, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    call {:si_unique_call 1995} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 488118);

procedure devirtbounce(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.34, $M.35, $M.5, $M.4, $M.3, $M.2, $CurrAddr;



implementation devirtbounce(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i12 := $eq.ref(sh_eth_set_rate_r8a777x, $p0);
    assume true;
    goto $bb13, $bb25;

  $bb25:
    assume !($i12 == 1);
    $i11 := $eq.ref(sh_eth_chip_reset_r8a7740, $p0);
    assume true;
    goto $bb12, $bb24;

  $bb24:
    assume !($i11 == 1);
    $i10 := $eq.ref(sh_eth_set_rate_giga, $p0);
    assume true;
    goto $bb11, $bb23;

  $bb23:
    assume !($i10 == 1);
    $i9 := $eq.ref(sh_eth_chip_reset_giga, $p0);
    assume true;
    goto $bb10, $bb22;

  $bb22:
    assume !($i9 == 1);
    $i8 := $eq.ref(sh_eth_set_rate_sh7757, $p0);
    assume {:branchcond $i8} true;
    goto $bb9, $bb21;

  $bb21:
    assume !($i8 == 1);
    $i7 := $eq.ref(sh_eth_set_rate_gether, $p0);
    assume {:branchcond $i7} true;
    goto $bb8, $bb20;

  $bb20:
    assume !($i7 == 1);
    $i6 := $eq.ref(sh_eth_chip_reset, $p0);
    assume true;
    goto $bb7, $bb19;

  $bb19:
    assume !($i6 == 1);
    $i5 := $eq.ref(sh_eth_set_rate_sh7724, $p0);
    assume {:branchcond $i5} true;
    goto $bb6, $bb18;

  $bb18:
    assume !($i5 == 1);
    $i4 := $eq.ref(sh_eth_set_duplex, $p0);
    assume {:branchcond $i4} true;
    goto $bb5, $bb17;

  $bb17:
    assume !($i4 == 1);
    $i3 := $eq.ref(sh_eth_adjust_link, $p0);
    assume {:branchcond $i3} true;
    goto $bb4, $bb16;

  $bb16:
    assume !($i3 == 1);
    $i2 := $eq.ref(sh_eth_tx_timeout, $p0);
    assume {:branchcond $i2} true;
    goto $bb3, $bb15;

  $bb15:
    assume !($i2 == 1);
    $i1 := $eq.ref(sh_eth_set_multicast_list, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb14;

  $bb14:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 1996} sh_eth_set_multicast_list(arg);
    return;

  $bb3:
    assume $i2 == 1;
    call {:si_unique_call 1997} sh_eth_tx_timeout(arg);
    return;

  $bb4:
    assume $i3 == 1;
    call {:si_unique_call 1998} sh_eth_adjust_link(arg);
    return;

  $bb5:
    assume $i4 == 1;
    call {:si_unique_call 1999} sh_eth_set_duplex(arg);
    return;

  $bb6:
    assume $i5 == 1;
    call {:si_unique_call 2000} sh_eth_set_rate_sh7724(arg);
    return;

  $bb7:
    assume $i6 == 1;
    call {:si_unique_call 2001} sh_eth_chip_reset(arg);
    return;

  $bb8:
    assume $i7 == 1;
    call {:si_unique_call 2002} sh_eth_set_rate_gether(arg);
    return;

  $bb9:
    assume $i8 == 1;
    call {:si_unique_call 2003} sh_eth_set_rate_sh7757(arg);
    return;

  $bb10:
    assume $i9 == 1;
    call {:si_unique_call 2004} sh_eth_chip_reset_giga(arg);
    return;

  $bb11:
    assume $i10 == 1;
    call {:si_unique_call 2005} sh_eth_set_rate_giga(arg);
    return;

  $bb12:
    assume $i11 == 1;
    call {:si_unique_call 2006} sh_eth_chip_reset_r8a7740(arg);
    return;

  $bb13:
    assume $i12 == 1;
    call {:si_unique_call 2007} sh_eth_set_rate_r8a777x(arg);
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 489150);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 490182);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 491214);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 492246);

procedure devirtbounce.4(funcPtr: ref, arg: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 493278);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 494310);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 495342);

procedure devirtbounce.7(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 496374);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 497406);

procedure devirtbounce.9(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 498438);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i32, arg4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i32, arg4: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 499470);

procedure devirtbounce.11(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.7, $M.9, $M.11, $M.13, $M.34, $M.35, $M.21, $M.8, $M.16, $M.10, $M.17, $M.12, $M.18, $M.14, $M.19, $M.3, $M.2, $CurrAddr, $M.26, $M.5, $M.4;



implementation devirtbounce.11(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i30 := $eq.ref(sh_eth_runtime_nop, $p0);
    assume {:branchcond $i30} true;
    goto $bb11, $bb21;

  $bb21:
    assume !($i30 == 1);
    $i29 := $eq.ref(sh_eth_drv_remove, $p0);
    assume true;
    goto $bb10, $bb20;

  $bb20:
    assume !($i29 == 1);
    $i28 := $eq.ref(sh_eth_drv_probe, $p0);
    assume {:branchcond $i28} true;
    goto $bb9, $bb19;

  $bb19:
    assume !($i28 == 1);
    $i27 := $eq.ref(sh_get_mdio, $p0);
    assume true;
    goto $bb8, $bb18;

  $bb18:
    assume !($i27 == 1);
    $i26 := $eq.ref(ethtool_op_get_link, $p0);
    assume true;
    goto $bb7, $bb17;

  $bb17:
    assume !($i26 == 1);
    $i25 := $eq.ref(sh_eth_nway_reset, $p0);
    assume {:branchcond $i25} true;
    goto $bb6, $bb16;

  $bb16:
    assume !($i25 == 1);
    $i24 := $eq.ref(sh_eth_get_msglevel, $p0);
    assume {:branchcond $i24} true;
    goto $bb5, $bb15;

  $bb15:
    assume !($i24 == 1);
    $i23 := $eq.ref(eth_validate_addr, $p0);
    assume true;
    goto $bb4, $bb14;

  $bb14:
    assume !($i23 == 1);
    $i22 := $eq.ref(sh_eth_close, $p0);
    assume true;
    goto $bb3, $bb13;

  $bb13:
    assume !($i22 == 1);
    $i21 := $eq.ref(sh_eth_open, $p0);
    assume {:branchcond $i21} true;
    goto $bb2, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume false;
    return;

  $bb2:
    assume $i21 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2008} $i2 := sh_eth_open($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i22 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2009} $i4 := sh_eth_close($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i23 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2010} $i6 := eth_validate_addr($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i24 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2011} $i8 := sh_eth_get_msglevel($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i25 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2012} $i10 := sh_eth_nway_reset($p9);
    $r := $i10;
    return;

  $bb7:
    assume $i26 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2013} $i12 := ethtool_op_get_link($p11);
    $r := $i12;
    return;

  $bb8:
    assume $i27 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2014} $i14 := sh_get_mdio($p13);
    $r := $i14;
    return;

  $bb9:
    assume $i28 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2015} $i16 := sh_eth_drv_probe($p15);
    $r := $i16;
    return;

  $bb10:
    assume $i29 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2016} $i18 := sh_eth_drv_remove($p17);
    $r := $i18;
    return;

  $bb11:
    assume $i30 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2017} $i20 := sh_eth_runtime_nop($p19);
    $r := $i20;
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 500502);

procedure devirtbounce.12(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.34, $M.35, $M.5, $M.4, $M.3, $M.2, $CurrAddr;



implementation devirtbounce.12(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i24 := $eq.ref(sh_eth_set_rate_r8a777x, $p0);
    assume {:branchcond $i24} true;
    goto $bb13, $bb25;

  $bb25:
    assume !($i24 == 1);
    $i23 := $eq.ref(sh_eth_chip_reset_r8a7740, $p0);
    assume true;
    goto $bb12, $bb24;

  $bb24:
    assume !($i23 == 1);
    $i22 := $eq.ref(sh_eth_set_rate_giga, $p0);
    assume true;
    goto $bb11, $bb23;

  $bb23:
    assume !($i22 == 1);
    $i21 := $eq.ref(sh_eth_chip_reset_giga, $p0);
    assume {:branchcond $i21} true;
    goto $bb10, $bb22;

  $bb22:
    assume !($i21 == 1);
    $i20 := $eq.ref(sh_eth_set_rate_sh7757, $p0);
    assume true;
    goto $bb9, $bb21;

  $bb21:
    assume !($i20 == 1);
    $i19 := $eq.ref(sh_eth_set_rate_gether, $p0);
    assume {:branchcond $i19} true;
    goto $bb8, $bb20;

  $bb20:
    assume !($i19 == 1);
    $i18 := $eq.ref(sh_eth_chip_reset, $p0);
    assume {:branchcond $i18} true;
    goto $bb7, $bb19;

  $bb19:
    assume !($i18 == 1);
    $i17 := $eq.ref(sh_eth_set_rate_sh7724, $p0);
    assume true;
    goto $bb6, $bb18;

  $bb18:
    assume !($i17 == 1);
    $i16 := $eq.ref(sh_eth_set_duplex, $p0);
    assume {:branchcond $i16} true;
    goto $bb5, $bb17;

  $bb17:
    assume !($i16 == 1);
    $i15 := $eq.ref(sh_eth_adjust_link, $p0);
    assume true;
    goto $bb4, $bb16;

  $bb16:
    assume !($i15 == 1);
    $i14 := $eq.ref(sh_eth_tx_timeout, $p0);
    assume {:branchcond $i14} true;
    goto $bb3, $bb15;

  $bb15:
    assume !($i14 == 1);
    $i13 := $eq.ref(sh_eth_set_multicast_list, $p0);
    assume true;
    goto $bb2, $bb14;

  $bb14:
    assume !($i13 == 1);
    assume false;
    return;

  $bb2:
    assume $i13 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2018} sh_eth_set_multicast_list($p1);
    return;

  $bb3:
    assume $i14 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2019} sh_eth_tx_timeout($p2);
    return;

  $bb4:
    assume $i15 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2020} sh_eth_adjust_link($p3);
    return;

  $bb5:
    assume $i16 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2021} sh_eth_set_duplex($p4);
    return;

  $bb6:
    assume $i17 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2022} sh_eth_set_rate_sh7724($p5);
    return;

  $bb7:
    assume $i18 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2023} sh_eth_chip_reset($p6);
    return;

  $bb8:
    assume $i19 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2024} sh_eth_set_rate_gether($p7);
    return;

  $bb9:
    assume $i20 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2025} sh_eth_set_rate_sh7757($p8);
    return;

  $bb10:
    assume $i21 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2026} sh_eth_chip_reset_giga($p9);
    return;

  $bb11:
    assume $i22 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2027} sh_eth_set_rate_giga($p10);
    return;

  $bb12:
    assume $i23 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2028} sh_eth_chip_reset_r8a7740($p11);
    return;

  $bb13:
    assume $i24 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2029} sh_eth_set_rate_r8a777x($p12);
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 501534);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32);



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i32;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.13, $M.7, $M.11, $M.9, $M.36, $M.37, $M.38, $M.26, $M.39, $M.40, $M.41, $M.42, $M.8, $M.16, $M.10, $M.17, $M.12, $M.18, $M.14, $M.19, $M.44, $M.77, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.21, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.78, $M.79, $M.2, $M.1, $M.80, $M.3, $M.0, $M.246, $M.292, $M.293, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 2030} __SMACK_static_init();
    call {:si_unique_call 2031} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.21, $M.69, $M.70, $M.0, $M.71, $M.7, $M.72, $M.36, $M.39, $M.48, $M.46, $M.51, $M.47, $M.49, $M.44, $M.45, $M.50, $M.37, $M.40, $M.41, $M.42, $M.73, $M.74, $M.34, $M.35, $M.75, $M.76, $M.78, $M.79, $M.13, $M.11, $M.9, $M.38, $M.26, $M.8, $M.16, $M.10, $M.17, $M.12, $M.18, $M.14, $M.19, $M.77, $M.2, $M.1, $M.80, $M.3, $M.246, $M.292, $M.293, $CurrAddr, $M.5, $M.4;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation sh_eth_set_multicast_list_loop_$bb15(in_$p0: ref, in_$i46: i64, in_$i52: i1, in_$p53: ref, in_$p54: ref, in_$i55: i1, in_$i56: i8, in_$i57: i1, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i65: i1, in_$i66: i32, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i70: i32, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i64, in_$i77: i1, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i78: i32) returns (out_$i52: i1, out_$p53: ref, out_$p54: ref, out_$i55: i1, out_$i56: i8, out_$i57: i1, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i65: i1, out_$i66: i32, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i70: i32, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i64, out_$i77: i1, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i78: i32)
{

  entry:
    out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$i57, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p58, out_$i59, out_$i60, out_$p72, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p49, out_$i50, out_$i51, out_$i78 := in_$i52, in_$p53, in_$p54, in_$i55, in_$i56, in_$i57, in_$p61, in_$p62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$p58, in_$i59, in_$i60, in_$p72, in_$p73, in_$p74, in_$p75, in_$i76, in_$i77, in_$p49, in_$i50, in_$i51, in_$i78;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_305;

  $bb30:
    assume out_$i77 == 1;
    assume {:verifier.code 0} true;
    out_$p49, out_$i50, out_$i51 := out_$p73, out_$i60, out_$i59;
    goto $bb30_dummy;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i59;
    assume true;
    goto $bb30;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    out_$i77 := $ne.i64(out_$i76, in_$i46);
    goto corral_source_split_324;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    out_$i76 := $p2i.ref.i64(out_$p75);
    goto corral_source_split_323;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p74, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_322;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    out_$p74 := $bitcast.ref.ref(out_$p73);
    goto corral_source_split_321;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    out_$p73 := $load.ref($M.0, out_$p72);
    goto corral_source_split_320;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref($add.ref(out_$p58, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_319;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_318;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    out_$p58, out_$i59, out_$i60 := out_$p49, out_$i69, out_$i70;
    goto $bb21;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    out_$p58, out_$i59, out_$i60 := out_$p49, out_$i51, out_$i50;
    goto $bb21;

  $bb19:
    assume out_$i57 == 1;
    goto corral_source_split_316;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    out_$i57 := $trunc.i8.i1(out_$i56);
    goto corral_source_split_314;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i1.i8(out_$i55);
    call {:si_unique_call 79} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i56);
    goto corral_source_split_313;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} out_$i55 := is_multicast_ether_addr(out_$p54);
    goto corral_source_split_312;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    out_$p54 := $bitcast.ref.ref(out_$p53);
    goto corral_source_split_311;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p49, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_310;

  $bb17:
    assume out_$i52 == 1;
    goto corral_source_split_309;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i32(out_$i50, 0);
    goto corral_source_split_307;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_340;

  $bb25:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    out_$i69, out_$i70 := out_$i51, out_$i50;
    goto $bb29;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    out_$i69, out_$i70 := out_$i67, out_$i68;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_338;

  $bb27:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    out_$i67, out_$i68 := out_$i51, out_$i50;
    goto $bb28;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    out_$i67, out_$i68 := out_$i66, 1;
    goto $bb28;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    out_$i66 := $and.i32(out_$i51, $sub.i32(0, 8193));
    call {:si_unique_call 83} {:cexpr "ecmr_bits"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_336;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} sh_eth_tsu_purge_mcast(in_$p0);
    goto corral_source_split_335;

  $bb26:
    assume out_$i65 == 1;
    goto corral_source_split_334;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i50, 0);
    goto corral_source_split_332;

  $bb24:
    assume out_$i64 == 1;
    goto corral_source_split_331;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    out_$i64 := $slt.i32(out_$i63, 0);
    goto corral_source_split_329;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} out_$i63 := sh_eth_tsu_add_entry(in_$p0, out_$p62);
    call {:si_unique_call 81} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_328;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    out_$p62 := $bitcast.ref.ref(out_$p61);
    goto corral_source_split_327;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p49, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_326;

  $bb18:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb30_dummy:
    call {:si_unique_call 1} out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$i57, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p58, out_$i59, out_$i60, out_$p72, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p49, out_$i50, out_$i51, out_$i78 := sh_eth_set_multicast_list_loop_$bb15(in_$p0, in_$i46, out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$i57, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p58, out_$i59, out_$i60, out_$p72, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$p49, out_$i50, out_$i51, out_$i78);
    return;

  exit:
    return;
}



procedure sh_eth_set_multicast_list_loop_$bb15(in_$p0: ref, in_$i46: i64, in_$i52: i1, in_$p53: ref, in_$p54: ref, in_$i55: i1, in_$i56: i8, in_$i57: i1, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i65: i1, in_$i66: i32, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i70: i32, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i64, in_$i77: i1, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i78: i32) returns (out_$i52: i1, out_$p53: ref, out_$p54: ref, out_$i55: i1, out_$i56: i8, out_$i57: i1, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i65: i1, out_$i66: i32, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i70: i32, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i64, out_$i77: i1, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i78: i32);
  modifies $M.0, $M.5, $CurrAddr, $M.4;



implementation sh_eth_tx_timeout_loop_$bb18(in_$p2: ref, in_$p46: ref, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i64, in_$p66: ref, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i49: i32) returns (out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i64, out_$p66: ref, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i49: i32)
{

  entry:
    out_$p50, out_$p51, out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$i59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i49 := in_$p50, in_$p51, in_$i52, in_$p53, in_$p54, in_$i55, in_$i56, in_$p57, in_$p58, in_$i59, in_$p60, in_$p61, in_$p62, in_$p63, in_$p64, in_$i65, in_$p66, in_$i67, in_$i68, in_$i69, in_$i49;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_447;

  $bb23:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$i49 := out_$i67;
    goto $bb23_dummy;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    out_$i69 := $ult.i32(out_$i67, out_$i68);
    goto corral_source_split_473;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.0, in_$p46);
    goto corral_source_split_472;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i49, 1);
    call {:si_unique_call 105} {:cexpr "i"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_471;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p66, $0.ref);
    goto corral_source_split_470;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref(out_$p64, $mul.ref(out_$i65, 8));
    goto corral_source_split_469;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i32.i64(out_$i49);
    goto corral_source_split_468;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    out_$p64 := $load.ref($M.0, out_$p63);
    goto corral_source_split_467;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(88, 1));
    goto corral_source_split_466;

  $bb21:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} ldv_skb_free(out_$p62);
    goto corral_source_split_464;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    out_$p62 := $bitcast.ref.ref(out_$p61);
    goto corral_source_split_463;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.0, out_$p60);
    goto corral_source_split_462;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref(out_$p58, $mul.ref(out_$i59, 8));
    goto corral_source_split_461;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    out_$i59 := $sext.i32.i64(out_$i49);
    goto corral_source_split_460;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.0, out_$p57);
    goto corral_source_split_459;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(88, 1));
    goto corral_source_split_458;

  $bb20:
    assume out_$i56 == 1;
    goto corral_source_split_457;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i64(out_$i55, 0);
    goto corral_source_split_455;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    out_$i55 := $p2i.ref.i64(out_$p54);
    goto corral_source_split_454;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.0, out_$p53);
    goto corral_source_split_453;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref(out_$p51, $mul.ref(out_$i52, 8));
    goto corral_source_split_452;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    out_$i52 := $sext.i32.i64(out_$i49);
    goto corral_source_split_451;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.0, out_$p50);
    goto corral_source_split_450;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(88, 1));
    goto corral_source_split_449;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23_dummy:
    call {:si_unique_call 1} out_$p50, out_$p51, out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$i59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i49 := sh_eth_tx_timeout_loop_$bb18(in_$p2, in_$p46, out_$p50, out_$p51, out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$i59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i49);
    return;

  exit:
    return;
}



procedure sh_eth_tx_timeout_loop_$bb18(in_$p2: ref, in_$p46: ref, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i64, in_$p66: ref, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i49: i32) returns (out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i64, out_$p66: ref, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i49: i32);
  modifies $M.0, $M.3, $M.2;



implementation sh_eth_tx_timeout_loop_$bb7(in_$p2: ref, in_$p16: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i19: i32) returns (out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i19: i32)
{

  entry:
    out_$p20, out_$p21, out_$i22, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i19 := in_$p20, in_$p21, in_$i22, in_$p24, in_$p25, in_$p26, in_$p27, in_$i28, in_$p29, in_$p30, in_$i31, in_$i32, in_$p33, in_$p34, in_$i35, in_$p36, in_$p37, in_$p38, in_$p39, in_$p40, in_$i41, in_$p42, in_$i43, in_$i44, in_$i45, in_$i19;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_403;

  $bb12:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i19 := out_$i43;
    goto $bb12_dummy;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    out_$i45 := $ult.i32(out_$i43, out_$i44);
    goto corral_source_split_437;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.0, in_$p16);
    goto corral_source_split_436;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    out_$i43 := $add.i32(out_$i19, 1);
    call {:si_unique_call 103} {:cexpr "i"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_435;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p42, $0.ref);
    goto corral_source_split_434;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref(out_$p40, $mul.ref(out_$i41, 8));
    goto corral_source_split_433;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i19);
    goto corral_source_split_432;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_431;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(80, 1));
    goto corral_source_split_430;

  $bb10:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} ldv_skb_free(out_$p38);
    goto corral_source_split_428;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_427;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_426;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref(out_$p34, $mul.ref(out_$i35, 8));
    goto corral_source_split_425;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(out_$i19);
    goto corral_source_split_424;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_423;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(80, 1));
    goto corral_source_split_422;

  $bb9:
    assume out_$i32 == 1;
    goto corral_source_split_421;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i64(out_$i31, 0);
    goto corral_source_split_419;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_418;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_417;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref(out_$p27, $mul.ref(out_$i28, 8));
    goto corral_source_split_416;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i32.i64(out_$i19);
    goto corral_source_split_415;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_414;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(80, 1));
    goto corral_source_split_413;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p25, $sub.i32(0, 1159790384));
    goto corral_source_split_412;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p21, $mul.ref(out_$i22, 16)), $mul.ref(8, 1));
    goto corral_source_split_411;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p24, 0);
    goto corral_source_split_410;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p21, $mul.ref(out_$i22, 16)), $mul.ref(0, 1));
    goto corral_source_split_409;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    goto corral_source_split_408;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i19);
    goto corral_source_split_407;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_406;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(64, 1));
    goto corral_source_split_405;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p20, out_$p21, out_$i22, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i19 := sh_eth_tx_timeout_loop_$bb7(in_$p2, in_$p16, out_$p20, out_$p21, out_$i22, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$p42, out_$i43, out_$i44, out_$i45, out_$i19);
    return;

  exit:
    return;
}



procedure sh_eth_tx_timeout_loop_$bb7(in_$p2: ref, in_$p16: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$i19: i32) returns (out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$i19: i32);
  modifies $M.0, $M.3, $M.2;



implementation sh_eth_ring_format_loop_$bb25(in_$p0: ref, in_$p2: ref, in_$p102: ref, in_$p107: ref, in_$p108: ref, in_$i109: i64, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i113: i64, in_$p114: ref, in_$i115: i32, in_$p116: ref, in_$p117: ref, in_$i118: i1, in_$p119: ref, in_$i120: i64, in_$i121: i1, in_$i122: i8, in_$i123: i1, in_$p124: ref, in_$i125: i64, in_$i126: i1, in_$i127: i8, in_$i128: i1, in_$p129: ref, in_$i130: i64, in_$i131: i32, in_$i132: i32, in_$i133: i1, in_$i106: i32, in_$p134: ref) returns (out_$p107: ref, out_$p108: ref, out_$i109: i64, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i113: i64, out_$p114: ref, out_$i115: i32, out_$p116: ref, out_$p117: ref, out_$i118: i1, out_$p119: ref, out_$i120: i64, out_$i121: i1, out_$i122: i8, out_$i123: i1, out_$p124: ref, out_$i125: i64, out_$i126: i1, out_$i127: i8, out_$i128: i1, out_$p129: ref, out_$i130: i64, out_$i131: i32, out_$i132: i32, out_$i133: i1, out_$i106: i32, out_$p134: ref)
{

  entry:
    out_$p107, out_$p108, out_$i109, out_$p110, out_$p111, out_$p112, out_$i113, out_$p114, out_$i115, out_$p116, out_$p117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i106, out_$p134 := in_$p107, in_$p108, in_$i109, in_$p110, in_$p111, in_$p112, in_$i113, in_$p114, in_$i115, in_$p116, in_$p117, in_$i118, in_$p119, in_$i120, in_$i121, in_$i122, in_$i123, in_$p124, in_$i125, in_$i126, in_$i127, in_$i128, in_$p129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i106, in_$p134;
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_1123;

  $bb36:
    assume out_$i133 == 1;
    assume {:verifier.code 0} true;
    out_$i106 := out_$i131;
    goto $bb36_dummy;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    out_$p134 := out_$p114;
    assume true;
    goto $bb36;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    out_$i133 := $ult.i32(out_$i131, out_$i132);
    goto corral_source_split_1166;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    out_$i132 := $load.i32($M.0, in_$p102);
    goto corral_source_split_1165;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i131 := $add.i32(out_$i106, 1);
    call {:si_unique_call 281} {:cexpr "i"} boogie_si_record_i32(out_$i131);
    goto corral_source_split_1164;

  $bb28:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} sh_eth_write(in_$p0, out_$i125, 7);
    goto corral_source_split_1152;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    out_$i125 := $load.i64($M.0, out_$p124);
    goto corral_source_split_1151;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(56, 1));
    goto corral_source_split_1150;

  $bb29:
    assume out_$i123 == 1;
    goto corral_source_split_1149;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    out_$i123 := $trunc.i8.i1(out_$i122);
    goto corral_source_split_1147;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    out_$i122 := $zext.i1.i8(out_$i121);
    call {:si_unique_call 276} {:cexpr "tmp___4"} boogie_si_record_i8(out_$i122);
    goto corral_source_split_1146;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} out_$i121 := sh_eth_is_gether(in_$p2);
    goto corral_source_split_1145;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} sh_eth_write(in_$p0, out_$i120, 6);
    goto corral_source_split_1144;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    out_$i120 := $load.i64($M.0, out_$p119);
    goto corral_source_split_1143;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(56, 1));
    goto corral_source_split_1142;

  $bb27:
    assume out_$i118 == 1;
    goto corral_source_split_1141;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    out_$i118 := $eq.i32(out_$i106, 0);
    goto corral_source_split_1139;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p117, 0);
    goto corral_source_split_1138;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref(out_$p112, $mul.ref(out_$i113, 16)), $mul.ref(6, 1));
    goto corral_source_split_1137;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p116, out_$i115);
    goto corral_source_split_1136;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(out_$p112, $mul.ref(out_$i113, 16)), $mul.ref(0, 1));
    goto corral_source_split_1135;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} out_$i115 := cpu_to_edmac(in_$p2, 805306368);
    goto corral_source_split_1134;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref(out_$p112, $mul.ref(out_$i113, 16));
    goto corral_source_split_1133;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    out_$i113 := $sext.i32.i64(out_$i106);
    goto corral_source_split_1132;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    out_$p112 := $load.ref($M.0, out_$p111);
    goto corral_source_split_1131;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(72, 1));
    goto corral_source_split_1130;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p110, $0.ref);
    goto corral_source_split_1129;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref(out_$p108, $mul.ref(out_$i109, 8));
    goto corral_source_split_1128;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    out_$i109 := $sext.i32.i64(out_$i106);
    goto corral_source_split_1127;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    out_$p108 := $load.ref($M.0, out_$p107);
    goto corral_source_split_1126;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(88, 1));
    goto corral_source_split_1125;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb33:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} sh_eth_write(in_$p0, out_$i130, 7);
    goto corral_source_split_1162;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    out_$i130 := $load.i64($M.0, out_$p129);
    goto corral_source_split_1161;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(56, 1));
    goto corral_source_split_1160;

  $bb32:
    assume out_$i128 == 1;
    goto corral_source_split_1159;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    out_$i128 := $trunc.i8.i1(out_$i127);
    goto corral_source_split_1157;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    out_$i127 := $zext.i1.i8(out_$i126);
    call {:si_unique_call 279} {:cexpr "tmp___5"} boogie_si_record_i8(out_$i127);
    goto corral_source_split_1156;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} out_$i126 := sh_eth_is_rz_fast_ether(in_$p2);
    goto corral_source_split_1155;

  $bb30:
    assume !(out_$i123 == 1);
    goto corral_source_split_1154;

  $bb36_dummy:
    call {:si_unique_call 1} out_$p107, out_$p108, out_$i109, out_$p110, out_$p111, out_$p112, out_$i113, out_$p114, out_$i115, out_$p116, out_$p117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i106, out_$p134 := sh_eth_ring_format_loop_$bb25(in_$p0, in_$p2, in_$p102, out_$p107, out_$p108, out_$i109, out_$p110, out_$p111, out_$p112, out_$i113, out_$p114, out_$i115, out_$p116, out_$p117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p124, out_$i125, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i106, out_$p134);
    return;

  exit:
    return;
}



procedure sh_eth_ring_format_loop_$bb25(in_$p0: ref, in_$p2: ref, in_$p102: ref, in_$p107: ref, in_$p108: ref, in_$i109: i64, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i113: i64, in_$p114: ref, in_$i115: i32, in_$p116: ref, in_$p117: ref, in_$i118: i1, in_$p119: ref, in_$i120: i64, in_$i121: i1, in_$i122: i8, in_$i123: i1, in_$p124: ref, in_$i125: i64, in_$i126: i1, in_$i127: i8, in_$i128: i1, in_$p129: ref, in_$i130: i64, in_$i131: i32, in_$i132: i32, in_$i133: i1, in_$i106: i32, in_$p134: ref) returns (out_$p107: ref, out_$p108: ref, out_$i109: i64, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i113: i64, out_$p114: ref, out_$i115: i32, out_$p116: ref, out_$p117: ref, out_$i118: i1, out_$p119: ref, out_$i120: i64, out_$i121: i1, out_$i122: i8, out_$i123: i1, out_$p124: ref, out_$i125: i64, out_$i126: i1, out_$i127: i8, out_$i128: i1, out_$p129: ref, out_$i130: i64, out_$i131: i32, out_$i132: i32, out_$i133: i1, out_$i106: i32, out_$p134: ref);
  modifies $M.0;



implementation sh_eth_ring_format_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p17: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$i37: i32, in_$p38: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i64, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i64, in_$i56: i64, in_$p57: ref, in_$i58: i64, in_$i59: i32, in_$p60: ref, in_$i61: i32, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$i65: i16, in_$i66: i32, in_$i67: i32, in_$i68: i32, in_$i69: i16, in_$p70: ref, in_$i71: i1, in_$p72: ref, in_$i73: i64, in_$i74: i1, in_$i75: i8, in_$i76: i1, in_$p77: ref, in_$i78: i64, in_$i79: i1, in_$i80: i8, in_$i81: i1, in_$p82: ref, in_$i83: i64, in_$i84: i32, in_$i85: i32, in_$i86: i1, in_$p22: ref, in_$i23: i32, in_$i87: i32, in_$p88: ref, in_vslice_dummy_var_36: i64) returns (out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$i37: i32, out_$p38: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i64, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i64, out_$i56: i64, out_$p57: ref, out_$i58: i64, out_$i59: i32, out_$p60: ref, out_$i61: i32, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$i65: i16, out_$i66: i32, out_$i67: i32, out_$i68: i32, out_$i69: i16, out_$p70: ref, out_$i71: i1, out_$p72: ref, out_$i73: i64, out_$i74: i1, out_$i75: i8, out_$i76: i1, out_$p77: ref, out_$i78: i64, out_$i79: i1, out_$i80: i8, out_$i81: i1, out_$p82: ref, out_$i83: i64, out_$i84: i32, out_$i85: i32, out_$i86: i1, out_$p22: ref, out_$i23: i32, out_$i87: i32, out_$p88: ref, out_vslice_dummy_var_36: i64)
{

  entry:
    out_$p24, out_$p25, out_$i26, out_$p27, out_$p28, out_$i29, out_$p30, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p48, out_$p49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$p60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p22, out_$i23, out_$i87, out_$p88, out_vslice_dummy_var_36 := in_$p24, in_$p25, in_$i26, in_$p27, in_$p28, in_$i29, in_$p30, in_$p31, in_$p32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$p38, in_$p41, in_$p42, in_$p43, in_$p44, in_$i45, in_$i46, in_$p48, in_$p49, in_$i50, in_$p51, in_$p52, in_$p53, in_$i54, in_$i55, in_$i56, in_$p57, in_$i58, in_$i59, in_$p60, in_$i61, in_$p62, in_$p63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$p70, in_$i71, in_$p72, in_$i73, in_$i74, in_$i75, in_$i76, in_$p77, in_$i78, in_$i79, in_$i80, in_$i81, in_$p82, in_$i83, in_$i84, in_$i85, in_$i86, in_$p22, in_$i23, in_$i87, in_$p88, in_vslice_dummy_var_36;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1015;

  $bb19:
    assume out_$i86 == 1;
    assume {:verifier.code 0} true;
    out_$p22, out_$i23 := out_$p51, out_$i84;
    goto $bb19_dummy;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    out_$i87, out_$p88 := out_$i84, out_$p51;
    assume true;
    goto $bb19;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    out_$i86 := $ult.i32(out_$i84, out_$i85);
    goto corral_source_split_1117;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i32($M.0, in_$p17);
    goto corral_source_split_1116;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i84 := $add.i32(out_$i23, 1);
    call {:si_unique_call 272} {:cexpr "i"} boogie_si_record_i32(out_$i84);
    goto corral_source_split_1115;

  $bb11:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} sh_eth_write(in_$p0, out_$i78, 11);
    goto corral_source_split_1103;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i64($M.0, out_$p77);
    goto corral_source_split_1102;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(48, 1));
    goto corral_source_split_1101;

  $bb12:
    assume out_$i76 == 1;
    goto corral_source_split_1100;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    out_$i76 := $trunc.i8.i1(out_$i75);
    goto corral_source_split_1098;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    out_$i75 := $zext.i1.i8(out_$i74);
    call {:si_unique_call 267} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i75);
    goto corral_source_split_1097;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} out_$i74 := sh_eth_is_gether(in_$p2);
    goto corral_source_split_1096;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} sh_eth_write(in_$p0, out_$i73, 10);
    goto corral_source_split_1095;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i64($M.0, out_$p72);
    goto corral_source_split_1094;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(48, 1));
    goto corral_source_split_1093;

  $bb10:
    assume out_$i71 == 1;
    goto corral_source_split_1092;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i23, 0);
    goto corral_source_split_1090;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p70, out_$i69);
    goto corral_source_split_1089;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p49, $mul.ref(out_$i50, 16)), $mul.ref(6, 1));
    goto corral_source_split_1088;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    out_$i69 := $trunc.i32.i16(out_$i68);
    goto corral_source_split_1087;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    out_$i68 := $and.i32(out_$i67, 65520);
    goto corral_source_split_1086;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i66, 15);
    goto corral_source_split_1085;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    out_$i66 := $zext.i16.i32(out_$i65);
    goto corral_source_split_1084;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    out_$i65 := $trunc.i32.i16(out_$i64);
    goto corral_source_split_1083;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i32($M.0, out_$p63);
    goto corral_source_split_1082;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(184, 1));
    goto corral_source_split_1081;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p62, out_$i61);
    goto corral_source_split_1080;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p49, $mul.ref(out_$i50, 16)), $mul.ref(0, 1));
    goto corral_source_split_1079;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} out_$i61 := cpu_to_edmac(in_$p2, $sub.i32(0, 1342177280));
    goto corral_source_split_1078;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p60, out_$i59);
    goto corral_source_split_1077;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p49, $mul.ref(out_$i50, 16)), $mul.ref(8, 1));
    goto corral_source_split_1076;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    out_$i59 := $trunc.i64.i32(out_$i58);
    goto corral_source_split_1075;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} out_$i58 := virt_to_phys(out_$p57);
    call {:si_unique_call 263} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i58);
    goto corral_source_split_1074;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    out_$p57 := $i2p.i64.ref(out_$i56);
    goto corral_source_split_1073;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    out_$i56 := $and.i64(out_$i55, $sub.i64(0, 4));
    goto corral_source_split_1072;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    out_$i55 := $add.i64(out_$i54, 3);
    goto corral_source_split_1071;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p53);
    goto corral_source_split_1070;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_1069;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p30, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1068;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(out_$p49, $mul.ref(out_$i50, 16));
    goto corral_source_split_1067;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.i32.i64(out_$i23);
    goto corral_source_split_1066;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, out_$p48);
    goto corral_source_split_1065;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(64, 1));
    goto corral_source_split_1064;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} sh_eth_set_receive_align(out_$p30);
    goto corral_source_split_1063;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} out_vslice_dummy_var_36 := dma_map_single_attrs(out_$p41, out_$p43, out_$i46, 2, $0.ref);
    goto corral_source_split_1062;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i32.i64(out_$i45);
    goto corral_source_split_1061;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.0, out_$p44);
    goto corral_source_split_1060;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(184, 1));
    goto corral_source_split_1059;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_1058;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p30, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1057;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3176)), $mul.ref(1296, 1));
    goto corral_source_split_1056;

  $bb7:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    out_$i37, out_$p38 := out_$i23, out_$p22;
    assume true;
    goto $bb7;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i64(out_$i35, 0);
    goto corral_source_split_1031;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    out_$i35 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_1030;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p34, out_$p30);
    goto corral_source_split_1029;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref(out_$p32, $mul.ref(out_$i33, 8));
    goto corral_source_split_1028;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i23);
    goto corral_source_split_1027;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_1026;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(80, 1));
    goto corral_source_split_1025;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} out_$p30 := ldv_netdev_alloc_skb_12(in_$p0, out_$i29);
    goto corral_source_split_1024;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.0, out_$p28);
    goto corral_source_split_1023;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(184, 1));
    goto corral_source_split_1022;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p27, $0.ref);
    goto corral_source_split_1021;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref(out_$p25, $mul.ref(out_$i26, 8));
    goto corral_source_split_1020;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i23);
    goto corral_source_split_1019;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_1018;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(80, 1));
    goto corral_source_split_1017;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb16:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} sh_eth_write(in_$p0, out_$i83, 11);
    goto corral_source_split_1113;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i64($M.0, out_$p82);
    goto corral_source_split_1112;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(48, 1));
    goto corral_source_split_1111;

  $bb15:
    assume out_$i81 == 1;
    goto corral_source_split_1110;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    out_$i81 := $trunc.i8.i1(out_$i80);
    goto corral_source_split_1108;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    out_$i80 := $zext.i1.i8(out_$i79);
    call {:si_unique_call 270} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i80);
    goto corral_source_split_1107;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} out_$i79 := sh_eth_is_rz_fast_ether(in_$p2);
    goto corral_source_split_1106;

  $bb13:
    assume !(out_$i76 == 1);
    goto corral_source_split_1105;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p24, out_$p25, out_$i26, out_$p27, out_$p28, out_$i29, out_$p30, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p48, out_$p49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$p60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p22, out_$i23, out_$i87, out_$p88, out_vslice_dummy_var_36 := sh_eth_ring_format_loop_$bb4(in_$p0, in_$p2, in_$p17, out_$p24, out_$p25, out_$i26, out_$p27, out_$p28, out_$i29, out_$p30, out_$p31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p48, out_$p49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$p60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p22, out_$i23, out_$i87, out_$p88, out_vslice_dummy_var_36);
    return;

  exit:
    return;
}



procedure sh_eth_ring_format_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p17: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$i37: i32, in_$p38: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i64, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i64, in_$i56: i64, in_$p57: ref, in_$i58: i64, in_$i59: i32, in_$p60: ref, in_$i61: i32, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$i65: i16, in_$i66: i32, in_$i67: i32, in_$i68: i32, in_$i69: i16, in_$p70: ref, in_$i71: i1, in_$p72: ref, in_$i73: i64, in_$i74: i1, in_$i75: i8, in_$i76: i1, in_$p77: ref, in_$i78: i64, in_$i79: i1, in_$i80: i8, in_$i81: i1, in_$p82: ref, in_$i83: i64, in_$i84: i32, in_$i85: i32, in_$i86: i1, in_$p22: ref, in_$i23: i32, in_$i87: i32, in_$p88: ref, in_vslice_dummy_var_36: i64) returns (out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$i37: i32, out_$p38: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i64, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i64, out_$i56: i64, out_$p57: ref, out_$i58: i64, out_$i59: i32, out_$p60: ref, out_$i61: i32, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$i65: i16, out_$i66: i32, out_$i67: i32, out_$i68: i32, out_$i69: i16, out_$p70: ref, out_$i71: i1, out_$p72: ref, out_$i73: i64, out_$i74: i1, out_$i75: i8, out_$i76: i1, out_$p77: ref, out_$i78: i64, out_$i79: i1, out_$i80: i8, out_$i81: i1, out_$p82: ref, out_$i83: i64, out_$i84: i32, out_$i85: i32, out_$i86: i1, out_$p22: ref, out_$i23: i32, out_$i87: i32, out_$p88: ref, out_vslice_dummy_var_36: i64);
  modifies $M.0, $M.3, $M.2, $CurrAddr;



implementation dma_map_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_map_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_map_single_attrs_loop_$bb3();



implementation ldv_set_add_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i64, in_$i10: i1, in_$i11: i32, in_$i12: i32, in_$i13: i1) returns (out_$i4: i32, out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i64, out_$i10: i1, out_$i11: i32, out_$i12: i32, out_$i13: i1)
{

  entry:
    out_$i4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13 := in_$i4, in_$i5, in_$p6, in_$p7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1381;

  $bb12:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i11;
    goto $bb12_dummy;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i32(out_$i11, out_$i12);
    goto corral_source_split_1399;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    out_$i12 := $M.2;
    goto corral_source_split_1398;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i4, 1);
    call {:si_unique_call 343} {:cexpr "i"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_1397;

  $bb9:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i64(out_$i8, out_$i9);
    goto corral_source_split_1388;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_1387;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_1386;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.3, out_$p6);
    goto corral_source_split_1385;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i5, 8));
    goto corral_source_split_1384;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i5 := $sext.i32.i64(out_$i4);
    goto corral_source_split_1383;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13 := ldv_set_add_loop_$bb4(in_$p1, out_$i4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13);
    return;

  exit:
    return;
}



procedure ldv_set_add_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i64, in_$i10: i1, in_$i11: i32, in_$i12: i32, in_$i13: i1) returns (out_$i4: i32, out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i64, out_$i10: i1, out_$i11: i32, out_$i12: i32, out_$i13: i1);



implementation ldv_set_remove_loop_$bb17(in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1) returns (out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1)
{

  entry:
    out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29 := in_$i20, in_$i21, in_$p22, in_$p23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_2380;

  $bb21:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := out_$i27;
    goto $bb21_dummy;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i27, out_$i28);
    goto corral_source_split_2391;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    out_$i28 := $M.2;
    goto corral_source_split_2390;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i20, 1);
    call {:si_unique_call 657} {:cexpr "i"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_2389;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p26, out_$p23);
    goto corral_source_split_2388;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i25, 8));
    goto corral_source_split_2387;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i24);
    goto corral_source_split_2386;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    out_$i24 := $sub.i32(out_$i20, 1);
    goto corral_source_split_2385;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.3, out_$p22);
    goto corral_source_split_2384;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i21, 8));
    goto corral_source_split_2383;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i20);
    goto corral_source_split_2382;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29 := ldv_set_remove_loop_$bb17(out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29);
    return;

  exit:
    return;
}



procedure ldv_set_remove_loop_$bb17(in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1) returns (out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1);
  modifies $M.3;



implementation ldv_set_remove_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i6: i64, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i64, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1) returns (out_$i4: i32, out_$i6: i64, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i64, out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1)
{

  entry:
    out_$i4, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15 := in_$i4, in_$i6, in_$p7, in_$p8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2353;

  $bb11:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i13;
    goto $bb11_dummy;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i13, out_$i14);
    goto corral_source_split_2371;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    out_$i14 := $M.2;
    goto corral_source_split_2370;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i4, 1);
    call {:si_unique_call 655} {:cexpr "i"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_2369;

  $bb9:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i4;
    assume true;
    goto $bb9;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i64(out_$i9, out_$i10);
    goto corral_source_split_2360;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    out_$i10 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_2359;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_2358;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.3, out_$p7);
    goto corral_source_split_2357;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i6, 8));
    goto corral_source_split_2356;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i6 := $sext.i32.i64(out_$i4);
    goto corral_source_split_2355;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i4, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15 := ldv_set_remove_loop_$bb4(in_$p1, out_$i4, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15);
    return;

  exit:
    return;
}



procedure ldv_set_remove_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i6: i64, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i64, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1) returns (out_$i4: i32, out_$i6: i64, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i64, out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1);



implementation {:SIextraRecBound 32} sh_eth_tsu_purge_mcast_loop_$bb5(in_$p0: ref, in_$p1: ref, in_$p18: ref, in_$p19: ref, in_$i20: i1, in_$i21: i8, in_$i22: i1, in_$p23: ref, in_$i25: i32, in_$p26: ref, in_$i27: i1, in_$i16: i32, in_$p17: ref, in_vslice_dummy_var_40: i32) returns (out_$p18: ref, out_$p19: ref, out_$i20: i1, out_$i21: i8, out_$i22: i1, out_$p23: ref, out_$i25: i32, out_$p26: ref, out_$i27: i1, out_$i16: i32, out_$p17: ref, out_vslice_dummy_var_40: i32)
{

  entry:
    out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i25, out_$p26, out_$i27, out_$i16, out_$p17, out_vslice_dummy_var_40 := in_$p18, in_$p19, in_$i20, in_$i21, in_$i22, in_$p23, in_$i25, in_$p26, in_$i27, in_$i16, in_$p17, in_vslice_dummy_var_40;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2475;

  $bb10:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i16, out_$p17 := out_$i25, out_$p26;
    goto $bb10_dummy;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    out_$i27 := $sle.i32(out_$i25, 31);
    goto corral_source_split_2490;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(out_$p17, $mul.ref(8, 1));
    goto corral_source_split_2489;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i32(out_$i16, 1);
    call {:si_unique_call 689} {:cexpr "i"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_2488;

  $bb8:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} out_vslice_dummy_var_40 := sh_eth_tsu_del_entry(in_$p0, out_$p23);
    goto corral_source_split_2486;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_2485;

  $bb7:
    assume out_$i22 == 1;
    goto corral_source_split_2484;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    out_$i22 := $trunc.i8.i1(out_$i21);
    goto corral_source_split_2482;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i1.i8(out_$i20);
    call {:si_unique_call 687} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i21);
    goto corral_source_split_2481;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} out_$i20 := is_multicast_ether_addr(out_$p19);
    goto corral_source_split_2480;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    out_$p19 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_2479;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} sh_eth_tsu_read_entry(out_$p17, out_$p18);
    goto corral_source_split_2478;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_2477;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i25, out_$p26, out_$i27, out_$i16, out_$p17, out_vslice_dummy_var_40 := sh_eth_tsu_purge_mcast_loop_$bb5(in_$p0, in_$p1, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i25, out_$p26, out_$i27, out_$i16, out_$p17, out_vslice_dummy_var_40);
    return;

  exit:
    return;
}



procedure sh_eth_tsu_purge_mcast_loop_$bb5(in_$p0: ref, in_$p1: ref, in_$p18: ref, in_$p19: ref, in_$i20: i1, in_$i21: i8, in_$i22: i1, in_$p23: ref, in_$i25: i32, in_$p26: ref, in_$i27: i1, in_$i16: i32, in_$p17: ref, in_vslice_dummy_var_40: i32) returns (out_$p18: ref, out_$p19: ref, out_$i20: i1, out_$i21: i8, out_$i22: i1, out_$p23: ref, out_$i25: i32, out_$p26: ref, out_$i27: i1, out_$i16: i32, out_$p17: ref, out_vslice_dummy_var_40: i32);
  modifies $M.5, $M.0, $CurrAddr;



implementation sh_eth_tsu_find_entry_loop_$bb1(in_$p1: ref, in_$p2: ref, in_$p8: ref, in_$p9: ref, in_$i10: i1, in_$i11: i8, in_$i12: i1, in_$i13: i32, in_$i15: i32, in_$p16: ref, in_$i17: i1, in_$i6: i32, in_$p7: ref) returns (out_$p8: ref, out_$p9: ref, out_$i10: i1, out_$i11: i8, out_$i12: i1, out_$i13: i32, out_$i15: i32, out_$p16: ref, out_$i17: i1, out_$i6: i32, out_$p7: ref)
{

  entry:
    out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i15, out_$p16, out_$i17, out_$i6, out_$p7 := in_$p8, in_$p9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i15, in_$p16, in_$i17, in_$i6, in_$p7;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2873;

  $bb7:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i6, out_$p7 := out_$i15, out_$p16;
    goto $bb7_dummy;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    out_$i17 := $sle.i32(out_$i15, 31);
    goto corral_source_split_2888;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref(out_$p7, $mul.ref(8, 1));
    goto corral_source_split_2887;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i32(out_$i6, 1);
    call {:si_unique_call 781} {:cexpr "i"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_2886;

  $bb4:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i6;
    assume true;
    goto $bb4;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    out_$i12 := $trunc.i8.i1(out_$i11);
    goto corral_source_split_2880;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    out_$i11 := $zext.i1.i8(out_$i10);
    call {:si_unique_call 780} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i11);
    goto corral_source_split_2879;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} out_$i10 := ether_addr_equal(in_$p1, out_$p9);
    goto corral_source_split_2878;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    out_$p9 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_2877;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} sh_eth_tsu_read_entry(out_$p7, out_$p8);
    goto corral_source_split_2876;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p8 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_2875;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb7_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i15, out_$p16, out_$i17, out_$i6, out_$p7 := sh_eth_tsu_find_entry_loop_$bb1(in_$p1, in_$p2, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i15, out_$p16, out_$i17, out_$i6, out_$p7);
    return;

  exit:
    return;
}



procedure sh_eth_tsu_find_entry_loop_$bb1(in_$p1: ref, in_$p2: ref, in_$p8: ref, in_$p9: ref, in_$i10: i1, in_$i11: i8, in_$i12: i1, in_$i13: i32, in_$i15: i32, in_$p16: ref, in_$i17: i1, in_$i6: i32, in_$p7: ref) returns (out_$p8: ref, out_$p9: ref, out_$i10: i1, out_$i11: i8, out_$i12: i1, out_$i13: i32, out_$i15: i32, out_$p16: ref, out_$i17: i1, out_$i6: i32, out_$p7: ref);
  modifies $M.0;



implementation sh_eth_tsu_busy_loop_$bb4(in_$p2: ref, in_$i8: i32, in_$i9: i1, in_$i12: i64, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i7: i32) returns (out_$i8: i32, out_$i9: i1, out_$i12: i64, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i7: i32)
{

  entry:
    out_$i8, out_$i9, out_$i12, out_$i13, out_$i14, out_$i15, out_$i7 := in_$i8, in_$i9, in_$i12, in_$i13, in_$i14, in_$i15, in_$i7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2993;

  $bb10:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i8;
    goto $bb10_dummy;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i32(out_$i14, 0);
    goto corral_source_split_3007;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    out_$i14 := $and.i32(out_$i13, 1);
    goto corral_source_split_3006;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    out_$i13 := $trunc.i64.i32(out_$i12);
    goto corral_source_split_3005;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} out_$i12 := sh_eth_tsu_read(in_$p2, 87);
    call {:si_unique_call 815} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i12);
    goto corral_source_split_3004;

  $bb7:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    out_$i9 := $sle.i32(out_$i8, 0);
    goto corral_source_split_2997;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    out_$i8 := $sub.i32(out_$i7, 1);
    call {:si_unique_call 812} {:cexpr "timeout"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_2996;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} __const_udelay(42950);
    goto corral_source_split_2995;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i8, out_$i9, out_$i12, out_$i13, out_$i14, out_$i15, out_$i7 := sh_eth_tsu_busy_loop_$bb4(in_$p2, out_$i8, out_$i9, out_$i12, out_$i13, out_$i14, out_$i15, out_$i7);
    return;

  exit:
    return;
}



procedure sh_eth_tsu_busy_loop_$bb4(in_$p2: ref, in_$i8: i32, in_$i9: i1, in_$i12: i64, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i7: i32) returns (out_$i8: i32, out_$i9: i1, out_$i12: i64, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i7: i32);



implementation sh_eth_txfree_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$p10: ref, in_$i11: i32, in_$p12: ref, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i19: i32, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i64, in_$p37: ref, in_$i38: i16, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i57: i32, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$p61: ref, in_$p63: ref, in_$i64: i64, in_$i65: i64, in_$p67: ref, in_$p69: ref, in_$i70: i64, in_$p71: ref, in_$i72: i16, in_$i73: i64, in_$i74: i64, in_$p76: ref, in_$p77: ref, in_$i78: i32, in_$i79: i32, in_$p80: ref, in_$i81: i32, in_$i82: i32, in_$i83: i1, in_$i9: i32, in_$i84: i32) returns (out_$p10: ref, out_$i11: i32, out_$p12: ref, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i19: i32, out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i64, out_$p37: ref, out_$i38: i16, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i57: i32, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$p61: ref, out_$p63: ref, out_$i64: i64, out_$i65: i64, out_$p67: ref, out_$p69: ref, out_$i70: i64, out_$p71: ref, out_$i72: i16, out_$i73: i64, out_$i74: i64, out_$p76: ref, out_$p77: ref, out_$i78: i32, out_$i79: i32, out_$p80: ref, out_$i81: i32, out_$i82: i32, out_$i83: i1, out_$i9: i32, out_$i84: i32)
{

  entry:
    out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p26, out_$p27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p63, out_$i64, out_$i65, out_$p67, out_$p69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$p76, out_$p77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i9, out_$i84 := in_$p10, in_$i11, in_$p12, in_$i13, in_$i14, in_$p15, in_$p16, in_$i17, in_$i19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_$p26, in_$p27, in_$i28, in_$p29, in_$p30, in_$i31, in_$i32, in_$p33, in_$p34, in_$i35, in_$i36, in_$p37, in_$i38, in_$i39, in_$p40, in_$p41, in_$i42, in_$p43, in_$p44, in_$p45, in_$p46, in_$i47, in_$p48, in_$i49, in_$i50, in_$i51, in_$p52, in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$p58, in_$i59, in_$i60, in_$p61, in_$p63, in_$i64, in_$i65, in_$p67, in_$p69, in_$i70, in_$p71, in_$i72, in_$i73, in_$i74, in_$p76, in_$p77, in_$i78, in_$i79, in_$p80, in_$i81, in_$i82, in_$i83, in_$i9, in_$i84;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3141;

  $bb16:
    assume out_$i83 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := out_$i50;
    goto $bb16_dummy;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    out_$i84 := out_$i50;
    assume true;
    goto $bb16;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    out_$i83 := $ne.i32(out_$i81, out_$i82);
    goto corral_source_split_3229;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i32($M.0, in_$p5);
    goto corral_source_split_3228;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i32($M.0, in_$p3);
    goto corral_source_split_3227;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p80, out_$i79);
    goto corral_source_split_3226;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(180, 1));
    goto corral_source_split_3225;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    out_$i79 := $add.i32(out_$i78, 1);
    goto corral_source_split_3224;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.0, out_$p77);
    goto corral_source_split_3223;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(180, 1));
    goto corral_source_split_3222;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p76, out_$i74);
    goto corral_source_split_3221;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(24, 1));
    goto corral_source_split_3220;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    out_$i74 := $add.i64(out_$i70, out_$i73);
    goto corral_source_split_3219;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    out_$i73 := $zext.i16.i64(out_$i72);
    goto corral_source_split_3218;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i16($M.0, out_$p71);
    goto corral_source_split_3217;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 16)), $mul.ref(6, 1));
    goto corral_source_split_3216;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i64($M.0, out_$p69);
    goto corral_source_split_3215;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(24, 1));
    goto corral_source_split_3214;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p67, out_$i65);
    goto corral_source_split_3213;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(8, 1));
    goto corral_source_split_3212;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    out_$i65 := $add.i64(out_$i64, 1);
    goto corral_source_split_3211;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i64($M.0, out_$p63);
    goto corral_source_split_3210;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(8, 1));
    goto corral_source_split_3209;

  $bb14:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p61, out_$i60);
    goto corral_source_split_3207;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 16)), $mul.ref(0, 1));
    goto corral_source_split_3206;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    out_$i60 := $or.i32(out_$i59, out_$i57);
    goto corral_source_split_3205;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.0, out_$p58);
    goto corral_source_split_3204;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 16)), $mul.ref(0, 1));
    goto corral_source_split_3203;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} out_$i57 := cpu_to_edmac(in_$p2, 1073741824);
    call {:si_unique_call 859} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_3202;

  $bb13:
    assume out_$i56 == 1;
    goto corral_source_split_3201;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    out_$i56 := $uge.i32(out_$i14, out_$i55);
    goto corral_source_split_3199;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    out_$i55 := $sub.i32(out_$i54, 1);
    goto corral_source_split_3198;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.0, out_$p53);
    goto corral_source_split_3197;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(44, 1));
    goto corral_source_split_3196;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p52, out_$i51);
    goto corral_source_split_3195;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 16)), $mul.ref(0, 1));
    goto corral_source_split_3194;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} out_$i51 := cpu_to_edmac(in_$p2, 805306368);
    goto corral_source_split_3193;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3192;

  $bb11:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    out_$i50 := out_$i9;
    goto $bb12;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    out_$i50 := out_$i49;
    goto $bb12;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i32(out_$i9, 1);
    call {:si_unique_call 856} {:cexpr "free_num"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_3190;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p48, $0.ref);
    goto corral_source_split_3189;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref(out_$p46, $mul.ref(out_$i47, 8));
    goto corral_source_split_3188;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i32.i64(out_$i14);
    goto corral_source_split_3187;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_3186;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(88, 1));
    goto corral_source_split_3185;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} dev_kfree_skb_irq(out_$p44);
    goto corral_source_split_3184;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_3183;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref(out_$p41, $mul.ref(out_$i42, 8));
    goto corral_source_split_3182;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i32.i64(out_$i14);
    goto corral_source_split_3181;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_3180;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(88, 1));
    goto corral_source_split_3179;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} dma_unmap_single_attrs(out_$p33, out_$i36, out_$i39, 1, $0.ref);
    goto corral_source_split_3178;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i16.i64(out_$i38);
    goto corral_source_split_3177;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i16($M.0, out_$p37);
    goto corral_source_split_3176;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 16)), $mul.ref(6, 1));
    goto corral_source_split_3175;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i32.i64(out_$i35);
    goto corral_source_split_3174;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.0, out_$p34);
    goto corral_source_split_3173;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 16)), $mul.ref(8, 1));
    goto corral_source_split_3172;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3176)), $mul.ref(1296, 1));
    goto corral_source_split_3171;

  $bb10:
    assume out_$i32 == 1;
    goto corral_source_split_3170;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i64(out_$i31, 0);
    goto corral_source_split_3168;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_3167;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_3166;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref(out_$p27, $mul.ref(out_$i28, 8));
    goto corral_source_split_3165;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i32.i64(out_$i14);
    goto corral_source_split_3164;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_3163;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(88, 1));
    goto corral_source_split_3162;

  $bb7:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i9;
    assume true;
    goto $bb7;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i22, 0);
    goto corral_source_split_3156;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    out_$i22 := $and.i32(out_$i21, out_$i19);
    goto corral_source_split_3155;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, out_$p20);
    goto corral_source_split_3154;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 16)), $mul.ref(0, 1));
    goto corral_source_split_3153;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} out_$i19 := cpu_to_edmac(in_$p2, $sub.i32(0, 2147483648));
    call {:si_unique_call 853} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_3152;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    goto corral_source_split_3151;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i14);
    goto corral_source_split_3150;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_3149;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(72, 1));
    goto corral_source_split_3148;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    out_$i14 := $urem.i32(out_$i11, out_$i13);
    call {:si_unique_call 851} {:cexpr "entry"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_3147;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.0, out_$p12);
    goto corral_source_split_3146;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(44, 1));
    goto corral_source_split_3145;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i32($M.0, out_$p10);
    goto corral_source_split_3144;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(180, 1));
    goto corral_source_split_3143;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p26, out_$p27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p63, out_$i64, out_$i65, out_$p67, out_$p69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$p76, out_$p77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i9, out_$i84 := sh_eth_txfree_loop_$bb4(in_$p0, in_$p2, in_$p3, in_$p5, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p26, out_$p27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p63, out_$i64, out_$i65, out_$p67, out_$p69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$p76, out_$p77, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i9, out_$i84);
    return;

  exit:
    return;
}



procedure sh_eth_txfree_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$p10: ref, in_$i11: i32, in_$p12: ref, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i19: i32, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i64, in_$p37: ref, in_$i38: i16, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i57: i32, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$p61: ref, in_$p63: ref, in_$i64: i64, in_$i65: i64, in_$p67: ref, in_$p69: ref, in_$i70: i64, in_$p71: ref, in_$i72: i16, in_$i73: i64, in_$i74: i64, in_$p76: ref, in_$p77: ref, in_$i78: i32, in_$i79: i32, in_$p80: ref, in_$i81: i32, in_$i82: i32, in_$i83: i1, in_$i9: i32, in_$i84: i32) returns (out_$p10: ref, out_$i11: i32, out_$p12: ref, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i19: i32, out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i64, out_$p37: ref, out_$i38: i16, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i57: i32, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$p61: ref, out_$p63: ref, out_$i64: i64, out_$i65: i64, out_$p67: ref, out_$p69: ref, out_$i70: i64, out_$p71: ref, out_$i72: i16, out_$i73: i64, out_$i74: i64, out_$p76: ref, out_$p77: ref, out_$i78: i32, out_$i79: i32, out_$p80: ref, out_$i81: i32, out_$i82: i32, out_$i83: i1, out_$i9: i32, out_$i84: i32);
  modifies $M.0;



implementation dma_unmap_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_unmap_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_unmap_single_attrs_loop_$bb3();



implementation napi_disable_loop_$bb4(in_$p2: ref, in_$i5: i32, in_$i6: i1) returns (out_$i5: i32, out_$i6: i1)
{

  entry:
    out_$i5, out_$i6 := in_$i5, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i6 == 1;
    goto $bb6_dummy;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    out_$i6 := $ne.i32(out_$i5, 0);
    goto corral_source_split_3306;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} out_$i5 := test_and_set_bit(0, in_$p2);
    call {:si_unique_call 892} {:cexpr "tmp"} boogie_si_record_i32(out_$i5);
    goto corral_source_split_3305;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} msleep(1);
    goto corral_source_split_3304;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i5, out_$i6 := napi_disable_loop_$bb4(in_$p2, out_$i5, out_$i6);
    return;

  exit:
    return;
}



procedure napi_disable_loop_$bb4(in_$p2: ref, in_$i5: i32, in_$i6: i1) returns (out_$i5: i32, out_$i6: i1);
  modifies $CurrAddr;



implementation sh_eth_ring_free_loop_$bb20(in_$p2: ref, in_$p35: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$i54: i1, in_$i38: i32) returns (out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$i54: i1, out_$i38: i32)
{

  entry:
    out_$p39, out_$p40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$p47, out_$i48, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i38 := in_$p39, in_$p40, in_$i41, in_$p42, in_$p43, in_$i44, in_$i45, in_$p46, in_$p47, in_$i48, in_$p49, in_$p50, in_$p51, in_$i52, in_$i53, in_$i54, in_$i38;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3371;

  $bb25:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$i38 := out_$i52;
    goto $bb25_dummy;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    out_$i54 := $ult.i32(out_$i52, out_$i53);
    goto corral_source_split_3392;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.0, in_$p35);
    goto corral_source_split_3391;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i32(out_$i38, 1);
    call {:si_unique_call 899} {:cexpr "i"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_3390;

  $bb23:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} ldv_skb_free(out_$p51);
    goto corral_source_split_3388;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    out_$p51 := $bitcast.ref.ref(out_$p50);
    goto corral_source_split_3387;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_3386;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref(out_$p47, $mul.ref(out_$i48, 8));
    goto corral_source_split_3385;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i38);
    goto corral_source_split_3384;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_3383;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(88, 1));
    goto corral_source_split_3382;

  $bb22:
    assume out_$i45 == 1;
    goto corral_source_split_3381;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i64(out_$i44, 0);
    goto corral_source_split_3379;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    out_$i44 := $p2i.ref.i64(out_$p43);
    goto corral_source_split_3378;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_3377;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref(out_$p40, $mul.ref(out_$i41, 8));
    goto corral_source_split_3376;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i38);
    goto corral_source_split_3375;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_3374;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(88, 1));
    goto corral_source_split_3373;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p39, out_$p40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$p47, out_$i48, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i38 := sh_eth_ring_free_loop_$bb20(in_$p2, in_$p35, out_$p39, out_$p40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$p47, out_$i48, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i38);
    return;

  exit:
    return;
}



procedure sh_eth_ring_free_loop_$bb20(in_$p2: ref, in_$p35: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$i54: i1, in_$i38: i32) returns (out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$i54: i1, out_$i38: i32);
  modifies $M.3, $M.2;



implementation sh_eth_ring_free_loop_$bb6(in_$p2: ref, in_$p7: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i10: i32) returns (out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i10: i32)
{

  entry:
    out_$p11, out_$p12, out_$i13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$i20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i10 := in_$p11, in_$p12, in_$i13, in_$p14, in_$p15, in_$i16, in_$i17, in_$p18, in_$p19, in_$i20, in_$p21, in_$p22, in_$p23, in_$i24, in_$i25, in_$i26, in_$i10;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3328;

  $bb11:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i24;
    goto $bb11_dummy;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    out_$i26 := $ult.i32(out_$i24, out_$i25);
    goto corral_source_split_3349;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.0, in_$p7);
    goto corral_source_split_3348;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i10, 1);
    call {:si_unique_call 896} {:cexpr "i"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_3347;

  $bb9:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} ldv_skb_free(out_$p23);
    goto corral_source_split_3345;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_3344;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_3343;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref(out_$p19, $mul.ref(out_$i20, 8));
    goto corral_source_split_3342;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(out_$i10);
    goto corral_source_split_3341;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_3340;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(80, 1));
    goto corral_source_split_3339;

  $bb8:
    assume out_$i17 == 1;
    goto corral_source_split_3338;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i64(out_$i16, 0);
    goto corral_source_split_3336;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(out_$p15);
    goto corral_source_split_3335;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_3334;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref(out_$p12, $mul.ref(out_$i13, 8));
    goto corral_source_split_3333;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(out_$i10);
    goto corral_source_split_3332;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_3331;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p2, $mul.ref(0, 432)), $mul.ref(80, 1));
    goto corral_source_split_3330;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p11, out_$p12, out_$i13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$i20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i10 := sh_eth_ring_free_loop_$bb6(in_$p2, in_$p7, out_$p11, out_$p12, out_$i13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$i20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i10);
    return;

  exit:
    return;
}



procedure sh_eth_ring_free_loop_$bb6(in_$p2: ref, in_$p7: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i10: i32) returns (out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i10: i32);
  modifies $M.3, $M.2;



implementation arch_local_save_flags_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_save_flags_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_save_flags_loop_$bb3();



implementation napi_enable_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} napi_enable_loop_$bb3();
    return;

  exit:
    return;
}



procedure napi_enable_loop_$bb3();



implementation netif_tx_disable_loop_$bb26(in_$p0: ref, in_$i9: i32, in_$p13: ref, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i16: i32) returns (out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i16: i32)
{

  entry:
    out_$p17, out_$i18, out_$i19, out_$i20, out_$i16 := in_$p17, in_$i18, in_$i19, in_$i20, in_$i16;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_4718;

  $bb28:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := out_$i18;
    goto $bb28_dummy;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    out_$i20 := $ugt.i32(out_$i19, out_$i18);
    goto corral_source_split_4726;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, in_$p13);
    goto corral_source_split_4725;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i16, 1);
    call {:si_unique_call 1208} {:cexpr "i"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_4724;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} __netif_tx_unlock(out_$p17);
    goto corral_source_split_4723;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} netif_tx_stop_queue(out_$p17);
    goto corral_source_split_4722;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} __netif_tx_lock(out_$p17, in_$i9);
    goto corral_source_split_4721;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} out_$p17 := netdev_get_tx_queue(in_$p0, out_$i16);
    goto corral_source_split_4720;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb28_dummy:
    call {:si_unique_call 1} out_$p17, out_$i18, out_$i19, out_$i20, out_$i16 := netif_tx_disable_loop_$bb26(in_$p0, in_$i9, in_$p13, out_$p17, out_$i18, out_$i19, out_$i20, out_$i16);
    return;

  exit:
    return;
}



procedure netif_tx_disable_loop_$bb26(in_$p0: ref, in_$i9: i32, in_$p13: ref, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i16: i32) returns (out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i16: i32);
  modifies $M.0;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i3: i32, in_$i4: i32, in_$i5: i32, in_$i6: i32, in_$i7: i32, in_$p8: ref, in_$p10: ref, in_$p12: ref, in_$i13: i32, in_$i14: i16, in_$i15: i16, in_$p17: ref, in_$i18: i32, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$p23: ref, in_$i24: i32, in_$p26: ref, in_$p28: ref, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$p65: ref, in_$i66: i32, in_$i67: i1, in_$i68: i32, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$p76: ref, in_$i77: i32, in_$i78: i1, in_$p79: ref, in_$i80: i32, in_$i81: i1, in_$p82: ref, in_$i84: i32, in_$i85: i1, in_$p86: ref, in_$i87: i32, in_$i88: i1, in_$i89: i32, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i32, in_$i94: i1, in_$p95: ref, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$p103: ref, in_$i105: i32, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i1, in_$i111: i32, in_$i112: i1, in_$i113: i1, in_$i114: i1, in_$i115: i32, in_$i116: i1, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i122: i32, in_$i123: i1, in_$i124: i32, in_$i125: i1, in_$i126: i32, in_$i127: i1, in_$i128: i32, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i32, in_$i133: i1, in_$p134: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$i138: i32, in_$i139: i1, in_$i140: i32, in_$i141: i1, in_$i142: i1, in_$i143: i1, in_$i144: i32, in_$i145: i1, in_$p146: ref, in_$i147: i32, in_$i148: i1, in_$p149: ref, in_$i150: i32, in_$i151: i1, in_$i152: i32, in_$i153: i1, in_$i154: i1, in_$i155: i1, in_$i156: i1, in_$i157: i1, in_$i158: i1, in_$i159: i1, in_$i160: i1, in_$i161: i1, in_$i162: i1, in_$i163: i1, in_$i164: i1, in_$i165: i32, in_$i166: i1, in_$p167: ref, in_$i169: i32, in_$i170: i1, in_$p171: ref, in_$p172: ref, in_$i174: i32, in_$i175: i1, in_$p176: ref, in_$i177: i32, in_$i178: i1, in_$p179: ref, in_$p180: ref, in_$i182: i32, in_$i183: i1, in_$p184: ref, in_$i185: i32, in_$i186: i1, in_$p187: ref, in_$i188: i32, in_$i189: i1, in_$p190: ref, in_$i192: i32, in_$i193: i1, in_$p194: ref, in_$p195: ref, in_$i196: i32, in_$i197: i1, in_$p198: ref, in_$i200: i32, in_$i201: i1, in_$p202: ref, in_$p203: ref, in_$i205: i32, in_$i206: i1, in_$p207: ref, in_$i209: i32, in_$i210: i1, in_$i211: i32, in_$i212: i1, in_$i213: i1, in_$i214: i1, in_$i215: i32, in_$i216: i1, in_$p217: ref, in_$i218: i32, in_$i219: i32, in_$i220: i1, in_$i221: i32, in_$i222: i32, in_$i223: i32, in_$i224: i1, in_$p225: ref, in_$i226: i32, in_$i227: i32, in_$i228: i1, in_$i229: i32, in_$i230: i32, in_$i231: i32, in_$i232: i1, in_$i233: i32, in_$i234: i1, in_$i235: i1, in_$i236: i1, in_$i237: i1, in_$i238: i32, in_$i239: i1, in_$p240: ref, in_$i241: i32, in_$i242: i1, in_$p243: ref, in_$i244: i32, in_$i245: i1, in_$p246: ref, in_$i247: i32, in_$i248: i1, in_$i249: i32, in_$i250: i1, in_$i251: i1, in_$i252: i1, in_$i253: i1, in_$i254: i32, in_$i255: i1, in_$p256: ref, in_$i257: i32, in_$i258: i1, in_$p259: ref, in_$i260: i32, in_$i261: i1, in_$p262: ref, in_$i263: i32, in_$i264: i1, in_$i265: i32, in_$i266: i1, in_$i267: i1, in_$i268: i1, in_$i269: i32, in_$i270: i1, in_$p271: ref, in_$i272: i32, in_$i273: i1, in_$p274: ref, in_$i275: i32, in_$i276: i1, in_$i277: i32, in_$i278: i1, in_$i279: i1, in_$i280: i1, in_$i281: i32, in_$i282: i1, in_$p283: ref, in_$i284: i32, in_$i285: i1, in_$p286: ref, in_$i287: i32, in_$i288: i1, in_$i289: i32, in_$i290: i1, in_$i291: i1, in_$i292: i1, in_$i293: i32, in_$i294: i1, in_$p295: ref, in_$i296: i32, in_$i297: i1, in_$p298: ref, in_$i299: i32, in_$i300: i1, in_$i301: i32, in_$i302: i1, in_$i303: i1, in_$i304: i1, in_$i305: i1, in_$i306: i1, in_$i307: i1, in_$i308: i1, in_$i309: i1, in_$i310: i1, in_$i311: i1, in_$i312: i1, in_$i313: i1, in_$i314: i1, in_$i315: i1, in_$i316: i1, in_$i317: i32, in_$i318: i1, in_$p319: ref, in_$i321: i32, in_$i322: i1, in_$p323: ref, in_$i324: i32, in_$i325: i1, in_$p326: ref, in_$i327: i32, in_$i328: i1, in_$p329: ref, in_$i330: i32, in_$i331: i1, in_$p332: ref, in_$i334: i32, in_$i335: i1, in_$p336: ref, in_$i338: i32, in_$i339: i1, in_$p340: ref, in_$i342: i32, in_$i343: i1, in_$p344: ref, in_$i345: i16, in_$i346: i32, in_$i347: i16, in_$i348: i32, in_$i349: i16, in_$i351: i32, in_$i352: i1, in_$p353: ref, in_$i354: i16, in_$i355: i32, in_$i356: i16, in_$i357: i32, in_$i358: i16, in_$i360: i32, in_$i361: i1, in_$p362: ref, in_$i363: i16, in_$i364: i32, in_$i365: i16, in_$i366: i32, in_$i367: i16, in_$i369: i32, in_$i370: i1, in_$p371: ref, in_$i373: i32, in_$i374: i1, in_$p375: ref, in_$i377: i32, in_$i378: i1, in_$p379: ref, in_$i381: i32, in_$i382: i1, in_$p383: ref, in_$i384: i16, in_$i385: i32, in_$i386: i16, in_$i387: i32, in_$i388: i16, in_$i390: i32, in_$i391: i1, in_$p392: ref, in_$i393: i16, in_$i394: i32, in_$i395: i16, in_$i396: i32, in_$i397: i16, in_$i399: i32, in_$i400: i1, in_$p401: ref, in_$i402: i16, in_$i403: i32, in_$i404: i16, in_$i405: i32, in_$i406: i16, in_$i408: i32, in_$i409: i1, in_$p410: ref, in_$i412: i32, in_$i413: i1, in_$p414: ref, in_$i416: i32, in_$i417: i1, in_$p418: ref, in_$i420: i32, in_$i421: i1, in_$p422: ref, in_$i424: i32, in_$i425: i1, in_$p426: ref, in_$i428: i32, in_$i429: i1, in_$p430: ref, in_$i431: i32, in_$i432: i32, in_$i433: i1, in_$i434: i32, in_$i435: i1, in_$p436: ref, in_$i438: i32, in_$i439: i1, in_$p440: ref, in_$i442: i32, in_$i443: i1, in_$p444: ref, in_$i446: i32, in_$i447: i1, in_$p448: ref, in_$i450: i32, in_$i451: i1, in_$p452: ref, in_$i453: i32, in_$i454: i1, in_$p455: ref, in_$i456: i32, in_$i457: i1, in_$p458: ref, in_$i459: i32, in_$i460: i1, in_$i462: i32, in_$i463: i32, in_$i464: i32, in_$i465: i1, in_$i466: i32, in_$i467: i32, in_$i468: i1, in_$i469: i32, in_$i470: i32, in_$i471: i32, in_$i472: i1, in_$i473: i32, in_$i474: i1, in_$i475: i1, in_$i476: i1, in_$i477: i1, in_$i478: i32, in_$i479: i1, in_$p480: ref, in_$i481: i32, in_$i482: i1, in_$p483: ref, in_$i484: i32, in_$i485: i1, in_$p486: ref, in_$i487: i32, in_$i488: i1, in_$i489: i32, in_$i490: i1, in_$i491: i1, in_$i492: i1, in_$i493: i1, in_$i494: i1, in_$i495: i1, in_$i496: i1, in_$i497: i1, in_$i498: i1, in_$i499: i1, in_$i500: i1, in_$i501: i1, in_$i502: i32, in_$i503: i1, in_$p504: ref, in_$i506: i32, in_$i507: i1, in_$p508: ref, in_$i510: i32, in_$i511: i1, in_$p512: ref, in_$i514: i32, in_$i515: i1, in_$p516: ref, in_$i518: i32, in_$i519: i1, in_$p520: ref, in_$i522: i32, in_$i523: i1, in_$p524: ref, in_$i526: i32, in_$i527: i1, in_$p528: ref, in_$i530: i32, in_$i531: i1, in_$p532: ref, in_$i534: i32, in_$i535: i1, in_$p536: ref, in_$i538: i32, in_$i539: i1, in_$p540: ref, in_$i542: i32, in_$i543: i1, in_$p544: ref, in_$i546: i32, in_$i547: i1, in_$p548: ref, in_$i550: i32, in_$i551: i1, in_$p552: ref, in_$i553: i32, in_$i554: i32, in_$i555: i1, in_$i556: i32, in_$i557: i1, in_$p558: ref, in_$i560: i32, in_$i561: i1, in_$p562: ref, in_$i564: i32, in_$i565: i1, in_$p566: ref, in_$i568: i32, in_$i569: i1, in_$p570: ref, in_$i572: i32, in_$i573: i1, in_$p574: ref, in_$i575: i32, in_$i576: i1, in_$p577: ref, in_$i578: i32, in_$i579: i1, in_$p580: ref, in_$i581: i32, in_$i582: i1, in_$i584: i32, in_$i585: i32, in_$i586: i32, in_$i587: i1, in_$i588: i32, in_$i589: i32, in_$i590: i1, in_$i591: i32, in_$i592: i32, in_vslice_dummy_var_72: i32, in_vslice_dummy_var_73: i32, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: i32, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_79: i32, in_vslice_dummy_var_80: i32, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i32, in_vslice_dummy_var_83: i32, in_vslice_dummy_var_84: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: ref, in_vslice_dummy_var_95: ref, in_vslice_dummy_var_96: ref, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i32, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: ref, in_vslice_dummy_var_112: ref, in_vslice_dummy_var_113: ref, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: i32, in_vslice_dummy_var_116: i32, in_vslice_dummy_var_117: i32, in_vslice_dummy_var_118: i32, in_vslice_dummy_var_119: i32, in_vslice_dummy_var_120: i32) returns (out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$p65: ref, out_$i66: i32, out_$i67: i1, out_$i68: i32, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$p76: ref, out_$i77: i32, out_$i78: i1, out_$p79: ref, out_$i80: i32, out_$i81: i1, out_$p82: ref, out_$i84: i32, out_$i85: i1, out_$p86: ref, out_$i87: i32, out_$i88: i1, out_$i89: i32, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i32, out_$i94: i1, out_$p95: ref, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$p103: ref, out_$i105: i32, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i1, out_$i111: i32, out_$i112: i1, out_$i113: i1, out_$i114: i1, out_$i115: i32, out_$i116: i1, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i122: i32, out_$i123: i1, out_$i124: i32, out_$i125: i1, out_$i126: i32, out_$i127: i1, out_$i128: i32, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i32, out_$i133: i1, out_$p134: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$i138: i32, out_$i139: i1, out_$i140: i32, out_$i141: i1, out_$i142: i1, out_$i143: i1, out_$i144: i32, out_$i145: i1, out_$p146: ref, out_$i147: i32, out_$i148: i1, out_$p149: ref, out_$i150: i32, out_$i151: i1, out_$i152: i32, out_$i153: i1, out_$i154: i1, out_$i155: i1, out_$i156: i1, out_$i157: i1, out_$i158: i1, out_$i159: i1, out_$i160: i1, out_$i161: i1, out_$i162: i1, out_$i163: i1, out_$i164: i1, out_$i165: i32, out_$i166: i1, out_$p167: ref, out_$i169: i32, out_$i170: i1, out_$p171: ref, out_$p172: ref, out_$i174: i32, out_$i175: i1, out_$p176: ref, out_$i177: i32, out_$i178: i1, out_$p179: ref, out_$p180: ref, out_$i182: i32, out_$i183: i1, out_$p184: ref, out_$i185: i32, out_$i186: i1, out_$p187: ref, out_$i188: i32, out_$i189: i1, out_$p190: ref, out_$i192: i32, out_$i193: i1, out_$p194: ref, out_$p195: ref, out_$i196: i32, out_$i197: i1, out_$p198: ref, out_$i200: i32, out_$i201: i1, out_$p202: ref, out_$p203: ref, out_$i205: i32, out_$i206: i1, out_$p207: ref, out_$i209: i32, out_$i210: i1, out_$i211: i32, out_$i212: i1, out_$i213: i1, out_$i214: i1, out_$i215: i32, out_$i216: i1, out_$p217: ref, out_$i218: i32, out_$i219: i32, out_$i220: i1, out_$i221: i32, out_$i222: i32, out_$i223: i32, out_$i224: i1, out_$p225: ref, out_$i226: i32, out_$i227: i32, out_$i228: i1, out_$i229: i32, out_$i230: i32, out_$i231: i32, out_$i232: i1, out_$i233: i32, out_$i234: i1, out_$i235: i1, out_$i236: i1, out_$i237: i1, out_$i238: i32, out_$i239: i1, out_$p240: ref, out_$i241: i32, out_$i242: i1, out_$p243: ref, out_$i244: i32, out_$i245: i1, out_$p246: ref, out_$i247: i32, out_$i248: i1, out_$i249: i32, out_$i250: i1, out_$i251: i1, out_$i252: i1, out_$i253: i1, out_$i254: i32, out_$i255: i1, out_$p256: ref, out_$i257: i32, out_$i258: i1, out_$p259: ref, out_$i260: i32, out_$i261: i1, out_$p262: ref, out_$i263: i32, out_$i264: i1, out_$i265: i32, out_$i266: i1, out_$i267: i1, out_$i268: i1, out_$i269: i32, out_$i270: i1, out_$p271: ref, out_$i272: i32, out_$i273: i1, out_$p274: ref, out_$i275: i32, out_$i276: i1, out_$i277: i32, out_$i278: i1, out_$i279: i1, out_$i280: i1, out_$i281: i32, out_$i282: i1, out_$p283: ref, out_$i284: i32, out_$i285: i1, out_$p286: ref, out_$i287: i32, out_$i288: i1, out_$i289: i32, out_$i290: i1, out_$i291: i1, out_$i292: i1, out_$i293: i32, out_$i294: i1, out_$p295: ref, out_$i296: i32, out_$i297: i1, out_$p298: ref, out_$i299: i32, out_$i300: i1, out_$i301: i32, out_$i302: i1, out_$i303: i1, out_$i304: i1, out_$i305: i1, out_$i306: i1, out_$i307: i1, out_$i308: i1, out_$i309: i1, out_$i310: i1, out_$i311: i1, out_$i312: i1, out_$i313: i1, out_$i314: i1, out_$i315: i1, out_$i316: i1, out_$i317: i32, out_$i318: i1, out_$p319: ref, out_$i321: i32, out_$i322: i1, out_$p323: ref, out_$i324: i32, out_$i325: i1, out_$p326: ref, out_$i327: i32, out_$i328: i1, out_$p329: ref, out_$i330: i32, out_$i331: i1, out_$p332: ref, out_$i334: i32, out_$i335: i1, out_$p336: ref, out_$i338: i32, out_$i339: i1, out_$p340: ref, out_$i342: i32, out_$i343: i1, out_$p344: ref, out_$i345: i16, out_$i346: i32, out_$i347: i16, out_$i348: i32, out_$i349: i16, out_$i351: i32, out_$i352: i1, out_$p353: ref, out_$i354: i16, out_$i355: i32, out_$i356: i16, out_$i357: i32, out_$i358: i16, out_$i360: i32, out_$i361: i1, out_$p362: ref, out_$i363: i16, out_$i364: i32, out_$i365: i16, out_$i366: i32, out_$i367: i16, out_$i369: i32, out_$i370: i1, out_$p371: ref, out_$i373: i32, out_$i374: i1, out_$p375: ref, out_$i377: i32, out_$i378: i1, out_$p379: ref, out_$i381: i32, out_$i382: i1, out_$p383: ref, out_$i384: i16, out_$i385: i32, out_$i386: i16, out_$i387: i32, out_$i388: i16, out_$i390: i32, out_$i391: i1, out_$p392: ref, out_$i393: i16, out_$i394: i32, out_$i395: i16, out_$i396: i32, out_$i397: i16, out_$i399: i32, out_$i400: i1, out_$p401: ref, out_$i402: i16, out_$i403: i32, out_$i404: i16, out_$i405: i32, out_$i406: i16, out_$i408: i32, out_$i409: i1, out_$p410: ref, out_$i412: i32, out_$i413: i1, out_$p414: ref, out_$i416: i32, out_$i417: i1, out_$p418: ref, out_$i420: i32, out_$i421: i1, out_$p422: ref, out_$i424: i32, out_$i425: i1, out_$p426: ref, out_$i428: i32, out_$i429: i1, out_$p430: ref, out_$i431: i32, out_$i432: i32, out_$i433: i1, out_$i434: i32, out_$i435: i1, out_$p436: ref, out_$i438: i32, out_$i439: i1, out_$p440: ref, out_$i442: i32, out_$i443: i1, out_$p444: ref, out_$i446: i32, out_$i447: i1, out_$p448: ref, out_$i450: i32, out_$i451: i1, out_$p452: ref, out_$i453: i32, out_$i454: i1, out_$p455: ref, out_$i456: i32, out_$i457: i1, out_$p458: ref, out_$i459: i32, out_$i460: i1, out_$i462: i32, out_$i463: i32, out_$i464: i32, out_$i465: i1, out_$i466: i32, out_$i467: i32, out_$i468: i1, out_$i469: i32, out_$i470: i32, out_$i471: i32, out_$i472: i1, out_$i473: i32, out_$i474: i1, out_$i475: i1, out_$i476: i1, out_$i477: i1, out_$i478: i32, out_$i479: i1, out_$p480: ref, out_$i481: i32, out_$i482: i1, out_$p483: ref, out_$i484: i32, out_$i485: i1, out_$p486: ref, out_$i487: i32, out_$i488: i1, out_$i489: i32, out_$i490: i1, out_$i491: i1, out_$i492: i1, out_$i493: i1, out_$i494: i1, out_$i495: i1, out_$i496: i1, out_$i497: i1, out_$i498: i1, out_$i499: i1, out_$i500: i1, out_$i501: i1, out_$i502: i32, out_$i503: i1, out_$p504: ref, out_$i506: i32, out_$i507: i1, out_$p508: ref, out_$i510: i32, out_$i511: i1, out_$p512: ref, out_$i514: i32, out_$i515: i1, out_$p516: ref, out_$i518: i32, out_$i519: i1, out_$p520: ref, out_$i522: i32, out_$i523: i1, out_$p524: ref, out_$i526: i32, out_$i527: i1, out_$p528: ref, out_$i530: i32, out_$i531: i1, out_$p532: ref, out_$i534: i32, out_$i535: i1, out_$p536: ref, out_$i538: i32, out_$i539: i1, out_$p540: ref, out_$i542: i32, out_$i543: i1, out_$p544: ref, out_$i546: i32, out_$i547: i1, out_$p548: ref, out_$i550: i32, out_$i551: i1, out_$p552: ref, out_$i553: i32, out_$i554: i32, out_$i555: i1, out_$i556: i32, out_$i557: i1, out_$p558: ref, out_$i560: i32, out_$i561: i1, out_$p562: ref, out_$i564: i32, out_$i565: i1, out_$p566: ref, out_$i568: i32, out_$i569: i1, out_$p570: ref, out_$i572: i32, out_$i573: i1, out_$p574: ref, out_$i575: i32, out_$i576: i1, out_$p577: ref, out_$i578: i32, out_$i579: i1, out_$p580: ref, out_$i581: i32, out_$i582: i1, out_$i584: i32, out_$i585: i32, out_$i586: i32, out_$i587: i1, out_$i588: i32, out_$i589: i32, out_$i590: i1, out_$i591: i32, out_$i592: i32, out_vslice_dummy_var_72: i32, out_vslice_dummy_var_73: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: i32, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_79: i32, out_vslice_dummy_var_80: i32, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i32, out_vslice_dummy_var_83: i32, out_vslice_dummy_var_84: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: ref, out_vslice_dummy_var_95: ref, out_vslice_dummy_var_96: ref, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i32, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: ref, out_vslice_dummy_var_112: ref, out_vslice_dummy_var_113: ref, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: i32, out_vslice_dummy_var_116: i32, out_vslice_dummy_var_117: i32, out_vslice_dummy_var_118: i32, out_vslice_dummy_var_119: i32, out_vslice_dummy_var_120: i32)
{

  entry:
    out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$p146, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$p167, out_$i169, out_$i170, out_$p171, out_$p172, out_$i174, out_$i175, out_$p176, out_$i177, out_$i178, out_$p179, out_$p180, out_$i182, out_$i183, out_$p184, out_$i185, out_$i186, out_$p187, out_$i188, out_$i189, out_$p190, out_$i192, out_$i193, out_$p194, out_$p195, out_$i196, out_$i197, out_$p198, out_$i200, out_$i201, out_$p202, out_$p203, out_$i205, out_$i206, out_$p207, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$p217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$p225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$p240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$p246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$p256, out_$i257, out_$i258, out_$p259, out_$i260, out_$i261, out_$p262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$p271, out_$i272, out_$i273, out_$p274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$p283, out_$i284, out_$i285, out_$p286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$p295, out_$i296, out_$i297, out_$p298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$p319, out_$i321, out_$i322, out_$p323, out_$i324, out_$i325, out_$p326, out_$i327, out_$i328, out_$p329, out_$i330, out_$i331, out_$p332, out_$i334, out_$i335, out_$p336, out_$i338, out_$i339, out_$p340, out_$i342, out_$i343, out_$p344, out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i351, out_$i352, out_$p353, out_$i354, out_$i355, out_$i356, out_$i357, out_$i358, out_$i360, out_$i361, out_$p362, out_$i363, out_$i364, out_$i365, out_$i366, out_$i367, out_$i369, out_$i370, out_$p371, out_$i373, out_$i374, out_$p375, out_$i377, out_$i378, out_$p379, out_$i381, out_$i382, out_$p383, out_$i384, out_$i385, out_$i386, out_$i387, out_$i388, out_$i390, out_$i391, out_$p392, out_$i393, out_$i394, out_$i395, out_$i396, out_$i397, out_$i399, out_$i400, out_$p401, out_$i402, out_$i403, out_$i404, out_$i405, out_$i406, out_$i408, out_$i409, out_$p410, out_$i412, out_$i413, out_$p414, out_$i416, out_$i417, out_$p418, out_$i420, out_$i421, out_$p422, out_$i424, out_$i425, out_$p426, out_$i428, out_$i429, out_$p430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$p436, out_$i438, out_$i439, out_$p440, out_$i442, out_$i443, out_$p444, out_$i446, out_$i447, out_$p448, out_$i450, out_$i451, out_$p452, out_$i453, out_$i454, out_$p455, out_$i456, out_$i457, out_$p458, out_$i459, out_$i460, out_$i462, out_$i463, out_$i464, out_$i465, out_$i466, out_$i467, out_$i468, out_$i469, out_$i470, out_$i471, out_$i472, out_$i473, out_$i474, out_$i475, out_$i476, out_$i477, out_$i478, out_$i479, out_$p480, out_$i481, out_$i482, out_$p483, out_$i484, out_$i485, out_$p486, out_$i487, out_$i488, out_$i489, out_$i490, out_$i491, out_$i492, out_$i493, out_$i494, out_$i495, out_$i496, out_$i497, out_$i498, out_$i499, out_$i500, out_$i501, out_$i502, out_$i503, out_$p504, out_$i506, out_$i507, out_$p508, out_$i510, out_$i511, out_$p512, out_$i514, out_$i515, out_$p516, out_$i518, out_$i519, out_$p520, out_$i522, out_$i523, out_$p524, out_$i526, out_$i527, out_$p528, out_$i530, out_$i531, out_$p532, out_$i534, out_$i535, out_$p536, out_$i538, out_$i539, out_$p540, out_$i542, out_$i543, out_$p544, out_$i546, out_$i547, out_$p548, out_$i550, out_$i551, out_$p552, out_$i553, out_$i554, out_$i555, out_$i556, out_$i557, out_$p558, out_$i560, out_$i561, out_$p562, out_$i564, out_$i565, out_$p566, out_$i568, out_$i569, out_$p570, out_$i572, out_$i573, out_$p574, out_$i575, out_$i576, out_$p577, out_$i578, out_$i579, out_$p580, out_$i581, out_$i582, out_$i584, out_$i585, out_$i586, out_$i587, out_$i588, out_$i589, out_$i590, out_$i591, out_$i592, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120 := in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$p59, in_$i60, in_$i61, in_$p62, in_$i63, in_$i64, in_$p65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$p76, in_$i77, in_$i78, in_$p79, in_$i80, in_$i81, in_$p82, in_$i84, in_$i85, in_$p86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$p95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$p103, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$p134, in_$i135, in_$i136, in_$p137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$p146, in_$i147, in_$i148, in_$p149, in_$i150, in_$i151, in_$i152, in_$i153, in_$i154, in_$i155, in_$i156, in_$i157, in_$i158, in_$i159, in_$i160, in_$i161, in_$i162, in_$i163, in_$i164, in_$i165, in_$i166, in_$p167, in_$i169, in_$i170, in_$p171, in_$p172, in_$i174, in_$i175, in_$p176, in_$i177, in_$i178, in_$p179, in_$p180, in_$i182, in_$i183, in_$p184, in_$i185, in_$i186, in_$p187, in_$i188, in_$i189, in_$p190, in_$i192, in_$i193, in_$p194, in_$p195, in_$i196, in_$i197, in_$p198, in_$i200, in_$i201, in_$p202, in_$p203, in_$i205, in_$i206, in_$p207, in_$i209, in_$i210, in_$i211, in_$i212, in_$i213, in_$i214, in_$i215, in_$i216, in_$p217, in_$i218, in_$i219, in_$i220, in_$i221, in_$i222, in_$i223, in_$i224, in_$p225, in_$i226, in_$i227, in_$i228, in_$i229, in_$i230, in_$i231, in_$i232, in_$i233, in_$i234, in_$i235, in_$i236, in_$i237, in_$i238, in_$i239, in_$p240, in_$i241, in_$i242, in_$p243, in_$i244, in_$i245, in_$p246, in_$i247, in_$i248, in_$i249, in_$i250, in_$i251, in_$i252, in_$i253, in_$i254, in_$i255, in_$p256, in_$i257, in_$i258, in_$p259, in_$i260, in_$i261, in_$p262, in_$i263, in_$i264, in_$i265, in_$i266, in_$i267, in_$i268, in_$i269, in_$i270, in_$p271, in_$i272, in_$i273, in_$p274, in_$i275, in_$i276, in_$i277, in_$i278, in_$i279, in_$i280, in_$i281, in_$i282, in_$p283, in_$i284, in_$i285, in_$p286, in_$i287, in_$i288, in_$i289, in_$i290, in_$i291, in_$i292, in_$i293, in_$i294, in_$p295, in_$i296, in_$i297, in_$p298, in_$i299, in_$i300, in_$i301, in_$i302, in_$i303, in_$i304, in_$i305, in_$i306, in_$i307, in_$i308, in_$i309, in_$i310, in_$i311, in_$i312, in_$i313, in_$i314, in_$i315, in_$i316, in_$i317, in_$i318, in_$p319, in_$i321, in_$i322, in_$p323, in_$i324, in_$i325, in_$p326, in_$i327, in_$i328, in_$p329, in_$i330, in_$i331, in_$p332, in_$i334, in_$i335, in_$p336, in_$i338, in_$i339, in_$p340, in_$i342, in_$i343, in_$p344, in_$i345, in_$i346, in_$i347, in_$i348, in_$i349, in_$i351, in_$i352, in_$p353, in_$i354, in_$i355, in_$i356, in_$i357, in_$i358, in_$i360, in_$i361, in_$p362, in_$i363, in_$i364, in_$i365, in_$i366, in_$i367, in_$i369, in_$i370, in_$p371, in_$i373, in_$i374, in_$p375, in_$i377, in_$i378, in_$p379, in_$i381, in_$i382, in_$p383, in_$i384, in_$i385, in_$i386, in_$i387, in_$i388, in_$i390, in_$i391, in_$p392, in_$i393, in_$i394, in_$i395, in_$i396, in_$i397, in_$i399, in_$i400, in_$p401, in_$i402, in_$i403, in_$i404, in_$i405, in_$i406, in_$i408, in_$i409, in_$p410, in_$i412, in_$i413, in_$p414, in_$i416, in_$i417, in_$p418, in_$i420, in_$i421, in_$p422, in_$i424, in_$i425, in_$p426, in_$i428, in_$i429, in_$p430, in_$i431, in_$i432, in_$i433, in_$i434, in_$i435, in_$p436, in_$i438, in_$i439, in_$p440, in_$i442, in_$i443, in_$p444, in_$i446, in_$i447, in_$p448, in_$i450, in_$i451, in_$p452, in_$i453, in_$i454, in_$p455, in_$i456, in_$i457, in_$p458, in_$i459, in_$i460, in_$i462, in_$i463, in_$i464, in_$i465, in_$i466, in_$i467, in_$i468, in_$i469, in_$i470, in_$i471, in_$i472, in_$i473, in_$i474, in_$i475, in_$i476, in_$i477, in_$i478, in_$i479, in_$p480, in_$i481, in_$i482, in_$p483, in_$i484, in_$i485, in_$p486, in_$i487, in_$i488, in_$i489, in_$i490, in_$i491, in_$i492, in_$i493, in_$i494, in_$i495, in_$i496, in_$i497, in_$i498, in_$i499, in_$i500, in_$i501, in_$i502, in_$i503, in_$p504, in_$i506, in_$i507, in_$p508, in_$i510, in_$i511, in_$p512, in_$i514, in_$i515, in_$p516, in_$i518, in_$i519, in_$p520, in_$i522, in_$i523, in_$p524, in_$i526, in_$i527, in_$p528, in_$i530, in_$i531, in_$p532, in_$i534, in_$i535, in_$p536, in_$i538, in_$i539, in_$p540, in_$i542, in_$i543, in_$p544, in_$i546, in_$i547, in_$p548, in_$i550, in_$i551, in_$p552, in_$i553, in_$i554, in_$i555, in_$i556, in_$i557, in_$p558, in_$i560, in_$i561, in_$p562, in_$i564, in_$i565, in_$p566, in_$i568, in_$i569, in_$p570, in_$i572, in_$i573, in_$p574, in_$i575, in_$i576, in_$p577, in_$i578, in_$i579, in_$p580, in_$i581, in_$i582, in_$i584, in_$i585, in_$i586, in_$i587, in_$i588, in_$i589, in_$i590, in_$i591, in_$i592, in_vslice_dummy_var_72, in_vslice_dummy_var_73, in_vslice_dummy_var_74, in_vslice_dummy_var_75, in_vslice_dummy_var_76, in_vslice_dummy_var_77, in_vslice_dummy_var_78, in_vslice_dummy_var_79, in_vslice_dummy_var_80, in_vslice_dummy_var_81, in_vslice_dummy_var_82, in_vslice_dummy_var_83, in_vslice_dummy_var_84, in_vslice_dummy_var_85, in_vslice_dummy_var_86, in_vslice_dummy_var_87, in_vslice_dummy_var_88, in_vslice_dummy_var_89, in_vslice_dummy_var_90, in_vslice_dummy_var_91, in_vslice_dummy_var_92, in_vslice_dummy_var_93, in_vslice_dummy_var_94, in_vslice_dummy_var_95, in_vslice_dummy_var_96, in_vslice_dummy_var_97, in_vslice_dummy_var_98, in_vslice_dummy_var_99, in_vslice_dummy_var_100, in_vslice_dummy_var_101, in_vslice_dummy_var_102, in_vslice_dummy_var_103, in_vslice_dummy_var_104, in_vslice_dummy_var_105, in_vslice_dummy_var_106, in_vslice_dummy_var_107, in_vslice_dummy_var_108, in_vslice_dummy_var_109, in_vslice_dummy_var_110, in_vslice_dummy_var_111, in_vslice_dummy_var_112, in_vslice_dummy_var_113, in_vslice_dummy_var_114, in_vslice_dummy_var_115, in_vslice_dummy_var_116, in_vslice_dummy_var_117, in_vslice_dummy_var_118, in_vslice_dummy_var_119, in_vslice_dummy_var_120;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1589} out_$i31 := __VERIFIER_nondet_int();
    call {:si_unique_call 1590} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i31);
    call {:si_unique_call 1591} {:cexpr "tmp___20"} boogie_si_record_i32(out_$i31);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb65_dummy;

  $bb660:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb658:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb554:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb529:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb392:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb372:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb352:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb332:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb41:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb53:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1596} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6361;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} sh_eth_chip_reset(out_$p59);
    goto corral_source_split_6360;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    out_$p59 := $M.37;
    goto corral_source_split_6359;

  $bb52:
    assume out_$i58 == 1;
    goto corral_source_split_6358;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i57, 1);
    goto corral_source_split_6356;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    out_$i57 := $M.54;
    goto corral_source_split_6355;

  $bb50:
    assume out_$i56 == 1;
    goto corral_source_split_6354;

  $bb43:
    assume out_$i53 == 1;
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i52, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i53 := $slt.i32(out_$i52, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_6344:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1592} out_$i52 := __VERIFIER_nondet_int();
    call {:si_unique_call 1593} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i52);
    call {:si_unique_call 1594} {:cexpr "tmp___21"} boogie_si_record_i32(out_$i52);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume out_$i51 == 1;
    goto corral_source_split_6344;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i32(out_$i50, 0);
    goto corral_source_split_6342;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    out_$i50 := $M.54;
    goto corral_source_split_6341;

  $bb38:
    assume out_$i49 == 1;
    goto corral_source_split_6340;

  $bb36:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i31, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb32:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$i48 := $slt.i32(out_$i31, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb24:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$i46 := $slt.i32(out_$i31, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb3:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$i42 := $slt.i32(out_$i31, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i32 := $slt.i32(out_$i31, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb57:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1598} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6366;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} sh_eth_set_rate_gether(out_$p62);
    goto corral_source_split_6365;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    out_$p62 := $M.37;
    goto corral_source_split_6364;

  $bb56:
    assume out_$i61 == 1;
    goto corral_source_split_6363;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i60, 1);
    goto corral_source_split_6348;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    out_$i60 := $M.54;
    goto corral_source_split_6347;

  $bb45:
    assume out_$i54 == 1;
    goto corral_source_split_6346;

  $bb44:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    out_$i54 := $slt.i32(out_$i52, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb60:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1600} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6371;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} sh_eth_set_duplex(out_$p65);
    goto corral_source_split_6370;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    out_$p65 := $M.37;
    goto corral_source_split_6369;

  $bb59:
    assume out_$i64 == 1;
    goto corral_source_split_6368;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i32(out_$i63, 1);
    goto corral_source_split_6352;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    out_$i63 := $M.54;
    goto corral_source_split_6351;

  $bb47:
    assume out_$i55 == 1;
    goto corral_source_split_6350;

  $bb46:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i52, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} ldv_stop();
    goto corral_source_split_6373;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb48:
    assume {:verifier.code 0} true;
    assume !(out_$i55 == 1);
    goto $bb49;

  $bb51:
    assume {:verifier.code 0} true;
    assume !(out_$i56 == 1);
    goto $bb49;

  $bb67:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb81:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1606} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6396;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} sh_mmd_ctrl(out_$p76, in_$i4);
    goto corral_source_split_6395;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    out_$p76 := $M.45;
    goto corral_source_split_6394;

  $bb80:
    assume out_$i75 == 1;
    goto corral_source_split_6393;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i74, 1);
    goto corral_source_split_6391;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    out_$i74 := $M.55;
    goto corral_source_split_6390;

  $bb78:
    assume out_$i73 == 1;
    goto corral_source_split_6389;

  $bb76:
    assume out_$i72 == 1;
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i32(out_$i68, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb69:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$i72 := $slt.i32(out_$i68, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb68:
    assume {:verifier.code 0} true;
    out_$i69 := $slt.i32(out_$i68, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_6375:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1602} out_$i68 := __VERIFIER_nondet_int();
    call {:si_unique_call 1603} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i68);
    call {:si_unique_call 1604} {:cexpr "tmp___22"} boogie_si_record_i32(out_$i68);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb66:
    assume out_$i67 == 1;
    goto corral_source_split_6375;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    out_$i67 := $ne.i32(out_$i66, 0);
    goto corral_source_split_6338;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    out_$i66 := $M.55;
    goto corral_source_split_6337;

  $bb37:
    assume !(out_$i48 == 1);
    goto corral_source_split_6336;

  $bb85:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1608} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6401;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} sh_set_mdio(out_$p79, in_$i2);
    goto corral_source_split_6400;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    out_$p79 := $M.45;
    goto corral_source_split_6399;

  $bb84:
    assume out_$i78 == 1;
    goto corral_source_split_6398;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    out_$i78 := $eq.i32(out_$i77, 1);
    goto corral_source_split_6387;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    out_$i77 := $M.55;
    goto corral_source_split_6386;

  $bb77:
    assume !(out_$i72 == 1);
    goto corral_source_split_6385;

  $bb88:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1610} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6406;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} out_vslice_dummy_var_72 := sh_get_mdio(out_$p82);
    goto corral_source_split_6405;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    out_$p82 := $M.45;
    goto corral_source_split_6404;

  $bb87:
    assume out_$i81 == 1;
    goto corral_source_split_6403;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i80, 1);
    goto corral_source_split_6379;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    out_$i80 := $M.55;
    goto corral_source_split_6378;

  $bb71:
    assume out_$i70 == 1;
    goto corral_source_split_6377;

  $bb70:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    out_$i70 := $slt.i32(out_$i68, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb91:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1612} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6411;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} sh_mdc_ctrl(out_$p86, in_$i3);
    goto corral_source_split_6410;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    out_$p86 := $M.45;
    goto corral_source_split_6409;

  $bb90:
    assume out_$i85 == 1;
    goto corral_source_split_6408;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    out_$i85 := $eq.i32(out_$i84, 1);
    goto corral_source_split_6383;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    out_$i84 := $M.55;
    goto corral_source_split_6382;

  $bb73:
    assume out_$i71 == 1;
    goto corral_source_split_6381;

  $bb72:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i68, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} ldv_stop();
    goto corral_source_split_6413;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb74:
    assume {:verifier.code 0} true;
    assume !(out_$i71 == 1);
    goto $bb75;

  $bb79:
    assume {:verifier.code 0} true;
    assume !(out_$i73 == 1);
    goto $bb75;

  $bb97:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb107:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb109:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $M.58 := out_$i100;
    call {:si_unique_call 1620} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i100);
    goto corral_source_split_6436;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    out_$i100 := $add.i32(out_$i99, 1);
    goto corral_source_split_6435;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    out_$i99 := $M.58;
    goto corral_source_split_6434;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $M.56 := 2;
    call {:si_unique_call 1619} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_6433;

  $bb108:
    assume out_$i98 == 1;
    goto corral_source_split_6432;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i97, 0);
    goto corral_source_split_6430;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    out_$i97 := $M.71;
    goto corral_source_split_6429;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $M.71 := out_$i96;
    call {:si_unique_call 1618} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i96);
    goto corral_source_split_6428;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} out_$i96 := sh_eth_drv_probe(out_$p95);
    goto corral_source_split_6427;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    out_$p95 := $M.38;
    goto corral_source_split_6426;

  $bb106:
    assume out_$i94 == 1;
    goto corral_source_split_6425;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    out_$i94 := $eq.i32(out_$i93, 1);
    goto corral_source_split_6423;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    out_$i93 := $M.56;
    goto corral_source_split_6422;

  $bb104:
    assume out_$i92 == 1;
    goto corral_source_split_6421;

  $bb99:
    assume out_$i90 == 1;
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i89, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb98:
    assume {:verifier.code 0} true;
    out_$i90 := $slt.i32(out_$i89, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_6415:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1614} out_$i89 := __VERIFIER_nondet_int();
    call {:si_unique_call 1615} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i89);
    call {:si_unique_call 1616} {:cexpr "tmp___23"} boogie_si_record_i32(out_$i89);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb96:
    assume out_$i88 == 1;
    goto corral_source_split_6415;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    out_$i88 := $ne.i32(out_$i87, 0);
    goto corral_source_split_6330;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    out_$i87 := $M.56;
    goto corral_source_split_6329;

  $bb34:
    assume out_$i47 == 1;
    goto corral_source_split_6328;

  $bb33:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    out_$i47 := $slt.i32(out_$i31, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb114:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $M.58 := out_$i106;
    call {:si_unique_call 1623} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i106);
    goto corral_source_split_6444;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    out_$i106 := $sub.i32(out_$i105, 1);
    goto corral_source_split_6443;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    out_$i105 := $M.58;
    goto corral_source_split_6442;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 1622} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6441;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} out_vslice_dummy_var_73 := sh_eth_drv_remove(out_$p103);
    goto corral_source_split_6440;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    out_$p103 := $M.38;
    goto corral_source_split_6439;

  $bb113:
    assume out_$i102 == 1;
    goto corral_source_split_6438;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i32(out_$i101, 2);
    goto corral_source_split_6419;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    out_$i101 := $M.56;
    goto corral_source_split_6418;

  $bb101:
    assume out_$i91 == 1;
    goto corral_source_split_6417;

  $bb100:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i32(out_$i89, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} ldv_stop();
    goto corral_source_split_6446;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb102:
    assume {:verifier.code 0} true;
    assume !(out_$i91 == 1);
    goto $bb103;

  $bb105:
    assume {:verifier.code 0} true;
    assume !(out_$i92 == 1);
    goto $bb103;

  $bb120:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} choose_interrupt_1();
    goto corral_source_split_6449;

  $bb119:
    assume out_$i108 == 1;
    goto corral_source_split_6448;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i32(out_$i107, 0);
    goto corral_source_split_6334;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    out_$i107 := $M.57;
    goto corral_source_split_6333;

  $bb35:
    assume !(out_$i47 == 1);
    goto corral_source_split_6332;

  $bb123:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb133:
    assume {:verifier.code 0} true;
    assume !(out_$i116 == 1);
    goto $bb134;

  $bb136:
    assume {:verifier.code 0} true;
    assume !(out_$i118 == 1);
    goto $bb134;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    out_$i118 := $eq.i32(out_$i117, 0);
    goto corral_source_split_6463;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    out_$i117 := $M.58;
    goto corral_source_split_6462;

  $bb132:
    assume out_$i116 == 1;
    goto corral_source_split_6461;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    out_$i116 := $eq.i32(out_$i115, 3);
    goto corral_source_split_6459;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    out_$i115 := $M.59;
    goto corral_source_split_6458;

  $bb130:
    assume out_$i114 == 1;
    goto corral_source_split_6457;

  $bb125:
    assume out_$i112 == 1;
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i32(out_$i111, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb124:
    assume {:verifier.code 0} true;
    out_$i112 := $slt.i32(out_$i111, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  corral_source_split_6451:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1626} out_$i111 := __VERIFIER_nondet_int();
    call {:si_unique_call 1627} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i111);
    call {:si_unique_call 1628} {:cexpr "tmp___24"} boogie_si_record_i32(out_$i111);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb122:
    assume out_$i110 == 1;
    goto corral_source_split_6451;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    out_$i110 := $ne.i32(out_$i109, 0);
    goto corral_source_split_6322;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    out_$i109 := $M.59;
    goto corral_source_split_6321;

  $bb30:
    assume out_$i45 == 1;
    goto corral_source_split_6320;

  $bb26:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$i45 := $slt.i32(out_$i31, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb25:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    out_$i43 := $slt.i32(out_$i31, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb141:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb146:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    out_$i125 := $ne.i32(out_$i124, 0);
    goto corral_source_split_6505;

  $bb144:
    assume {:verifier.code 0} true;
    out_$i124 := $M.72;
    goto corral_source_split_6504;

  $bb143:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} ldv_initialize_ethtool_ops_6();
    goto corral_source_split_6502;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1657} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6501;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} ldv_initialize_sh_eth_cpu_data_11();
    goto corral_source_split_6500;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1655} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6499;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} ldv_dev_pm_ops_3();
    goto corral_source_split_6498;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1653} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6497;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} ldv_initialize_mdiobb_ops_7();
    goto corral_source_split_6496;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1651} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6495;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} ldv_initialize_sh_eth_cpu_data_9();
    goto corral_source_split_6494;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 1649} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_6493;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} ldv_initialize_sh_eth_cpu_data_12();
    goto corral_source_split_6492;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1647} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_6491;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} ldv_initialize_sh_eth_cpu_data_15();
    goto corral_source_split_6490;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1645} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_6489;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} ldv_initialize_sh_eth_cpu_data_14();
    goto corral_source_split_6488;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 1643} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_6487;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} ldv_initialize_sh_eth_cpu_data_8();
    goto corral_source_split_6486;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 1641} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_6485;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} ldv_initialize_sh_eth_cpu_data_16();
    goto corral_source_split_6484;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1639} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_6483;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} ldv_initialize_sh_eth_cpu_data_10();
    goto corral_source_split_6482;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1637} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_6481;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} ldv_initialize_sh_eth_cpu_data_13();
    goto corral_source_split_6480;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1635} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_6479;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $M.59 := 3;
    call {:si_unique_call 1634} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_6478;

  $bb142:
    assume out_$i123 == 1;
    goto corral_source_split_6477;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    out_$i123 := $eq.i32(out_$i122, 0);
    goto corral_source_split_6475;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    out_$i122 := $M.72;
    goto corral_source_split_6474;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $M.72 := out_$i121;
    call {:si_unique_call 1633} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i121);
    goto corral_source_split_6473;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} out_$i121 := sh_eth_driver_init();
    goto corral_source_split_6472;

  $bb140:
    assume out_$i120 == 1;
    goto corral_source_split_6471;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    out_$i120 := $eq.i32(out_$i119, 1);
    goto corral_source_split_6455;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    out_$i119 := $M.59;
    goto corral_source_split_6454;

  $bb127:
    assume out_$i113 == 1;
    goto corral_source_split_6453;

  $bb126:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    out_$i113 := $eq.i32(out_$i111, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} ldv_stop();
    goto corral_source_split_6510;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb128:
    assume {:verifier.code 0} true;
    assume !(out_$i113 == 1);
    goto $bb129;

  $bb131:
    assume {:verifier.code 0} true;
    assume !(out_$i114 == 1);
    goto $bb129;

  $bb153:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb163:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    goto $bb164;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1665} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_6525;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} sh_eth_set_rate_r8a777x(out_$p134);
    goto corral_source_split_6524;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    out_$p134 := $M.48;
    goto corral_source_split_6523;

  $bb162:
    assume out_$i133 == 1;
    goto corral_source_split_6522;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    out_$i133 := $eq.i32(out_$i132, 1);
    goto corral_source_split_6520;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    out_$i132 := $M.60;
    goto corral_source_split_6519;

  $bb160:
    assume out_$i131 == 1;
    goto corral_source_split_6518;

  $bb155:
    assume out_$i129 == 1;
    assume {:verifier.code 0} true;
    out_$i131 := $eq.i32(out_$i128, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb154:
    assume {:verifier.code 0} true;
    out_$i129 := $slt.i32(out_$i128, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_6512:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1661} out_$i128 := __VERIFIER_nondet_int();
    call {:si_unique_call 1662} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i128);
    call {:si_unique_call 1663} {:cexpr "tmp___25"} boogie_si_record_i32(out_$i128);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb152:
    assume out_$i127 == 1;
    goto corral_source_split_6512;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    out_$i127 := $ne.i32(out_$i126, 0);
    goto corral_source_split_6326;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    out_$i126 := $M.60;
    goto corral_source_split_6325;

  $bb31:
    assume !(out_$i45 == 1);
    goto corral_source_split_6324;

  $bb167:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    goto $bb168;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1667} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_6530;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} sh_eth_set_duplex(out_$p137);
    goto corral_source_split_6529;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    out_$p137 := $M.48;
    goto corral_source_split_6528;

  $bb166:
    assume out_$i136 == 1;
    goto corral_source_split_6527;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    out_$i136 := $eq.i32(out_$i135, 1);
    goto corral_source_split_6516;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    out_$i135 := $M.60;
    goto corral_source_split_6515;

  $bb157:
    assume out_$i130 == 1;
    goto corral_source_split_6514;

  $bb156:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i128, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} ldv_stop();
    goto corral_source_split_6532;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb158:
    assume {:verifier.code 0} true;
    assume !(out_$i130 == 1);
    goto $bb159;

  $bb161:
    assume {:verifier.code 0} true;
    assume !(out_$i131 == 1);
    goto $bb159;

  $bb173:
    assume !(out_$i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb183:
    assume !(out_$i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1673} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_6547;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} sh_eth_set_rate_sh7757(out_$p146);
    goto corral_source_split_6546;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    out_$p146 := $M.36;
    goto corral_source_split_6545;

  $bb182:
    assume out_$i145 == 1;
    goto corral_source_split_6544;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    out_$i145 := $eq.i32(out_$i144, 1);
    goto corral_source_split_6542;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    out_$i144 := $M.61;
    goto corral_source_split_6541;

  $bb180:
    assume out_$i143 == 1;
    goto corral_source_split_6540;

  $bb175:
    assume out_$i141 == 1;
    assume {:verifier.code 0} true;
    out_$i143 := $eq.i32(out_$i140, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  $bb174:
    assume {:verifier.code 0} true;
    out_$i141 := $slt.i32(out_$i140, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  corral_source_split_6534:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1669} out_$i140 := __VERIFIER_nondet_int();
    call {:si_unique_call 1670} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i140);
    call {:si_unique_call 1671} {:cexpr "tmp___26"} boogie_si_record_i32(out_$i140);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb172:
    assume out_$i139 == 1;
    goto corral_source_split_6534;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    out_$i139 := $ne.i32(out_$i138, 0);
    goto corral_source_split_6314;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    out_$i138 := $M.61;
    goto corral_source_split_6313;

  $bb28:
    assume out_$i44 == 1;
    goto corral_source_split_6312;

  $bb27:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    out_$i44 := $slt.i32(out_$i31, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb187:
    assume !(out_$i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    goto $bb188;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1675} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_6552;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} sh_eth_set_duplex(out_$p149);
    goto corral_source_split_6551;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    out_$p149 := $M.36;
    goto corral_source_split_6550;

  $bb186:
    assume out_$i148 == 1;
    goto corral_source_split_6549;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    out_$i148 := $eq.i32(out_$i147, 1);
    goto corral_source_split_6538;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    out_$i147 := $M.61;
    goto corral_source_split_6537;

  $bb177:
    assume out_$i142 == 1;
    goto corral_source_split_6536;

  $bb176:
    assume !(out_$i141 == 1);
    assume {:verifier.code 0} true;
    out_$i142 := $eq.i32(out_$i140, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} ldv_stop();
    goto corral_source_split_6554;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb178:
    assume {:verifier.code 0} true;
    assume !(out_$i142 == 1);
    goto $bb179;

  $bb181:
    assume {:verifier.code 0} true;
    assume !(out_$i143 == 1);
    goto $bb179;

  $bb193:
    assume !(out_$i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb221:
    assume !(out_$i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    goto $bb222;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1681} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6605;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} out_vslice_dummy_var_74 := sh_eth_get_sset_count(out_$p167, in_$i5);
    goto corral_source_split_6604;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    out_$p167 := $M.42;
    goto corral_source_split_6603;

  $bb220:
    assume out_$i166 == 1;
    goto corral_source_split_6602;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    out_$i166 := $eq.i32(out_$i165, 1);
    goto corral_source_split_6600;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    out_$i165 := $M.62;
    goto corral_source_split_6599;

  $bb218:
    assume out_$i164 == 1;
    goto corral_source_split_6598;

  $bb216:
    assume out_$i163 == 1;
    assume {:verifier.code 0} true;
    out_$i164 := $eq.i32(out_$i152, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  $bb210:
    assume out_$i160 == 1;
    assume {:verifier.code 0} true;
    out_$i163 := $slt.i32(out_$i152, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  $bb195:
    assume out_$i153 == 1;
    assume {:verifier.code 0} true;
    out_$i160 := $slt.i32(out_$i152, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  $bb194:
    assume {:verifier.code 0} true;
    out_$i153 := $slt.i32(out_$i152, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  corral_source_split_6556:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1677} out_$i152 := __VERIFIER_nondet_int();
    call {:si_unique_call 1678} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i152);
    call {:si_unique_call 1679} {:cexpr "tmp___27"} boogie_si_record_i32(out_$i152);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb192:
    assume out_$i151 == 1;
    goto corral_source_split_6556;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    out_$i151 := $ne.i32(out_$i150, 0);
    goto corral_source_split_6318;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    out_$i150 := $M.62;
    goto corral_source_split_6317;

  $bb29:
    assume !(out_$i44 == 1);
    goto corral_source_split_6316;

  $bb225:
    assume !(out_$i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    goto $bb226;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1683} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6611;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} out_vslice_dummy_var_75 := sh_eth_get_settings(out_$p171, out_$p172);
    goto corral_source_split_6610;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    out_$p172 := $M.40;
    goto corral_source_split_6609;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    out_$p171 := $M.42;
    goto corral_source_split_6608;

  $bb224:
    assume out_$i170 == 1;
    goto corral_source_split_6607;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    out_$i170 := $eq.i32(out_$i169, 1);
    goto corral_source_split_6596;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    out_$i169 := $M.62;
    goto corral_source_split_6595;

  $bb217:
    assume !(out_$i163 == 1);
    goto corral_source_split_6594;

  $bb228:
    assume !(out_$i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    goto $bb229;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1685} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6616;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} sh_eth_set_msglevel(out_$p176, in_$i6);
    goto corral_source_split_6615;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    out_$p176 := $M.42;
    goto corral_source_split_6614;

  $bb227:
    assume out_$i175 == 1;
    goto corral_source_split_6613;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    out_$i175 := $eq.i32(out_$i174, 1);
    goto corral_source_split_6584;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    out_$i174 := $M.62;
    goto corral_source_split_6583;

  $bb212:
    assume out_$i161 == 1;
    goto corral_source_split_6582;

  $bb211:
    assume !(out_$i160 == 1);
    assume {:verifier.code 0} true;
    out_$i161 := $slt.i32(out_$i152, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  $bb231:
    assume !(out_$i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1687} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6622;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} out_vslice_dummy_var_76 := sh_eth_set_settings(out_$p179, out_$p180);
    goto corral_source_split_6621;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    out_$p180 := $M.40;
    goto corral_source_split_6620;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    out_$p179 := $M.42;
    goto corral_source_split_6619;

  $bb230:
    assume out_$i178 == 1;
    goto corral_source_split_6618;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    out_$i178 := $eq.i32(out_$i177, 1);
    goto corral_source_split_6588;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    out_$i177 := $M.62;
    goto corral_source_split_6587;

  $bb214:
    assume out_$i162 == 1;
    goto corral_source_split_6586;

  $bb213:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    out_$i162 := $slt.i32(out_$i152, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb234:
    assume !(out_$i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    goto $bb235;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1689} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6627;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} sh_eth_get_ethtool_stats(out_$p184, in_$p12, in_$p10);
    goto corral_source_split_6626;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    out_$p184 := $M.42;
    goto corral_source_split_6625;

  $bb233:
    assume out_$i183 == 1;
    goto corral_source_split_6624;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    out_$i183 := $eq.i32(out_$i182, 1);
    goto corral_source_split_6592;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    out_$i182 := $M.62;
    goto corral_source_split_6591;

  $bb215:
    assume !(out_$i162 == 1);
    goto corral_source_split_6590;

  $bb237:
    assume !(out_$i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    goto $bb238;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1691} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6632;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} sh_eth_get_strings(out_$p187, in_$i7, in_$p8);
    goto corral_source_split_6631;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    out_$p187 := $M.42;
    goto corral_source_split_6630;

  $bb236:
    assume out_$i186 == 1;
    goto corral_source_split_6629;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    out_$i186 := $eq.i32(out_$i185, 1);
    goto corral_source_split_6572;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    out_$i185 := $M.62;
    goto corral_source_split_6571;

  $bb206:
    assume out_$i158 == 1;
    goto corral_source_split_6570;

  $bb197:
    assume out_$i154 == 1;
    assume {:verifier.code 0} true;
    out_$i158 := $slt.i32(out_$i152, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb196:
    assume !(out_$i153 == 1);
    assume {:verifier.code 0} true;
    out_$i154 := $slt.i32(out_$i152, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  $bb240:
    assume !(out_$i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    goto $bb241;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1693} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6637;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} out_vslice_dummy_var_77 := sh_eth_nway_reset(out_$p190);
    goto corral_source_split_6636;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    out_$p190 := $M.42;
    goto corral_source_split_6635;

  $bb239:
    assume out_$i189 == 1;
    goto corral_source_split_6634;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    out_$i189 := $eq.i32(out_$i188, 1);
    goto corral_source_split_6576;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    out_$i188 := $M.62;
    goto corral_source_split_6575;

  $bb208:
    assume out_$i159 == 1;
    goto corral_source_split_6574;

  $bb207:
    assume !(out_$i158 == 1);
    assume {:verifier.code 0} true;
    out_$i159 := $slt.i32(out_$i152, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  $bb243:
    assume !(out_$i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1695} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6643;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} sh_eth_get_ringparam(out_$p194, out_$p195);
    goto corral_source_split_6642;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    out_$p195 := $M.41;
    goto corral_source_split_6641;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    out_$p194 := $M.42;
    goto corral_source_split_6640;

  $bb242:
    assume out_$i193 == 1;
    goto corral_source_split_6639;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    out_$i193 := $eq.i32(out_$i192, 1);
    goto corral_source_split_6580;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    out_$i192 := $M.62;
    goto corral_source_split_6579;

  $bb209:
    assume !(out_$i159 == 1);
    goto corral_source_split_6578;

  $bb246:
    assume !(out_$i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1697} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6648;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} out_vslice_dummy_var_78 := sh_eth_get_msglevel(out_$p198);
    goto corral_source_split_6647;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    out_$p198 := $M.42;
    goto corral_source_split_6646;

  $bb245:
    assume out_$i197 == 1;
    goto corral_source_split_6645;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    out_$i197 := $eq.i32(out_$i196, 1);
    goto corral_source_split_6560;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    out_$i196 := $M.62;
    goto corral_source_split_6559;

  $bb199:
    assume out_$i155 == 1;
    goto corral_source_split_6558;

  $bb198:
    assume !(out_$i154 == 1);
    assume {:verifier.code 0} true;
    out_$i155 := $slt.i32(out_$i152, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb249:
    assume !(out_$i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    goto $bb250;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1699} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6654;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} out_vslice_dummy_var_79 := sh_eth_set_ringparam(out_$p202, out_$p203);
    goto corral_source_split_6653;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    out_$p203 := $M.41;
    goto corral_source_split_6652;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    out_$p202 := $M.42;
    goto corral_source_split_6651;

  $bb248:
    assume out_$i201 == 1;
    goto corral_source_split_6650;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    out_$i201 := $eq.i32(out_$i200, 1);
    goto corral_source_split_6564;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    out_$i200 := $M.62;
    goto corral_source_split_6563;

  $bb201:
    assume out_$i156 == 1;
    goto corral_source_split_6562;

  $bb200:
    assume !(out_$i155 == 1);
    assume {:verifier.code 0} true;
    out_$i156 := $slt.i32(out_$i152, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb252:
    assume !(out_$i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    goto $bb253;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1701} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6659;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} out_vslice_dummy_var_80 := ethtool_op_get_link(out_$p207);
    goto corral_source_split_6658;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    out_$p207 := $M.42;
    goto corral_source_split_6657;

  $bb251:
    assume out_$i206 == 1;
    goto corral_source_split_6656;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    out_$i206 := $eq.i32(out_$i205, 1);
    goto corral_source_split_6568;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    out_$i205 := $M.62;
    goto corral_source_split_6567;

  $bb203:
    assume out_$i157 == 1;
    goto corral_source_split_6566;

  $bb202:
    assume !(out_$i156 == 1);
    assume {:verifier.code 0} true;
    out_$i157 := $eq.i32(out_$i152, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} ldv_stop();
    goto corral_source_split_6661;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb204:
    assume {:verifier.code 0} true;
    assume !(out_$i157 == 1);
    goto $bb205;

  $bb219:
    assume {:verifier.code 0} true;
    assume !(out_$i164 == 1);
    goto $bb205;

  $bb258:
    assume !(out_$i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb272:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb268:
    assume !(out_$i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb270:
    assume !(out_$i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    goto $bb271;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $M.58 := out_$i222;
    call {:si_unique_call 1709} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i222);
    goto corral_source_split_6684;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    out_$i222 := $sub.i32(out_$i221, 1);
    goto corral_source_split_6683;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    out_$i221 := $M.58;
    goto corral_source_split_6682;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $M.63 := 1;
    call {:si_unique_call 1708} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6681;

  $bb269:
    assume out_$i220 == 1;
    goto corral_source_split_6680;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    out_$i220 := $eq.i32(out_$i219, 0);
    goto corral_source_split_6678;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    out_$i219 := $M.73;
    goto corral_source_split_6677;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $M.73 := out_$i218;
    call {:si_unique_call 1707} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i218);
    goto corral_source_split_6676;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} out_$i218 := sh_eth_runtime_nop(out_$p217);
    goto corral_source_split_6675;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    out_$p217 := $M.50;
    goto corral_source_split_6674;

  $bb267:
    assume out_$i216 == 1;
    goto corral_source_split_6673;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    out_$i216 := $eq.i32(out_$i215, 2);
    goto corral_source_split_6671;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    out_$i215 := $M.63;
    goto corral_source_split_6670;

  $bb265:
    assume out_$i214 == 1;
    goto corral_source_split_6669;

  $bb260:
    assume out_$i212 == 1;
    assume {:verifier.code 0} true;
    out_$i214 := $eq.i32(out_$i211, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb265, $bb266;

  $bb259:
    assume {:verifier.code 0} true;
    out_$i212 := $slt.i32(out_$i211, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  corral_source_split_6663:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1703} out_$i211 := __VERIFIER_nondet_int();
    call {:si_unique_call 1704} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i211);
    call {:si_unique_call 1705} {:cexpr "tmp___28"} boogie_si_record_i32(out_$i211);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb257:
    assume out_$i210 == 1;
    goto corral_source_split_6663;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    out_$i210 := $ne.i32(out_$i209, 0);
    goto corral_source_split_6306;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    out_$i209 := $M.63;
    goto corral_source_split_6305;

  $bb22:
    assume out_$i41 == 1;
    goto corral_source_split_6304;

  $bb18:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i41 := $slt.i32(out_$i31, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb5:
    assume out_$i33 == 1;
    assume {:verifier.code 0} true;
    out_$i39 := $slt.i32(out_$i31, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb4:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    out_$i33 := $slt.i32(out_$i31, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb275:
    assume !(out_$i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb278:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb277:
    assume !(out_$i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    goto $bb278;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $M.58 := out_$i230;
    call {:si_unique_call 1713} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i230);
    goto corral_source_split_6697;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    out_$i230 := $add.i32(out_$i229, 1);
    goto corral_source_split_6696;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    out_$i229 := $M.58;
    goto corral_source_split_6695;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $M.63 := 2;
    call {:si_unique_call 1712} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6694;

  $bb276:
    assume out_$i228 == 1;
    goto corral_source_split_6693;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb276, $bb277;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    out_$i228 := $eq.i32(out_$i227, 0);
    goto corral_source_split_6691;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    out_$i227 := $M.74;
    goto corral_source_split_6690;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $M.74 := out_$i226;
    call {:si_unique_call 1711} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i226);
    goto corral_source_split_6689;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} out_$i226 := sh_eth_runtime_nop(out_$p225);
    goto corral_source_split_6688;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    out_$p225 := $M.50;
    goto corral_source_split_6687;

  $bb274:
    assume out_$i224 == 1;
    goto corral_source_split_6686;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    out_$i224 := $eq.i32(out_$i223, 1);
    goto corral_source_split_6667;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    out_$i223 := $M.63;
    goto corral_source_split_6666;

  $bb262:
    assume out_$i213 == 1;
    goto corral_source_split_6665;

  $bb261:
    assume !(out_$i212 == 1);
    assume {:verifier.code 0} true;
    out_$i213 := $eq.i32(out_$i211, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262, $bb263;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} ldv_stop();
    goto corral_source_split_6699;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb263:
    assume {:verifier.code 0} true;
    assume !(out_$i213 == 1);
    goto $bb264;

  $bb266:
    assume {:verifier.code 0} true;
    assume !(out_$i214 == 1);
    goto $bb264;

  $bb284:
    assume !(out_$i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb298:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb306:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb297:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb296:
    assume !(out_$i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    goto $bb297;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 1719} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_6718;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} sh_eth_chip_reset_r8a7740(out_$p240);
    goto corral_source_split_6717;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    out_$p240 := $M.44;
    goto corral_source_split_6716;

  $bb295:
    assume out_$i239 == 1;
    goto corral_source_split_6715;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    out_$i239 := $eq.i32(out_$i238, 1);
    goto corral_source_split_6713;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    out_$i238 := $M.64;
    goto corral_source_split_6712;

  $bb293:
    assume out_$i237 == 1;
    goto corral_source_split_6711;

  $bb286:
    assume out_$i234 == 1;
    assume {:verifier.code 0} true;
    out_$i237 := $eq.i32(out_$i233, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  $bb285:
    assume {:verifier.code 0} true;
    out_$i234 := $slt.i32(out_$i233, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb286, $bb287;

  corral_source_split_6701:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1715} out_$i233 := __VERIFIER_nondet_int();
    call {:si_unique_call 1716} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i233);
    call {:si_unique_call 1717} {:cexpr "tmp___29"} boogie_si_record_i32(out_$i233);
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb283:
    assume out_$i232 == 1;
    goto corral_source_split_6701;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    out_$i232 := $ne.i32(out_$i231, 0);
    goto corral_source_split_6310;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    out_$i231 := $M.64;
    goto corral_source_split_6309;

  $bb23:
    assume !(out_$i41 == 1);
    goto corral_source_split_6308;

  $bb300:
    assume !(out_$i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    goto $bb301;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 1721} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_6723;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} sh_eth_set_rate_gether(out_$p243);
    goto corral_source_split_6722;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    out_$p243 := $M.44;
    goto corral_source_split_6721;

  $bb299:
    assume out_$i242 == 1;
    goto corral_source_split_6720;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    out_$i242 := $eq.i32(out_$i241, 1);
    goto corral_source_split_6705;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    out_$i241 := $M.64;
    goto corral_source_split_6704;

  $bb288:
    assume out_$i235 == 1;
    goto corral_source_split_6703;

  $bb287:
    assume !(out_$i234 == 1);
    assume {:verifier.code 0} true;
    out_$i235 := $slt.i32(out_$i233, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb288, $bb289;

  $bb303:
    assume !(out_$i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    goto $bb304;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 1723} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_6728;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} sh_eth_set_duplex(out_$p246);
    goto corral_source_split_6727;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    out_$p246 := $M.44;
    goto corral_source_split_6726;

  $bb302:
    assume out_$i245 == 1;
    goto corral_source_split_6725;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    out_$i245 := $eq.i32(out_$i244, 1);
    goto corral_source_split_6709;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    out_$i244 := $M.64;
    goto corral_source_split_6708;

  $bb290:
    assume out_$i236 == 1;
    goto corral_source_split_6707;

  $bb289:
    assume !(out_$i235 == 1);
    assume {:verifier.code 0} true;
    out_$i236 := $eq.i32(out_$i233, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} ldv_stop();
    goto corral_source_split_6730;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb291:
    assume {:verifier.code 0} true;
    assume !(out_$i236 == 1);
    goto $bb292;

  $bb294:
    assume {:verifier.code 0} true;
    assume !(out_$i237 == 1);
    goto $bb292;

  $bb309:
    assume !(out_$i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb323:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb331:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb329:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb326:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb322:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb321:
    assume !(out_$i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb322;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    goto $bb322;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1729} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_6749;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} sh_eth_chip_reset_giga(out_$p256);
    goto corral_source_split_6748;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    out_$p256 := $M.49;
    goto corral_source_split_6747;

  $bb320:
    assume out_$i255 == 1;
    goto corral_source_split_6746;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    out_$i255 := $eq.i32(out_$i254, 1);
    goto corral_source_split_6744;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    out_$i254 := $M.65;
    goto corral_source_split_6743;

  $bb318:
    assume out_$i253 == 1;
    goto corral_source_split_6742;

  $bb311:
    assume out_$i250 == 1;
    assume {:verifier.code 0} true;
    out_$i253 := $eq.i32(out_$i249, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb318, $bb319;

  $bb310:
    assume {:verifier.code 0} true;
    out_$i250 := $slt.i32(out_$i249, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  corral_source_split_6732:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1725} out_$i249 := __VERIFIER_nondet_int();
    call {:si_unique_call 1726} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i249);
    call {:si_unique_call 1727} {:cexpr "tmp___30"} boogie_si_record_i32(out_$i249);
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb308:
    assume out_$i248 == 1;
    goto corral_source_split_6732;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    out_$i248 := $ne.i32(out_$i247, 0);
    goto corral_source_split_6298;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    out_$i247 := $M.65;
    goto corral_source_split_6297;

  $bb20:
    assume out_$i40 == 1;
    goto corral_source_split_6296;

  $bb19:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i32(out_$i31, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb325:
    assume !(out_$i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb326;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    goto $bb326;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1731} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_6754;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} sh_eth_set_rate_giga(out_$p259);
    goto corral_source_split_6753;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    out_$p259 := $M.49;
    goto corral_source_split_6752;

  $bb324:
    assume out_$i258 == 1;
    goto corral_source_split_6751;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb324, $bb325;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    out_$i258 := $eq.i32(out_$i257, 1);
    goto corral_source_split_6736;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    out_$i257 := $M.65;
    goto corral_source_split_6735;

  $bb313:
    assume out_$i251 == 1;
    goto corral_source_split_6734;

  $bb312:
    assume !(out_$i250 == 1);
    assume {:verifier.code 0} true;
    out_$i251 := $slt.i32(out_$i249, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  $bb328:
    assume !(out_$i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb329;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    goto $bb329;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1733} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_6759;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} sh_eth_set_duplex(out_$p262);
    goto corral_source_split_6758;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    out_$p262 := $M.49;
    goto corral_source_split_6757;

  $bb327:
    assume out_$i261 == 1;
    goto corral_source_split_6756;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb327, $bb328;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    out_$i261 := $eq.i32(out_$i260, 1);
    goto corral_source_split_6740;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    out_$i260 := $M.65;
    goto corral_source_split_6739;

  $bb315:
    assume out_$i252 == 1;
    goto corral_source_split_6738;

  $bb314:
    assume !(out_$i251 == 1);
    assume {:verifier.code 0} true;
    out_$i252 := $eq.i32(out_$i249, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb315, $bb316;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} ldv_stop();
    goto corral_source_split_6761;

  $bb317:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb316:
    assume {:verifier.code 0} true;
    assume !(out_$i252 == 1);
    goto $bb317;

  $bb319:
    assume {:verifier.code 0} true;
    assume !(out_$i253 == 1);
    goto $bb317;

  $bb334:
    assume !(out_$i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb346:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb351:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb349:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb345:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb344:
    assume !(out_$i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb345;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    goto $bb345;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 1739} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_6776;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} sh_eth_set_rate_sh7724(out_$p271);
    goto corral_source_split_6775;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    out_$p271 := $M.51;
    goto corral_source_split_6774;

  $bb343:
    assume out_$i270 == 1;
    goto corral_source_split_6773;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb343, $bb344;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    out_$i270 := $eq.i32(out_$i269, 1);
    goto corral_source_split_6771;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    out_$i269 := $M.66;
    goto corral_source_split_6770;

  $bb341:
    assume out_$i268 == 1;
    goto corral_source_split_6769;

  $bb336:
    assume out_$i266 == 1;
    assume {:verifier.code 0} true;
    out_$i268 := $eq.i32(out_$i265, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  $bb335:
    assume {:verifier.code 0} true;
    out_$i266 := $slt.i32(out_$i265, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb336, $bb337;

  corral_source_split_6763:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1735} out_$i265 := __VERIFIER_nondet_int();
    call {:si_unique_call 1736} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i265);
    call {:si_unique_call 1737} {:cexpr "tmp___31"} boogie_si_record_i32(out_$i265);
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb333:
    assume out_$i264 == 1;
    goto corral_source_split_6763;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb333, $bb334;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    out_$i264 := $ne.i32(out_$i263, 0);
    goto corral_source_split_6302;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    out_$i263 := $M.66;
    goto corral_source_split_6301;

  $bb21:
    assume !(out_$i40 == 1);
    goto corral_source_split_6300;

  $bb348:
    assume !(out_$i273 == 1);
    assume {:verifier.code 0} true;
    goto $bb349;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    goto $bb349;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 1741} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_6781;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} sh_eth_set_duplex(out_$p274);
    goto corral_source_split_6780;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    out_$p274 := $M.51;
    goto corral_source_split_6779;

  $bb347:
    assume out_$i273 == 1;
    goto corral_source_split_6778;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb347, $bb348;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    out_$i273 := $eq.i32(out_$i272, 1);
    goto corral_source_split_6767;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    out_$i272 := $M.66;
    goto corral_source_split_6766;

  $bb338:
    assume out_$i267 == 1;
    goto corral_source_split_6765;

  $bb337:
    assume !(out_$i266 == 1);
    assume {:verifier.code 0} true;
    out_$i267 := $eq.i32(out_$i265, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} ldv_stop();
    goto corral_source_split_6783;

  $bb340:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb339:
    assume {:verifier.code 0} true;
    assume !(out_$i267 == 1);
    goto $bb340;

  $bb342:
    assume {:verifier.code 0} true;
    assume !(out_$i268 == 1);
    goto $bb340;

  $bb354:
    assume !(out_$i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb366:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb371:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb365:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb364:
    assume !(out_$i282 == 1);
    assume {:verifier.code 0} true;
    goto $bb365;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    goto $bb365;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1747} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_6798;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} sh_eth_set_rate_r8a777x(out_$p283);
    goto corral_source_split_6797;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    out_$p283 := $M.47;
    goto corral_source_split_6796;

  $bb363:
    assume out_$i282 == 1;
    goto corral_source_split_6795;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb363, $bb364;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    out_$i282 := $eq.i32(out_$i281, 1);
    goto corral_source_split_6793;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    out_$i281 := $M.67;
    goto corral_source_split_6792;

  $bb361:
    assume out_$i280 == 1;
    goto corral_source_split_6791;

  $bb356:
    assume out_$i278 == 1;
    assume {:verifier.code 0} true;
    out_$i280 := $eq.i32(out_$i277, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb361, $bb362;

  $bb355:
    assume {:verifier.code 0} true;
    out_$i278 := $slt.i32(out_$i277, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  corral_source_split_6785:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1743} out_$i277 := __VERIFIER_nondet_int();
    call {:si_unique_call 1744} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i277);
    call {:si_unique_call 1745} {:cexpr "tmp___32"} boogie_si_record_i32(out_$i277);
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb353:
    assume out_$i276 == 1;
    goto corral_source_split_6785;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb353, $bb354;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    out_$i276 := $ne.i32(out_$i275, 0);
    goto corral_source_split_6290;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    out_$i275 := $M.67;
    goto corral_source_split_6289;

  $bb16:
    assume out_$i38 == 1;
    goto corral_source_split_6288;

  $bb7:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i38 := $slt.i32(out_$i31, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb6:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i32(out_$i31, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb368:
    assume !(out_$i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb369;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    goto $bb369;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1749} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_6803;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} sh_eth_set_duplex(out_$p286);
    goto corral_source_split_6802;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    out_$p286 := $M.47;
    goto corral_source_split_6801;

  $bb367:
    assume out_$i285 == 1;
    goto corral_source_split_6800;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb367, $bb368;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    out_$i285 := $eq.i32(out_$i284, 1);
    goto corral_source_split_6789;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    out_$i284 := $M.67;
    goto corral_source_split_6788;

  $bb358:
    assume out_$i279 == 1;
    goto corral_source_split_6787;

  $bb357:
    assume !(out_$i278 == 1);
    assume {:verifier.code 0} true;
    out_$i279 := $eq.i32(out_$i277, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb358, $bb359;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} ldv_stop();
    goto corral_source_split_6805;

  $bb360:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb359:
    assume {:verifier.code 0} true;
    assume !(out_$i279 == 1);
    goto $bb360;

  $bb362:
    assume {:verifier.code 0} true;
    assume !(out_$i280 == 1);
    goto $bb360;

  $bb374:
    assume !(out_$i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb386:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb391:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb389:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb385:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb384:
    assume !(out_$i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb385;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    goto $bb385;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 1755} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_6820;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} sh_eth_chip_reset(out_$p295);
    goto corral_source_split_6819;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    out_$p295 := $M.46;
    goto corral_source_split_6818;

  $bb383:
    assume out_$i294 == 1;
    goto corral_source_split_6817;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb383, $bb384;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    out_$i294 := $eq.i32(out_$i293, 1);
    goto corral_source_split_6815;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    out_$i293 := $M.68;
    goto corral_source_split_6814;

  $bb381:
    assume out_$i292 == 1;
    goto corral_source_split_6813;

  $bb376:
    assume out_$i290 == 1;
    assume {:verifier.code 0} true;
    out_$i292 := $eq.i32(out_$i289, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb381, $bb382;

  $bb375:
    assume {:verifier.code 0} true;
    out_$i290 := $slt.i32(out_$i289, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb376, $bb377;

  corral_source_split_6807:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1751} out_$i289 := __VERIFIER_nondet_int();
    call {:si_unique_call 1752} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i289);
    call {:si_unique_call 1753} {:cexpr "tmp___33"} boogie_si_record_i32(out_$i289);
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb373:
    assume out_$i288 == 1;
    goto corral_source_split_6807;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb373, $bb374;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    out_$i288 := $ne.i32(out_$i287, 0);
    goto corral_source_split_6294;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    out_$i287 := $M.68;
    goto corral_source_split_6293;

  $bb17:
    assume !(out_$i38 == 1);
    goto corral_source_split_6292;

  $bb388:
    assume !(out_$i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb389;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    goto $bb389;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 1757} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_6825;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} sh_eth_set_duplex(out_$p298);
    goto corral_source_split_6824;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    out_$p298 := $M.46;
    goto corral_source_split_6823;

  $bb387:
    assume out_$i297 == 1;
    goto corral_source_split_6822;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb387, $bb388;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    out_$i297 := $eq.i32(out_$i296, 1);
    goto corral_source_split_6811;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    out_$i296 := $M.68;
    goto corral_source_split_6810;

  $bb378:
    assume out_$i291 == 1;
    goto corral_source_split_6809;

  $bb377:
    assume !(out_$i290 == 1);
    assume {:verifier.code 0} true;
    out_$i291 := $eq.i32(out_$i289, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb378, $bb379;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} ldv_stop();
    goto corral_source_split_6827;

  $bb380:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb379:
    assume {:verifier.code 0} true;
    assume !(out_$i291 == 1);
    goto $bb380;

  $bb382:
    assume {:verifier.code 0} true;
    assume !(out_$i292 == 1);
    goto $bb380;

  $bb394:
    assume !(out_$i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb529;

  $bb430:
    assume {:verifier.code 0} true;
    goto $bb529;

  $bb528:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb526:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb520:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb517:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb508:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb499:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb496:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb490:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb484:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb475:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb466:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb457:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb448:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb439:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb429:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb428:
    assume !(out_$i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb429;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    goto $bb429;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $M.21 := 2;
    call {:si_unique_call 1763} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6890;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} out_vslice_dummy_var_81 := sh_eth_close(out_$p319);
    goto corral_source_split_6889;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    out_$p319 := $M.26;
    goto corral_source_split_6888;

  $bb427:
    assume out_$i318 == 1;
    goto corral_source_split_6887;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb427, $bb428;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    out_$i318 := $eq.i32(out_$i317, 3);
    goto corral_source_split_6885;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    out_$i317 := $M.21;
    goto corral_source_split_6884;

  $bb425:
    assume out_$i316 == 1;
    goto corral_source_split_6883;

  $bb421:
    assume out_$i314 == 1;
    assume {:verifier.code 0} true;
    out_$i316 := $eq.i32(out_$i301, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb425, $bb426;

  $bb413:
    assume out_$i310 == 1;
    assume {:verifier.code 0} true;
    out_$i314 := $slt.i32(out_$i301, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb421, $bb422;

  $bb396:
    assume out_$i302 == 1;
    assume {:verifier.code 0} true;
    out_$i310 := $slt.i32(out_$i301, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb413, $bb414;

  $bb395:
    assume {:verifier.code 0} true;
    out_$i302 := $slt.i32(out_$i301, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb396, $bb397;

  corral_source_split_6829:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1759} out_$i301 := __VERIFIER_nondet_int();
    call {:si_unique_call 1760} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i301);
    call {:si_unique_call 1761} {:cexpr "tmp___34"} boogie_si_record_i32(out_$i301);
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb393:
    assume out_$i300 == 1;
    goto corral_source_split_6829;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb393, $bb394;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    out_$i300 := $ne.i32(out_$i299, 0);
    goto corral_source_split_6278;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    out_$i299 := $M.21;
    goto corral_source_split_6277;

  $bb9:
    assume out_$i35 == 1;
    goto corral_source_split_6276;

  $bb8:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    out_$i35 := $slt.i32(out_$i31, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb438:
    assume !(out_$i328 == 1);
    assume {:verifier.code 0} true;
    goto $bb439;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    goto $bb439;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $M.21 := 2;
    call {:si_unique_call 1769} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6911;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} sh_eth_set_multicast_list(out_$p329);
    goto corral_source_split_6910;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    out_$p329 := $M.26;
    goto corral_source_split_6909;

  $bb437:
    assume out_$i328 == 1;
    goto corral_source_split_6908;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb437, $bb438;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    out_$i328 := $eq.i32(out_$i327, 2);
    goto corral_source_split_6906;

  $bb436:
    assume {:verifier.code 0} true;
    out_$i327 := $M.21;
    goto corral_source_split_6905;

  $bb435:
    assume !(out_$i325 == 1);
    assume {:verifier.code 0} true;
    goto $bb436;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    goto $bb436;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $M.21 := 3;
    call {:si_unique_call 1767} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6903;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} sh_eth_set_multicast_list(out_$p326);
    goto corral_source_split_6902;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    out_$p326 := $M.26;
    goto corral_source_split_6901;

  $bb434:
    assume out_$i325 == 1;
    goto corral_source_split_6900;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb434, $bb435;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    out_$i325 := $eq.i32(out_$i324, 3);
    goto corral_source_split_6898;

  $bb433:
    assume {:verifier.code 0} true;
    out_$i324 := $M.21;
    goto corral_source_split_6897;

  $bb432:
    assume !(out_$i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb433;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    goto $bb433;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 1765} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6895;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} sh_eth_set_multicast_list(out_$p323);
    goto corral_source_split_6894;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    out_$p323 := $M.26;
    goto corral_source_split_6893;

  $bb431:
    assume out_$i322 == 1;
    goto corral_source_split_6892;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb431, $bb432;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    out_$i322 := $eq.i32(out_$i321, 1);
    goto corral_source_split_6877;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    out_$i321 := $M.21;
    goto corral_source_split_6876;

  $bb423:
    assume out_$i315 == 1;
    goto corral_source_split_6875;

  $bb422:
    assume !(out_$i314 == 1);
    assume {:verifier.code 0} true;
    out_$i315 := $slt.i32(out_$i301, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb423, $bb424;

  $bb447:
    assume !(out_$i339 == 1);
    assume {:verifier.code 0} true;
    goto $bb448;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    goto $bb448;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $M.21 := 2;
    call {:si_unique_call 1775} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6932;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} out_vslice_dummy_var_84 := eth_validate_addr(out_$p340);
    goto corral_source_split_6931;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    out_$p340 := $M.26;
    goto corral_source_split_6930;

  $bb446:
    assume out_$i339 == 1;
    goto corral_source_split_6929;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb446, $bb447;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    out_$i339 := $eq.i32(out_$i338, 2);
    goto corral_source_split_6927;

  $bb445:
    assume {:verifier.code 0} true;
    out_$i338 := $M.21;
    goto corral_source_split_6926;

  $bb444:
    assume !(out_$i335 == 1);
    assume {:verifier.code 0} true;
    goto $bb445;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    goto $bb445;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $M.21 := 3;
    call {:si_unique_call 1773} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6924;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} out_vslice_dummy_var_83 := eth_validate_addr(out_$p336);
    goto corral_source_split_6923;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    out_$p336 := $M.26;
    goto corral_source_split_6922;

  $bb443:
    assume out_$i335 == 1;
    goto corral_source_split_6921;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb443, $bb444;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    out_$i335 := $eq.i32(out_$i334, 3);
    goto corral_source_split_6919;

  $bb442:
    assume {:verifier.code 0} true;
    out_$i334 := $M.21;
    goto corral_source_split_6918;

  $bb441:
    assume !(out_$i331 == 1);
    assume {:verifier.code 0} true;
    goto $bb442;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    goto $bb442;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 1771} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6916;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} out_vslice_dummy_var_82 := eth_validate_addr(out_$p332);
    goto corral_source_split_6915;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    out_$p332 := $M.26;
    goto corral_source_split_6914;

  $bb440:
    assume out_$i331 == 1;
    goto corral_source_split_6913;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb440, $bb441;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    out_$i331 := $eq.i32(out_$i330, 1);
    goto corral_source_split_6881;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    out_$i330 := $M.21;
    goto corral_source_split_6880;

  $bb424:
    assume !(out_$i315 == 1);
    goto corral_source_split_6879;

  $bb456:
    assume !(out_$i361 == 1);
    assume {:verifier.code 0} true;
    goto $bb457;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    goto $bb457;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $M.21 := 2;
    call {:si_unique_call 1781} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6968;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} out_vslice_dummy_var_87 := sh_eth_vlan_rx_kill_vid(out_$p362, out_$i365, out_$i367);
    goto corral_source_split_6967;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    out_$i367 := $trunc.i32.i16(out_$i366);
    goto corral_source_split_6966;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    out_$i366 := $zext.i16.i32(in_$i15);
    goto corral_source_split_6965;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    out_$i365 := $trunc.i32.i16(out_$i364);
    goto corral_source_split_6964;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    out_$i364 := $zext.i16.i32(out_$i363);
    goto corral_source_split_6963;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    out_$i363 := $load.i16($M.52, in_$p0);
    goto corral_source_split_6962;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    out_$p362 := $M.26;
    goto corral_source_split_6961;

  $bb455:
    assume out_$i361 == 1;
    goto corral_source_split_6960;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb455, $bb456;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    out_$i361 := $eq.i32(out_$i360, 2);
    goto corral_source_split_6958;

  $bb454:
    assume {:verifier.code 0} true;
    out_$i360 := $M.21;
    goto corral_source_split_6957;

  $bb453:
    assume !(out_$i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb454;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    goto $bb454;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $M.21 := 3;
    call {:si_unique_call 1779} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6955;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} out_vslice_dummy_var_86 := sh_eth_vlan_rx_kill_vid(out_$p353, out_$i356, out_$i358);
    goto corral_source_split_6954;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    out_$i358 := $trunc.i32.i16(out_$i357);
    goto corral_source_split_6953;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    out_$i357 := $zext.i16.i32(in_$i15);
    goto corral_source_split_6952;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    out_$i356 := $trunc.i32.i16(out_$i355);
    goto corral_source_split_6951;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    out_$i355 := $zext.i16.i32(out_$i354);
    goto corral_source_split_6950;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    out_$i354 := $load.i16($M.52, in_$p0);
    goto corral_source_split_6949;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    out_$p353 := $M.26;
    goto corral_source_split_6948;

  $bb452:
    assume out_$i352 == 1;
    goto corral_source_split_6947;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb452, $bb453;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    out_$i352 := $eq.i32(out_$i351, 3);
    goto corral_source_split_6945;

  $bb451:
    assume {:verifier.code 0} true;
    out_$i351 := $M.21;
    goto corral_source_split_6944;

  $bb450:
    assume !(out_$i343 == 1);
    assume {:verifier.code 0} true;
    goto $bb451;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    goto $bb451;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 1777} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6942;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} out_vslice_dummy_var_85 := sh_eth_vlan_rx_kill_vid(out_$p344, out_$i347, out_$i349);
    goto corral_source_split_6941;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    out_$i349 := $trunc.i32.i16(out_$i348);
    goto corral_source_split_6940;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    out_$i348 := $zext.i16.i32(in_$i15);
    goto corral_source_split_6939;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    out_$i347 := $trunc.i32.i16(out_$i346);
    goto corral_source_split_6938;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    out_$i346 := $zext.i16.i32(out_$i345);
    goto corral_source_split_6937;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    out_$i345 := $load.i16($M.52, in_$p0);
    goto corral_source_split_6936;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    out_$p344 := $M.26;
    goto corral_source_split_6935;

  $bb449:
    assume out_$i343 == 1;
    goto corral_source_split_6934;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb449, $bb450;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    out_$i343 := $eq.i32(out_$i342, 1);
    goto corral_source_split_6869;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    out_$i342 := $M.21;
    goto corral_source_split_6868;

  $bb419:
    assume out_$i313 == 1;
    goto corral_source_split_6867;

  $bb415:
    assume out_$i311 == 1;
    assume {:verifier.code 0} true;
    out_$i313 := $slt.i32(out_$i301, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb419, $bb420;

  $bb414:
    assume !(out_$i310 == 1);
    assume {:verifier.code 0} true;
    out_$i311 := $slt.i32(out_$i301, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb415, $bb416;

  $bb465:
    assume !(out_$i378 == 1);
    assume {:verifier.code 0} true;
    goto $bb466;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    goto $bb466;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $M.21 := 2;
    call {:si_unique_call 1787} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6989;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} out_vslice_dummy_var_90 := sh_eth_do_ioctl(out_$p379, in_$p17, in_$i18);
    goto corral_source_split_6988;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    out_$p379 := $M.26;
    goto corral_source_split_6987;

  $bb464:
    assume out_$i378 == 1;
    goto corral_source_split_6986;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb464, $bb465;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    out_$i378 := $eq.i32(out_$i377, 2);
    goto corral_source_split_6984;

  $bb463:
    assume {:verifier.code 0} true;
    out_$i377 := $M.21;
    goto corral_source_split_6983;

  $bb462:
    assume !(out_$i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb463;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    goto $bb463;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $M.21 := 3;
    call {:si_unique_call 1785} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6981;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} out_vslice_dummy_var_89 := sh_eth_do_ioctl(out_$p375, in_$p17, in_$i18);
    goto corral_source_split_6980;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    out_$p375 := $M.26;
    goto corral_source_split_6979;

  $bb461:
    assume out_$i374 == 1;
    goto corral_source_split_6978;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb461, $bb462;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    out_$i374 := $eq.i32(out_$i373, 3);
    goto corral_source_split_6976;

  $bb460:
    assume {:verifier.code 0} true;
    out_$i373 := $M.21;
    goto corral_source_split_6975;

  $bb459:
    assume !(out_$i370 == 1);
    assume {:verifier.code 0} true;
    goto $bb460;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    goto $bb460;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 1783} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6973;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} out_vslice_dummy_var_88 := sh_eth_do_ioctl(out_$p371, in_$p17, in_$i18);
    goto corral_source_split_6972;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    out_$p371 := $M.26;
    goto corral_source_split_6971;

  $bb458:
    assume out_$i370 == 1;
    goto corral_source_split_6970;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb458, $bb459;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    out_$i370 := $eq.i32(out_$i369, 1);
    goto corral_source_split_6873;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    out_$i369 := $M.21;
    goto corral_source_split_6872;

  $bb420:
    assume !(out_$i313 == 1);
    goto corral_source_split_6871;

  $bb474:
    assume !(out_$i400 == 1);
    assume {:verifier.code 0} true;
    goto $bb475;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    goto $bb475;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $M.21 := 2;
    call {:si_unique_call 1793} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7025;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} out_vslice_dummy_var_93 := sh_eth_vlan_rx_add_vid(out_$p401, out_$i404, out_$i406);
    goto corral_source_split_7024;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    out_$i406 := $trunc.i32.i16(out_$i405);
    goto corral_source_split_7023;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    out_$i405 := $zext.i16.i32(in_$i14);
    goto corral_source_split_7022;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    out_$i404 := $trunc.i32.i16(out_$i403);
    goto corral_source_split_7021;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    out_$i403 := $zext.i16.i32(out_$i402);
    goto corral_source_split_7020;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    out_$i402 := $load.i16($M.53, in_$p1);
    goto corral_source_split_7019;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    out_$p401 := $M.26;
    goto corral_source_split_7018;

  $bb473:
    assume out_$i400 == 1;
    goto corral_source_split_7017;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb473, $bb474;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    out_$i400 := $eq.i32(out_$i399, 2);
    goto corral_source_split_7015;

  $bb472:
    assume {:verifier.code 0} true;
    out_$i399 := $M.21;
    goto corral_source_split_7014;

  $bb471:
    assume !(out_$i391 == 1);
    assume {:verifier.code 0} true;
    goto $bb472;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    goto $bb472;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $M.21 := 3;
    call {:si_unique_call 1791} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_7012;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} out_vslice_dummy_var_92 := sh_eth_vlan_rx_add_vid(out_$p392, out_$i395, out_$i397);
    goto corral_source_split_7011;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    out_$i397 := $trunc.i32.i16(out_$i396);
    goto corral_source_split_7010;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    out_$i396 := $zext.i16.i32(in_$i14);
    goto corral_source_split_7009;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    out_$i395 := $trunc.i32.i16(out_$i394);
    goto corral_source_split_7008;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    out_$i394 := $zext.i16.i32(out_$i393);
    goto corral_source_split_7007;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    out_$i393 := $load.i16($M.53, in_$p1);
    goto corral_source_split_7006;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    out_$p392 := $M.26;
    goto corral_source_split_7005;

  $bb470:
    assume out_$i391 == 1;
    goto corral_source_split_7004;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb470, $bb471;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    out_$i391 := $eq.i32(out_$i390, 3);
    goto corral_source_split_7002;

  $bb469:
    assume {:verifier.code 0} true;
    out_$i390 := $M.21;
    goto corral_source_split_7001;

  $bb468:
    assume !(out_$i382 == 1);
    assume {:verifier.code 0} true;
    goto $bb469;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    goto $bb469;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 1789} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6999;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} out_vslice_dummy_var_91 := sh_eth_vlan_rx_add_vid(out_$p383, out_$i386, out_$i388);
    goto corral_source_split_6998;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    out_$i388 := $trunc.i32.i16(out_$i387);
    goto corral_source_split_6997;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    out_$i387 := $zext.i16.i32(in_$i14);
    goto corral_source_split_6996;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    out_$i386 := $trunc.i32.i16(out_$i385);
    goto corral_source_split_6995;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    out_$i385 := $zext.i16.i32(out_$i384);
    goto corral_source_split_6994;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    out_$i384 := $load.i16($M.53, in_$p1);
    goto corral_source_split_6993;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    out_$p383 := $M.26;
    goto corral_source_split_6992;

  $bb467:
    assume out_$i382 == 1;
    goto corral_source_split_6991;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb467, $bb468;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    out_$i382 := $eq.i32(out_$i381, 1);
    goto corral_source_split_6861;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    out_$i381 := $M.21;
    goto corral_source_split_6860;

  $bb417:
    assume out_$i312 == 1;
    goto corral_source_split_6859;

  $bb416:
    assume !(out_$i311 == 1);
    assume {:verifier.code 0} true;
    out_$i312 := $slt.i32(out_$i301, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb417, $bb418;

  $bb483:
    assume !(out_$i417 == 1);
    assume {:verifier.code 0} true;
    goto $bb484;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    goto $bb484;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $M.21 := 2;
    call {:si_unique_call 1799} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7046;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} out_vslice_dummy_var_96 := sh_eth_get_stats(out_$p418);
    goto corral_source_split_7045;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    out_$p418 := $M.26;
    goto corral_source_split_7044;

  $bb482:
    assume out_$i417 == 1;
    goto corral_source_split_7043;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb482, $bb483;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    out_$i417 := $eq.i32(out_$i416, 2);
    goto corral_source_split_7041;

  $bb481:
    assume {:verifier.code 0} true;
    out_$i416 := $M.21;
    goto corral_source_split_7040;

  $bb480:
    assume !(out_$i413 == 1);
    assume {:verifier.code 0} true;
    goto $bb481;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    goto $bb481;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $M.21 := 3;
    call {:si_unique_call 1797} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_7038;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} out_vslice_dummy_var_95 := sh_eth_get_stats(out_$p414);
    goto corral_source_split_7037;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    out_$p414 := $M.26;
    goto corral_source_split_7036;

  $bb479:
    assume out_$i413 == 1;
    goto corral_source_split_7035;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb479, $bb480;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    out_$i413 := $eq.i32(out_$i412, 3);
    goto corral_source_split_7033;

  $bb478:
    assume {:verifier.code 0} true;
    out_$i412 := $M.21;
    goto corral_source_split_7032;

  $bb477:
    assume !(out_$i409 == 1);
    assume {:verifier.code 0} true;
    goto $bb478;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    goto $bb478;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 1795} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7030;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} out_vslice_dummy_var_94 := sh_eth_get_stats(out_$p410);
    goto corral_source_split_7029;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    out_$p410 := $M.26;
    goto corral_source_split_7028;

  $bb476:
    assume out_$i409 == 1;
    goto corral_source_split_7027;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb476, $bb477;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    out_$i409 := $eq.i32(out_$i408, 1);
    goto corral_source_split_6865;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    out_$i408 := $M.21;
    goto corral_source_split_6864;

  $bb418:
    assume !(out_$i312 == 1);
    goto corral_source_split_6863;

  $bb489:
    assume !(out_$i425 == 1);
    assume {:verifier.code 0} true;
    goto $bb490;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    goto $bb490;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $M.21 := 2;
    call {:si_unique_call 1803} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7059;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} out_vslice_dummy_var_98 := eth_change_mtu(out_$p426, in_$i13);
    goto corral_source_split_7058;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    out_$p426 := $M.26;
    goto corral_source_split_7057;

  $bb488:
    assume out_$i425 == 1;
    goto corral_source_split_7056;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb488, $bb489;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    out_$i425 := $eq.i32(out_$i424, 2);
    goto corral_source_split_7054;

  $bb487:
    assume {:verifier.code 0} true;
    out_$i424 := $M.21;
    goto corral_source_split_7053;

  $bb486:
    assume !(out_$i421 == 1);
    assume {:verifier.code 0} true;
    goto $bb487;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    goto $bb487;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $M.21 := 3;
    call {:si_unique_call 1801} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_7051;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} out_vslice_dummy_var_97 := eth_change_mtu(out_$p422, in_$i13);
    goto corral_source_split_7050;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    out_$p422 := $M.26;
    goto corral_source_split_7049;

  $bb485:
    assume out_$i421 == 1;
    goto corral_source_split_7048;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb485, $bb486;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    out_$i421 := $eq.i32(out_$i420, 3);
    goto corral_source_split_6849;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    out_$i420 := $M.21;
    goto corral_source_split_6848;

  $bb409:
    assume out_$i308 == 1;
    goto corral_source_split_6847;

  $bb398:
    assume out_$i303 == 1;
    assume {:verifier.code 0} true;
    out_$i308 := $slt.i32(out_$i301, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb409, $bb410;

  $bb397:
    assume !(out_$i302 == 1);
    assume {:verifier.code 0} true;
    out_$i303 := $slt.i32(out_$i301, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb398, $bb399;

  $bb492:
    assume !(out_$i429 == 1);
    assume {:verifier.code 0} true;
    goto $bb496;

  $bb495:
    assume {:verifier.code 0} true;
    goto $bb496;

  $bb494:
    assume !(out_$i433 == 1);
    assume {:verifier.code 0} true;
    goto $bb495;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    goto $bb495;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $M.21 := 3;
    call {:si_unique_call 1806} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_7069;

  $bb493:
    assume out_$i433 == 1;
    goto corral_source_split_7068;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb493, $bb494;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    out_$i433 := $eq.i32(out_$i432, 0);
    goto corral_source_split_7066;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    out_$i432 := $M.75;
    goto corral_source_split_7065;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $M.75 := out_$i431;
    call {:si_unique_call 1805} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i431);
    goto corral_source_split_7064;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} out_$i431 := sh_eth_open(out_$p430);
    goto corral_source_split_7063;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    out_$p430 := $M.26;
    goto corral_source_split_7062;

  $bb491:
    assume out_$i429 == 1;
    goto corral_source_split_7061;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb491, $bb492;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    out_$i429 := $eq.i32(out_$i428, 2);
    goto corral_source_split_6853;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    out_$i428 := $M.21;
    goto corral_source_split_6852;

  $bb411:
    assume out_$i309 == 1;
    goto corral_source_split_6851;

  $bb410:
    assume !(out_$i308 == 1);
    assume {:verifier.code 0} true;
    out_$i309 := $slt.i32(out_$i301, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb411, $bb412;

  $bb498:
    assume !(out_$i435 == 1);
    assume {:verifier.code 0} true;
    goto $bb499;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    goto $bb499;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $M.21 := 3;
    call {:si_unique_call 1808} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_7074;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} out_vslice_dummy_var_99 := sh_eth_start_xmit(in_$p20, out_$p436);
    goto corral_source_split_7073;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    out_$p436 := $M.26;
    goto corral_source_split_7072;

  $bb497:
    assume out_$i435 == 1;
    goto corral_source_split_7071;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb497, $bb498;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    out_$i435 := $eq.i32(out_$i434, 3);
    goto corral_source_split_6857;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    out_$i434 := $M.21;
    goto corral_source_split_6856;

  $bb412:
    assume !(out_$i309 == 1);
    goto corral_source_split_6855;

  $bb507:
    assume !(out_$i447 == 1);
    assume {:verifier.code 0} true;
    goto $bb508;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    goto $bb508;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $M.21 := 2;
    call {:si_unique_call 1814} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7095;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} out_vslice_dummy_var_102 := eth_mac_addr(out_$p448, in_$p21);
    goto corral_source_split_7094;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    out_$p448 := $M.26;
    goto corral_source_split_7093;

  $bb506:
    assume out_$i447 == 1;
    goto corral_source_split_7092;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb506, $bb507;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    out_$i447 := $eq.i32(out_$i446, 2);
    goto corral_source_split_7090;

  $bb505:
    assume {:verifier.code 0} true;
    out_$i446 := $M.21;
    goto corral_source_split_7089;

  $bb504:
    assume !(out_$i443 == 1);
    assume {:verifier.code 0} true;
    goto $bb505;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    goto $bb505;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $M.21 := 3;
    call {:si_unique_call 1812} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_7087;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} out_vslice_dummy_var_101 := eth_mac_addr(out_$p444, in_$p21);
    goto corral_source_split_7086;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    out_$p444 := $M.26;
    goto corral_source_split_7085;

  $bb503:
    assume out_$i443 == 1;
    goto corral_source_split_7084;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb503, $bb504;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    out_$i443 := $eq.i32(out_$i442, 3);
    goto corral_source_split_7082;

  $bb502:
    assume {:verifier.code 0} true;
    out_$i442 := $M.21;
    goto corral_source_split_7081;

  $bb501:
    assume !(out_$i439 == 1);
    assume {:verifier.code 0} true;
    goto $bb502;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    goto $bb502;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 1810} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7079;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} out_vslice_dummy_var_100 := eth_mac_addr(out_$p440, in_$p21);
    goto corral_source_split_7078;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    out_$p440 := $M.26;
    goto corral_source_split_7077;

  $bb500:
    assume out_$i439 == 1;
    goto corral_source_split_7076;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb500, $bb501;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    out_$i439 := $eq.i32(out_$i438, 1);
    goto corral_source_split_6841;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    out_$i438 := $M.21;
    goto corral_source_split_6840;

  $bb407:
    assume out_$i307 == 1;
    goto corral_source_split_6839;

  $bb400:
    assume out_$i304 == 1;
    assume {:verifier.code 0} true;
    out_$i307 := $slt.i32(out_$i301, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb407, $bb408;

  $bb399:
    assume !(out_$i303 == 1);
    assume {:verifier.code 0} true;
    out_$i304 := $slt.i32(out_$i301, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb400, $bb401;

  $bb516:
    assume !(out_$i457 == 1);
    assume {:verifier.code 0} true;
    goto $bb517;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    goto $bb517;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $M.21 := 2;
    call {:si_unique_call 1820} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7116;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} sh_eth_tx_timeout(out_$p458);
    goto corral_source_split_7115;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    out_$p458 := $M.26;
    goto corral_source_split_7114;

  $bb515:
    assume out_$i457 == 1;
    goto corral_source_split_7113;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb515, $bb516;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    out_$i457 := $eq.i32(out_$i456, 2);
    goto corral_source_split_7111;

  $bb514:
    assume {:verifier.code 0} true;
    out_$i456 := $M.21;
    goto corral_source_split_7110;

  $bb513:
    assume !(out_$i454 == 1);
    assume {:verifier.code 0} true;
    goto $bb514;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    goto $bb514;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $M.21 := 3;
    call {:si_unique_call 1818} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_7108;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} sh_eth_tx_timeout(out_$p455);
    goto corral_source_split_7107;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    out_$p455 := $M.26;
    goto corral_source_split_7106;

  $bb512:
    assume out_$i454 == 1;
    goto corral_source_split_7105;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb512, $bb513;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    out_$i454 := $eq.i32(out_$i453, 3);
    goto corral_source_split_7103;

  $bb511:
    assume {:verifier.code 0} true;
    out_$i453 := $M.21;
    goto corral_source_split_7102;

  $bb510:
    assume !(out_$i451 == 1);
    assume {:verifier.code 0} true;
    goto $bb511;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    goto $bb511;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 1816} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7100;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} sh_eth_tx_timeout(out_$p452);
    goto corral_source_split_7099;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    out_$p452 := $M.26;
    goto corral_source_split_7098;

  $bb509:
    assume out_$i451 == 1;
    goto corral_source_split_7097;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb509, $bb510;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    out_$i451 := $eq.i32(out_$i450, 1);
    goto corral_source_split_6845;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    out_$i450 := $M.21;
    goto corral_source_split_6844;

  $bb408:
    assume !(out_$i307 == 1);
    goto corral_source_split_6843;

  $bb519:
    assume !(out_$i460 == 1);
    assume {:verifier.code 0} true;
    goto $bb520;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    goto $bb520;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $M.58 := out_$i463;
    call {:si_unique_call 1823} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i463);
    goto corral_source_split_7123;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    out_$i463 := $sub.i32(out_$i462, 1);
    goto corral_source_split_7122;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    out_$i462 := $M.58;
    goto corral_source_split_7121;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $M.21 := 1;
    call {:si_unique_call 1822} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7120;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} out_vslice_dummy_var_103 := ldv_ndo_uninit_4();
    goto corral_source_split_7119;

  $bb518:
    assume out_$i460 == 1;
    goto corral_source_split_7118;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb518, $bb519;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    out_$i460 := $eq.i32(out_$i459, 2);
    goto corral_source_split_6833;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    out_$i459 := $M.21;
    goto corral_source_split_6832;

  $bb402:
    assume out_$i305 == 1;
    goto corral_source_split_6831;

  $bb401:
    assume !(out_$i304 == 1);
    assume {:verifier.code 0} true;
    out_$i305 := $slt.i32(out_$i301, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb402, $bb403;

  $bb522:
    assume !(out_$i465 == 1);
    assume {:verifier.code 0} true;
    goto $bb526;

  $bb525:
    assume {:verifier.code 0} true;
    goto $bb526;

  $bb524:
    assume !(out_$i468 == 1);
    assume {:verifier.code 0} true;
    goto $bb525;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    goto $bb525;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $M.58 := out_$i470;
    call {:si_unique_call 1827} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i470);
    goto corral_source_split_7135;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    out_$i470 := $add.i32(out_$i469, 1);
    goto corral_source_split_7134;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    out_$i469 := $M.58;
    goto corral_source_split_7133;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $M.21 := 2;
    call {:si_unique_call 1826} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7132;

  $bb523:
    assume out_$i468 == 1;
    goto corral_source_split_7131;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb523, $bb524;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    out_$i468 := $eq.i32(out_$i467, 0);
    goto corral_source_split_7129;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    out_$i467 := $M.76;
    goto corral_source_split_7128;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $M.76 := out_$i466;
    call {:si_unique_call 1825} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i466);
    goto corral_source_split_7127;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} out_$i466 := ldv_ndo_init_4();
    goto corral_source_split_7126;

  $bb521:
    assume out_$i465 == 1;
    goto corral_source_split_7125;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb521, $bb522;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    out_$i465 := $eq.i32(out_$i464, 1);
    goto corral_source_split_6837;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    out_$i464 := $M.21;
    goto corral_source_split_6836;

  $bb404:
    assume out_$i306 == 1;
    goto corral_source_split_6835;

  $bb403:
    assume !(out_$i305 == 1);
    assume {:verifier.code 0} true;
    out_$i306 := $eq.i32(out_$i301, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb404, $bb405;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    goto $bb528;

  $bb527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} ldv_stop();
    goto corral_source_split_7137;

  $bb406:
    assume {:verifier.code 0} true;
    goto $bb527;

  $bb405:
    assume {:verifier.code 0} true;
    assume !(out_$i306 == 1);
    goto $bb406;

  $bb426:
    assume {:verifier.code 0} true;
    assume !(out_$i316 == 1);
    goto $bb406;

  $bb531:
    assume !(out_$i472 == 1);
    assume {:verifier.code 0} true;
    goto $bb554;

  $bb545:
    assume {:verifier.code 0} true;
    goto $bb554;

  $bb553:
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb551:
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb548:
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb544:
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb543:
    assume !(out_$i479 == 1);
    assume {:verifier.code 0} true;
    goto $bb544;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    goto $bb544;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1833} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7156;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} sh_eth_chip_reset(out_$p480);
    goto corral_source_split_7155;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    out_$p480 := $M.39;
    goto corral_source_split_7154;

  $bb542:
    assume out_$i479 == 1;
    goto corral_source_split_7153;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb542, $bb543;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    out_$i479 := $eq.i32(out_$i478, 1);
    goto corral_source_split_7151;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    out_$i478 := $M.69;
    goto corral_source_split_7150;

  $bb540:
    assume out_$i477 == 1;
    goto corral_source_split_7149;

  $bb533:
    assume out_$i474 == 1;
    assume {:verifier.code 0} true;
    out_$i477 := $eq.i32(out_$i473, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb540, $bb541;

  $bb532:
    assume {:verifier.code 0} true;
    out_$i474 := $slt.i32(out_$i473, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb533, $bb534;

  corral_source_split_7139:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1829} out_$i473 := __VERIFIER_nondet_int();
    call {:si_unique_call 1830} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i473);
    call {:si_unique_call 1831} {:cexpr "tmp___35"} boogie_si_record_i32(out_$i473);
    assume {:verifier.code 0} true;
    goto $bb532;

  $bb530:
    assume out_$i472 == 1;
    goto corral_source_split_7139;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb530, $bb531;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    out_$i472 := $ne.i32(out_$i471, 0);
    goto corral_source_split_6282;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    out_$i471 := $M.69;
    goto corral_source_split_6281;

  $bb11:
    assume out_$i36 == 1;
    goto corral_source_split_6280;

  $bb10:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    out_$i36 := $slt.i32(out_$i31, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb547:
    assume !(out_$i482 == 1);
    assume {:verifier.code 0} true;
    goto $bb548;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    goto $bb548;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1835} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7161;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} sh_eth_set_rate_gether(out_$p483);
    goto corral_source_split_7160;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    out_$p483 := $M.39;
    goto corral_source_split_7159;

  $bb546:
    assume out_$i482 == 1;
    goto corral_source_split_7158;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb546, $bb547;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    out_$i482 := $eq.i32(out_$i481, 1);
    goto corral_source_split_7143;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    out_$i481 := $M.69;
    goto corral_source_split_7142;

  $bb535:
    assume out_$i475 == 1;
    goto corral_source_split_7141;

  $bb534:
    assume !(out_$i474 == 1);
    assume {:verifier.code 0} true;
    out_$i475 := $slt.i32(out_$i473, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb535, $bb536;

  $bb550:
    assume !(out_$i485 == 1);
    assume {:verifier.code 0} true;
    goto $bb551;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    goto $bb551;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1837} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7166;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1836} sh_eth_set_duplex(out_$p486);
    goto corral_source_split_7165;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    out_$p486 := $M.39;
    goto corral_source_split_7164;

  $bb549:
    assume out_$i485 == 1;
    goto corral_source_split_7163;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb549, $bb550;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    out_$i485 := $eq.i32(out_$i484, 1);
    goto corral_source_split_7147;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    out_$i484 := $M.69;
    goto corral_source_split_7146;

  $bb537:
    assume out_$i476 == 1;
    goto corral_source_split_7145;

  $bb536:
    assume !(out_$i475 == 1);
    assume {:verifier.code 0} true;
    out_$i476 := $eq.i32(out_$i473, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb537, $bb538;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    goto $bb553;

  $bb552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} ldv_stop();
    goto corral_source_split_7168;

  $bb539:
    assume {:verifier.code 0} true;
    goto $bb552;

  $bb538:
    assume {:verifier.code 0} true;
    assume !(out_$i476 == 1);
    goto $bb539;

  $bb541:
    assume {:verifier.code 0} true;
    assume !(out_$i477 == 1);
    goto $bb539;

  $bb556:
    assume !(out_$i488 == 1);
    assume {:verifier.code 0} true;
    goto $bb658;

  $bb586:
    assume {:verifier.code 0} true;
    goto $bb658;

  $bb657:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb655:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb649:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb646:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb637:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb628:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb625:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb619:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb613:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb604:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb595:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb585:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb584:
    assume !(out_$i503 == 1);
    assume {:verifier.code 0} true;
    goto $bb585;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    goto $bb585;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1843} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7219;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} out_vslice_dummy_var_104 := sh_eth_close(out_$p504);
    goto corral_source_split_7218;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    out_$p504 := $M.77;
    goto corral_source_split_7217;

  $bb583:
    assume out_$i503 == 1;
    goto corral_source_split_7216;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb583, $bb584;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    out_$i503 := $eq.i32(out_$i502, 3);
    goto corral_source_split_7214;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    out_$i502 := $M.70;
    goto corral_source_split_7213;

  $bb581:
    assume out_$i501 == 1;
    goto corral_source_split_7212;

  $bb579:
    assume out_$i500 == 1;
    assume {:verifier.code 0} true;
    out_$i501 := $eq.i32(out_$i489, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb581, $bb582;

  $bb573:
    assume out_$i497 == 1;
    assume {:verifier.code 0} true;
    out_$i500 := $slt.i32(out_$i489, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb579, $bb580;

  $bb558:
    assume out_$i490 == 1;
    assume {:verifier.code 0} true;
    out_$i497 := $slt.i32(out_$i489, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb573, $bb574;

  $bb557:
    assume {:verifier.code 0} true;
    out_$i490 := $slt.i32(out_$i489, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb558, $bb559;

  corral_source_split_7170:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1839} out_$i489 := __VERIFIER_nondet_int();
    call {:si_unique_call 1840} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i489);
    call {:si_unique_call 1841} {:cexpr "tmp___36"} boogie_si_record_i32(out_$i489);
    assume {:verifier.code 0} true;
    goto $bb557;

  $bb555:
    assume out_$i488 == 1;
    goto corral_source_split_7170;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb555, $bb556;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    out_$i488 := $ne.i32(out_$i487, 0);
    goto corral_source_split_6286;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    out_$i487 := $M.70;
    goto corral_source_split_6285;

  $bb13:
    assume out_$i37 == 1;
    goto corral_source_split_6284;

  $bb12:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i31, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb594:
    assume !(out_$i515 == 1);
    assume {:verifier.code 0} true;
    goto $bb595;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    goto $bb595;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1849} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7240;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} out_vslice_dummy_var_107 := eth_validate_addr(out_$p516);
    goto corral_source_split_7239;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    out_$p516 := $M.77;
    goto corral_source_split_7238;

  $bb593:
    assume out_$i515 == 1;
    goto corral_source_split_7237;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb593, $bb594;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    out_$i515 := $eq.i32(out_$i514, 2);
    goto corral_source_split_7235;

  $bb592:
    assume {:verifier.code 0} true;
    out_$i514 := $M.70;
    goto corral_source_split_7234;

  $bb591:
    assume !(out_$i511 == 1);
    assume {:verifier.code 0} true;
    goto $bb592;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    goto $bb592;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1847} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7232;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} out_vslice_dummy_var_106 := eth_validate_addr(out_$p512);
    goto corral_source_split_7231;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    out_$p512 := $M.77;
    goto corral_source_split_7230;

  $bb590:
    assume out_$i511 == 1;
    goto corral_source_split_7229;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb590, $bb591;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    out_$i511 := $eq.i32(out_$i510, 3);
    goto corral_source_split_7227;

  $bb589:
    assume {:verifier.code 0} true;
    out_$i510 := $M.70;
    goto corral_source_split_7226;

  $bb588:
    assume !(out_$i507 == 1);
    assume {:verifier.code 0} true;
    goto $bb589;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    goto $bb589;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1845} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7224;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} out_vslice_dummy_var_105 := eth_validate_addr(out_$p508);
    goto corral_source_split_7223;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    out_$p508 := $M.77;
    goto corral_source_split_7222;

  $bb587:
    assume out_$i507 == 1;
    goto corral_source_split_7221;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb587, $bb588;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    out_$i507 := $eq.i32(out_$i506, 1);
    goto corral_source_split_7210;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    out_$i506 := $M.70;
    goto corral_source_split_7209;

  $bb580:
    assume !(out_$i500 == 1);
    goto corral_source_split_7208;

  $bb603:
    assume !(out_$i527 == 1);
    assume {:verifier.code 0} true;
    goto $bb604;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    goto $bb604;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1855} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7261;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} out_vslice_dummy_var_110 := sh_eth_do_ioctl(out_$p528, in_$p26, in_$i22);
    goto corral_source_split_7260;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    out_$p528 := $M.77;
    goto corral_source_split_7259;

  $bb602:
    assume out_$i527 == 1;
    goto corral_source_split_7258;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb602, $bb603;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    out_$i527 := $eq.i32(out_$i526, 2);
    goto corral_source_split_7256;

  $bb601:
    assume {:verifier.code 0} true;
    out_$i526 := $M.70;
    goto corral_source_split_7255;

  $bb600:
    assume !(out_$i523 == 1);
    assume {:verifier.code 0} true;
    goto $bb601;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    goto $bb601;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1853} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7253;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1852} out_vslice_dummy_var_109 := sh_eth_do_ioctl(out_$p524, in_$p26, in_$i22);
    goto corral_source_split_7252;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    out_$p524 := $M.77;
    goto corral_source_split_7251;

  $bb599:
    assume out_$i523 == 1;
    goto corral_source_split_7250;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb599, $bb600;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    out_$i523 := $eq.i32(out_$i522, 3);
    goto corral_source_split_7248;

  $bb598:
    assume {:verifier.code 0} true;
    out_$i522 := $M.70;
    goto corral_source_split_7247;

  $bb597:
    assume !(out_$i519 == 1);
    assume {:verifier.code 0} true;
    goto $bb598;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    goto $bb598;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1851} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7245;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} out_vslice_dummy_var_108 := sh_eth_do_ioctl(out_$p520, in_$p26, in_$i22);
    goto corral_source_split_7244;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    out_$p520 := $M.77;
    goto corral_source_split_7243;

  $bb596:
    assume out_$i519 == 1;
    goto corral_source_split_7242;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb596, $bb597;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    out_$i519 := $eq.i32(out_$i518, 1);
    goto corral_source_split_7198;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    out_$i518 := $M.70;
    goto corral_source_split_7197;

  $bb575:
    assume out_$i498 == 1;
    goto corral_source_split_7196;

  $bb574:
    assume !(out_$i497 == 1);
    assume {:verifier.code 0} true;
    out_$i498 := $slt.i32(out_$i489, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb575, $bb576;

  $bb612:
    assume !(out_$i539 == 1);
    assume {:verifier.code 0} true;
    goto $bb613;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    goto $bb613;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1861} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7282;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} out_vslice_dummy_var_113 := sh_eth_get_stats(out_$p540);
    goto corral_source_split_7281;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    out_$p540 := $M.77;
    goto corral_source_split_7280;

  $bb611:
    assume out_$i539 == 1;
    goto corral_source_split_7279;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb611, $bb612;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    out_$i539 := $eq.i32(out_$i538, 2);
    goto corral_source_split_7277;

  $bb610:
    assume {:verifier.code 0} true;
    out_$i538 := $M.70;
    goto corral_source_split_7276;

  $bb609:
    assume !(out_$i535 == 1);
    assume {:verifier.code 0} true;
    goto $bb610;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    goto $bb610;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1859} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7274;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} out_vslice_dummy_var_112 := sh_eth_get_stats(out_$p536);
    goto corral_source_split_7273;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    out_$p536 := $M.77;
    goto corral_source_split_7272;

  $bb608:
    assume out_$i535 == 1;
    goto corral_source_split_7271;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb608, $bb609;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    out_$i535 := $eq.i32(out_$i534, 3);
    goto corral_source_split_7269;

  $bb607:
    assume {:verifier.code 0} true;
    out_$i534 := $M.70;
    goto corral_source_split_7268;

  $bb606:
    assume !(out_$i531 == 1);
    assume {:verifier.code 0} true;
    goto $bb607;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    goto $bb607;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1857} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7266;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} out_vslice_dummy_var_111 := sh_eth_get_stats(out_$p532);
    goto corral_source_split_7265;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    out_$p532 := $M.77;
    goto corral_source_split_7264;

  $bb605:
    assume out_$i531 == 1;
    goto corral_source_split_7263;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb605, $bb606;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    out_$i531 := $eq.i32(out_$i530, 1);
    goto corral_source_split_7202;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    out_$i530 := $M.70;
    goto corral_source_split_7201;

  $bb577:
    assume out_$i499 == 1;
    goto corral_source_split_7200;

  $bb576:
    assume !(out_$i498 == 1);
    assume {:verifier.code 0} true;
    out_$i499 := $slt.i32(out_$i489, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb577, $bb578;

  $bb618:
    assume !(out_$i547 == 1);
    assume {:verifier.code 0} true;
    goto $bb619;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    goto $bb619;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1865} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7295;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1864} out_vslice_dummy_var_115 := eth_change_mtu(out_$p548, in_$i24);
    goto corral_source_split_7294;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    out_$p548 := $M.77;
    goto corral_source_split_7293;

  $bb617:
    assume out_$i547 == 1;
    goto corral_source_split_7292;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb617, $bb618;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    out_$i547 := $eq.i32(out_$i546, 2);
    goto corral_source_split_7290;

  $bb616:
    assume {:verifier.code 0} true;
    out_$i546 := $M.70;
    goto corral_source_split_7289;

  $bb615:
    assume !(out_$i543 == 1);
    assume {:verifier.code 0} true;
    goto $bb616;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    goto $bb616;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1863} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7287;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} out_vslice_dummy_var_114 := eth_change_mtu(out_$p544, in_$i24);
    goto corral_source_split_7286;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    out_$p544 := $M.77;
    goto corral_source_split_7285;

  $bb614:
    assume out_$i543 == 1;
    goto corral_source_split_7284;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb614, $bb615;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    out_$i543 := $eq.i32(out_$i542, 3);
    goto corral_source_split_7206;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    out_$i542 := $M.70;
    goto corral_source_split_7205;

  $bb578:
    assume !(out_$i499 == 1);
    goto corral_source_split_7204;

  $bb621:
    assume !(out_$i551 == 1);
    assume {:verifier.code 0} true;
    goto $bb625;

  $bb624:
    assume {:verifier.code 0} true;
    goto $bb625;

  $bb623:
    assume !(out_$i555 == 1);
    assume {:verifier.code 0} true;
    goto $bb624;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    goto $bb624;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1868} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7305;

  $bb622:
    assume out_$i555 == 1;
    goto corral_source_split_7304;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb622, $bb623;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    out_$i555 := $eq.i32(out_$i554, 0);
    goto corral_source_split_7302;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    out_$i554 := $M.78;
    goto corral_source_split_7301;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $M.78 := out_$i553;
    call {:si_unique_call 1867} {:cexpr "ldv_retval_7"} boogie_si_record_i32(out_$i553);
    goto corral_source_split_7300;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} out_$i553 := sh_eth_open(out_$p552);
    goto corral_source_split_7299;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    out_$p552 := $M.77;
    goto corral_source_split_7298;

  $bb620:
    assume out_$i551 == 1;
    goto corral_source_split_7297;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb620, $bb621;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    out_$i551 := $eq.i32(out_$i550, 2);
    goto corral_source_split_7186;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    out_$i550 := $M.70;
    goto corral_source_split_7185;

  $bb569:
    assume out_$i495 == 1;
    goto corral_source_split_7184;

  $bb560:
    assume out_$i491 == 1;
    assume {:verifier.code 0} true;
    out_$i495 := $slt.i32(out_$i489, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb569, $bb570;

  $bb559:
    assume !(out_$i490 == 1);
    assume {:verifier.code 0} true;
    out_$i491 := $slt.i32(out_$i489, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb560, $bb561;

  $bb627:
    assume !(out_$i557 == 1);
    assume {:verifier.code 0} true;
    goto $bb628;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    goto $bb628;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1870} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7310;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1869} out_vslice_dummy_var_116 := sh_eth_start_xmit(in_$p28, out_$p558);
    goto corral_source_split_7309;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    out_$p558 := $M.77;
    goto corral_source_split_7308;

  $bb626:
    assume out_$i557 == 1;
    goto corral_source_split_7307;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb626, $bb627;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    out_$i557 := $eq.i32(out_$i556, 3);
    goto corral_source_split_7190;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    out_$i556 := $M.70;
    goto corral_source_split_7189;

  $bb571:
    assume out_$i496 == 1;
    goto corral_source_split_7188;

  $bb570:
    assume !(out_$i495 == 1);
    assume {:verifier.code 0} true;
    out_$i496 := $slt.i32(out_$i489, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb571, $bb572;

  $bb636:
    assume !(out_$i569 == 1);
    assume {:verifier.code 0} true;
    goto $bb637;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    goto $bb637;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1876} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7331;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} out_vslice_dummy_var_119 := eth_mac_addr(out_$p570, in_$p23);
    goto corral_source_split_7330;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    out_$p570 := $M.77;
    goto corral_source_split_7329;

  $bb635:
    assume out_$i569 == 1;
    goto corral_source_split_7328;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb635, $bb636;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    out_$i569 := $eq.i32(out_$i568, 2);
    goto corral_source_split_7326;

  $bb634:
    assume {:verifier.code 0} true;
    out_$i568 := $M.70;
    goto corral_source_split_7325;

  $bb633:
    assume !(out_$i565 == 1);
    assume {:verifier.code 0} true;
    goto $bb634;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    goto $bb634;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1874} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7323;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} out_vslice_dummy_var_118 := eth_mac_addr(out_$p566, in_$p23);
    goto corral_source_split_7322;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    out_$p566 := $M.77;
    goto corral_source_split_7321;

  $bb632:
    assume out_$i565 == 1;
    goto corral_source_split_7320;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb632, $bb633;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    out_$i565 := $eq.i32(out_$i564, 3);
    goto corral_source_split_7318;

  $bb631:
    assume {:verifier.code 0} true;
    out_$i564 := $M.70;
    goto corral_source_split_7317;

  $bb630:
    assume !(out_$i561 == 1);
    assume {:verifier.code 0} true;
    goto $bb631;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    goto $bb631;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1872} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7315;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} out_vslice_dummy_var_117 := eth_mac_addr(out_$p562, in_$p23);
    goto corral_source_split_7314;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    out_$p562 := $M.77;
    goto corral_source_split_7313;

  $bb629:
    assume out_$i561 == 1;
    goto corral_source_split_7312;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb629, $bb630;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    out_$i561 := $eq.i32(out_$i560, 1);
    goto corral_source_split_7194;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    out_$i560 := $M.70;
    goto corral_source_split_7193;

  $bb572:
    assume !(out_$i496 == 1);
    goto corral_source_split_7192;

  $bb645:
    assume !(out_$i579 == 1);
    assume {:verifier.code 0} true;
    goto $bb646;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    goto $bb646;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1882} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7352;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} sh_eth_tx_timeout(out_$p580);
    goto corral_source_split_7351;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    out_$p580 := $M.77;
    goto corral_source_split_7350;

  $bb644:
    assume out_$i579 == 1;
    goto corral_source_split_7349;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb644, $bb645;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    out_$i579 := $eq.i32(out_$i578, 2);
    goto corral_source_split_7347;

  $bb643:
    assume {:verifier.code 0} true;
    out_$i578 := $M.70;
    goto corral_source_split_7346;

  $bb642:
    assume !(out_$i576 == 1);
    assume {:verifier.code 0} true;
    goto $bb643;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    goto $bb643;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1880} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_7344;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} sh_eth_tx_timeout(out_$p577);
    goto corral_source_split_7343;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    out_$p577 := $M.77;
    goto corral_source_split_7342;

  $bb641:
    assume out_$i576 == 1;
    goto corral_source_split_7341;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb641, $bb642;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    out_$i576 := $eq.i32(out_$i575, 3);
    goto corral_source_split_7339;

  $bb640:
    assume {:verifier.code 0} true;
    out_$i575 := $M.70;
    goto corral_source_split_7338;

  $bb639:
    assume !(out_$i573 == 1);
    assume {:verifier.code 0} true;
    goto $bb640;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    goto $bb640;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1878} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7336;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} sh_eth_tx_timeout(out_$p574);
    goto corral_source_split_7335;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    out_$p574 := $M.77;
    goto corral_source_split_7334;

  $bb638:
    assume out_$i573 == 1;
    goto corral_source_split_7333;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb638, $bb639;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    out_$i573 := $eq.i32(out_$i572, 1);
    goto corral_source_split_7174;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    out_$i572 := $M.70;
    goto corral_source_split_7173;

  $bb562:
    assume out_$i492 == 1;
    goto corral_source_split_7172;

  $bb561:
    assume !(out_$i491 == 1);
    assume {:verifier.code 0} true;
    out_$i492 := $slt.i32(out_$i489, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb562, $bb563;

  $bb648:
    assume !(out_$i582 == 1);
    assume {:verifier.code 0} true;
    goto $bb649;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    goto $bb649;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $M.58 := out_$i585;
    call {:si_unique_call 1885} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i585);
    goto corral_source_split_7359;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    out_$i585 := $sub.i32(out_$i584, 1);
    goto corral_source_split_7358;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    out_$i584 := $M.58;
    goto corral_source_split_7357;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1884} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7356;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} out_vslice_dummy_var_120 := ldv_ndo_uninit_5();
    goto corral_source_split_7355;

  $bb647:
    assume out_$i582 == 1;
    goto corral_source_split_7354;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb647, $bb648;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    out_$i582 := $eq.i32(out_$i581, 2);
    goto corral_source_split_7178;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    out_$i581 := $M.70;
    goto corral_source_split_7177;

  $bb564:
    assume out_$i493 == 1;
    goto corral_source_split_7176;

  $bb563:
    assume !(out_$i492 == 1);
    assume {:verifier.code 0} true;
    out_$i493 := $slt.i32(out_$i489, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb564, $bb565;

  $bb651:
    assume !(out_$i587 == 1);
    assume {:verifier.code 0} true;
    goto $bb655;

  $bb654:
    assume {:verifier.code 0} true;
    goto $bb655;

  $bb653:
    assume !(out_$i590 == 1);
    assume {:verifier.code 0} true;
    goto $bb654;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    goto $bb654;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $M.58 := out_$i592;
    call {:si_unique_call 1889} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i592);
    goto corral_source_split_7371;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    out_$i592 := $add.i32(out_$i591, 1);
    goto corral_source_split_7370;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    out_$i591 := $M.58;
    goto corral_source_split_7369;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1888} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7368;

  $bb652:
    assume out_$i590 == 1;
    goto corral_source_split_7367;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb652, $bb653;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    out_$i590 := $eq.i32(out_$i589, 0);
    goto corral_source_split_7365;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    out_$i589 := $M.79;
    goto corral_source_split_7364;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $M.79 := out_$i588;
    call {:si_unique_call 1887} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i588);
    goto corral_source_split_7363;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} out_$i588 := ldv_ndo_init_5();
    goto corral_source_split_7362;

  $bb650:
    assume out_$i587 == 1;
    goto corral_source_split_7361;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb650, $bb651;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    out_$i587 := $eq.i32(out_$i586, 1);
    goto corral_source_split_7182;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    out_$i586 := $M.70;
    goto corral_source_split_7181;

  $bb566:
    assume out_$i494 == 1;
    goto corral_source_split_7180;

  $bb565:
    assume !(out_$i493 == 1);
    assume {:verifier.code 0} true;
    out_$i494 := $eq.i32(out_$i489, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb566, $bb567;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    goto $bb657;

  $bb656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1890} ldv_stop();
    goto corral_source_split_7373;

  $bb568:
    assume {:verifier.code 0} true;
    goto $bb656;

  $bb567:
    assume {:verifier.code 0} true;
    assume !(out_$i494 == 1);
    goto $bb568;

  $bb582:
    assume {:verifier.code 0} true;
    assume !(out_$i501 == 1);
    goto $bb568;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    goto $bb660;

  $bb659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} ldv_stop();
    goto corral_source_split_7375;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb659;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb15;

  $bb39:
    assume {:verifier.code 0} true;
    assume !(out_$i49 == 1);
    goto $bb15;

  $bb65_dummy:
    call {:si_unique_call 1} out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$p146, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$p167, out_$i169, out_$i170, out_$p171, out_$p172, out_$i174, out_$i175, out_$p176, out_$i177, out_$i178, out_$p179, out_$p180, out_$i182, out_$i183, out_$p184, out_$i185, out_$i186, out_$p187, out_$i188, out_$i189, out_$p190, out_$i192, out_$i193, out_$p194, out_$p195, out_$i196, out_$i197, out_$p198, out_$i200, out_$i201, out_$p202, out_$p203, out_$i205, out_$i206, out_$p207, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$p217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$p225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$p240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$p246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$p256, out_$i257, out_$i258, out_$p259, out_$i260, out_$i261, out_$p262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$p271, out_$i272, out_$i273, out_$p274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$p283, out_$i284, out_$i285, out_$p286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$p295, out_$i296, out_$i297, out_$p298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$p319, out_$i321, out_$i322, out_$p323, out_$i324, out_$i325, out_$p326, out_$i327, out_$i328, out_$p329, out_$i330, out_$i331, out_$p332, out_$i334, out_$i335, out_$p336, out_$i338, out_$i339, out_$p340, out_$i342, out_$i343, out_$p344, out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i351, out_$i352, out_$p353, out_$i354, out_$i355, out_$i356, out_$i357, out_$i358, out_$i360, out_$i361, out_$p362, out_$i363, out_$i364, out_$i365, out_$i366, out_$i367, out_$i369, out_$i370, out_$p371, out_$i373, out_$i374, out_$p375, out_$i377, out_$i378, out_$p379, out_$i381, out_$i382, out_$p383, out_$i384, out_$i385, out_$i386, out_$i387, out_$i388, out_$i390, out_$i391, out_$p392, out_$i393, out_$i394, out_$i395, out_$i396, out_$i397, out_$i399, out_$i400, out_$p401, out_$i402, out_$i403, out_$i404, out_$i405, out_$i406, out_$i408, out_$i409, out_$p410, out_$i412, out_$i413, out_$p414, out_$i416, out_$i417, out_$p418, out_$i420, out_$i421, out_$p422, out_$i424, out_$i425, out_$p426, out_$i428, out_$i429, out_$p430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$p436, out_$i438, out_$i439, out_$p440, out_$i442, out_$i443, out_$p444, out_$i446, out_$i447, out_$p448, out_$i450, out_$i451, out_$p452, out_$i453, out_$i454, out_$p455, out_$i456, out_$i457, out_$p458, out_$i459, out_$i460, out_$i462, out_$i463, out_$i464, out_$i465, out_$i466, out_$i467, out_$i468, out_$i469, out_$i470, out_$i471, out_$i472, out_$i473, out_$i474, out_$i475, out_$i476, out_$i477, out_$i478, out_$i479, out_$p480, out_$i481, out_$i482, out_$p483, out_$i484, out_$i485, out_$p486, out_$i487, out_$i488, out_$i489, out_$i490, out_$i491, out_$i492, out_$i493, out_$i494, out_$i495, out_$i496, out_$i497, out_$i498, out_$i499, out_$i500, out_$i501, out_$i502, out_$i503, out_$p504, out_$i506, out_$i507, out_$p508, out_$i510, out_$i511, out_$p512, out_$i514, out_$i515, out_$p516, out_$i518, out_$i519, out_$p520, out_$i522, out_$i523, out_$p524, out_$i526, out_$i527, out_$p528, out_$i530, out_$i531, out_$p532, out_$i534, out_$i535, out_$p536, out_$i538, out_$i539, out_$p540, out_$i542, out_$i543, out_$p544, out_$i546, out_$i547, out_$p548, out_$i550, out_$i551, out_$p552, out_$i553, out_$i554, out_$i555, out_$i556, out_$i557, out_$p558, out_$i560, out_$i561, out_$p562, out_$i564, out_$i565, out_$p566, out_$i568, out_$i569, out_$p570, out_$i572, out_$i573, out_$p574, out_$i575, out_$i576, out_$p577, out_$i578, out_$i579, out_$p580, out_$i581, out_$i582, out_$i584, out_$i585, out_$i586, out_$i587, out_$i588, out_$i589, out_$i590, out_$i591, out_$i592, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120 := main_loop_$bb1(in_$p0, in_$p1, in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$p8, in_$p10, in_$p12, in_$i13, in_$i14, in_$i15, in_$p17, in_$i18, in_$p20, in_$p21, in_$i22, in_$p23, in_$i24, in_$p26, in_$p28, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$p146, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$p167, out_$i169, out_$i170, out_$p171, out_$p172, out_$i174, out_$i175, out_$p176, out_$i177, out_$i178, out_$p179, out_$p180, out_$i182, out_$i183, out_$p184, out_$i185, out_$i186, out_$p187, out_$i188, out_$i189, out_$p190, out_$i192, out_$i193, out_$p194, out_$p195, out_$i196, out_$i197, out_$p198, out_$i200, out_$i201, out_$p202, out_$p203, out_$i205, out_$i206, out_$p207, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$p217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$p225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$p240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$p246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$p256, out_$i257, out_$i258, out_$p259, out_$i260, out_$i261, out_$p262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$p271, out_$i272, out_$i273, out_$p274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$p283, out_$i284, out_$i285, out_$p286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$p295, out_$i296, out_$i297, out_$p298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$p319, out_$i321, out_$i322, out_$p323, out_$i324, out_$i325, out_$p326, out_$i327, out_$i328, out_$p329, out_$i330, out_$i331, out_$p332, out_$i334, out_$i335, out_$p336, out_$i338, out_$i339, out_$p340, out_$i342, out_$i343, out_$p344, out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i351, out_$i352, out_$p353, out_$i354, out_$i355, out_$i356, out_$i357, out_$i358, out_$i360, out_$i361, out_$p362, out_$i363, out_$i364, out_$i365, out_$i366, out_$i367, out_$i369, out_$i370, out_$p371, out_$i373, out_$i374, out_$p375, out_$i377, out_$i378, out_$p379, out_$i381, out_$i382, out_$p383, out_$i384, out_$i385, out_$i386, out_$i387, out_$i388, out_$i390, out_$i391, out_$p392, out_$i393, out_$i394, out_$i395, out_$i396, out_$i397, out_$i399, out_$i400, out_$p401, out_$i402, out_$i403, out_$i404, out_$i405, out_$i406, out_$i408, out_$i409, out_$p410, out_$i412, out_$i413, out_$p414, out_$i416, out_$i417, out_$p418, out_$i420, out_$i421, out_$p422, out_$i424, out_$i425, out_$p426, out_$i428, out_$i429, out_$p430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$p436, out_$i438, out_$i439, out_$p440, out_$i442, out_$i443, out_$p444, out_$i446, out_$i447, out_$p448, out_$i450, out_$i451, out_$p452, out_$i453, out_$i454, out_$p455, out_$i456, out_$i457, out_$p458, out_$i459, out_$i460, out_$i462, out_$i463, out_$i464, out_$i465, out_$i466, out_$i467, out_$i468, out_$i469, out_$i470, out_$i471, out_$i472, out_$i473, out_$i474, out_$i475, out_$i476, out_$i477, out_$i478, out_$i479, out_$p480, out_$i481, out_$i482, out_$p483, out_$i484, out_$i485, out_$p486, out_$i487, out_$i488, out_$i489, out_$i490, out_$i491, out_$i492, out_$i493, out_$i494, out_$i495, out_$i496, out_$i497, out_$i498, out_$i499, out_$i500, out_$i501, out_$i502, out_$i503, out_$p504, out_$i506, out_$i507, out_$p508, out_$i510, out_$i511, out_$p512, out_$i514, out_$i515, out_$p516, out_$i518, out_$i519, out_$p520, out_$i522, out_$i523, out_$p524, out_$i526, out_$i527, out_$p528, out_$i530, out_$i531, out_$p532, out_$i534, out_$i535, out_$p536, out_$i538, out_$i539, out_$p540, out_$i542, out_$i543, out_$p544, out_$i546, out_$i547, out_$p548, out_$i550, out_$i551, out_$p552, out_$i553, out_$i554, out_$i555, out_$i556, out_$i557, out_$p558, out_$i560, out_$i561, out_$p562, out_$i564, out_$i565, out_$p566, out_$i568, out_$i569, out_$p570, out_$i572, out_$i573, out_$p574, out_$i575, out_$i576, out_$p577, out_$i578, out_$i579, out_$p580, out_$i581, out_$i582, out_$i584, out_$i585, out_$i586, out_$i587, out_$i588, out_$i589, out_$i590, out_$i591, out_$i592, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i3: i32, in_$i4: i32, in_$i5: i32, in_$i6: i32, in_$i7: i32, in_$p8: ref, in_$p10: ref, in_$p12: ref, in_$i13: i32, in_$i14: i16, in_$i15: i16, in_$p17: ref, in_$i18: i32, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$p23: ref, in_$i24: i32, in_$p26: ref, in_$p28: ref, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$p65: ref, in_$i66: i32, in_$i67: i1, in_$i68: i32, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$p76: ref, in_$i77: i32, in_$i78: i1, in_$p79: ref, in_$i80: i32, in_$i81: i1, in_$p82: ref, in_$i84: i32, in_$i85: i1, in_$p86: ref, in_$i87: i32, in_$i88: i1, in_$i89: i32, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i32, in_$i94: i1, in_$p95: ref, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$p103: ref, in_$i105: i32, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i1, in_$i111: i32, in_$i112: i1, in_$i113: i1, in_$i114: i1, in_$i115: i32, in_$i116: i1, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i122: i32, in_$i123: i1, in_$i124: i32, in_$i125: i1, in_$i126: i32, in_$i127: i1, in_$i128: i32, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i32, in_$i133: i1, in_$p134: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$i138: i32, in_$i139: i1, in_$i140: i32, in_$i141: i1, in_$i142: i1, in_$i143: i1, in_$i144: i32, in_$i145: i1, in_$p146: ref, in_$i147: i32, in_$i148: i1, in_$p149: ref, in_$i150: i32, in_$i151: i1, in_$i152: i32, in_$i153: i1, in_$i154: i1, in_$i155: i1, in_$i156: i1, in_$i157: i1, in_$i158: i1, in_$i159: i1, in_$i160: i1, in_$i161: i1, in_$i162: i1, in_$i163: i1, in_$i164: i1, in_$i165: i32, in_$i166: i1, in_$p167: ref, in_$i169: i32, in_$i170: i1, in_$p171: ref, in_$p172: ref, in_$i174: i32, in_$i175: i1, in_$p176: ref, in_$i177: i32, in_$i178: i1, in_$p179: ref, in_$p180: ref, in_$i182: i32, in_$i183: i1, in_$p184: ref, in_$i185: i32, in_$i186: i1, in_$p187: ref, in_$i188: i32, in_$i189: i1, in_$p190: ref, in_$i192: i32, in_$i193: i1, in_$p194: ref, in_$p195: ref, in_$i196: i32, in_$i197: i1, in_$p198: ref, in_$i200: i32, in_$i201: i1, in_$p202: ref, in_$p203: ref, in_$i205: i32, in_$i206: i1, in_$p207: ref, in_$i209: i32, in_$i210: i1, in_$i211: i32, in_$i212: i1, in_$i213: i1, in_$i214: i1, in_$i215: i32, in_$i216: i1, in_$p217: ref, in_$i218: i32, in_$i219: i32, in_$i220: i1, in_$i221: i32, in_$i222: i32, in_$i223: i32, in_$i224: i1, in_$p225: ref, in_$i226: i32, in_$i227: i32, in_$i228: i1, in_$i229: i32, in_$i230: i32, in_$i231: i32, in_$i232: i1, in_$i233: i32, in_$i234: i1, in_$i235: i1, in_$i236: i1, in_$i237: i1, in_$i238: i32, in_$i239: i1, in_$p240: ref, in_$i241: i32, in_$i242: i1, in_$p243: ref, in_$i244: i32, in_$i245: i1, in_$p246: ref, in_$i247: i32, in_$i248: i1, in_$i249: i32, in_$i250: i1, in_$i251: i1, in_$i252: i1, in_$i253: i1, in_$i254: i32, in_$i255: i1, in_$p256: ref, in_$i257: i32, in_$i258: i1, in_$p259: ref, in_$i260: i32, in_$i261: i1, in_$p262: ref, in_$i263: i32, in_$i264: i1, in_$i265: i32, in_$i266: i1, in_$i267: i1, in_$i268: i1, in_$i269: i32, in_$i270: i1, in_$p271: ref, in_$i272: i32, in_$i273: i1, in_$p274: ref, in_$i275: i32, in_$i276: i1, in_$i277: i32, in_$i278: i1, in_$i279: i1, in_$i280: i1, in_$i281: i32, in_$i282: i1, in_$p283: ref, in_$i284: i32, in_$i285: i1, in_$p286: ref, in_$i287: i32, in_$i288: i1, in_$i289: i32, in_$i290: i1, in_$i291: i1, in_$i292: i1, in_$i293: i32, in_$i294: i1, in_$p295: ref, in_$i296: i32, in_$i297: i1, in_$p298: ref, in_$i299: i32, in_$i300: i1, in_$i301: i32, in_$i302: i1, in_$i303: i1, in_$i304: i1, in_$i305: i1, in_$i306: i1, in_$i307: i1, in_$i308: i1, in_$i309: i1, in_$i310: i1, in_$i311: i1, in_$i312: i1, in_$i313: i1, in_$i314: i1, in_$i315: i1, in_$i316: i1, in_$i317: i32, in_$i318: i1, in_$p319: ref, in_$i321: i32, in_$i322: i1, in_$p323: ref, in_$i324: i32, in_$i325: i1, in_$p326: ref, in_$i327: i32, in_$i328: i1, in_$p329: ref, in_$i330: i32, in_$i331: i1, in_$p332: ref, in_$i334: i32, in_$i335: i1, in_$p336: ref, in_$i338: i32, in_$i339: i1, in_$p340: ref, in_$i342: i32, in_$i343: i1, in_$p344: ref, in_$i345: i16, in_$i346: i32, in_$i347: i16, in_$i348: i32, in_$i349: i16, in_$i351: i32, in_$i352: i1, in_$p353: ref, in_$i354: i16, in_$i355: i32, in_$i356: i16, in_$i357: i32, in_$i358: i16, in_$i360: i32, in_$i361: i1, in_$p362: ref, in_$i363: i16, in_$i364: i32, in_$i365: i16, in_$i366: i32, in_$i367: i16, in_$i369: i32, in_$i370: i1, in_$p371: ref, in_$i373: i32, in_$i374: i1, in_$p375: ref, in_$i377: i32, in_$i378: i1, in_$p379: ref, in_$i381: i32, in_$i382: i1, in_$p383: ref, in_$i384: i16, in_$i385: i32, in_$i386: i16, in_$i387: i32, in_$i388: i16, in_$i390: i32, in_$i391: i1, in_$p392: ref, in_$i393: i16, in_$i394: i32, in_$i395: i16, in_$i396: i32, in_$i397: i16, in_$i399: i32, in_$i400: i1, in_$p401: ref, in_$i402: i16, in_$i403: i32, in_$i404: i16, in_$i405: i32, in_$i406: i16, in_$i408: i32, in_$i409: i1, in_$p410: ref, in_$i412: i32, in_$i413: i1, in_$p414: ref, in_$i416: i32, in_$i417: i1, in_$p418: ref, in_$i420: i32, in_$i421: i1, in_$p422: ref, in_$i424: i32, in_$i425: i1, in_$p426: ref, in_$i428: i32, in_$i429: i1, in_$p430: ref, in_$i431: i32, in_$i432: i32, in_$i433: i1, in_$i434: i32, in_$i435: i1, in_$p436: ref, in_$i438: i32, in_$i439: i1, in_$p440: ref, in_$i442: i32, in_$i443: i1, in_$p444: ref, in_$i446: i32, in_$i447: i1, in_$p448: ref, in_$i450: i32, in_$i451: i1, in_$p452: ref, in_$i453: i32, in_$i454: i1, in_$p455: ref, in_$i456: i32, in_$i457: i1, in_$p458: ref, in_$i459: i32, in_$i460: i1, in_$i462: i32, in_$i463: i32, in_$i464: i32, in_$i465: i1, in_$i466: i32, in_$i467: i32, in_$i468: i1, in_$i469: i32, in_$i470: i32, in_$i471: i32, in_$i472: i1, in_$i473: i32, in_$i474: i1, in_$i475: i1, in_$i476: i1, in_$i477: i1, in_$i478: i32, in_$i479: i1, in_$p480: ref, in_$i481: i32, in_$i482: i1, in_$p483: ref, in_$i484: i32, in_$i485: i1, in_$p486: ref, in_$i487: i32, in_$i488: i1, in_$i489: i32, in_$i490: i1, in_$i491: i1, in_$i492: i1, in_$i493: i1, in_$i494: i1, in_$i495: i1, in_$i496: i1, in_$i497: i1, in_$i498: i1, in_$i499: i1, in_$i500: i1, in_$i501: i1, in_$i502: i32, in_$i503: i1, in_$p504: ref, in_$i506: i32, in_$i507: i1, in_$p508: ref, in_$i510: i32, in_$i511: i1, in_$p512: ref, in_$i514: i32, in_$i515: i1, in_$p516: ref, in_$i518: i32, in_$i519: i1, in_$p520: ref, in_$i522: i32, in_$i523: i1, in_$p524: ref, in_$i526: i32, in_$i527: i1, in_$p528: ref, in_$i530: i32, in_$i531: i1, in_$p532: ref, in_$i534: i32, in_$i535: i1, in_$p536: ref, in_$i538: i32, in_$i539: i1, in_$p540: ref, in_$i542: i32, in_$i543: i1, in_$p544: ref, in_$i546: i32, in_$i547: i1, in_$p548: ref, in_$i550: i32, in_$i551: i1, in_$p552: ref, in_$i553: i32, in_$i554: i32, in_$i555: i1, in_$i556: i32, in_$i557: i1, in_$p558: ref, in_$i560: i32, in_$i561: i1, in_$p562: ref, in_$i564: i32, in_$i565: i1, in_$p566: ref, in_$i568: i32, in_$i569: i1, in_$p570: ref, in_$i572: i32, in_$i573: i1, in_$p574: ref, in_$i575: i32, in_$i576: i1, in_$p577: ref, in_$i578: i32, in_$i579: i1, in_$p580: ref, in_$i581: i32, in_$i582: i1, in_$i584: i32, in_$i585: i32, in_$i586: i32, in_$i587: i1, in_$i588: i32, in_$i589: i32, in_$i590: i1, in_$i591: i32, in_$i592: i32, in_vslice_dummy_var_72: i32, in_vslice_dummy_var_73: i32, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: i32, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_79: i32, in_vslice_dummy_var_80: i32, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i32, in_vslice_dummy_var_83: i32, in_vslice_dummy_var_84: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: ref, in_vslice_dummy_var_95: ref, in_vslice_dummy_var_96: ref, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i32, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: ref, in_vslice_dummy_var_112: ref, in_vslice_dummy_var_113: ref, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: i32, in_vslice_dummy_var_116: i32, in_vslice_dummy_var_117: i32, in_vslice_dummy_var_118: i32, in_vslice_dummy_var_119: i32, in_vslice_dummy_var_120: i32) returns (out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$p65: ref, out_$i66: i32, out_$i67: i1, out_$i68: i32, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$p76: ref, out_$i77: i32, out_$i78: i1, out_$p79: ref, out_$i80: i32, out_$i81: i1, out_$p82: ref, out_$i84: i32, out_$i85: i1, out_$p86: ref, out_$i87: i32, out_$i88: i1, out_$i89: i32, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i32, out_$i94: i1, out_$p95: ref, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$p103: ref, out_$i105: i32, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i1, out_$i111: i32, out_$i112: i1, out_$i113: i1, out_$i114: i1, out_$i115: i32, out_$i116: i1, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i122: i32, out_$i123: i1, out_$i124: i32, out_$i125: i1, out_$i126: i32, out_$i127: i1, out_$i128: i32, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i32, out_$i133: i1, out_$p134: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$i138: i32, out_$i139: i1, out_$i140: i32, out_$i141: i1, out_$i142: i1, out_$i143: i1, out_$i144: i32, out_$i145: i1, out_$p146: ref, out_$i147: i32, out_$i148: i1, out_$p149: ref, out_$i150: i32, out_$i151: i1, out_$i152: i32, out_$i153: i1, out_$i154: i1, out_$i155: i1, out_$i156: i1, out_$i157: i1, out_$i158: i1, out_$i159: i1, out_$i160: i1, out_$i161: i1, out_$i162: i1, out_$i163: i1, out_$i164: i1, out_$i165: i32, out_$i166: i1, out_$p167: ref, out_$i169: i32, out_$i170: i1, out_$p171: ref, out_$p172: ref, out_$i174: i32, out_$i175: i1, out_$p176: ref, out_$i177: i32, out_$i178: i1, out_$p179: ref, out_$p180: ref, out_$i182: i32, out_$i183: i1, out_$p184: ref, out_$i185: i32, out_$i186: i1, out_$p187: ref, out_$i188: i32, out_$i189: i1, out_$p190: ref, out_$i192: i32, out_$i193: i1, out_$p194: ref, out_$p195: ref, out_$i196: i32, out_$i197: i1, out_$p198: ref, out_$i200: i32, out_$i201: i1, out_$p202: ref, out_$p203: ref, out_$i205: i32, out_$i206: i1, out_$p207: ref, out_$i209: i32, out_$i210: i1, out_$i211: i32, out_$i212: i1, out_$i213: i1, out_$i214: i1, out_$i215: i32, out_$i216: i1, out_$p217: ref, out_$i218: i32, out_$i219: i32, out_$i220: i1, out_$i221: i32, out_$i222: i32, out_$i223: i32, out_$i224: i1, out_$p225: ref, out_$i226: i32, out_$i227: i32, out_$i228: i1, out_$i229: i32, out_$i230: i32, out_$i231: i32, out_$i232: i1, out_$i233: i32, out_$i234: i1, out_$i235: i1, out_$i236: i1, out_$i237: i1, out_$i238: i32, out_$i239: i1, out_$p240: ref, out_$i241: i32, out_$i242: i1, out_$p243: ref, out_$i244: i32, out_$i245: i1, out_$p246: ref, out_$i247: i32, out_$i248: i1, out_$i249: i32, out_$i250: i1, out_$i251: i1, out_$i252: i1, out_$i253: i1, out_$i254: i32, out_$i255: i1, out_$p256: ref, out_$i257: i32, out_$i258: i1, out_$p259: ref, out_$i260: i32, out_$i261: i1, out_$p262: ref, out_$i263: i32, out_$i264: i1, out_$i265: i32, out_$i266: i1, out_$i267: i1, out_$i268: i1, out_$i269: i32, out_$i270: i1, out_$p271: ref, out_$i272: i32, out_$i273: i1, out_$p274: ref, out_$i275: i32, out_$i276: i1, out_$i277: i32, out_$i278: i1, out_$i279: i1, out_$i280: i1, out_$i281: i32, out_$i282: i1, out_$p283: ref, out_$i284: i32, out_$i285: i1, out_$p286: ref, out_$i287: i32, out_$i288: i1, out_$i289: i32, out_$i290: i1, out_$i291: i1, out_$i292: i1, out_$i293: i32, out_$i294: i1, out_$p295: ref, out_$i296: i32, out_$i297: i1, out_$p298: ref, out_$i299: i32, out_$i300: i1, out_$i301: i32, out_$i302: i1, out_$i303: i1, out_$i304: i1, out_$i305: i1, out_$i306: i1, out_$i307: i1, out_$i308: i1, out_$i309: i1, out_$i310: i1, out_$i311: i1, out_$i312: i1, out_$i313: i1, out_$i314: i1, out_$i315: i1, out_$i316: i1, out_$i317: i32, out_$i318: i1, out_$p319: ref, out_$i321: i32, out_$i322: i1, out_$p323: ref, out_$i324: i32, out_$i325: i1, out_$p326: ref, out_$i327: i32, out_$i328: i1, out_$p329: ref, out_$i330: i32, out_$i331: i1, out_$p332: ref, out_$i334: i32, out_$i335: i1, out_$p336: ref, out_$i338: i32, out_$i339: i1, out_$p340: ref, out_$i342: i32, out_$i343: i1, out_$p344: ref, out_$i345: i16, out_$i346: i32, out_$i347: i16, out_$i348: i32, out_$i349: i16, out_$i351: i32, out_$i352: i1, out_$p353: ref, out_$i354: i16, out_$i355: i32, out_$i356: i16, out_$i357: i32, out_$i358: i16, out_$i360: i32, out_$i361: i1, out_$p362: ref, out_$i363: i16, out_$i364: i32, out_$i365: i16, out_$i366: i32, out_$i367: i16, out_$i369: i32, out_$i370: i1, out_$p371: ref, out_$i373: i32, out_$i374: i1, out_$p375: ref, out_$i377: i32, out_$i378: i1, out_$p379: ref, out_$i381: i32, out_$i382: i1, out_$p383: ref, out_$i384: i16, out_$i385: i32, out_$i386: i16, out_$i387: i32, out_$i388: i16, out_$i390: i32, out_$i391: i1, out_$p392: ref, out_$i393: i16, out_$i394: i32, out_$i395: i16, out_$i396: i32, out_$i397: i16, out_$i399: i32, out_$i400: i1, out_$p401: ref, out_$i402: i16, out_$i403: i32, out_$i404: i16, out_$i405: i32, out_$i406: i16, out_$i408: i32, out_$i409: i1, out_$p410: ref, out_$i412: i32, out_$i413: i1, out_$p414: ref, out_$i416: i32, out_$i417: i1, out_$p418: ref, out_$i420: i32, out_$i421: i1, out_$p422: ref, out_$i424: i32, out_$i425: i1, out_$p426: ref, out_$i428: i32, out_$i429: i1, out_$p430: ref, out_$i431: i32, out_$i432: i32, out_$i433: i1, out_$i434: i32, out_$i435: i1, out_$p436: ref, out_$i438: i32, out_$i439: i1, out_$p440: ref, out_$i442: i32, out_$i443: i1, out_$p444: ref, out_$i446: i32, out_$i447: i1, out_$p448: ref, out_$i450: i32, out_$i451: i1, out_$p452: ref, out_$i453: i32, out_$i454: i1, out_$p455: ref, out_$i456: i32, out_$i457: i1, out_$p458: ref, out_$i459: i32, out_$i460: i1, out_$i462: i32, out_$i463: i32, out_$i464: i32, out_$i465: i1, out_$i466: i32, out_$i467: i32, out_$i468: i1, out_$i469: i32, out_$i470: i32, out_$i471: i32, out_$i472: i1, out_$i473: i32, out_$i474: i1, out_$i475: i1, out_$i476: i1, out_$i477: i1, out_$i478: i32, out_$i479: i1, out_$p480: ref, out_$i481: i32, out_$i482: i1, out_$p483: ref, out_$i484: i32, out_$i485: i1, out_$p486: ref, out_$i487: i32, out_$i488: i1, out_$i489: i32, out_$i490: i1, out_$i491: i1, out_$i492: i1, out_$i493: i1, out_$i494: i1, out_$i495: i1, out_$i496: i1, out_$i497: i1, out_$i498: i1, out_$i499: i1, out_$i500: i1, out_$i501: i1, out_$i502: i32, out_$i503: i1, out_$p504: ref, out_$i506: i32, out_$i507: i1, out_$p508: ref, out_$i510: i32, out_$i511: i1, out_$p512: ref, out_$i514: i32, out_$i515: i1, out_$p516: ref, out_$i518: i32, out_$i519: i1, out_$p520: ref, out_$i522: i32, out_$i523: i1, out_$p524: ref, out_$i526: i32, out_$i527: i1, out_$p528: ref, out_$i530: i32, out_$i531: i1, out_$p532: ref, out_$i534: i32, out_$i535: i1, out_$p536: ref, out_$i538: i32, out_$i539: i1, out_$p540: ref, out_$i542: i32, out_$i543: i1, out_$p544: ref, out_$i546: i32, out_$i547: i1, out_$p548: ref, out_$i550: i32, out_$i551: i1, out_$p552: ref, out_$i553: i32, out_$i554: i32, out_$i555: i1, out_$i556: i32, out_$i557: i1, out_$p558: ref, out_$i560: i32, out_$i561: i1, out_$p562: ref, out_$i564: i32, out_$i565: i1, out_$p566: ref, out_$i568: i32, out_$i569: i1, out_$p570: ref, out_$i572: i32, out_$i573: i1, out_$p574: ref, out_$i575: i32, out_$i576: i1, out_$p577: ref, out_$i578: i32, out_$i579: i1, out_$p580: ref, out_$i581: i32, out_$i582: i1, out_$i584: i32, out_$i585: i32, out_$i586: i32, out_$i587: i1, out_$i588: i32, out_$i589: i32, out_$i590: i1, out_$i591: i32, out_$i592: i32, out_vslice_dummy_var_72: i32, out_vslice_dummy_var_73: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: i32, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_79: i32, out_vslice_dummy_var_80: i32, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i32, out_vslice_dummy_var_83: i32, out_vslice_dummy_var_84: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: ref, out_vslice_dummy_var_95: ref, out_vslice_dummy_var_96: ref, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i32, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: ref, out_vslice_dummy_var_112: ref, out_vslice_dummy_var_113: ref, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: i32, out_vslice_dummy_var_116: i32, out_vslice_dummy_var_117: i32, out_vslice_dummy_var_118: i32, out_vslice_dummy_var_119: i32, out_vslice_dummy_var_120: i32);
  modifies $M.54, $M.55, $M.0, $M.34, $M.35, $M.5, $M.4, $M.3, $M.2, $CurrAddr, $M.58, $M.56, $M.71, $M.21, $M.26, $M.7, $M.40, $M.41, $M.42, $M.62, $M.37, $M.50, $M.63, $M.45, $M.44, $M.64, $M.49, $M.65, $M.47, $M.67, $M.51, $M.66, $M.46, $M.68, $M.48, $M.60, $M.39, $M.69, $M.36, $M.61, $M.59, $M.72, $M.38, $M.9, $M.11, $M.13, $M.8, $M.16, $M.10, $M.17, $M.12, $M.18, $M.14, $M.19, $M.73, $M.74, $M.75, $M.76, $M.70, $M.78, $M.79;


