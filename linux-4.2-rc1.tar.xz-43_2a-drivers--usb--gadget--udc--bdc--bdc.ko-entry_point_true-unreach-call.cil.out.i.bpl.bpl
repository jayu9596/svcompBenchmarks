var $M.0: [ref]ref;

var $M.1: [ref]ref;

var $M.2: [ref]ref;

var $M.3: [ref]ref;

var $M.4: [ref]i24;

var $M.5: [ref]i8;

var $M.6: [ref]i8;

var $M.8: [ref]i8;

var $M.9: i32;

var $M.18: [ref]i64;

var $M.19: [ref]ref;

var $M.20: [ref]i32;

var $M.21: [ref]ref;

var $M.22: [ref]ref;

var $M.23: [ref]ref;

var $M.24: [ref]ref;

var $M.25: [ref]ref;

var $M.26: [ref]i24;

var $M.27: [ref]i8;

var $M.28: [ref]i8;

var $M.29: ref;

var $M.30: i32;

var $M.32: i32;

var $M.33: i32;

var $M.34: i32;

var $M.35: i32;

var $M.36: i32;

var $M.37: i32;

var $M.38: i32;

var $M.39: i32;

var $M.40: ref;

var $M.41: ref;

var $M.42: ref;

var $M.67: [ref]i8;

var $M.68: [ref]i8;

var $M.69: [ref]i8;

var $M.70: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 611036);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const probed_4: ref;

axiom probed_4 == $sub.ref(0, 2056);

const bdc_driver_group1: ref;

axiom bdc_driver_group1 == $sub.ref(0, 3088);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 4116);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 5144);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 6172);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 7200);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 8228);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 9256);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 10284);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 11312);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 12340);

const bdc_gadget_ep_ops_group0: ref;

axiom bdc_gadget_ep_ops_group0 == $sub.ref(0, 13372);

const bdc_gadget_ep_ops_group1: ref;

axiom bdc_gadget_ep_ops_group1 == $sub.ref(0, 14404);

const ldv_work_1_0: ref;

axiom ldv_work_1_0 == $sub.ref(0, 15432);

const ldv_work_struct_1_0: ref;

axiom ldv_work_struct_1_0 == $sub.ref(0, 16464);

const ldv_work_1_1: ref;

axiom ldv_work_1_1 == $sub.ref(0, 17492);

const ldv_work_struct_1_1: ref;

axiom ldv_work_struct_1_1 == $sub.ref(0, 18524);

const ldv_work_1_2: ref;

axiom ldv_work_1_2 == $sub.ref(0, 19552);

const ldv_work_struct_1_2: ref;

axiom ldv_work_struct_1_2 == $sub.ref(0, 20584);

const ldv_work_1_3: ref;

axiom ldv_work_1_3 == $sub.ref(0, 21612);

const ldv_work_struct_1_3: ref;

axiom ldv_work_struct_1_3 == $sub.ref(0, 22644);

const bdc_gadget_ops_group0: ref;

axiom bdc_gadget_ops_group0 == $sub.ref(0, 23676);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 24704);

const bdc_gadget_ep0_desc: ref;

axiom bdc_gadget_ep0_desc == $sub.ref(0, 25738);

const bdc_gadget_ops: ref;

axiom bdc_gadget_ops == $sub.ref(0, 26842);

const {:count 5} conn_speed_str: ref;

axiom conn_speed_str == $sub.ref(0, 27906);

const bdc_gadget_ep_ops: ref;

axiom bdc_gadget_ep_ops == $sub.ref(0, 29010);

const {:count 6} ep0_state_string: ref;

axiom ep0_state_string == $sub.ref(0, 30082);

const bdc_driver: ref;

axiom bdc_driver == $sub.ref(0, 31282);

const {:count 9} .str.84: ref;

axiom .str.84 == $sub.ref(0, 32315);

const .str: ref;

axiom .str == $sub.ref(0, 33343);

const {:count 11} .str.129: ref;

axiom .str.129 == $sub.ref(0, 34378);

const {:count 216} .str.2: ref;

axiom .str.2 == $sub.ref(0, 35618);

const {:count 7} .str.6: ref;

axiom .str.6 == $sub.ref(0, 36649);

const {:count 12} .str.128: ref;

axiom .str.128 == $sub.ref(0, 37685);

const {:count 13} .str.127: ref;

axiom .str.127 == $sub.ref(0, 38722);

const {:count 4} .str.17: ref;

axiom .str.17 == $sub.ref(0, 39750);

const {:count 13} .str.91: ref;

axiom .str.91 == $sub.ref(0, 40787);

const {:count 215} .str.77: ref;

axiom .str.77 == $sub.ref(0, 42026);

const {:count 6} .str.73: ref;

axiom .str.73 == $sub.ref(0, 43056);

const {:count 12} .str.52: ref;

axiom .str.52 == $sub.ref(0, 44092);

const {:count 214} .str.46: ref;

axiom .str.46 == $sub.ref(0, 45330);

const {:count 16} .str.148: ref;

axiom .str.148 == $sub.ref(0, 46370);

const {:count 22} .str.149: ref;

axiom .str.149 == $sub.ref(0, 47416);

const {:count 18} .str.150: ref;

axiom .str.150 == $sub.ref(0, 48458);

const {:count 22} .str.151: ref;

axiom .str.151 == $sub.ref(0, 49504);

const {:count 24} .str.152: ref;

axiom .str.152 == $sub.ref(0, 50552);

const {:count 26} .str.153: ref;

axiom .str.153 == $sub.ref(0, 51602);

const {:count 36} .str.154: ref;

axiom .str.154 == $sub.ref(0, 52662);

const {:count 15} .str.45: ref;

axiom .str.45 == $sub.ref(0, 53701);

const {:count 20} .str.47: ref;

axiom .str.47 == $sub.ref(0, 54745);

const {:count 43} .str.48: ref;

axiom .str.48 == $sub.ref(0, 55812);

const {:count 15} .str.18: ref;

axiom .str.18 == $sub.ref(0, 56851);

const {:count 215} .str.19: ref;

axiom .str.19 == $sub.ref(0, 58090);

const {:count 29} .str.20: ref;

axiom .str.20 == $sub.ref(0, 59143);

const {:count 15} .str.130: ref;

axiom .str.130 == $sub.ref(0, 60182);

const {:count 62} .str.131: ref;

axiom .str.131 == $sub.ref(0, 61268);

const {:count 28} .str.132: ref;

axiom .str.132 == $sub.ref(0, 62320);

const {:count 32} .str.133: ref;

axiom .str.133 == $sub.ref(0, 63376);

const {:count 25} .str.134: ref;

axiom .str.134 == $sub.ref(0, 64425);

const {:count 25} .str.135: ref;

axiom .str.135 == $sub.ref(0, 65474);

const {:count 17} .str.136: ref;

axiom .str.136 == $sub.ref(0, 66515);

const {:count 20} .str.137: ref;

axiom .str.137 == $sub.ref(0, 67559);

const {:count 36} .str.138: ref;

axiom .str.138 == $sub.ref(0, 68619);

const {:count 36} .str.139: ref;

axiom .str.139 == $sub.ref(0, 69679);

const {:count 9} .str.66: ref;

axiom .str.66 == $sub.ref(0, 70712);

const {:count 14} .str.140: ref;

axiom .str.140 == $sub.ref(0, 71750);

const {:count 9} .str.141: ref;

axiom .str.141 == $sub.ref(0, 72783);

const {:count 30} .str.142: ref;

axiom .str.142 == $sub.ref(0, 73837);

const {:count 42} .str.143: ref;

axiom .str.143 == $sub.ref(0, 74903);

const {:count 17} .str.146: ref;

axiom .str.146 == $sub.ref(0, 75944);

const {:count 20} .str.147: ref;

axiom .str.147 == $sub.ref(0, 76988);

const {:count 12} .str.41: ref;

axiom .str.41 == $sub.ref(0, 78024);

const {:count 26} .str.42: ref;

axiom .str.42 == $sub.ref(0, 79074);

const {:count 38} .str.43: ref;

axiom .str.43 == $sub.ref(0, 80136);

const {:count 48} .str.44: ref;

axiom .str.44 == $sub.ref(0, 81208);

const {:count 10} .str.100: ref;

axiom .str.100 == $sub.ref(0, 82242);

const {:count 15} .str.101: ref;

axiom .str.101 == $sub.ref(0, 83281);

const {:count 28} .str.102: ref;

axiom .str.102 == $sub.ref(0, 84333);

const {:count 21} .str.103: ref;

axiom .str.103 == $sub.ref(0, 85378);

const {:count 22} .str.104: ref;

axiom .str.104 == $sub.ref(0, 86424);

const {:count 22} .str.105: ref;

axiom .str.105 == $sub.ref(0, 87470);

const {:count 41} .str.106: ref;

axiom .str.106 == $sub.ref(0, 88535);

const {:count 22} .str.107: ref;

axiom .str.107 == $sub.ref(0, 89581);

const {:count 21} .str.108: ref;

axiom .str.108 == $sub.ref(0, 90626);

const {:count 28} .str.109: ref;

axiom .str.109 == $sub.ref(0, 91678);

const {:count 13} .str.83: ref;

axiom .str.83 == $sub.ref(0, 92715);

const {:count 30} .str.85: ref;

axiom .str.85 == $sub.ref(0, 93769);

const {:count 22} .str.86: ref;

axiom .str.86 == $sub.ref(0, 94815);

const {:count 24} .str.87: ref;

axiom .str.87 == $sub.ref(0, 95863);

const {:count 19} .str.88: ref;

axiom .str.88 == $sub.ref(0, 96906);

const {:count 34} .str.89: ref;

axiom .str.89 == $sub.ref(0, 97964);

const {:count 35} .str.90: ref;

axiom .str.90 == $sub.ref(0, 99023);

const {:count 20} .str.292: ref;

axiom .str.292 == $sub.ref(0, 100067);

const {:count 36} .str.293: ref;

axiom .str.293 == $sub.ref(0, 101127);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 21} .str.31: ref;

axiom .str.31 == $sub.ref(0, 102172);

const {:count 12} .str.32: ref;

axiom .str.32 == $sub.ref(0, 103208);

const {:count 25} .str.33: ref;

axiom .str.33 == $sub.ref(0, 104257);

const {:count 14} .str.49: ref;

axiom .str.49 == $sub.ref(0, 105295);

const {:count 21} .str.50: ref;

axiom .str.50 == $sub.ref(0, 106340);

const {:count 33} .str.51: ref;

axiom .str.51 == $sub.ref(0, 107397);

const {:count 14} .str.21: ref;

axiom .str.21 == $sub.ref(0, 108435);

const {:count 28} .str.22: ref;

axiom .str.22 == $sub.ref(0, 109487);

const {:count 19} .str.23: ref;

axiom .str.23 == $sub.ref(0, 110530);

const {:count 23} .str.24: ref;

axiom .str.24 == $sub.ref(0, 111577);

const {:count 20} .str.25: ref;

axiom .str.25 == $sub.ref(0, 112621);

const {:count 18} .str.144: ref;

axiom .str.144 == $sub.ref(0, 113663);

const {:count 16} .str.145: ref;

axiom .str.145 == $sub.ref(0, 114703);

const {:count 17} .str.155: ref;

axiom .str.155 == $sub.ref(0, 115744);

const {:count 22} .str.156: ref;

axiom .str.156 == $sub.ref(0, 116790);

const {:count 47} .str.157: ref;

axiom .str.157 == $sub.ref(0, 117861);

const {:count 12} .str.72: ref;

axiom .str.72 == $sub.ref(0, 118897);

const {:count 21} .str.74: ref;

axiom .str.74 == $sub.ref(0, 119942);

const {:count 33} .str.75: ref;

axiom .str.75 == $sub.ref(0, 120999);

const {:count 8} .str.234: ref;

axiom .str.234 == $sub.ref(0, 122031);

const {:count 20} .str.235: ref;

axiom .str.235 == $sub.ref(0, 123075);

const {:count 5} .str.236: ref;

axiom .str.236 == $sub.ref(0, 124104);

const {:count 3} .str.238: ref;

axiom .str.238 == $sub.ref(0, 125131);

const {:count 4} .str.239: ref;

axiom .str.239 == $sub.ref(0, 126159);

const {:count 7} .str.237: ref;

axiom .str.237 == $sub.ref(0, 127190);

const {:count 48} .str.240: ref;

axiom .str.240 == $sub.ref(0, 128262);

const {:count 36} .str.283: ref;

axiom .str.283 == $sub.ref(0, 129322);

const {:count 18} .str.284: ref;

axiom .str.284 == $sub.ref(0, 130364);

const {:count 49} .str.285: ref;

axiom .str.285 == $sub.ref(0, 131437);

const {:count 12} .str.286: ref;

axiom .str.286 == $sub.ref(0, 132473);

const {:count 12} .str.287: ref;

axiom .str.287 == $sub.ref(0, 133509);

const {:count 19} .str.288: ref;

axiom .str.288 == $sub.ref(0, 134552);

const {:count 19} .str.289: ref;

axiom .str.289 == $sub.ref(0, 135595);

const {:count 11} .str.16: ref;

axiom .str.16 == $sub.ref(0, 136630);

const {:count 8} .str.8: ref;

axiom .str.8 == $sub.ref(0, 137662);

const {:count 33} .str.9: ref;

axiom .str.9 == $sub.ref(0, 138719);

const {:count 28} .str.10: ref;

axiom .str.10 == $sub.ref(0, 139771);

const {:count 41} .str.11: ref;

axiom .str.11 == $sub.ref(0, 140836);

const {:count 9} .str.92: ref;

axiom .str.92 == $sub.ref(0, 141869);

const {:count 28} .str.93: ref;

axiom .str.93 == $sub.ref(0, 142921);

const {:count 39} .str.94: ref;

axiom .str.94 == $sub.ref(0, 143984);

const {:count 13} .str.95: ref;

axiom .str.95 == $sub.ref(0, 145021);

const {:count 21} .str.96: ref;

axiom .str.96 == $sub.ref(0, 146066);

const {:count 42} .str.97: ref;

axiom .str.97 == $sub.ref(0, 147132);

const {:count 13} .str.98: ref;

axiom .str.98 == $sub.ref(0, 148169);

const {:count 14} .str.99: ref;

axiom .str.99 == $sub.ref(0, 149207);

const {:count 25} .str.59: ref;

axiom .str.59 == $sub.ref(0, 150256);

const {:count 16} .str.60: ref;

axiom .str.60 == $sub.ref(0, 151296);

const {:count 36} .str.61: ref;

axiom .str.61 == $sub.ref(0, 152356);

const {:count 46} .str.62: ref;

axiom .str.62 == $sub.ref(0, 153426);

const {:count 13} .str.58: ref;

axiom .str.58 == $sub.ref(0, 154463);

const {:count 10} .str.216: ref;

axiom .str.216 == $sub.ref(0, 155497);

const {:count 14} .str.207: ref;

axiom .str.207 == $sub.ref(0, 156535);

const {:count 11} .str.208: ref;

axiom .str.208 == $sub.ref(0, 157570);

const {:count 23} .str.209: ref;

axiom .str.209 == $sub.ref(0, 158617);

const {:count 31} .str.210: ref;

axiom .str.210 == $sub.ref(0, 159672);

const {:count 19} .str.211: ref;

axiom .str.211 == $sub.ref(0, 160715);

const {:count 35} .str.212: ref;

axiom .str.212 == $sub.ref(0, 161774);

const {:count 48} .str.213: ref;

axiom .str.213 == $sub.ref(0, 162846);

const {:count 23} .str.171: ref;

axiom .str.171 == $sub.ref(0, 163893);

const {:count 21} .str.172: ref;

axiom .str.172 == $sub.ref(0, 164938);

const {:count 27} .str.173: ref;

axiom .str.173 == $sub.ref(0, 165989);

const {:count 21} .str.174: ref;

axiom .str.174 == $sub.ref(0, 167034);

const {:count 23} .str.175: ref;

axiom .str.175 == $sub.ref(0, 168081);

const {:count 20} .str.176: ref;

axiom .str.176 == $sub.ref(0, 169125);

const {:count 17} .str.177: ref;

axiom .str.177 == $sub.ref(0, 170166);

const {:count 37} .str.178: ref;

axiom .str.178 == $sub.ref(0, 171227);

const {:count 12} .str.214: ref;

axiom .str.214 == $sub.ref(0, 172263);

const {:count 21} .str.215: ref;

axiom .str.215 == $sub.ref(0, 173308);

const {:count 21} .str.204: ref;

axiom .str.204 == $sub.ref(0, 174353);

const {:count 10} .str.205: ref;

axiom .str.205 == $sub.ref(0, 175387);

const {:count 23} .str.206: ref;

axiom .str.206 == $sub.ref(0, 176434);

const {:count 18} .str.199: ref;

axiom .str.199 == $sub.ref(0, 177476);

const {:count 33} .str.200: ref;

axiom .str.200 == $sub.ref(0, 178533);

const {:count 21} .str.184: ref;

axiom .str.184 == $sub.ref(0, 179578);

const {:count 20} .str.187: ref;

axiom .str.187 == $sub.ref(0, 180622);

const {:count 35} .str.201: ref;

axiom .str.201 == $sub.ref(0, 181681);

const {:count 34} .str.202: ref;

axiom .str.202 == $sub.ref(0, 182739);

const {:count 17} .str.203: ref;

axiom .str.203 == $sub.ref(0, 183780);

const {:count 19} .str.182: ref;

axiom .str.182 == $sub.ref(0, 184823);

const {:count 53} .str.183: ref;

axiom .str.183 == $sub.ref(0, 185900);

const {:count 19} .str.185: ref;

axiom .str.185 == $sub.ref(0, 186943);

const {:count 21} .str.186: ref;

axiom .str.186 == $sub.ref(0, 187988);

const {:count 27} .str.188: ref;

axiom .str.188 == $sub.ref(0, 189039);

const {:count 10} .str.189: ref;

axiom .str.189 == $sub.ref(0, 190073);

const {:count 19} .str.190: ref;

axiom .str.190 == $sub.ref(0, 191116);

const {:count 23} .str.191: ref;

axiom .str.191 == $sub.ref(0, 192163);

const {:count 24} .str.192: ref;

axiom .str.192 == $sub.ref(0, 193211);

const {:count 26} .str.193: ref;

axiom .str.193 == $sub.ref(0, 194261);

const {:count 22} .str.194: ref;

axiom .str.194 == $sub.ref(0, 195307);

const {:count 22} .str.195: ref;

axiom .str.195 == $sub.ref(0, 196353);

const {:count 22} .str.196: ref;

axiom .str.196 == $sub.ref(0, 197399);

const {:count 24} .str.197: ref;

axiom .str.197 == $sub.ref(0, 198447);

const {:count 19} .str.198: ref;

axiom .str.198 == $sub.ref(0, 199490);

const {:count 16} .str.179: ref;

axiom .str.179 == $sub.ref(0, 200530);

const {:count 25} .str.180: ref;

axiom .str.180 == $sub.ref(0, 201579);

const {:count 38} .str.181: ref;

axiom .str.181 == $sub.ref(0, 202641);

const {:count 19} .str.29: ref;

axiom .str.29 == $sub.ref(0, 203684);

const {:count 12} .str.30: ref;

axiom .str.30 == $sub.ref(0, 204720);

const {:count 12} .str.164: ref;

axiom .str.164 == $sub.ref(0, 205756);

const {:count 19} .str.165: ref;

axiom .str.165 == $sub.ref(0, 206799);

const {:count 6} .str.166: ref;

axiom .str.166 == $sub.ref(0, 207829);

const {:count 27} .str.167: ref;

axiom .str.167 == $sub.ref(0, 208880);

const {:count 14} .str.168: ref;

axiom .str.168 == $sub.ref(0, 209918);

const {:count 29} .str.169: ref;

axiom .str.169 == $sub.ref(0, 210971);

const {:count 14} .str.170: ref;

axiom .str.170 == $sub.ref(0, 212009);

const {:count 19} .str.38: ref;

axiom .str.38 == $sub.ref(0, 213052);

const {:count 14} .str.39: ref;

axiom .str.39 == $sub.ref(0, 214090);

const {:count 19} .str.40: ref;

axiom .str.40 == $sub.ref(0, 215133);

const {:count 17} .str.36: ref;

axiom .str.36 == $sub.ref(0, 216174);

const {:count 13} .str.37: ref;

axiom .str.37 == $sub.ref(0, 217211);

const {:count 23} .str.56: ref;

axiom .str.56 == $sub.ref(0, 218258);

const {:count 38} .str.57: ref;

axiom .str.57 == $sub.ref(0, 219320);

const {:count 23} .str.53: ref;

axiom .str.53 == $sub.ref(0, 220367);

const {:count 17} .str.54: ref;

axiom .str.54 == $sub.ref(0, 221408);

const {:count 22} .str.55: ref;

axiom .str.55 == $sub.ref(0, 222454);

const {:count 12} .str.76: ref;

axiom .str.76 == $sub.ref(0, 223490);

const {:count 16} .str.78: ref;

axiom .str.78 == $sub.ref(0, 224530);

const {:count 18} .str.79: ref;

axiom .str.79 == $sub.ref(0, 225572);

const {:count 23} .str.80: ref;

axiom .str.80 == $sub.ref(0, 226619);

const {:count 11} .str.81: ref;

axiom .str.81 == $sub.ref(0, 227654);

const {:count 9} .str.82: ref;

axiom .str.82 == $sub.ref(0, 228687);

const {:count 19} .str.273: ref;

axiom .str.273 == $sub.ref(0, 229730);

const {:count 13} .str.274: ref;

axiom .str.274 == $sub.ref(0, 230767);

const {:count 17} .str.275: ref;

axiom .str.275 == $sub.ref(0, 231808);

const {:count 17} .str.276: ref;

axiom .str.276 == $sub.ref(0, 232849);

const {:count 19} .str.277: ref;

axiom .str.277 == $sub.ref(0, 233892);

const {:count 25} .str.267: ref;

axiom .str.267 == $sub.ref(0, 234941);

const {:count 18} .str.268: ref;

axiom .str.268 == $sub.ref(0, 235983);

const {:count 22} .str.269: ref;

axiom .str.269 == $sub.ref(0, 237029);

const {:count 24} .str.270: ref;

axiom .str.270 == $sub.ref(0, 238077);

const {:count 22} .str.271: ref;

axiom .str.271 == $sub.ref(0, 239123);

const {:count 15} .str.272: ref;

axiom .str.272 == $sub.ref(0, 240162);

const {:count 22} .str.266: ref;

axiom .str.266 == $sub.ref(0, 241208);

const {:count 13} .str.12: ref;

axiom .str.12 == $sub.ref(0, 242245);

const {:count 17} .str.13: ref;

axiom .str.13 == $sub.ref(0, 243286);

const {:count 24} .str.63: ref;

axiom .str.63 == $sub.ref(0, 244334);

const {:count 11} .str.64: ref;

axiom .str.64 == $sub.ref(0, 245369);

const {:count 35} .str.65: ref;

axiom .str.65 == $sub.ref(0, 246428);

const {:count 23} .str.67: ref;

axiom .str.67 == $sub.ref(0, 247475);

const {:count 40} .str.68: ref;

axiom .str.68 == $sub.ref(0, 248539);

const {:count 27} .str.69: ref;

axiom .str.69 == $sub.ref(0, 249590);

const {:count 26} .str.70: ref;

axiom .str.70 == $sub.ref(0, 250640);

const {:count 26} .str.71: ref;

axiom .str.71 == $sub.ref(0, 251690);

const {:count 14} .str.232: ref;

axiom .str.232 == $sub.ref(0, 252728);

const {:count 22} .str.233: ref;

axiom .str.233 == $sub.ref(0, 253774);

const {:count 17} .str.227: ref;

axiom .str.227 == $sub.ref(0, 254815);

const {:count 14} .str.228: ref;

axiom .str.228 == $sub.ref(0, 255853);

const {:count 26} .str.229: ref;

axiom .str.229 == $sub.ref(0, 256903);

const {:count 22} .str.230: ref;

axiom .str.230 == $sub.ref(0, 257949);

const {:count 18} .str.231: ref;

axiom .str.231 == $sub.ref(0, 258991);

const {:count 23} .str.217: ref;

axiom .str.217 == $sub.ref(0, 260038);

const {:count 11} .str.218: ref;

axiom .str.218 == $sub.ref(0, 261073);

const {:count 29} .str.219: ref;

axiom .str.219 == $sub.ref(0, 262126);

const {:count 19} .str.220: ref;

axiom .str.220 == $sub.ref(0, 263169);

const {:count 42} .str.221: ref;

axiom .str.221 == $sub.ref(0, 264235);

const {:count 17} .str.222: ref;

axiom .str.222 == $sub.ref(0, 265276);

const {:count 14} .str.223: ref;

axiom .str.223 == $sub.ref(0, 266314);

const {:count 10} .str.224: ref;

axiom .str.224 == $sub.ref(0, 267348);

const {:count 36} .str.225: ref;

axiom .str.225 == $sub.ref(0, 268408);

const {:count 28} .str.226: ref;

axiom .str.226 == $sub.ref(0, 269460);

const {:count 10} .str.5: ref;

axiom .str.5 == $sub.ref(0, 270494);

const {:count 27} .str.7: ref;

axiom .str.7 == $sub.ref(0, 271545);

const {:count 9} .str.1: ref;

axiom .str.1 == $sub.ref(0, 272578);

const {:count 8} .str.3: ref;

axiom .str.3 == $sub.ref(0, 273610);

const {:count 26} .str.4: ref;

axiom .str.4 == $sub.ref(0, 274660);

const {:count 19} .str.290: ref;

axiom .str.290 == $sub.ref(0, 275703);

const {:count 19} .str.291: ref;

axiom .str.291 == $sub.ref(0, 276746);

const {:count 12} .str.110: ref;

axiom .str.110 == $sub.ref(0, 277782);

const {:count 36} .str.111: ref;

axiom .str.111 == $sub.ref(0, 278842);

const {:count 28} .str.112: ref;

axiom .str.112 == $sub.ref(0, 279894);

const {:count 14} .str.113: ref;

axiom .str.113 == $sub.ref(0, 280932);

const {:count 14} .str.114: ref;

axiom .str.114 == $sub.ref(0, 281970);

const {:count 27} .str.115: ref;

axiom .str.115 == $sub.ref(0, 283021);

const {:count 14} .str.116: ref;

axiom .str.116 == $sub.ref(0, 284059);

const {:count 14} .str.117: ref;

axiom .str.117 == $sub.ref(0, 285097);

const {:count 28} .str.118: ref;

axiom .str.118 == $sub.ref(0, 286149);

const {:count 23} .str.119: ref;

axiom .str.119 == $sub.ref(0, 287196);

const {:count 28} .str.120: ref;

axiom .str.120 == $sub.ref(0, 288248);

const {:count 10} .str.125: ref;

axiom .str.125 == $sub.ref(0, 289282);

const {:count 24} .str.126: ref;

axiom .str.126 == $sub.ref(0, 290330);

const {:count 17} .str.121: ref;

axiom .str.121 == $sub.ref(0, 291371);

const {:count 22} .str.122: ref;

axiom .str.122 == $sub.ref(0, 292417);

const {:count 30} .str.123: ref;

axiom .str.123 == $sub.ref(0, 293471);

const {:count 36} .str.124: ref;

axiom .str.124 == $sub.ref(0, 294531);

const {:count 15} .str.158: ref;

axiom .str.158 == $sub.ref(0, 295570);

const {:count 20} .str.159: ref;

axiom .str.159 == $sub.ref(0, 296614);

const {:count 19} .str.160: ref;

axiom .str.160 == $sub.ref(0, 297657);

const {:count 22} .str.161: ref;

axiom .str.161 == $sub.ref(0, 298703);

const {:count 21} .str.162: ref;

axiom .str.162 == $sub.ref(0, 299748);

const {:count 15} .str.163: ref;

axiom .str.163 == $sub.ref(0, 300787);

const {:count 23} .str.246: ref;

axiom .str.246 == $sub.ref(0, 301834);

const {:count 22} .str.259: ref;

axiom .str.259 == $sub.ref(0, 302880);

const {:count 17} .str.254: ref;

axiom .str.254 == $sub.ref(0, 303921);

const {:count 16} .str.260: ref;

axiom .str.260 == $sub.ref(0, 304961);

const {:count 11} .str.261: ref;

axiom .str.261 == $sub.ref(0, 305996);

const {:count 26} .str.262: ref;

axiom .str.262 == $sub.ref(0, 307046);

const {:count 30} .str.263: ref;

axiom .str.263 == $sub.ref(0, 308100);

const {:count 42} .str.264: ref;

axiom .str.264 == $sub.ref(0, 309166);

const {:count 20} .str.265: ref;

axiom .str.265 == $sub.ref(0, 310210);

const {:count 11} .str.26: ref;

axiom .str.26 == $sub.ref(0, 311245);

const {:count 16} .str.27: ref;

axiom .str.27 == $sub.ref(0, 312285);

const {:count 11} .str.28: ref;

axiom .str.28 == $sub.ref(0, 313320);

const {:count 20} .str.247: ref;

axiom .str.247 == $sub.ref(0, 314364);

const {:count 17} .str.248: ref;

axiom .str.248 == $sub.ref(0, 315405);

const {:count 44} .str.249: ref;

axiom .str.249 == $sub.ref(0, 316473);

const {:count 39} .str.250: ref;

axiom .str.250 == $sub.ref(0, 317536);

const {:count 44} .str.251: ref;

axiom .str.251 == $sub.ref(0, 318604);

const {:count 20} .str.252: ref;

axiom .str.252 == $sub.ref(0, 319648);

const {:count 25} .str.253: ref;

axiom .str.253 == $sub.ref(0, 320697);

const {:count 22} .str.241: ref;

axiom .str.241 == $sub.ref(0, 321743);

const {:count 25} .str.242: ref;

axiom .str.242 == $sub.ref(0, 322792);

const {:count 19} .str.243: ref;

axiom .str.243 == $sub.ref(0, 323835);

const {:count 27} .str.244: ref;

axiom .str.244 == $sub.ref(0, 324886);

const {:count 24} .str.245: ref;

axiom .str.245 == $sub.ref(0, 325934);

const {:count 21} .str.255: ref;

axiom .str.255 == $sub.ref(0, 326979);

const {:count 41} .str.256: ref;

axiom .str.256 == $sub.ref(0, 328044);

const {:count 45} .str.257: ref;

axiom .str.257 == $sub.ref(0, 329113);

const {:count 16} .str.258: ref;

axiom .str.258 == $sub.ref(0, 330153);

const {:count 14} .str.278: ref;

axiom .str.278 == $sub.ref(0, 331191);

const {:count 11} .str.279: ref;

axiom .str.279 == $sub.ref(0, 332226);

const {:count 10} .str.280: ref;

axiom .str.280 == $sub.ref(0, 333260);

const {:count 11} .str.281: ref;

axiom .str.281 == $sub.ref(0, 334295);

const {:count 12} .str.282: ref;

axiom .str.282 == $sub.ref(0, 335331);

const {:count 13} .str.300: ref;

axiom .str.300 == $sub.ref(0, 336368);

const {:count 14} .str.296: ref;

axiom .str.296 == $sub.ref(0, 337406);

const {:count 27} .str.297: ref;

axiom .str.297 == $sub.ref(0, 338457);

const {:count 17} .str.298: ref;

axiom .str.298 == $sub.ref(0, 339498);

const {:count 15} .str.294: ref;

axiom .str.294 == $sub.ref(0, 340537);

const {:count 15} .str.295: ref;

axiom .str.295 == $sub.ref(0, 341576);

const {:count 16} .str.14: ref;

axiom .str.14 == $sub.ref(0, 342616);

const {:count 15} .str.15: ref;

axiom .str.15 == $sub.ref(0, 343655);

const {:count 24} .str.299: ref;

axiom .str.299 == $sub.ref(0, 344703);

const {:count 15} .str.301: ref;

axiom .str.301 == $sub.ref(0, 345742);

const {:count 26} .str.302: ref;

axiom .str.302 == $sub.ref(0, 346792);

const {:count 25} .str.303: ref;

axiom .str.303 == $sub.ref(0, 347841);

const {:count 33} .str.304: ref;

axiom .str.304 == $sub.ref(0, 348898);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 18} .str.34: ref;

axiom .str.34 == $sub.ref(0, 349940);

const {:count 11} .str.35: ref;

axiom .str.35 == $sub.ref(0, 350975);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 352007);

const {:count 3} .str.1.620: ref;

axiom .str.1.620 == $sub.ref(0, 353034);

const {:count 14} .str.621: ref;

axiom .str.621 == $sub.ref(0, 354072);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 355100);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 356132);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 357164);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const bdc_probe: ref;

axiom bdc_probe == $sub.ref(0, 358196);

procedure bdc_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.9, $M.8, assertsPassed;



implementation bdc_probe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i24;
  var $i14: i24;
  var $i15: i24;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i1;
  var $i34: i8;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i24;
  var $i53: i24;
  var $i54: i24;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i64;
  var $i59: i64;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i24;
  var $i82: i24;
  var $i83: i24;
  var $p84: ref;
  var $p85: ref;
  var $i86: i8;
  var $i87: i64;
  var $i88: i64;
  var $i89: i64;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i24;
  var $i105: i24;
  var $i106: i24;
  var $p107: ref;
  var $p108: ref;
  var $i109: i8;
  var $i110: i64;
  var $i111: i64;
  var $i112: i64;
  var $i113: i1;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $p119: ref;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $p123: ref;
  var $i27: i32;
  var vslice_dummy_var_15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, .str);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p8, .str.100);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p9, .str.2);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p10, .str.73);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i13 := $load.i24($M.4, $p12);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i14 := $and.i24($i13, $sub.i24(0, 262144));
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $i15 := $or.i24($i14, 457);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p12, $i15);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p16, 0);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.5, $p17);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i64($i18);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 1);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 7} {:cexpr "tmp"} boogie_si_record_i64($i21);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $p23 := devm_kzalloc($p6, 2360, 208);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $p28 := platform_get_resource($p0, 512, 0);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $p29 := devm_ioremap_resource($p6, $p28);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p24, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p30, $p29);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p24, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.6, $p31);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $i33 := IS_ERR($p32);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i8($i33);
    call {:si_unique_call 13} {:cexpr "tmp___1"} boogie_si_record_i8($i34);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i34);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $i36 := platform_get_irq($p0, 0);
    call {:si_unique_call 16} {:cexpr "irq"} boogie_si_record_i32($i36);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i36, 0);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p24, $mul.ref(0, 2368)), $mul.ref(1600, 1));
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} vslice_dummy_var_15 := spinlock_check($p38);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 2368)), $mul.ref(1600, 1)), $mul.ref(0, 1));
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} __raw_spin_lock_init($p42, .str.103, $p2);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p24);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} platform_set_drvdata($p0, $p43);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p24, $mul.ref(0, 2368)), $mul.ref(2060, 1));
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p44, $i36);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p24, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p45, $p6);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p46, .str);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p47, .str.100);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p48, .str.2);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p49, .str.104);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i52 := $load.i24($M.4, $p51);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i53 := $and.i24($i52, $sub.i24(0, 262144));
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i54 := $or.i24($i53, 477);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p51, $i54);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p55, 0);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.5, $p56);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i64($i57);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i59 := $and.i64($i58, 1);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $i60 := ldv__builtin_expect($i59, 0);
    call {:si_unique_call 22} {:cexpr "tmp___2"} boogie_si_record_i64($i60);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p24, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.6, $p68);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $i70 := bdc_readl($p69, 64);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 25} {:cexpr "temp"} boogie_si_record_i32($i70);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i71 := $and.i32($i70, 1);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i72 == 1);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $i94 := dma_set_mask_and_coherent($p93, 4294967295);
    call {:si_unique_call 32} {:cexpr "ret"} boogie_si_record_i32($i94);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p98, .str);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p99, .str.100);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p100, .str.2);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p101, .str.107);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i104 := $load.i24($M.4, $p103);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i105 := $and.i24($i104, $sub.i24(0, 262144));
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i106 := $or.i24($i105, 489);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p103, $i106);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p107, 0);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.5, $p108);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i64($i109);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i111 := $and.i64($i110, 1);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $i112 := ldv__builtin_expect($i111, 0);
    call {:si_unique_call 37} {:cexpr "tmp___4"} boogie_si_record_i64($i112);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $i113 := $ne.i64($i112, 0);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $i116 := bdc_hw_init($p24);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 34} {:cexpr "ret"} boogie_si_record_i32($i116);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $i120 := bdc_udc_init($p24);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 41} {:cexpr "ret"} boogie_si_record_i32($i120);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb36:
    assume $i121 == 1;
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p24, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.6, $p122);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} dev_err.ref.ref.i32($p123, .str.109, $i120);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} bdc_hw_exit($p24);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i27 := $i120;
    goto $bb6;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i117 == 1;
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p24, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.6, $p118);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} dev_err.ref.ref.i32($p119, .str.108, $i116);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i27 := $i116;
    goto $bb6;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i113 == 1;
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p24, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.6, $p114);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} __dynamic_dev_dbg.ref.ref.ref($p5, $p115, .str.107);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i95 == 1;
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p24, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.6, $p96);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} dev_err.ref.ref($p97, .str.106);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 524);
    goto $bb6;

  $bb17:
    assume $i72 == 1;
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $i73 := dma_set_mask_and_coherent($p6, $sub.i64(0, 1));
    call {:si_unique_call 27} {:cexpr "tmp___5"} boogie_si_record_i32($i73);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 0);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i74 == 1);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb19:
    assume $i74 == 1;
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p75, .str);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p76, .str.100);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p77, .str.2);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p78, .str.105);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i81 := $load.i24($M.4, $p80);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i82 := $and.i24($i81, $sub.i24(0, 262144));
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i83 := $or.i24($i82, 482);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p80, $i83);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p84, 0);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.5, $p85);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i64($i86);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i88 := $and.i64($i87, 1);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $i89 := ldv__builtin_expect($i88, 0);
    call {:si_unique_call 29} {:cexpr "tmp___3"} boogie_si_record_i64($i89);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $i90 := $ne.i64($i89, 0);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i90 == 1;
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p24, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.6, $p91);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} __dynamic_dev_dbg.ref.ref.ref($p4, $p92, .str.105);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i61 == 1;
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p24, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.6, $p62);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p24, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.6, $p64);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p24, $mul.ref(0, 2368)), $mul.ref(2060, 1));
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.6, $p66);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p63, .str.104, $p65, $i67);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i37 == 1;
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} dev_err.ref.ref.i32($p6, .str.102, $i36);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i27 := $i36;
    goto $bb6;

  $bb8:
    assume $i35 == 1;
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} dev_err.ref.ref($p6, .str.101);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 12);
    goto $bb6;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 12);
    goto $bb6;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p6, .str.73, .str.100);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bdc_remove: ref;

axiom bdc_remove == $sub.ref(0, 359228);

procedure bdc_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $CurrAddr, $M.6, $M.8, $M.9, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, assertsPassed;



implementation bdc_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} $p2 := platform_get_drvdata($p0);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, .str);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str.129);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.2);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.6);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.4, $p9);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 514);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p9, $i12);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p13, 0);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.5, $p14);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 47} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} bdc_udc_exit($p3);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} bdc_hw_exit($p3);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.6, $p20);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p21, .str.6, .str.129);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const platform_get_drvdata: ref;

axiom platform_get_drvdata == $sub.ref(0, 360260);

procedure platform_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation platform_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 361292);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 53} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 362324);

procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: ref)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: i32)
{

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32)
{

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i64($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i64);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i64($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i64)
{

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32)
{

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref)
{

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i64.i64($p0: ref, $p1: ref, $p2: ref, p.3: i64, p.4: i64);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i64.i64($p0: ref, $p1: ref, $p2: ref, p.3: i64, p.4: i64)
{

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: ref);



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32)
{

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32)
{

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32);



procedure __dynamic_dev_dbg.ref.ref.ref.i32.ref.i64.ref($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: ref, p.5: i64, p.6: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.ref.i64.ref($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: ref, p.5: i64, p.6: ref)
{

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    return;
}



const bdc_udc_exit: ref;

axiom bdc_udc_exit == $sub.ref(0, 363356);

procedure bdc_udc_exit($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.8, $M.9, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, assertsPassed;



implementation bdc_udc_exit($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var vslice_dummy_var_16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, .str);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, .str.91);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p4, .str.77);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p5, .str.73);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.4, $p7);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 584);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p7, $i10);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p11, 0);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.5, $p12);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 56} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1680, 1));
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.6, $p20);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref(1, 8));
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.6, $p22);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} vslice_dummy_var_16 := bdc_ep_disable($p23);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(0, 1));
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} usb_del_gadget_udc($p25);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} bdc_free_ep($p0);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p19, .str.73, .str.91);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bdc_hw_exit: ref;

axiom bdc_hw_exit == $sub.ref(0, 364388);

procedure bdc_hw_exit($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation bdc_hw_exit($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, .str);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, .str.128);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p4, .str.2);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p5, .str.6);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.4, $p7);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 421);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p7, $i10);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p11, 0);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.5, $p12);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 63} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} bdc_mem_free($p0);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p19, .str.6, .str.128);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bdc_mem_free: ref;

axiom bdc_mem_free == $sub.ref(0, 365420);

procedure bdc_mem_free($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation bdc_mem_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $i33: i64;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i64;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p60: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, .str);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, .str.127);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p4, .str.2);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p5, .str.17);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.4, $p7);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 314);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p7, $i10);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p11, 0);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.5, $p12);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 68} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1728, 1)), $mul.ref(0, 1));
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $p21);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1696, 1)), $mul.ref(8, 1));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.6, $p35);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(2080, 1));
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.6, $p50);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1680, 1));
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.6, $p56);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} kfree($p58);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1728, 1)), $mul.ref(0, 1));
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p60, $0.ref);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1696, 1)), $mul.ref(8, 1));
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p62, $0.ref);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(2080, 1));
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p63, $0.ref);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1680, 1));
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p64, $0.ref);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i53 == 1;
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(2080, 1));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.6, $p54);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} dma_pool_destroy($p55);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i38 == 1;
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.6, $p39);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1720, 1));
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.6, $p41);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i42);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1696, 1)), $mul.ref(8, 1));
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.6, $p45);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1696, 1)), $mul.ref(0, 1));
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.6, $p48);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} dma_free_attrs($p40, $i43, $p46, $i49, $0.ref);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.6, $p25);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1728, 1)), $mul.ref(0, 1));
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.6, $p28);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1728, 1)), $mul.ref(16, 1));
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.6, $p32);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} dma_free_attrs($p26, 1024, $p30, $i33, $0.ref);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p19, .str.17, .str.127);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dma_free_attrs: ref;

axiom dma_free_attrs == $sub.ref(0, 366452);

procedure dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;



implementation dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} {:cexpr "dma_free_attrs:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 75} {:cexpr "dma_free_attrs:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    return;
}



const dma_pool_destroy: ref;

axiom dma_pool_destroy == $sub.ref(0, 367484);

procedure dma_pool_destroy($p0: ref);
  free requires assertsPassed;



implementation dma_pool_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 368516);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} free_($p0);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 369548);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 77} $free($p0);
    return;
}



const bdc_ep_disable: ref;

axiom bdc_ep_disable == $sub.ref(0, 370580);

procedure bdc_ep_disable($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.8, $M.9, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, assertsPassed;



implementation bdc_ep_disable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i1;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $p55: ref;
  var $p56: ref;
  var $i48: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(80, 1));
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, .str);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str.45);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.46);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.47);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.4, $p9);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 570);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p9, $i12);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p13, 0);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.5, $p14);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 80} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(90, 1));
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.6, $p25);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} $i28 := bdc_stop_ep($p3, $i27);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    call {:si_unique_call 83} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} $i30 := list_empty($p29);
    call {:si_unique_call 85} {:cexpr "tmp___0"} boogie_si_record_i32($i30);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $i39 := bdc_dconfig_ep($p3, $p0);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    call {:si_unique_call 90} {:cexpr "ret"} boogie_si_record_i32($i39);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p43, 0);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(90, 1));
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.6, $p44);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 1);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(8, 1));
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.6, $p50);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} ep_bd_list_free($p0, $i51);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(104, 1));
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p52, $0.ref);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(96, 1));
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p53, $0.ref);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p55, $0.ref);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(88, 1));
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p56, 0);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i48 := $i39;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $r := $i48;
    return;

  $bb15:
    assume $i47 == 1;
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i48 := 0;
    goto $bb17;

  $bb12:
    assume $i40 == 1;
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.6, $p41);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} dev_warn.ref.ref($p42, .str.48);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $p33, $p34, $p35, $p36, $i37, $i38 := bdc_ep_disable_loop_$bb7($p0, $p29, $p33, $p34, $p35, $p36, $i37, $i38);
    goto $bb7_last;

  $bb8:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.6, $p33);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p35, $mul.ref($sub.ref(0, 88), 144));
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} bdc_req_complete($p0, $p36, $sub.i32(0, 108));
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $i37 := list_empty($p29);
    call {:si_unique_call 88} {:cexpr "tmp___0"} boogie_si_record_i32($i37);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i38 == 1);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb9_dummy;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.6, $p20);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(90, 1));
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.6, $p22);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p1, $p21, .str.47, .str.45, $i24);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const usb_del_gadget_udc: ref;

axiom usb_del_gadget_udc == $sub.ref(0, 371612);

procedure usb_del_gadget_udc($p0: ref);
  free requires assertsPassed;



implementation usb_del_gadget_udc($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    return;
}



const bdc_free_ep: ref;

axiom bdc_free_ep == $sub.ref(0, 372644);

procedure bdc_free_ep($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $CurrAddr;



implementation bdc_free_ep($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $i31: i8;
  var $i44: i32;
  var $i45: i32;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i23: i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, .str);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, .str.52);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p4, .str.46);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p5, .str.17);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.4, $p7);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 910);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p7, $i10);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p11, 0);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.5, $p12);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 95} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1672, 1));
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.6, $p20);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i22 := $ult.i32(1, $i21);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i23 := 1;
    goto $bb7;

  $bb7:
    call $p24, $p25, $i26, $p27, $p28, $i29, $i30, $p32, $i33, $i34, $i35, $p37, $i38, $i39, $i40, $p42, $p43, $i31, $i44, $i45, $i46, $i47, $i48, $i49, $i23 := bdc_free_ep_loop_$bb7($p0, $p20, $p24, $p25, $i26, $p27, $p28, $i29, $i30, $p32, $i33, $i34, $i35, $p37, $i38, $i39, $i40, $p42, $p43, $i31, $i44, $i45, $i46, $i47, $i48, $i49, $i23);
    goto $bb7_last;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1680, 1));
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.6, $p24);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i64($i23);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p25, $mul.ref($i26, 8));
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.6, $p27);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p28, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.6, $p32);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 1);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i23);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 1);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p28);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} kfree($p43);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i31 := $i23;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i31);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i44, 1);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    call {:si_unique_call 97} {:cexpr "epnum"} boogie_si_record_i8($i46);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.6, $p20);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i49 := $ult.i32($i47, $i48);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i49 == 1);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb19:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i23 := $i46;
    goto $bb19_dummy;

  $bb16:
    assume $i40 == 1;
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} list_del($p42);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i35 == 1;
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(8, 1));
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.6, $p37);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} ep_bd_list_free($p28, $i38);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb9:
    assume $i30 == 1;
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $i31 := $i23;
    goto $bb11;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p19, .str.17, .str.52);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_550;
}



const ep_bd_list_free: ref;

axiom ep_bd_list_free == $sub.ref(0, 373676);

procedure ep_bd_list_free($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $CurrAddr;



implementation ep_bd_list_free($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i24;
  var $i42: i24;
  var $i43: i24;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i64;
  var $i48: i64;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i1;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i24;
  var $i69: i24;
  var $i70: i24;
  var $p71: ref;
  var $p72: ref;
  var $i73: i8;
  var $i74: i64;
  var $i75: i64;
  var $i76: i64;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i24;
  var $i89: i24;
  var $i90: i24;
  var $p91: ref;
  var $p92: ref;
  var $i93: i8;
  var $i94: i64;
  var $i95: i64;
  var $i96: i64;
  var $i97: i1;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $i103: i1;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i24;
  var $i111: i24;
  var $i112: i24;
  var $p113: ref;
  var $p114: ref;
  var $i115: i8;
  var $i116: i64;
  var $i117: i64;
  var $i118: i64;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i24;
  var $i129: i24;
  var $i130: i24;
  var $p131: ref;
  var $p132: ref;
  var $i133: i8;
  var $i134: i64;
  var $i135: i64;
  var $i136: i64;
  var $i137: i1;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i64;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $i150: i64;
  var $p151: ref;
  var $i152: i32;
  var $i153: i1;
  var $i56: i32;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 107} {:cexpr "ep_bd_list_free:arg:num_tabs"} boogie_si_record_i32($i1);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(80, 1));
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, .str);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p12, .str.148);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p13, .str.46);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p14, .str.149);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.4, $p16);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 65);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p16, $i19);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p20, 0);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.5, $p21);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 109} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(0, 1));
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.6, $p31);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, 0);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i55 := $ult.i32(0, $i1);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(0, 1));
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.6, $p155);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $p157 := $bitcast.ref.ref($p156);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} kfree($p157);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i55 == 1;
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $i56 := 0;
    goto $bb14;

  $bb14:
    call $p57, $p58, $i59, $p60, $p61, $p62, $p63, $p64, $p65, $p66, $p67, $i68, $i69, $i70, $p71, $p72, $i73, $i74, $i75, $i76, $i77, $p78, $p79, $i80, $i81, $p82, $p83, $p84, $p85, $p86, $p87, $i88, $i89, $i90, $p91, $p92, $i93, $i94, $i95, $i96, $i97, $p98, $p99, $p100, $p101, $i102, $i103, $p104, $p105, $p106, $p107, $p108, $p109, $i110, $i111, $i112, $p113, $p114, $i115, $i116, $i117, $i118, $i119, $p120, $p121, $p122, $p123, $p124, $p125, $p126, $p127, $i128, $i129, $i130, $p131, $p132, $i133, $i134, $i135, $i136, $i137, $p138, $p139, $p140, $p141, $p142, $i143, $p144, $p145, $p146, $p147, $p148, $p149, $i150, $p151, $i152, $i153, $i56 := ep_bd_list_free_loop_$bb14($p0, $i1, $p4, $p5, $p6, $p7, $p10, $p57, $p58, $i59, $p60, $p61, $p62, $p63, $p64, $p65, $p66, $p67, $i68, $i69, $i70, $p71, $p72, $i73, $i74, $i75, $i76, $i77, $p78, $p79, $i80, $i81, $p82, $p83, $p84, $p85, $p86, $p87, $i88, $i89, $i90, $p91, $p92, $i93, $i94, $i95, $i96, $i97, $p98, $p99, $p100, $p101, $i102, $i103, $p104, $p105, $p106, $p107, $p108, $p109, $i110, $i111, $i112, $p113, $p114, $i115, $i116, $i117, $i118, $i119, $p120, $p121, $p122, $p123, $p124, $p125, $p126, $p127, $i128, $i129, $i130, $p131, $p132, $i133, $i134, $i135, $i136, $i137, $p138, $p139, $p140, $p141, $p142, $i143, $p144, $p145, $p146, $p147, $p148, $p149, $i150, $p151, $i152, $i153, $i56);
    goto $bb14_last;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(0, 1));
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.6, $p57);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i56);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p58, $mul.ref($i59, 8));
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.6, $p60);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p62, .str);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p63, .str.148);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p64, .str.46);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p65, .str.151);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i68 := $load.i24($M.4, $p67);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i69 := $and.i24($i68, $sub.i24(0, 262144));
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i70 := $or.i24($i69, 78);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p67, $i70);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p71, 0);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.5, $p72);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i64($i73);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i75 := $and.i64($i74, 1);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $i76 := ldv__builtin_expect($i75, 0);
    call {:si_unique_call 115} {:cexpr "tmp___1"} boogie_si_record_i64($i76);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i76, 0);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p61);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i81 := $eq.i64($i80, 0);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p61, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.6, $p100);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $i102 := $p2i.ref.i64($p101);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $i103 := $eq.i64($i102, 0);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p122, .str);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p123, .str.148);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p124, .str.46);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p125, .str.154);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p126);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i128 := $load.i24($M.4, $p127);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i129 := $and.i24($i128, $sub.i24(0, 262144));
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i130 := $or.i24($i129, 91);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p127, $i130);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p131, 0);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i133 := $load.i8($M.5, $p132);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i134 := $zext.i8.i64($i133);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i135 := $and.i64($i134, 1);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} $i136 := ldv__builtin_expect($i135, 0);
    call {:si_unique_call 125} {:cexpr "tmp___4"} boogie_si_record_i64($i136);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i137 := $ne.i64($i136, 0);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p10, $mul.ref(0, 2368)), $mul.ref(2080, 1));
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $p145 := $load.ref($M.6, $p144);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p61, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.6, $p146);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p147);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p61, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i150 := $load.i64($M.6, $p149);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} dma_pool_free($p145, $p148, $i150);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $p151 := $bitcast.ref.ref($p61);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} kfree($p151);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i152 := $add.i32($i56, 1);
    call {:si_unique_call 120} {:cexpr "index"} boogie_si_record_i32($i152);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i153 := $ult.i32($i152, $i1);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i153 == 1);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb35:
    assume $i153 == 1;
    assume {:verifier.code 0} true;
    $i56 := $i152;
    goto $bb35_dummy;

  $bb32:
    assume $i137 == 1;
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p10, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.6, $p138);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p61, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.6, $p140);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p61, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i143 := $load.i64($M.6, $p142);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} __dynamic_dev_dbg.ref.ref.ref.ref.i64($p7, $p139, .str.154, $p141, $i143);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb26:
    assume $i103 == 1;
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p104, .str);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p105, .str.148);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p106, .str.46);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p107, .str.153);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p108);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i110 := $load.i24($M.4, $p109);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i111 := $and.i24($i110, $sub.i24(0, 262144));
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $i112 := $or.i24($i111, 84);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p109, $i112);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p113, 0);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i115 := $load.i8($M.5, $p114);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i116 := $zext.i8.i64($i115);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i117 := $and.i64($i116, 1);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} $i118 := ldv__builtin_expect($i117, 0);
    call {:si_unique_call 122} {:cexpr "tmp___3"} boogie_si_record_i64($i118);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i119 := $ne.i64($i118, 0);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb28:
    assume $i119 == 1;
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p10, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.6, $p120);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} __dynamic_dev_dbg.ref.ref.ref($p6, $p121, .str.153);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb19:
    assume $i81 == 1;
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p82, .str);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p83, .str.148);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p84, .str.46);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p85, .str.152);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i88 := $load.i24($M.4, $p87);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i89 := $and.i24($i88, $sub.i24(0, 262144));
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i90 := $or.i24($i89, 80);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p87, $i90);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p91, 0);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.5, $p92);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i64($i93);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i95 := $and.i64($i94, 1);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $i96 := ldv__builtin_expect($i95, 0);
    call {:si_unique_call 118} {:cexpr "tmp___2"} boogie_si_record_i64($i96);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i97 := $ne.i64($i96, 0);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i97 == 1;
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p10, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.6, $p98);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} __dynamic_dev_dbg.ref.ref.ref($p5, $p99, .str.152);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb16:
    assume $i77 == 1;
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p10, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.6, $p78);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p4, $p79, .str.151, $p61, $i56);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb4:
    assume $i34 == 1;
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, .str);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p36, .str.148);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p37, .str.46);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p38, .str.150);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i41 := $load.i24($M.4, $p40);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $i42 := $and.i24($i41, $sub.i24(0, 262144));
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i43 := $or.i24($i42, 68);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p40, $i43);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p44, 0);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.5, $p45);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i64($i46);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $i48 := $and.i64($i47, 1);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $i49 := ldv__builtin_expect($i48, 0);
    call {:si_unique_call 112} {:cexpr "tmp___0"} boogie_si_record_i64($i49);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i50 == 1;
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p10, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.6, $p51);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(116, 1));
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} __dynamic_dev_dbg.ref.ref.ref.ref($p3, $p52, .str.150, $p54);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p10, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.6, $p27);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(116, 1));
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32($p2, $p28, .str.149, .str.148, $p30, $i1);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb35_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_666;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 374708);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    return;
}



const dma_pool_free: ref;

axiom dma_pool_free == $sub.ref(0, 375740);

procedure dma_pool_free($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation dma_pool_free($p0: ref, $p1: ref, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} {:cexpr "dma_pool_free:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    return;
}



const bdc_stop_ep: ref;

axiom bdc_stop_ep == $sub.ref(0, 376772);

procedure bdc_stop_ep($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.8, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.9, assertsPassed;



implementation bdc_stop_ep($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $i36: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 132} {:cexpr "bdc_stop_ep:arg:epnum"} boogie_si_record_i32($i1);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1680, 1));
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i1);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p4, $mul.ref($i5, 8));
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, .str);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, .str.41);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p10, .str.19);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p11, .str.42);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.4, $p13);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 352);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p13, $i16);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p17, 0);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.5, $p18);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 134} {:cexpr "tmp"} boogie_si_record_i64($i22);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p7, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.6, $p30);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 1);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p7, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.6, $p37);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 2);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i40 == 1);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p7, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.6, $p41);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 4);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i1, 31);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i46 := $shl.i32($i45, 10);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i46, 0);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i47, 327684);
    call {:si_unique_call 137} {:cexpr "cmd_sc"} boogie_si_record_i32($i48);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} $i49 := bdc_submit_cmd($p0, $i48, 0, 0, 0);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    call {:si_unique_call 139} {:cexpr "ret"} boogie_si_record_i32($i49);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p7, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.6, $p55);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i57 := $or.i32($i56, 4);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p7, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p58, $i57);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} bdc_dump_epsts($p0);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i36 := $i49;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $r := $i36;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i50 == 1;
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.6, $p51);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p7, $mul.ref(0, 176)), $mul.ref(116, 1));
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} dev_err.ref.ref.i32.ref($p52, .str.44, $i49, $p54);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $i36 := $i49;
    goto $bb6;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb9;

  $bb4:
    assume $i33 == 1;
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.6, $p34);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} dev_err.ref.ref($p35, .str.43);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.6, $p24);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p7, $mul.ref(0, 176)), $mul.ref(116, 1));
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p7, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.6, $p28);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32($p2, $p25, .str.42, .str.41, $p27, $i29);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bdc_req_complete: ref;

axiom bdc_req_complete == $sub.ref(0, 377804);

procedure bdc_req_complete($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.9;



implementation bdc_req_complete($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i24;
  var $i21: i24;
  var $i22: i24;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 143} {:cexpr "bdc_req_complete:arg:status"} boogie_si_record_i32($i2);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(80, 1));
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p1);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, .str);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p15, .str.146);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p16, .str.46);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p17, .str.147);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i20 := $load.i24($M.4, $p19);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i21 := $and.i24($i20, $sub.i24(0, 262144));
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i22 := $or.i24($i21, 550);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p19, $i22);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p23, 0);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.5, $p24);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i64($i25);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 1);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} $i28 := ldv__builtin_expect($i27, 0);
    call {:si_unique_call 145} {:cexpr "tmp"} boogie_si_record_i64($i28);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} list_del($p34);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p36, $i2);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 2368)), $mul.ref(0, 1));
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(89, 1));
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.6, $p39);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} usb_gadget_unmap_request($p37, $p38, $i41);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.6, $p43);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i46 == 1;
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 2368)), $mul.ref(1600, 1));
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} spin_unlock($p47);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} usb_gadget_giveback_request($p48, $p49);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p5, $mul.ref(0, 2368)), $mul.ref(1600, 1));
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} spin_lock($p50);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.6, $p30);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(116, 1));
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32($p3, $p31, .str.147, .str.146, $p33, $i2);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 378836);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const bdc_dconfig_ep: ref;

axiom bdc_dconfig_ep == $sub.ref(0, 379868);

procedure bdc_dconfig_ep($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $CurrAddr, $M.8, $M.6, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.9, assertsPassed;



implementation bdc_dconfig_ep($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i24;
  var $i16: i24;
  var $i17: i24;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(90, 1));
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.6, $p3);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 31);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i7 := $shl.i32($i6, 10);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, 262146);
    call {:si_unique_call 153} {:cexpr "cmd_sc"} boogie_si_record_i32($i8);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, .str);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, .str.18);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p11, .str.19);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p12, .str.20);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i15 := $load.i24($M.4, $p14);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i16 := $and.i24($i15, $sub.i24(0, 262144));
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i17 := $or.i24($i16, 122);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p14, $i17);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p18, 0);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.5, $p19);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i64($i20);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 1);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 155} {:cexpr "tmp"} boogie_si_record_i64($i23);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} $i30 := bdc_submit_cmd($p0, $i8, 0, 0, 0);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 158} {:cexpr "tmp___0"} boogie_si_record_i32($i30);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.6, $p25);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(90, 1));
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.6, $p27);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p2, $p26, .str.20, .str.18, $i29, $i8);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 380900);

procedure dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_warn.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation dev_warn.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_warn.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_warn.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref);
  free requires assertsPassed;



implementation dev_warn.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_warn.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_warn.ref.ref($p0: ref, $p1: ref)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    return;
}



const bdc_submit_cmd: ref;

axiom bdc_submit_cmd == $sub.ref(0, 381932);

procedure bdc_submit_cmd($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.8, $CurrAddr, $M.6, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.9, assertsPassed;



implementation bdc_submit_cmd($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i24;
  var $i51: i24;
  var $i52: i24;
  var $p53: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i64;
  var $i57: i64;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i24;
  var $i80: i24;
  var $i81: i24;
  var $p82: ref;
  var $p83: ref;
  var $i84: i8;
  var $i85: i64;
  var $i86: i64;
  var $i87: i64;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $i62: i32;
  var $i34: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 162} {:cexpr "bdc_submit_cmd:arg:cmd_sc"} boogie_si_record_i32($i1);
    call {:si_unique_call 163} {:cexpr "bdc_submit_cmd:arg:param0"} boogie_si_record_i32($i2);
    call {:si_unique_call 164} {:cexpr "bdc_submit_cmd:arg:param1"} boogie_si_record_i32($i3);
    call {:si_unique_call 165} {:cexpr "bdc_submit_cmd:arg:param2"} boogie_si_record_i32($i4);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.6, $p8);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} $i10 := bdc_readl($p9, 28);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    call {:si_unique_call 167} {:cexpr "temp"} boogie_si_record_i32($i10);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, .str);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p12, .str.130);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p13, .str.19);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p14, .str.131);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.4, $p16);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 66);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p16, $i19);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p20, 0);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.5, $p21);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 169} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i10, 960);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i30 := $lshr.i32($i29, 6);
    call {:si_unique_call 171} {:cexpr "cmd_status"} boogie_si_record_i32($i30);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 15);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $i35 := bdc_issue_cmd($p0, $i1, $i2, $i3, $i4);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 174} {:cexpr "ret"} boogie_si_record_i32($i35);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i35, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i35, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i35, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i35, 15);
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p73, .str);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p74, .str.130);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p75, .str.19);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p76, .str.139);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i79 := $load.i24($M.4, $p78);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i80 := $and.i24($i79, $sub.i24(0, 262144));
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i81 := $or.i24($i80, 109);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p78, $i81);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p82, 0);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.5, $p83);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i64($i84);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i86 := $and.i64($i85, 1);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} $i87 := ldv__builtin_expect($i86, 0);
    call {:si_unique_call 184} {:cexpr "tmp___1"} boogie_si_record_i64($i87);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i88 := $ne.i64($i87, 0);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i62 := $i35;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i34 := $i62;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb31:
    assume $i88 == 1;
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.6, $p89);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} __dynamic_dev_dbg.ref.ref.ref.i32($p7, $p90, .str.139, $i35);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb15:
    assume $i39 == 1;
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.6, $p71);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} dev_err.ref.ref.i32($p72, .str.138, 1000);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32(0, 104);
    goto $bb29;

  $bb13:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i35, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb17;

  $bb18:
    assume $i40 == 1;
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.6, $p69);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} dev_err.ref.ref($p70, .str.137);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32(0, 104);
    goto $bb29;

  $bb11:
    assume $i37 == 1;
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.6, $p67);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} dev_err.ref.ref($p68, .str.136);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32(0, 11);
    goto $bb29;

  $bb9:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i35, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i35, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i42 == 1);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.6, $p65);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} dev_err.ref.ref($p66, .str.135);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32(0, 22);
    goto $bb29;

  $bb22:
    assume $i42 == 1;
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.6, $p63);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} dev_err.ref.ref($p64, .str.134);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32(0, 22);
    goto $bb29;

  $bb20:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i35, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb17;

  $bb24:
    assume $i43 == 1;
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, .str);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p45, .str.130);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p46, .str.19);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p47, .str.133);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i50 := $load.i24($M.4, $p49);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i51 := $and.i24($i50, $sub.i24(0, 262144));
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $i52 := $or.i24($i51, 76);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p49, $i52);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p53, 0);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.5, $p54);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i64($i55);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i57 := $and.i64($i56, 1);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $i58 := ldv__builtin_expect($i57, 0);
    call {:si_unique_call 181} {:cexpr "tmp___0"} boogie_si_record_i64($i58);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i62 := 0;
    goto $bb29;

  $bb26:
    assume $i59 == 1;
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.6, $p60);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} __dynamic_dev_dbg.ref.ref.ref($p6, $p61, .str.133);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.6, $p32);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} dev_err.ref.ref.i32($p33, .str.132, $i30);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 16);
    goto $bb6;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.6, $p27);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32.i32($p5, $p28, .str.131, .str.130, $i10, $i1, $i2, $i3, $i4);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_31:
    assume !assertsPassed;
    return;
}



const bdc_readl: ref;

axiom bdc_readl == $sub.ref(0, 382964);

procedure bdc_readl($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.9, $CurrAddr, $M.8, assertsPassed;



implementation bdc_readl($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} {:cexpr "bdc_readl:arg:offset"} boogie_si_record_i32($i1);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p0, $mul.ref($i2, 1));
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} $i4 := readl($p3);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 188} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 383996);

procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);



procedure dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref)
{

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    return;
}



const bdc_issue_cmd: ref;

axiom bdc_issue_cmd == $sub.ref(0, 385028);

procedure bdc_issue_cmd($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $CurrAddr, $M.6, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.9, assertsPassed;



implementation bdc_issue_cmd($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p33: ref;
  var $p37: ref;
  var $p41: ref;
  var $p44: ref;
  var $p47: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i24;
  var $i63: i24;
  var $i64: i24;
  var $p65: ref;
  var $p66: ref;
  var $i67: i8;
  var $i68: i64;
  var $i69: i64;
  var $i70: i64;
  var $i71: i1;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i24;
  var $i87: i24;
  var $i88: i24;
  var $p89: ref;
  var $p90: ref;
  var $i91: i8;
  var $i92: i64;
  var $i93: i64;
  var $i94: i64;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $i99: i32;
  var $i100: i1;
  var $i101: i32;
  var $p102: ref;
  var $p103: ref;
  var $i98: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} $p5 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 192} {:cexpr "bdc_issue_cmd:arg:cmd_sc"} boogie_si_record_i32($i1);
    call {:si_unique_call 193} {:cexpr "bdc_issue_cmd:arg:param0"} boogie_si_record_i32($i2);
    call {:si_unique_call 194} {:cexpr "bdc_issue_cmd:arg:param1"} boogie_si_record_i32($i3);
    call {:si_unique_call 195} {:cexpr "bdc_issue_cmd:arg:param2"} boogie_si_record_i32($i4);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.6, $p8);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} bdc_writel($p9, 16, $i2);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p10);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} bdc_writel($p11, 20, $i3);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} bdc_writel($p13, 24, $i4);
    call {:si_unique_call 199} devirtbounce(0);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.6, $p14);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i1, 134217760);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} bdc_writel($p15, 28, $i16);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i17 := 1000;
    goto $bb1;

  $bb1:
    call $i17, $p18, $p19, $i20, $p24, $p26, $p28, $p30, $p33, $p37, $p41, $p44, $p47, $p50, $p51, $p52, $p53, $p54, $p55, $p56, $p57, $p58, $p59, $p60, $p61, $i62, $i63, $i64, $p65, $p66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $p74, $p75, $i76, $i77, $i78, $i79, $i99, $i100, $i101 := bdc_issue_cmd_loop_$bb1($p0, $p5, $p6, $i17, $p18, $p19, $i20, $p24, $p26, $p28, $p30, $p33, $p37, $p41, $p44, $p47, $p50, $p51, $p52, $p53, $p54, $p55, $p56, $p57, $p58, $p59, $p60, $p61, $i62, $i63, $i64, $p65, $p66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $p74, $p75, $i76, $i77, $i78, $i79, $i99, $i100, $i101);
    goto $bb1_last;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $i20 := bdc_readl($p19, 28);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 202} {:cexpr "temp"} boogie_si_record_i32($i20);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, $p24, 0);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, $p26, $sub.i32(0, 559067475));
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, $p28, $sub.i32(0, 1));
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p30, $i2p.i64.ref($sub.i64(0, 1)));
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p33, $0.ref);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8));
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p37, $0.ref);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8));
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p41, $0.ref);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1));
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p44, .str.66);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1));
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, $p47, 0);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1));
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $M.8 := $store.i64($M.8, $p50, 0);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, $p51, 1250);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(76, 1));
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, $p52, 10);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, $p53, 0);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(84, 1));
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, $p54, 0);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p5, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $M.8 := $store.i64($M.8, $p55, 0);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, .str);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p57, .str.140);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p58, .str.19);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p59, .str.141);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i62 := $load.i24($M.4, $p61);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i63 := $and.i24($i62, $sub.i24(0, 262144));
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i64 := $or.i24($i63, 39);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p61, $i64);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p65, 0);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.5, $p66);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i64($i67);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i69 := $and.i64($i68, 1);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $i70 := ldv__builtin_expect($i69, 0);
    call {:si_unique_call 204} {:cexpr "tmp"} boogie_si_record_i64($i70);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i76 := $and.i32($i20, 960);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i77 := $lshr.i32($i76, 6);
    call {:si_unique_call 208} {:cexpr "cmd_status"} boogie_si_record_i32($i77);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 15);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i79 := $i77;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} __const_udelay(4295);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i99 := $sub.i32($i17, 1);
    call {:si_unique_call 213} {:cexpr "timeout"} boogie_si_record_i32($i99);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i17, 0);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $i101 := $i77;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.6, $p102);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} dev_err.ref.ref.i32($p103, .str.143, $i101);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i98 := $i101;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $r := $i98;
    return;

  $bb15:
    assume $i100 == 1;
    assume {:verifier.code 0} true;
    $i17 := $i99;
    goto $bb15_dummy;

  $bb8:
    assume $i78 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p80, .str);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p81, .str.140);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p82, .str.19);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p83, .str.142);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i86 := $load.i24($M.4, $p85);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i87 := $and.i24($i86, $sub.i24(0, 262144));
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i88 := $or.i24($i87, 43);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p85, $i88);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p89, 0);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.5, $p90);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i64($i91);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i93 := $and.i64($i92, 1);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $i94 := ldv__builtin_expect($i93, 0);
    call {:si_unique_call 210} {:cexpr "tmp___1"} boogie_si_record_i64($i94);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i95 := $ne.i64($i94, 0);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i98 := $i79;
    goto $bb13;

  $bb10:
    assume $i95 == 1;
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.6, $p96);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} __dynamic_dev_dbg.ref.ref.ref.i32($p7, $p97, .str.142, $i79);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb2:
    assume $i71 == 1;
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} $i72 := ___ratelimit($p5, .str.140);
    call {:si_unique_call 206} {:cexpr "tmp___0"} boogie_si_record_i32($i72);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i73 == 1;
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.6, $p74);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} __dynamic_dev_dbg.ref.ref.ref.i32($p6, $p75, .str.141, $i20);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb15_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1193;
}



const bdc_writel: ref;

axiom bdc_writel == $sub.ref(0, 386060);

procedure bdc_writel($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation bdc_writel($p0: ref, $i1: i32, $i2: i32)
{
  var $i3: i64;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} {:cexpr "bdc_writel:arg:offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 216} {:cexpr "bdc_writel:arg:value"} boogie_si_record_i32($i2);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i1);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p0, $mul.ref($i3, 1));
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} writel($i2, $p4);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    return;
}



const ___ratelimit: ref;

axiom ___ratelimit == $sub.ref(0, 387092);

procedure ___ratelimit($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ___ratelimit($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 1} true;
    call {:si_unique_call 218} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 219} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 388124);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    return;
}



const writel: ref;

axiom writel == $sub.ref(0, 389156);

procedure writel($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation writel($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} {:cexpr "writel:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    call {:si_unique_call 222} devirtbounce.1(0, $i0, $p2);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    return;
}



const readl: ref;

axiom readl == $sub.ref(0, 390188);

procedure readl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.9, $CurrAddr, $M.8, assertsPassed;



implementation readl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 223} $i2 := devirtbounce.2(0, $p1);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 224} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const usb_gadget_unmap_request: ref;

axiom usb_gadget_unmap_request == $sub.ref(0, 391220);

procedure usb_gadget_unmap_request($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation usb_gadget_unmap_request($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} {:cexpr "usb_gadget_unmap_request:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 392252);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.9;



implementation spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} ldv_spin_unlock();
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} ldv_spin_unlock_79($p0);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    return;
}



const usb_gadget_giveback_request: ref;

axiom usb_gadget_giveback_request == $sub.ref(0, 393284);

procedure usb_gadget_giveback_request($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation usb_gadget_giveback_request($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 394316);

procedure spin_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.9;



implementation spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} ldv_spin_lock();
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} ldv_spin_lock_75($p0);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 395348);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.9;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 230} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_75: ref;

axiom ldv_spin_lock_75 == $sub.ref(0, 396380);

procedure ldv_spin_lock_75($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_75($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} _raw_spin_lock($p2);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 397412);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 398444);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.9;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $M.9 := 0;
    call {:si_unique_call 232} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_79: ref;

axiom ldv_spin_unlock_79 == $sub.ref(0, 399476);

procedure ldv_spin_unlock_79($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_79($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} _raw_spin_unlock($p2);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 400508);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    return;
}



const bdc_dump_epsts: ref;

axiom bdc_dump_epsts == $sub.ref(0, 401540);

procedure bdc_dump_epsts($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.9, $CurrAddr, $M.8, assertsPassed;



implementation bdc_dump_epsts($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} $i3 := bdc_readl($p2, 96);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 235} {:cexpr "temp"} boogie_si_record_i32($i3);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $i6 := bdc_readl($p5, 100);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    call {:si_unique_call 237} {:cexpr "temp"} boogie_si_record_i32($i6);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} $i9 := bdc_readl($p8, 104);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    call {:si_unique_call 239} {:cexpr "temp"} boogie_si_record_i32($i9);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p10);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} $i12 := bdc_readl($p11, 108);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    call {:si_unique_call 241} {:cexpr "temp"} boogie_si_record_i32($i12);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} $i15 := bdc_readl($p14, 112);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    call {:si_unique_call 243} {:cexpr "temp"} boogie_si_record_i32($i15);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.6, $p16);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $i18 := bdc_readl($p17, 116);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 245} {:cexpr "temp"} boogie_si_record_i32($i18);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.6, $p19);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} $i21 := bdc_readl($p20, 120);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    call {:si_unique_call 247} {:cexpr "temp"} boogie_si_record_i32($i21);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.6, $p22);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} $i24 := bdc_readl($p23, 124);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    call {:si_unique_call 249} {:cexpr "temp"} boogie_si_record_i32($i24);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 402572);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const devm_kzalloc: ref;

axiom devm_kzalloc == $sub.ref(0, 403604);

procedure devm_kzalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devm_kzalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} {:cexpr "devm_kzalloc:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 251} {:cexpr "devm_kzalloc:arg:gfp"} boogie_si_record_i32($i2);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 32768);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $p4 := devm_kmalloc($p0, $i1, $i3);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const platform_get_resource: ref;

axiom platform_get_resource == $sub.ref(0, 404636);

procedure platform_get_resource($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation platform_get_resource($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} {:cexpr "platform_get_resource:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 254} {:cexpr "platform_get_resource:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} $p3 := external_alloc();
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const devm_ioremap_resource: ref;

axiom devm_ioremap_resource == $sub.ref(0, 405668);

procedure devm_ioremap_resource($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devm_ioremap_resource($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $p2 := external_alloc();
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 406700);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} $i1 := ldv_is_err($p0);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 258} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const platform_get_irq: ref;

axiom platform_get_irq == $sub.ref(0, 407732);

procedure platform_get_irq($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation platform_get_irq($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 259} {:cexpr "platform_get_irq:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 1} true;
    call {:si_unique_call 260} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 261} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 408764);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 409796);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    return;
}



const platform_set_drvdata: ref;

axiom platform_set_drvdata == $sub.ref(0, 410828);

procedure platform_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation platform_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} dev_set_drvdata($p2, $p1);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    return;
}



const dma_set_mask_and_coherent: ref;

axiom dma_set_mask_and_coherent == $sub.ref(0, 411860);

procedure dma_set_mask_and_coherent($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation dma_set_mask_and_coherent($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var vslice_dummy_var_17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} {:cexpr "dma_set_mask_and_coherent:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $i2 := dma_set_mask($p0, $i1);
    call {:si_unique_call 265} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} vslice_dummy_var_17 := dma_set_coherent_mask($p0, $i1);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bdc_hw_init: ref;

axiom bdc_hw_init == $sub.ref(0, 412892);

procedure bdc_hw_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.9, assertsPassed, $M.8;



implementation bdc_hw_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i24;
  var $i37: i24;
  var $i38: i24;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, .str);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, .str.110);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, .str.2);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p6, .str.6);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.4, $p8);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 430);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p8, $i11);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p12, 0);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.5, $p13);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 270} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $i21 := bdc_reset($p0);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    call {:si_unique_call 273} {:cexpr "ret"} boogie_si_record_i32($i21);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $i26 := bdc_mem_alloc($p0);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    call {:si_unique_call 276} {:cexpr "ret"} boogie_si_record_i32($i26);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} bdc_mem_init($p0, 0);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} bdc_dbg_regs($p0);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, .str);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p31, .str.110);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p32, .str.2);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p33, .str.113);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i36 := $load.i24($M.4, $p35);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i37 := $and.i24($i36, $sub.i24(0, 262144));
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i38 := $or.i24($i37, 443);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p35, $i38);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p39, 0);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.5, $p40);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i64($i41);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i43 := $and.i64($i42, 1);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $i44 := ldv__builtin_expect($i43, 0);
    call {:si_unique_call 281} {:cexpr "tmp___0"} boogie_si_record_i64($i44);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb11:
    assume $i45 == 1;
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.6, $p46);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} __dynamic_dev_dbg.ref.ref.ref($p2, $p47, .str.113);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.6, $p28);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} dev_err.ref.ref($p29, .str.112);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 12);
    goto $bb6;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.6, $p23);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} dev_err.ref.ref.i32($p24, .str.111, $i21);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i25 := $i21;
    goto $bb6;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.6, $p19);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p20, .str.6, .str.110);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bdc_udc_init: ref;

axiom bdc_udc_init == $sub.ref(0, 413924);

procedure bdc_udc_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.9, $M.8, assertsPassed;



implementation bdc_udc_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p33: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i8;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p85: ref;
  var $p86: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p94: ref;
  var $p97: ref;
  var $p100: ref;
  var $p102: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i63: i32;
  var $i51: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, .str);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, .str.83);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, .str.77);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str.73);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.4, $p10);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 526);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p10, $i13);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p14, 0);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.5, $p15);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 288} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p24, bdc_gadget_ops);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(0, 1)), $mul.ref(124, 1));
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p26, 5);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(0, 1)), $mul.ref(120, 1));
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p28, 0);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.6, $p29);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(0, 1)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p33, $p30);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(0, 1)), $mul.ref(1576, 1));
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.6, $p35);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i37 := $and.i8($i36, $sub.i8(0, 2));
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p35, $i37);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p39, .str.84);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.6, $p40);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(2060, 1));
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.6, $p42);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p0);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} $i45 := devm_request_irq($p41, $i43, bdc_udc_interrupt, 128, .str.84, $p44);
    call {:si_unique_call 291} {:cexpr "ret"} boogie_si_record_i32($i45);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $i52 := bdc_init_ep($p0);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    call {:si_unique_call 294} {:cexpr "ret"} boogie_si_record_i32($i52);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.6, $p56);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(0, 1));
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $i59 := usb_add_gadget_udc($p57, $p58);
    call {:si_unique_call 297} {:cexpr "ret"} boogie_si_record_i32($i59);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(0, 1));
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} usb_gadget_set_state($p64, 0);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1680, 1));
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.6, $p65);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p66, $mul.ref(1, 8));
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.6, $p67);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 176)), $mul.ref(104, 1));
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p69, bdc_gadget_ep0_desc);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1680, 1));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.6, $p70);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p71, $mul.ref(1, 8));
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.6, $p72);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} $i74 := bdc_ep_enable($p73);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    call {:si_unique_call 302} {:cexpr "ret"} boogie_si_record_i32($i74);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(2144, 1)), $mul.ref(0, 1));
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} __init_work($p85, 0);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p86, 137438953408);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(2144, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p3);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.6;
    cmdloc_dummy_var_1 := $M.6;
    call {:si_unique_call 306} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p90, $p91, 8, $zext.i32.i64(8), 0 == 1);
    $M.6 := cmdloc_dummy_var_2;
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(2144, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} lockdep_init_map($p94, .str.89, $p2, 0);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(2144, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} INIT_LIST_HEAD($p97);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(2144, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p100, bdc_func_wake_timer);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(2144, 1)), $mul.ref(80, 1));
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} init_timer_key($p102, 2097152, .str.90, $p4);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(2144, 1)), $mul.ref(80, 1)), $mul.ref(24, 1));
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p105, delayed_work_timer_fn);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(2144, 1));
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p106);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(2144, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p110, $i107);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.6, $p111);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $i113 := bdc_readl($p112, 64);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    call {:si_unique_call 311} {:cexpr "temp"} boogie_si_record_i32($i113);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i114 := $or.i32($i113, 2);
    call {:si_unique_call 312} {:cexpr "temp"} boogie_si_record_i32($i114);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.6, $p115);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} bdc_writel($p116, 64, $i114);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i51 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $r := $i51;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i75 == 1;
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.6, $p76);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1680, 1));
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.6, $p78);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p79, $mul.ref(1, 8));
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.6, $p80);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 176)), $mul.ref(116, 1));
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} dev_err.ref.ref.ref($p77, .str.88, $p83);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(0, 1));
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} usb_del_gadget_udc($p117);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i63 := $i74;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} bdc_free_ep($p0);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i51 := $i63;
    goto $bb6;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i60 == 1;
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.6, $p61);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} dev_err.ref.ref($p62, .str.87);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i63 := $i59;
    goto $bb13;

  $bb8:
    assume $i53 == 1;
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.6, $p54);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} dev_err.ref.ref.i32($p55, .str.86, $i52);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i51 := $i52;
    goto $bb6;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i46 == 1;
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.6, $p47);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(2060, 1));
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.6, $p49);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} dev_err.ref.ref.i32.i32($p48, .str.85, $i50, $i45);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i51 := $i45;
    goto $bb6;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $p21);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p22, .str.73, .str.83);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bdc_udc_interrupt: ref;

axiom bdc_udc_interrupt == $sub.ref(0, 414956);

procedure bdc_udc_interrupt($i0: i32, $p1: ref) returns ($r: i32);



const devm_request_irq: ref;

axiom devm_request_irq == $sub.ref(0, 415988);

procedure devm_request_irq($p0: ref, $i1: i32, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devm_request_irq($p0: ref, $i1: i32, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} {:cexpr "devm_request_irq:arg:irq"} boogie_si_record_i32($i1);
    call {:si_unique_call 315} {:cexpr "devm_request_irq:arg:irqflags"} boogie_si_record_i64($i3);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $i6 := devm_request_threaded_irq($p0, $i1, $p2, $0.ref, $i3, $p4, $p5);
    call {:si_unique_call 317} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const bdc_init_ep: ref;

axiom bdc_init_ep == $sub.ref(0, 417020);

procedure bdc_init_ep($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, assertsPassed;



implementation bdc_init_ep($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i8;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i8;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i8;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $i31: i8;
  var $i26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, .str);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, .str.72);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p4, .str.46);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p5, .str.73);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.4, $p7);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 1995);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p7, $i10);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p11, 0);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.5, $p12);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 320} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} INIT_LIST_HEAD($p21);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} $i22 := init_ep($p0, 1, 0);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    call {:si_unique_call 324} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1672, 1));
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.6, $p27);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i29 := $udiv.i32($i28, 2);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i30 := $ule.i32(2, $i29);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i31 := 2;
    goto $bb11;

  $bb11:
    call $i32, $i33, $i34, $i35, $i36, $i40, $i41, $i42, $i43, $i44, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i31 := bdc_init_ep_loop_$bb11($p0, $p27, $i32, $i33, $i34, $i35, $i36, $i40, $i41, $i42, $i43, $i44, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i31);
    goto $bb11_last;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $i33 := init_ep($p0, $i32, 0);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    call {:si_unique_call 327} {:cexpr "ret"} boogie_si_record_i32($i33);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i35, $i36 := $i31, $i33;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i31);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} $i41 := init_ep($p0, $i40, 1);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    call {:si_unique_call 330} {:cexpr "ret"} boogie_si_record_i32($i41);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i43, $i44 := $i31, $i41;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i31);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i48, 1);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i8($i49);
    call {:si_unique_call 332} {:cexpr "epnum"} boogie_si_record_i8($i50);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.6, $p27);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i53 := $udiv.i32($i52, 2);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i54 := $ule.i32($i51, $i53);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i54 == 1);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb19:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i31 := $i50;
    goto $bb19_dummy;

  $bb16:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.6, $p45);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i43);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} dev_err.ref.ref.i32.i32($p46, .str.75, $i47, $i44);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i26 := $i44;
    goto $bb6;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.6, $p37);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i35);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} dev_err.ref.ref.i32.i32($p38, .str.75, $i39, $i36);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $i26 := $i36;
    goto $bb6;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.6, $p24);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} dev_err.ref.ref.i32($p25, .str.74, $i22);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i26 := $i22;
    goto $bb6;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p19, .str.73, .str.72);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1687;
}



const usb_add_gadget_udc: ref;

axiom usb_add_gadget_udc == $sub.ref(0, 418052);

procedure usb_add_gadget_udc($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_add_gadget_udc($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 1} true;
    call {:si_unique_call 333} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 334} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_gadget_set_state: ref;

axiom usb_gadget_set_state == $sub.ref(0, 419084);

procedure usb_gadget_set_state($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation usb_gadget_set_state($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} {:cexpr "usb_gadget_set_state:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    return;
}



const bdc_ep_enable: ref;

axiom bdc_ep_enable == $sub.ref(0, 420116);

procedure bdc_ep_enable($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.8, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.9, assertsPassed;



implementation bdc_ep_enable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i16;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i8;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $p59: ref;
  var $i26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(80, 1));
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, .str);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str.49);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.46);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.50);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.4, $p9);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 613);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p9, $i12);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p13, 0);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.5, $p14);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 338} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $i22 := ep_bd_list_alloc($p0);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    call {:si_unique_call 341} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} bdc_dbg_bd_list($p3, $p0);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.6, $p27);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i28, 1);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p30, $i29);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(90, 1));
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.6, $p31);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 1);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} $i35 := bdc_config_ep($p3, $p0);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    call {:si_unique_call 345} {:cexpr "ret"} boogie_si_record_i32($i35);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(104, 1));
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.6, $p37);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $i39 := usb_endpoint_maxp($p38);
    call {:si_unique_call 347} {:cexpr "tmp___0"} boogie_si_record_i32($i39);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i16($i39);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p42, $i40);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(104, 1));
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.6, $p43);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p46, $p44);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(96, 1));
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.6, $p47);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p50, $p48);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(104, 1));
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.6, $p51);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} $i53 := usb_endpoint_type($p52);
    call {:si_unique_call 349} {:cexpr "tmp___1"} boogie_si_record_i32($i53);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i8($i53);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(88, 1));
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p55, $i54);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.6, $p56);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i58 := $or.i32($i57, 1);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p59, $i58);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb11:
    assume $i36 == 1;
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i26 := $i35;
    goto $bb6;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i34 == 1;
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i26 := $i22;
    goto $bb6;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.6, $p24);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} dev_err.ref.ref.i32($p25, .str.51, $i22);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 12);
    goto $bb6;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.6, $p20);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p1, $p21, .str.50, .str.49, 2, 6);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 421148);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 422180);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 423212);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 424244);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1, $p0);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p2, $p0);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    return;
}



const bdc_func_wake_timer: ref;

axiom bdc_func_wake_timer == $sub.ref(0, 425276);

procedure bdc_func_wake_timer($p0: ref);



const init_timer_key: ref;

axiom init_timer_key == $sub.ref(0, 426308);

procedure init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} {:cexpr "init_timer_key:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    return;
}



const delayed_work_timer_fn: ref;

axiom delayed_work_timer_fn == $sub.ref(0, 427340);

procedure delayed_work_timer_fn($i0: i64);



const bdc_function_wake_fh: ref;

axiom bdc_function_wake_fh == $sub.ref(0, 428372);

procedure bdc_function_wake_fh($p0: ref, $i1: i8) returns ($r: i32);



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 429404);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);



const schedule_delayed_work: ref;

axiom schedule_delayed_work == $sub.ref(0, 430436);

procedure schedule_delayed_work($p0: ref, $i1: i64) returns ($r: i1);



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 431468);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.9;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} ldv_spin_unlock();
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} ldv_spin_unlock_irqrestore_82($p0, $i1);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_82: ref;

axiom ldv_spin_unlock_irqrestore_82 == $sub.ref(0, 432500);

procedure ldv_spin_unlock_irqrestore_82($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_82($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} {:cexpr "ldv_spin_unlock_irqrestore_82:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 433532);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    return;
}



const queue_delayed_work: ref;

axiom queue_delayed_work == $sub.ref(0, 434564);

procedure queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1);



const ldv_queue_delayed_work_on_120: ref;

axiom ldv_queue_delayed_work_on_120 == $sub.ref(0, 435596);

procedure ldv_queue_delayed_work_on_120($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);



const queue_delayed_work_on: ref;

axiom queue_delayed_work_on == $sub.ref(0, 436628);

procedure queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);



const activate_work_1: ref;

axiom activate_work_1 == $sub.ref(0, 437660);

procedure activate_work_1($p0: ref, $i1: i32);



const __msecs_to_jiffies: ref;

axiom __msecs_to_jiffies == $sub.ref(0, 438692);

procedure __msecs_to_jiffies($i0: i32) returns ($r: i64);



const ep_bd_list_alloc: ref;

axiom ep_bd_list_alloc == $sub.ref(0, 439724);

procedure ep_bd_list_alloc($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, assertsPassed;



implementation ep_bd_list_alloc($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i24;
  var $i65: i24;
  var $i66: i24;
  var $p67: ref;
  var $p68: ref;
  var $i69: i8;
  var $i70: i64;
  var $i71: i64;
  var $i72: i64;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $i89: i64;
  var $i90: i64;
  var $i91: i1;
  var $i92: i32;
  var $i93: i1;
  var $p41: ref;
  var $i42: i32;
  var $p94: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i32;
  var $p104: ref;
  var $p106: ref;
  var $p108: ref;
  var $p110: ref;
  var $p112: ref;
  var $i40: i32;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(80, 1));
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(104, 1));
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $i8 := usb_endpoint_xfer_isoc($p7);
    call {:si_unique_call 363} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := 2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, .str);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p12, .str.155);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p13, .str.46);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p14, .str.156);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.4, $p16);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 143);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p16, $i19);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p20, 0);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.5, $p21);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 365} {:cexpr "tmp___0"} boogie_si_record_i64($i25);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i10);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i30 := $mul.i64($i29, 8);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $p31 := kzalloc($i30, 32);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(0, 1));
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p34, $p31);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(0, 1));
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.6, $p36);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i38, 0);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p41, $i42 := $0.ref, 0;
    goto $bb11;

  $bb11:
    call $p43, $p44, $i45, $i46, $p47, $p48, $p49, $p51, $p52, $p53, $i54, $i55, $i56, $p57, $p58, $p59, $p60, $p61, $p62, $p63, $i64, $i65, $i66, $p67, $p68, $i69, $i70, $i71, $i72, $i73, $p74, $p75, $p76, $p77, $p78, $i79, $p81, $p82, $i83, $p84, $p85, $p86, $p87, $i88, $i89, $i90, $i91, $i92, $i93, $p41, $i42, $p94, cmdloc_dummy_var_3, cmdloc_dummy_var_4 := ep_bd_list_alloc_loop_$bb11($p0, $p1, $p3, $p5, $i10, $p43, $p44, $i45, $i46, $p47, $p48, $p49, $p51, $p52, $p53, $i54, $i55, $i56, $p57, $p58, $p59, $p60, $p61, $p62, $p63, $i64, $i65, $i66, $p67, $p68, $i69, $i70, $i71, $i72, $i73, $p74, $p75, $p76, $p77, $p78, $i79, $p81, $p82, $i83, $p84, $p85, $p86, $p87, $i88, $i89, $i90, $i91, $i92, $i93, $p41, $i42, $p94, cmdloc_dummy_var_3, cmdloc_dummy_var_4);
    goto $bb11_last;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $p43 := kzalloc(16, 32);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i46 := $eq.i64($i45, 0);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 2368)), $mul.ref(2080, 1));
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.6, $p47);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $p49 := ldv_dma_pool_alloc_99($p48, 32, $p1);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p44, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p51, $p49);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p44, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.6, $p52);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i55 := $eq.i64($i54, 0);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.18, $p1);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p44, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p57, $i56);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p58, .str);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p59, .str.155);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p60, .str.46);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p61, .str.157);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i64 := $load.i24($M.4, $p63);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i65 := $and.i24($i64, $sub.i24(0, 262144));
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i66 := $or.i24($i65, 170);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p63, $i66);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p67, 0);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.5, $p68);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i64($i69);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i71 := $and.i64($i70, 1);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $i72 := ldv__builtin_expect($i71, 0);
    call {:si_unique_call 372} {:cexpr "tmp___4"} boogie_si_record_i64($i72);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(0, 1));
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.6, $p81);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i42);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p82, $mul.ref($i83, 8));
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p84, $p43);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p44, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.6, $p85);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i88 := $sext.i32.i64(32);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i89 := $mul.i64($i88, 16);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.6;
    call {:si_unique_call 374} cmdloc_dummy_var_4 := $memset.i8(cmdloc_dummy_var_3, $p87, 0, $i89, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_4;
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p41);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i91 := $ne.i64($i90, 0);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i92 := $add.i32($i42, 1);
    call {:si_unique_call 376} {:cexpr "index"} boogie_si_record_i32($i92);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i92, $i10);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $p94 := $p43;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(0, 1));
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.6, $p96);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.6, $p97);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} chain_table($p94, $p98, 32);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(8, 1));
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p100, $i10);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i101 := $mul.i32($i10, 32);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i102 := $add.i32($i101, $sub.i32(0, 1));
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(12, 1));
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p104, $i102);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(8, 1));
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p106, $i10);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(24, 1));
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p108, 32);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p110, 0);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(20, 1));
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p112, 0);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $r := $i40;
    return;

  $bb26:
    assume $i93 == 1;
    assume {:verifier.code 0} true;
    $p41, $i42 := $p43, $i92;
    goto $bb26_dummy;

  $bb23:
    assume $i91 == 1;
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} chain_table($p41, $p44, 32);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i73 == 1;
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p5, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.6, $p74);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p44, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.6, $p76);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p44, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i79 := $load.i64($M.6, $p78);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} __dynamic_dev_dbg.ref.ref.ref.i32.ref.i64.ref($p3, $p75, .str.157, $i42, $p77, $i79, $p41);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i55 == 1;
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} ep_bd_list_free($p0, $i10);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 12);
    goto $bb9;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i46 == 1;
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i39 == 1;
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 12);
    goto $bb9;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.6, $p27);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32($p2, $p28, .str.156, .str.155, $p0, $i10);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i10 := 6;
    goto $bb3;

  $bb26_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1886;
}



const bdc_dbg_bd_list: ref;

axiom bdc_dbg_bd_list == $sub.ref(0, 440756);

procedure bdc_dbg_bd_list($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation bdc_dbg_bd_list($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i10: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(8, 1));
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.6, $p3);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 0);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb4;

  $bb4:
    call $p7, $i8, $i9, $i11, $i12, $i13, $i10, $i14, $i15, $i16, $i6 := bdc_dbg_bd_list_loop_$bb4($p1, $p3, $p7, $i8, $i9, $i11, $i12, $i13, $i10, $i14, $i15, $i16, $i6);
    goto $bb4_last;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(24, 1));
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.6, $p7);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 0);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i6, 1);
    call {:si_unique_call 379} {:cexpr "tbi"} boogie_si_record_i32($i14);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.6, $p3);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i16 := $sgt.i32($i15, $i14);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i16 == 1);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i14;
    goto $bb14_dummy;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb9;

  $bb9:
    call $i11, $i12, $i13, $i10 := bdc_dbg_bd_list_loop_$bb9($p7, $i11, $i12, $i13, $i10);
    goto $bb9_last;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 1);
    call {:si_unique_call 378} {:cexpr "bdi"} boogie_si_record_i32($i11);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.6, $p7);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i13 := $sgt.i32($i12, $i11);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i13 == 1);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb11:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i11;
    goto $bb11_dummy;

  $bb11_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1999;

  $bb14_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1991;
}



const bdc_config_ep: ref;

axiom bdc_config_ep == $sub.ref(0, 441788);

procedure bdc_config_ep($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.8, $M.6, $CurrAddr, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.9, assertsPassed;



implementation bdc_config_ep($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i24;
  var $i30: i24;
  var $i31: i24;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i72: i64;
  var $i73: i1;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;
  var $i80: i32;
  var $i81: i32;
  var $i82: i64;
  var $i83: i1;
  var $p84: ref;
  var $i85: i8;
  var $i86: i32;
  var $i87: i32;
  var $i88: i32;
  var $i89: i32;
  var $i91: i32;
  var $i92: i1;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i100: i32;
  var $i101: i1;
  var $i102: i32;
  var $i103: i32;
  var $i104: i32;
  var $i105: i32;
  var $i106: i32;
  var $i107: i32;
  var $i108: i32;
  var $i99: i32;
  var $i109: i32;
  var $i110: i1;
  var $i111: i32;
  var $i112: i32;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $i116: i8;
  var $i117: i32;
  var $i118: i32;
  var $i119: i32;
  var $i120: i32;
  var $i121: i32;
  var $i122: i32;
  var $p123: ref;
  var $p124: ref;
  var $i90: i32;
  var $p126: ref;
  var $i127: i8;
  var $i128: i32;
  var $i129: i32;
  var $i130: i32;
  var $i131: i32;
  var $i132: i32;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i24;
  var $i140: i24;
  var $i141: i24;
  var $p142: ref;
  var $p143: ref;
  var $i144: i8;
  var $i145: i64;
  var $i146: i64;
  var $i147: i64;
  var $i148: i1;
  var $p149: ref;
  var $p150: ref;
  var $i151: i32;
  var $i152: i1;
  var $p153: ref;
  var $p154: ref;
  var $i125: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(104, 1));
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(96, 1));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(0, 1));
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p10);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.6, $p12);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i13);
    call {:si_unique_call 382} {:cexpr "param0"} boogie_si_record_i32($i14);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(0, 1));
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.6, $p16);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.6, $p17);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.6, $p19);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i21 := $lshr.i64($i20, 32);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i32($i21);
    call {:si_unique_call 383} {:cexpr "param1"} boogie_si_record_i32($i22);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, .str);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p24, .str.21);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p25, .str.19);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p26, .str.22);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i29 := $load.i24($M.4, $p28);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i30 := $and.i24($i29, $sub.i24(0, 262144));
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i31 := $or.i24($i30, 159);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p28, $i31);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p32, 0);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.5, $p33);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i64($i34);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i36 := $and.i64($i35, 1);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 385} {:cexpr "tmp"} boogie_si_record_i64($i37);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p5, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.6, $p41);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    call {:si_unique_call 387} {:cexpr "si"} boogie_si_record_i32($i43);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i44 := $ugt.i32($i43, 1);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i44 == 1);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i45 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $i46 := $ult.i32($i45, 16);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i46 == 1);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i47 := 16;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32($i47, 1);
    call {:si_unique_call 388} {:cexpr "si"} boogie_si_record_i32($i48);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $i49 := usb_endpoint_maxp($p5);
    call {:si_unique_call 390} {:cexpr "tmp___0"} boogie_si_record_i32($i49);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i49, 2047);
    call {:si_unique_call 391} {:cexpr "mps"} boogie_si_record_i32($i50);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i51 := $shl.i32($i50, 10);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i52 := $or.i32($i51, 0);
    call {:si_unique_call 392} {:cexpr "param2"} boogie_si_record_i32($i52);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} $i53 := usb_endpoint_type($p5);
    call {:si_unique_call 394} {:cexpr "tmp___1"} boogie_si_record_i32($i53);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i54 := $shl.i32($i53, 22);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i55 := $or.i32($i54, $i52);
    call {:si_unique_call 395} {:cexpr "param2"} boogie_si_record_i32($i55);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(0, 1)), $mul.ref(120, 1));
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.6, $p57);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i58, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i58, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i58, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.6, $p123);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} dev_err.ref.ref($p124, .str.23);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i125 := $sub.i32(0, 22);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $r := $i125;
    return;

  $bb15:
    assume $i61 == 1;
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $i65 := usb_endpoint_xfer_int($p5);
    call {:si_unique_call 397} {:cexpr "tmp___3"} boogie_si_record_i32($i65);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i66 == 1);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} $i67 := usb_endpoint_xfer_isoc($p5);
    call {:si_unique_call 403} {:cexpr "tmp___4"} boogie_si_record_i32($i67);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $i78, $i79 := $i55, 0;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i80 := $shl.i32($i79, 4);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i81 := $or.i32($i80, $i78);
    call {:si_unique_call 408} {:cexpr "param2"} boogie_si_record_i32($i81);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p7);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i83 := $ne.i64($i82, 0);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i87 := 0;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $i88 := $shl.i32($i87, 6);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i89 := $or.i32($i88, $i81);
    call {:si_unique_call 410} {:cexpr "param2"} boogie_si_record_i32($i89);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i90 := $i89;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(90, 1));
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i127 := $load.i8($M.6, $p126);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i32($i127);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i129 := $and.i32($i128, 31);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i130 := $shl.i32($i129, 10);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i131 := $or.i32($i130, 0);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i132 := $or.i32($i131, 131074);
    call {:si_unique_call 411} {:cexpr "cmd_sc"} boogie_si_record_i32($i132);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p133, .str);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p134, .str.21);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p135, .str.19);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p136, .str.24);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i139 := $load.i24($M.4, $p138);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i140 := $and.i24($i139, $sub.i24(0, 262144));
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i141 := $or.i24($i140, 216);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p138, $i141);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p142, 0);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i144 := $load.i8($M.5, $p143);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i145 := $zext.i8.i64($i144);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i146 := $and.i64($i145, 1);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} $i147 := ldv__builtin_expect($i146, 0);
    call {:si_unique_call 413} {:cexpr "tmp___11"} boogie_si_record_i64($i147);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i148 := $ne.i64($i147, 0);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $i151 := bdc_submit_cmd($p0, $i132, $i14, $i22, $i90);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    call {:si_unique_call 436} {:cexpr "ret"} boogie_si_record_i32($i151);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i152 := $ne.i32($i151, 0);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} ep_bd_list_reinit($p1);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i125 := $i151;
    goto $bb55;

  $bb59:
    assume $i152 == 1;
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $p154 := $load.ref($M.6, $p153);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} dev_err.ref.ref.i32($p154, .str.25, $i151);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i125 := $i151;
    goto $bb55;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb56:
    assume $i148 == 1;
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.6, $p149);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} __dynamic_dev_dbg.ref.ref.ref.i32.i32($p3, $p150, .str.24, $i132, $i90);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb38:
    assume $i83 == 1;
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p7, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.6, $p84);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    call {:si_unique_call 409} {:cexpr "mbs"} boogie_si_record_i32($i86);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i87 := $i86;
    goto $bb40;

  $bb28:
    assume $i68 == 1;
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i69 := $or.i32($i55, $i48);
    call {:si_unique_call 404} {:cexpr "param2"} boogie_si_record_i32($i69);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} $i70 := usb_endpoint_xfer_isoc($p5);
    call {:si_unique_call 406} {:cexpr "tmp___2"} boogie_si_record_i32($i70);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i77 := 0;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i78, $i79 := $i69, $i77;
    goto $bb36;

  $bb30:
    assume $i71 == 1;
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p7);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb32;

  $bb33:
    assume $i73 == 1;
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p7, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.6, $p74);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    call {:si_unique_call 407} {:cexpr "mul"} boogie_si_record_i32($i76);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i77 := $i76;
    goto $bb35;

  $bb25:
    assume $i66 == 1;
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb13:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i58, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb17;

  $bb18:
    assume $i62 == 1;
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $i91 := usb_endpoint_xfer_isoc($p5);
    call {:si_unique_call 399} {:cexpr "tmp___6"} boogie_si_record_i32($i91);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i92 == 1);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $i100 := usb_endpoint_xfer_int($p5);
    call {:si_unique_call 420} {:cexpr "tmp___7"} boogie_si_record_i32($i100);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    $i108 := $i55;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i99 := $i108;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i90 := $i99;
    goto $bb41;

  $bb45:
    assume $i101 == 1;
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i102 := $or.i32($i55, $i48);
    call {:si_unique_call 421} {:cexpr "param2"} boogie_si_record_i32($i102);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} $i103 := usb_endpoint_maxp($p5);
    call {:si_unique_call 423} {:cexpr "tmp___5"} boogie_si_record_i32($i103);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i104 := $and.i32($i103, 6144);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i105 := $ashr.i32($i104, 11);
    call {:si_unique_call 424} {:cexpr "mbs"} boogie_si_record_i32($i105);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i106 := $shl.i32($i105, 6);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i107 := $or.i32($i106, $i102);
    call {:si_unique_call 425} {:cexpr "param2"} boogie_si_record_i32($i107);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i108 := $i107;
    goto $bb47;

  $bb42:
    assume $i92 == 1;
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i93 := $or.i32($i55, $i48);
    call {:si_unique_call 414} {:cexpr "param2"} boogie_si_record_i32($i93);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} $i94 := usb_endpoint_maxp($p5);
    call {:si_unique_call 416} {:cexpr "tmp___5"} boogie_si_record_i32($i94);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i95 := $and.i32($i94, 6144);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i96 := $ashr.i32($i95, 11);
    call {:si_unique_call 417} {:cexpr "mbs"} boogie_si_record_i32($i96);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i97 := $shl.i32($i96, 6);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i98 := $or.i32($i97, $i93);
    call {:si_unique_call 418} {:cexpr "param2"} boogie_si_record_i32($i98);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i99 := $i98;
    goto $bb44;

  $bb11:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i58, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i63 == 1);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $i109 := usb_endpoint_xfer_isoc($p5);
    call {:si_unique_call 401} {:cexpr "tmp___8"} boogie_si_record_i32($i109);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $i110 := $ne.i32($i109, 0);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    $i112 := $i48;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} $i113 := usb_endpoint_xfer_int($p5);
    call {:si_unique_call 428} {:cexpr "tmp___10"} boogie_si_record_i32($i113);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i114 := $ne.i32($i113, 0);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    $i121 := $i112;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i122 := $or.i32($i55, $i121);
    call {:si_unique_call 432} {:cexpr "param2"} boogie_si_record_i32($i122);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i90 := $i122;
    goto $bb41;

  $bb51:
    assume $i114 == 1;
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p5, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.6, $p115);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $i118 := $mul.i32($i117, 8);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} $i119 := fls($i118);
    call {:si_unique_call 430} {:cexpr "tmp___9"} boogie_si_record_i32($i119);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i120 := $add.i32($i119, $sub.i32(0, 1));
    call {:si_unique_call 431} {:cexpr "si"} boogie_si_record_i32($i120);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i121 := $i120;
    goto $bb53;

  $bb48:
    assume $i110 == 1;
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i111 := $add.i32($i48, 3);
    call {:si_unique_call 426} {:cexpr "si"} boogie_si_record_i32($i111);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i112 := $i111;
    goto $bb50;

  $bb20:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i58, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb17;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb23;

  $bb7:
    assume $i46 == 1;
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i47 := $i45;
    goto $bb9;

  $bb4:
    assume $i44 == 1;
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i45 := $i43;
    goto $bb6;

  $bb1:
    assume $i38 == 1;
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.6, $p39);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p2, $p40, .str.22, .str.21, $i14, $i22);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_endpoint_maxp: ref;

axiom usb_endpoint_maxp == $sub.ref(0, 442820);

procedure usb_endpoint_maxp($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_maxp($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.6, $p1);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_endpoint_type: ref;

axiom usb_endpoint_type == $sub.ref(0, 443852);

procedure usb_endpoint_type($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_type($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.6, $p1);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const usb_endpoint_xfer_int: ref;

axiom usb_endpoint_xfer_int == $sub.ref(0, 444884);

procedure usb_endpoint_xfer_int($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_int($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.6, $p1);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 3);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_endpoint_xfer_isoc: ref;

axiom usb_endpoint_xfer_isoc == $sub.ref(0, 445916);

procedure usb_endpoint_xfer_isoc($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_isoc($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.6, $p1);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const fls: ref;

axiom fls == $sub.ref(0, 446948);

procedure fls($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fls($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} {:cexpr "fls:arg:x"} boogie_si_record_i32($i0);
    call {:si_unique_call 440} $i1 := devirtbounce.4(0, $i0, $sub.i32(0, 1));
    call {:si_unique_call 441} {:cexpr "r"} boogie_si_record_i32($i1);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ep_bd_list_reinit: ref;

axiom ep_bd_list_reinit == $sub.ref(0, 447980);

procedure ep_bd_list_reinit($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $CurrAddr;



implementation ep_bd_list_reinit($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i24;
  var $i21: i24;
  var $i22: i24;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p38: ref;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(80, 1));
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p5, 0);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(20, 1));
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p7, 0);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(0, 1));
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p10);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, .str);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p15, .str.144);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p16, .str.19);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p17, .str.145);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i20 := $load.i24($M.4, $p19);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i21 := $and.i24($i20, $sub.i24(0, 262144));
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i22 := $or.i24($i21, 136);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p19, $i22);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p23, 0);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.5, $p24);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i64($i25);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 1);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $i28 := ldv__builtin_expect($i27, 0);
    call {:si_unique_call 444} {:cexpr "tmp"} boogie_si_record_i64($i28);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p13);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_5 := $M.6;
    call {:si_unique_call 446} cmdloc_dummy_var_6 := $memset.i8(cmdloc_dummy_var_5, $p32, 0, 16, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_6;
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(3, 4));
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.6, $p34);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i35, $sub.i32(0, 2147483648));
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(3, 4));
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p38, $i36);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i29 == 1;
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.6, $p30);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} __dynamic_dev_dbg.ref.ref.ref.ref.ref.ref($p1, $p31, .str.145, .str.144, $p0, $p13);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 449012);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 450044);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 448} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} ldv_check_alloc_flags($i1);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $p2 := ldv_undef_ptr();
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;
}



const ldv_dma_pool_alloc_99: ref;

axiom ldv_dma_pool_alloc_99 == $sub.ref(0, 451076);

procedure ldv_dma_pool_alloc_99($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_dma_pool_alloc_99($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} {:cexpr "ldv_dma_pool_alloc_99:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} ldv_check_alloc_flags($i1);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} $p3 := ldv_undef_ptr();
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;
}



const chain_table: ref;

axiom chain_table == $sub.ref(0, 452108);

procedure chain_table($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation chain_table($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i64;
  var $p37: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} {:cexpr "chain_table:arg:bd_p_tab"} boogie_si_record_i32($i2);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.6, $p3);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32($i2, 1);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i8);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p7, $mul.ref($i9, 16)), $mul.ref(0, 1)), $mul.ref(0, 4));
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p12, $i5);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.6, $p13);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i15 := $lshr.i64($i14, 32);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i32($i15);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.6, $p17);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32($i2, 1);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i19);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p18, $mul.ref($i20, 16)), $mul.ref(0, 1)), $mul.ref(1, 4));
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p23, $i16);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.6, $p24);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32($i2, 1);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i26);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p25, $mul.ref($i27, 16)), $mul.ref(0, 1)), $mul.ref(2, 4));
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p30, 0);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.6, $p31);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32($i2, 1);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i33);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p32, $mul.ref($i34, 16)), $mul.ref(0, 1)), $mul.ref(3, 4));
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p37, 201326607);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 453140);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i1 := $M.9;
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} ldv_error();
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_124:
    assume !assertsPassed;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 454172);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 1} true;
    call {:si_unique_call 457} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 458} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 455204);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 459} __VERIFIER_error();
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_127:
    assume !assertsPassed;
    return;
}



const init_ep: ref;

axiom init_ep == $sub.ref(0, 456236);

procedure init_ep($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, assertsPassed;



implementation init_ep($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p28: ref;
  var $i29: i8;
  var $p30: ref;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p43: ref;
  var $p44: ref;
  var $p47: ref;
  var $i48: i1;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i8;
  var $p54: ref;
  var $i55: i32;
  var $i56: i8;
  var $i57: i32;
  var $i58: i32;
  var $i59: i8;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i8;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $p74: ref;
  var $p76: ref;
  var $p78: ref;
  var $p80: ref;
  var $p82: ref;
  var $p83: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i24;
  var $i96: i24;
  var $i97: i24;
  var $p98: ref;
  var $p99: ref;
  var $i100: i8;
  var $i101: i64;
  var $i102: i64;
  var $i103: i64;
  var $i104: i1;
  var $p105: ref;
  var $p106: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i8;
  var $i112: i32;
  var $p113: ref;
  var $i27: i32;
  var vslice_dummy_var_18: i32;
  var vslice_dummy_var_19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 462} {:cexpr "init_ep:arg:epnum"} boogie_si_record_i32($i1);
    call {:si_unique_call 463} {:cexpr "init_ep:arg:dir"} boogie_si_record_i32($i2);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, .str);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, .str.234);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, .str.46);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str.235);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.4, $p10);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 1947);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p10, $i13);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p14, 0);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.5, $p15);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 465} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} $p23 := kzalloc(176, 208);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p24, $mul.ref(0, 176)), $mul.ref(80, 1));
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p28, $p0);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i2);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p24, $mul.ref(0, 176)), $mul.ref(89, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p30, $i29);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i1, 1);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i2, 0);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i48 == 1);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i1, 2147483647);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i55);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i58 := $mul.i32($i57, 2);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i8($i58);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p24, $mul.ref(0, 176)), $mul.ref(90, 1));
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p60, $i59);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1680, 1));
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.6, $p61);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p24, $mul.ref(0, 176)), $mul.ref(90, 1));
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.6, $p63);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i64($i64);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p62, $mul.ref($i65, 8));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p66, $p23);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p24, $mul.ref(0, 176)), $mul.ref(116, 1));
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i69 := $sub.i32($i1, 1);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i2, 1);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $p72 := (if $i71 == 1 then .str.238 else .str.239);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} vslice_dummy_var_19 := snprintf.ref.i64.ref.i32.ref($p68, 20, .str.237, $i69, $p72);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p24, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} usb_ep_set_maxpacket_limit($p74, 1024);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(44, 1));
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p76, 0);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} list_add_tail($p78, $p80);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p82, bdc_gadget_ep_ops);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p24, $mul.ref(0, 176)), $mul.ref(116, 1));
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p86, $p83);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p24, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p87, 0);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p24, $mul.ref(0, 176)), $mul.ref(168, 1));
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p88, 0);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p89, .str);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p90, .str.234);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p91, .str.46);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p92, .str.240);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i95 := $load.i24($M.4, $p94);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i96 := $and.i24($i95, $sub.i24(0, 262144));
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i97 := $or.i24($i96, 1982);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p94, $i97);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p98, 0);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.5, $p99);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i64($i100);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i102 := $and.i64($i101, 1);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $i103 := ldv__builtin_expect($i102, 0);
    call {:si_unique_call 471} {:cexpr "tmp___1"} boogie_si_record_i64($i103);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i104 := $ne.i64($i103, 0);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p24, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} INIT_LIST_HEAD($p113);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb14:
    assume $i104 == 1;
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.6, $p105);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.6, $p108);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p24, $mul.ref(0, 176)), $mul.ref(90, 1));
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.6, $p110);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32.i32($p4, $p106, .str.240, $p24, $p109, $i1, $i112);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i48 == 1;
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i1);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i51 := $mul.i32($i50, 2);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32($i51, 1);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p24, $mul.ref(0, 176)), $mul.ref(90, 1));
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p54, $i53);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i31 == 1;
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p24, $mul.ref(0, 176)), $mul.ref(90, 1));
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p32, 1);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1680, 1));
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.6, $p33);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p24, $mul.ref(0, 176)), $mul.ref(90, 1));
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.6, $p35);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i64($i36);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p34, $mul.ref($i37, 8));
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p38, $p23);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p24, $mul.ref(0, 176)), $mul.ref(116, 1));
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32($i1, 1);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} vslice_dummy_var_18 := snprintf.ref.i64.ref.i32($p40, 20, .str.236, $i41);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p24, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} usb_ep_set_maxpacket_limit($p43, 512);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p24, $mul.ref(0, 176)), $mul.ref(96, 1));
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p44, $0.ref);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p47, $p23);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 12);
    goto $bb6;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $p21);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p3, $p22, .str.235, .str.234, $i1, $i2);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 457268);

procedure snprintf.ref.i64.ref.i32.ref($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: ref) returns ($r: i32);



procedure snprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32);



const usb_ep_set_maxpacket_limit: ref;

axiom usb_ep_set_maxpacket_limit == $sub.ref(0, 458300);

procedure usb_ep_set_maxpacket_limit($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation usb_ep_set_maxpacket_limit($p0: ref, $i1: i32)
{
  var $i2: i16;
  var $p3: ref;
  var $i4: i16;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} {:cexpr "usb_ep_set_maxpacket_limit:arg:maxpacket_limit"} boogie_si_record_i32($i1);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i32.i16($i1);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(42, 1));
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p3, $i2);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i16($i1);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p5, $i4);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 459332);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} __list_add($p0, $p3, $p1);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 460364);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    return;
}



const devm_request_threaded_irq: ref;

axiom devm_request_threaded_irq == $sub.ref(0, 461396);

procedure devm_request_threaded_irq($p0: ref, $i1: i32, $p2: ref, $p3: ref, $i4: i64, $p5: ref, $p6: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devm_request_threaded_irq($p0: ref, $i1: i32, $p2: ref, $p3: ref, $i4: i64, $p5: ref, $p6: ref) returns ($r: i32)
{
  var $i7: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 479} {:cexpr "devm_request_threaded_irq:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 480} {:cexpr "devm_request_threaded_irq:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 1} true;
    call {:si_unique_call 481} $i7 := __VERIFIER_nondet_int();
    call {:si_unique_call 482} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i7);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const srr_dqp_index_advc: ref;

axiom srr_dqp_index_advc == $sub.ref(0, 462428);

procedure srr_dqp_index_advc($p0: ref, $i1: i32);



const bdc_reinit: ref;

axiom bdc_reinit == $sub.ref(0, 463460);

procedure bdc_reinit($p0: ref) returns ($r: i32);



const bdc_stop: ref;

axiom bdc_stop == $sub.ref(0, 464492);

procedure bdc_stop($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $CurrAddr, $M.6, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.9, $M.8, assertsPassed;



implementation bdc_stop($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, .str);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, .str.1);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p4, .str.2);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p5, .str.3);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.4, $p7);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 61);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p7, $i10);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p11, 0);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.5, $p12);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 485} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.6, $p20);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $i22 := bdc_readl($p21, 64);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    call {:si_unique_call 488} {:cexpr "temp"} boogie_si_record_i32($i22);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 7340032);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i24 := $lshr.i32($i23, 20);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 1);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i22, 536870911);
    call {:si_unique_call 489} {:cexpr "temp"} boogie_si_record_i32($i27);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i27, $sub.i32(0, 1879048192));
    call {:si_unique_call 490} {:cexpr "temp"} boogie_si_record_i32($i28);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.6, $p29);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} bdc_writel($p30, 64, $i28);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $i31 := poll_oip($p0, 500);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    call {:si_unique_call 493} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i26 := $i31;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.6, $p33);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} dev_err.ref.ref($p34, .str.4);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb6;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p19, .str.3, .str.1);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bdc_reset: ref;

axiom bdc_reset == $sub.ref(0, 465524);

procedure bdc_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $CurrAddr, $M.6, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.9, $M.8, assertsPassed;



implementation bdc_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, .str);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, .str.5);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p4, .str.2);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p5, .str.6);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.4, $p7);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 85);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p7, $i10);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p11, 0);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.5, $p12);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 497} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $i20 := bdc_stop($p0);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    call {:si_unique_call 500} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.6, $p23);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $i25 := bdc_readl($p24, 64);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    call {:si_unique_call 502} {:cexpr "temp"} boogie_si_record_i32($i25);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 536870911);
    call {:si_unique_call 503} {:cexpr "temp"} boogie_si_record_i32($i26);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i26, 805306368);
    call {:si_unique_call 504} {:cexpr "temp"} boogie_si_record_i32($i27);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.6, $p28);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} bdc_writel($p29, 64, $i27);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} $i30 := poll_oip($p0, 500);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    call {:si_unique_call 507} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i22 := $i30;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb8:
    assume $i31 == 1;
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.6, $p32);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} dev_err.ref.ref($p33, .str.7);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i22 := $i20;
    goto $bb6;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p19, .str.6, .str.5);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bdc_mem_init: ref;

axiom bdc_mem_init == $sub.ref(0, 466556);

procedure bdc_mem_init($p0: ref, $i1: i1);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.9, $M.8, assertsPassed;



implementation bdc_mem_init($p0: ref, $i1: i1)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i24;
  var $i49: i24;
  var $i50: i24;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var $p62: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i32;
  var $i67: i32;
  var $i68: i8;
  var $i69: i32;
  var $i70: i32;
  var $i71: i8;
  var $i72: i32;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i24;
  var $i81: i24;
  var $i82: i24;
  var $p83: ref;
  var $p84: ref;
  var $i85: i8;
  var $i86: i64;
  var $i87: i64;
  var $i88: i64;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $p94: ref;
  var $i95: i64;
  var $i96: i64;
  var $i97: i32;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $i105: i32;
  var $i106: i32;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i32;
  var $i112: i32;
  var $i113: i32;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i24;
  var $i126: i24;
  var $i127: i24;
  var $p128: ref;
  var $p129: ref;
  var $i130: i8;
  var $i131: i64;
  var $i132: i64;
  var $i133: i64;
  var $i134: i1;
  var $p135: ref;
  var $p136: ref;
  var $i137: i32;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $i142: i32;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $i149: i24;
  var $i150: i24;
  var $i151: i24;
  var $p152: ref;
  var $p153: ref;
  var $i154: i8;
  var $i155: i64;
  var $i156: i64;
  var $i157: i64;
  var $i158: i1;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $i163: i32;
  var $i164: i32;
  var $p165: ref;
  var $p166: ref;
  var $i167: i1;
  var $p168: ref;
  var $p169: ref;
  var $i170: i32;
  var $i171: i32;
  var $p172: ref;
  var $p173: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $i178: i32;
  var $i179: i64;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p185: ref;
  var $p187: ref;
  var $p189: ref;
  var $p191: ref;
  var $p193: ref;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i1);
    call {:si_unique_call 514} {:cexpr "bdc_mem_init:arg:reinit"} boogie_si_record_i1($i1);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, .str);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, .str.95);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p10, .str.2);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p11, .str.6);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.4, $p13);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 228);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p13, $i16);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p17, 0);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.5, $p18);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 516} {:cexpr "tmp"} boogie_si_record_i64($i22);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(2048, 1));
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p26, 0);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(2072, 1));
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p27, 0);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1728, 1)), $mul.ref(8, 1));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p29, 0);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1728, 1)), $mul.ref(10, 1));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p31, 0);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(2053, 1));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p32, 0);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(2052, 1));
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p33, 0);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.6, $p34);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1696, 1)), $mul.ref(0, 1));
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.6, $p37);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i64.i32($i38);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} bdc_writel($p35, 56, $i39);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.6, $p40);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} bdc_writel($p41, 520, 24);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, .str);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p43, .str.95);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p44, .str.2);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p45, .str.96);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i48 := $load.i24($M.4, $p47);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i49 := $and.i24($i48, $sub.i24(0, 262144));
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i50 := $or.i24($i49, 241);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p47, $i50);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p51, 0);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.5, $p52);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i64($i53);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i55 := $and.i64($i54, 1);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $i56 := ldv__builtin_expect($i55, 0);
    call {:si_unique_call 521} {:cexpr "tmp___0"} boogie_si_record_i64($i56);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1728, 1)), $mul.ref(16, 1));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.6, $p64);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i64.i32($i65);
    call {:si_unique_call 523} {:cexpr "temp"} boogie_si_record_i32($i66);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} $i67 := fls(64);
    call {:si_unique_call 525} {:cexpr "tmp___1"} boogie_si_record_i32($i67);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i8($i67);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i69, 254);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i8($i70);
    call {:si_unique_call 526} {:cexpr "size"} boogie_si_record_i8($i71);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i73 := $or.i32($i72, $i66);
    call {:si_unique_call 527} {:cexpr "temp"} boogie_si_record_i32($i73);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p74, .str);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p75, .str.95);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p76, .str.2);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p77, .str.97);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i80 := $load.i24($M.4, $p79);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i81 := $and.i24($i80, $sub.i24(0, 262144));
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i82 := $or.i24($i81, 246);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p79, $i82);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p83, 0);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.5, $p84);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i64($i85);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i87 := $and.i64($i86, 1);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $i88 := ldv__builtin_expect($i87, 0);
    call {:si_unique_call 529} {:cexpr "tmp___2"} boogie_si_record_i64($i88);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i88, 0);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1728, 1)), $mul.ref(16, 1));
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i95 := $load.i64($M.6, $p94);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i96 := $lshr.i64($i95, 32);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i64.i32($i96);
    call {:si_unique_call 531} {:cexpr "upp32"} boogie_si_record_i32($i97);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.6, $p98);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} bdc_writel($p99, 512, $i73);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.6, $p100);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} bdc_writel($p101, 516, $i97);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.6, $p102);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $i104 := bdc_readl($p103, 520);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    call {:si_unique_call 535} {:cexpr "temp"} boogie_si_record_i32($i104);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i105 := $or.i32($i104, 2);
    call {:si_unique_call 536} {:cexpr "temp"} boogie_si_record_i32($i105);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i106 := $and.i32($i105, $sub.i32(0, 25));
    call {:si_unique_call 537} {:cexpr "temp"} boogie_si_record_i32($i106);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.6, $p107);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} bdc_writel($p108, 520, $i106);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.6, $p109);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} $i111 := bdc_readl($p110, 524);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    call {:si_unique_call 540} {:cexpr "temp"} boogie_si_record_i32($i111);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i112 := $and.i32($i111, $sub.i32(0, 65536));
    call {:si_unique_call 541} {:cexpr "temp"} boogie_si_record_i32($i112);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $i113 := $or.i32($i112, 500);
    call {:si_unique_call 542} {:cexpr "temp"} boogie_si_record_i32($i113);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.6, $p114);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} bdc_writel($p115, 524, $i113);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.6, $p116);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} $i118 := bdc_readl($p117, 44);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    call {:si_unique_call 545} {:cexpr "usb2_pm"} boogie_si_record_i32($i118);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p119, .str);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p120, .str.95);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p121, .str.2);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p122, .str.98);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i125 := $load.i24($M.4, $p124);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i126 := $and.i24($i125, $sub.i24(0, 262144));
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i127 := $or.i24($i126, 269);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p124, $i127);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p128, 0);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i130 := $load.i8($M.5, $p129);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i131 := $zext.i8.i64($i130);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i132 := $and.i64($i131, 1);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $i133 := ldv__builtin_expect($i132, 0);
    call {:si_unique_call 547} {:cexpr "tmp___3"} boogie_si_record_i64($i133);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i134 := $ne.i64($i133, 0);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i137 := $or.i32($i118, 65536);
    call {:si_unique_call 549} {:cexpr "usb2_pm"} boogie_si_record_i32($i137);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.6, $p138);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} bdc_writel($p139, 44, $i137);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.6, $p140);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} $i142 := bdc_readl($p141, 44);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    call {:si_unique_call 552} {:cexpr "usb2_pm"} boogie_si_record_i32($i142);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p143, .str);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p144, .str.95);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p145, .str.2);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p146, .str.99);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p147);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i149 := $load.i24($M.4, $p148);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i150 := $and.i24($i149, $sub.i24(0, 262144));
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i151 := $or.i24($i150, 276);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p148, $i151);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p152, 0);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i154 := $load.i8($M.5, $p153);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i155 := $zext.i8.i64($i154);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i156 := $and.i64($i155, 1);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} $i157 := ldv__builtin_expect($i156, 0);
    call {:si_unique_call 554} {:cexpr "tmp___4"} boogie_si_record_i64($i157);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $i158 := $ne.i64($i157, 0);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.6, $p161);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} $i163 := bdc_readl($p162, 64);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    call {:si_unique_call 557} {:cexpr "temp"} boogie_si_record_i32($i163);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i164 := $or.i32($i163, 128);
    call {:si_unique_call 558} {:cexpr "temp"} boogie_si_record_i32($i164);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $p166 := $load.ref($M.6, $p165);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} bdc_writel($p166, 64, $i164);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $i167 := $trunc.i8.i1($i7);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    assume {:branchcond $i167} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i167 == 1);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(2096, 1)), $mul.ref(0, 8));
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p185, bdc_sr_xsf);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(2096, 1)), $mul.ref(1, 8));
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p187, bdc_sr_uspc);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(2112, 1)), $mul.ref(0, 8));
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p189, bdc_xsf_ep0_setup_recv);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(2112, 1)), $mul.ref(1, 8));
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p191, bdc_xsf_ep0_data_start);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(2112, 1)), $mul.ref(2, 8));
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p193, bdc_xsf_ep0_status_start);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i167 == 1;
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $p169 := $load.ref($M.6, $p168);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $i170 := bdc_readl($p169, 64);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    call {:si_unique_call 561} {:cexpr "temp"} boogie_si_record_i32($i170);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i171 := $or.i32($i170, 2);
    call {:si_unique_call 562} {:cexpr "temp"} boogie_si_record_i32($i171);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $p173 := $load.ref($M.6, $p172);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} bdc_writel($p173, 64, $i171);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1696, 1)), $mul.ref(8, 1));
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $p176 := $load.ref($M.6, $p175);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1720, 1));
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i178 := $load.i32($M.6, $p177);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i179 := $zext.i32.i64($i178);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_7 := $M.6;
    call {:si_unique_call 564} cmdloc_dummy_var_8 := $memset.i8(cmdloc_dummy_var_7, $p176, 0, $i179, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_8;
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1728, 1)), $mul.ref(0, 1));
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $p182 := $load.ref($M.6, $p181);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p183 := $bitcast.ref.ref($p182);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.6;
    call {:si_unique_call 565} cmdloc_dummy_var_10 := $memset.i8(cmdloc_dummy_var_9, $p183, 0, 1024, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_10;
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i158 == 1;
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $p160 := $load.ref($M.6, $p159);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} __dynamic_dev_dbg.ref.ref.ref.i32($p6, $p160, .str.99, $i142);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i134 == 1;
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.6, $p135);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} __dynamic_dev_dbg.ref.ref.ref.i32($p5, $p136, .str.98, $i118);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i89 == 1;
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.6, $p90);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i71);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p4, $p91, .str.97, $i73, 64, $i92);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i57 == 1;
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.6, $p58);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1728, 1)), $mul.ref(0, 1));
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.6, $p61);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} __dynamic_dev_dbg.ref.ref.ref.ref($p3, $p59, .str.96, $p62);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.6, $p24);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p25, .str.6, .str.95);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bdc_run: ref;

axiom bdc_run == $sub.ref(0, 467588);

procedure bdc_run($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $CurrAddr, $M.6, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.9, $M.8, assertsPassed;



implementation bdc_run($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, .str);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, .str.8);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p4, .str.2);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p5, .str.6);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.4, $p7);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 108);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p7, $i10);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p11, 0);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.5, $p12);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 568} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.6, $p20);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $i22 := bdc_readl($p21, 64);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    call {:si_unique_call 571} {:cexpr "temp"} boogie_si_record_i32($i22);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 7340032);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i24 := $lshr.i32($i23, 20);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 2);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i22, 536870911);
    call {:si_unique_call 573} {:cexpr "temp"} boogie_si_record_i32($i29);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i29, 1073741824);
    call {:si_unique_call 574} {:cexpr "temp"} boogie_si_record_i32($i30);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i30, 268435456);
    call {:si_unique_call 575} {:cexpr "temp"} boogie_si_record_i32($i31);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.6, $p32);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} bdc_writel($p33, 64, $i31);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $i34 := poll_oip($p0, 500);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    call {:si_unique_call 578} {:cexpr "ret"} boogie_si_record_i32($i34);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.6, $p38);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} $i40 := bdc_readl($p39, 64);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    call {:si_unique_call 581} {:cexpr "temp"} boogie_si_record_i32($i40);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 7340032);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i42 := $lshr.i32($i41, 20);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 2);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb11:
    assume $i43 == 1;
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.6, $p44);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i40, 7340032);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i47 := $lshr.i32($i46, 20);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} dev_err.ref.ref.i32($p45, .str.11, $i47);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 108);
    goto $bb6;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i35 == 1;
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.6, $p36);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} dev_err.ref.ref.i32($p37, .str.10, $i34);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i28 := $i34;
    goto $bb6;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.6, $p26);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} dev_warn.ref.ref($p27, .str.9);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb6;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p19, .str.6, .str.8);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const poll_oip: ref;

axiom poll_oip == $sub.ref(0, 468620);

procedure poll_oip($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $CurrAddr, $M.6, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.9, $M.8, assertsPassed;



implementation poll_oip($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i24;
  var $i20: i24;
  var $i21: i24;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i34: i32;
  var $i35: i1;
  var $i5: i32;
  var $i36: i32;
  var $i4: i32;
  var $p37: ref;
  var $p38: ref;
  var $i33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 584} {:cexpr "poll_oip:arg:usec"} boogie_si_record_i32($i1);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i1, 0);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i4 := $u1;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.6, $p37);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} dev_err.ref.ref.i32($p38, .str.94, $i4);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 110);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i5 := $i1;
    goto $bb4;

  $bb4:
    call $p6, $p7, $i8, $i9, $i10, $i11, $i12, $i34, $i35, $i5, $i36 := poll_oip_loop_$bb4($p0, $p6, $p7, $i8, $i9, $i10, $i11, $i12, $i34, $i35, $i5, $i36);
    goto $bb4_last;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} $i8 := bdc_readl($p7, 64);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    call {:si_unique_call 586} {:cexpr "status"} boogie_si_record_i32($i8);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 7340032);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i10 := $lshr.i32($i9, 20);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 7);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i12 := $i8;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} __const_udelay(42950);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i5, $sub.i32(0, 10));
    call {:si_unique_call 591} {:cexpr "usec"} boogie_si_record_i32($i34);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $i36 := $i8;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i4 := $i36;
    goto $bb3;

  $bb13:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i34;
    goto $bb13_dummy;

  $bb6:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, .str);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p14, .str.92);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p15, .str.2);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p16, .str.93);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i19 := $load.i24($M.4, $p18);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i20 := $and.i24($i19, $sub.i24(0, 262144));
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i21 := $or.i24($i20, 44);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p18, $i21);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p22, 0);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.5, $p23);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i64($i24);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 1);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 588} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb11;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.6, $p29);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i12, 7340032);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i32 := $lshr.i32($i31, 20);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} __dynamic_dev_dbg.ref.ref.ref.i32($p2, $p30, .str.93, $i32);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2972;
}



const bdc_sr_xsf: ref;

axiom bdc_sr_xsf == $sub.ref(0, 469652);

procedure bdc_sr_xsf($p0: ref, $p1: ref);



const bdc_sr_uspc: ref;

axiom bdc_sr_uspc == $sub.ref(0, 470684);

procedure bdc_sr_uspc($p0: ref, $p1: ref);



const bdc_xsf_ep0_setup_recv: ref;

axiom bdc_xsf_ep0_setup_recv == $sub.ref(0, 471716);

procedure bdc_xsf_ep0_setup_recv($p0: ref, $p1: ref);



const bdc_xsf_ep0_data_start: ref;

axiom bdc_xsf_ep0_data_start == $sub.ref(0, 472748);

procedure bdc_xsf_ep0_data_start($p0: ref, $p1: ref);



const bdc_xsf_ep0_status_start: ref;

axiom bdc_xsf_ep0_status_start == $sub.ref(0, 473780);

procedure bdc_xsf_ep0_status_start($p0: ref, $p1: ref);



const ep_set_halt: ref;

axiom ep_set_halt == $sub.ref(0, 474812);

procedure ep_set_halt($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.8, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.9, assertsPassed;



implementation ep_set_halt($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i24;
  var $i36: i24;
  var $i37: i24;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i24;
  var $i73: i24;
  var $i74: i24;
  var $p75: ref;
  var $p76: ref;
  var $i77: i8;
  var $i78: i64;
  var $i79: i64;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i8;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i32;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i24;
  var $i104: i24;
  var $i105: i24;
  var $p106: ref;
  var $p107: ref;
  var $i108: i8;
  var $i109: i64;
  var $i110: i64;
  var $i111: i64;
  var $i112: i1;
  var $p113: ref;
  var $p114: ref;
  var $i65: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 597} {:cexpr "ep_set_halt:arg:value"} boogie_si_record_i32($i1);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(80, 1));
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, .str);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, .str.164);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p10, .str.46);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p11, .str.165);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.4, $p13);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 876);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p13, $i16);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p17, 0);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.5, $p18);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 599} {:cexpr "tmp"} boogie_si_record_i64($i22);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i1, 0);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p66, .str);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p67, .str.164);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p68, .str.46);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p69, .str.168);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i72 := $load.i24($M.4, $p71);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i73 := $and.i24($i72, $sub.i24(0, 262144));
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i74 := $or.i24($i73, 891);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p71, $i74);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p75, 0);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.5, $p76);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i64($i77);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i79 := $and.i64($i78, 1);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $i80 := ldv__builtin_expect($i79, 0);
    call {:si_unique_call 604} {:cexpr "tmp___1"} boogie_si_record_i64($i80);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i80, 0);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(90, 1));
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.6, $p84);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $i87 := bdc_ep_clear_stall($p7, $i86);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    call {:si_unique_call 611} {:cexpr "ret"} boogie_si_record_i32($i87);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i88 == 1);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.6, $p93);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i95 := $and.i32($i94, $sub.i32(0, 3));
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p96, $i95);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p97, .str);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p98, .str.164);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p99, .str.46);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p100, .str.170);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i103 := $load.i24($M.4, $p102);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i104 := $and.i24($i103, $sub.i24(0, 262144));
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i105 := $or.i24($i104, 898);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p102, $i105);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p106, 0);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.5, $p107);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i64($i108);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i110 := $and.i64($i109, 1);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $i111 := ldv__builtin_expect($i110, 0);
    call {:si_unique_call 614} {:cexpr "tmp___2"} boogie_si_record_i64($i111);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i112 := $ne.i64($i111, 0);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i65 := $i87;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $r := $i65;
    return;

  $bb22:
    assume $i112 == 1;
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p7, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.6, $p113);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} __dynamic_dev_dbg.ref.ref.ref($p5, $p114, .str.170);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i88 == 1;
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p7, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.6, $p89);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(116, 1));
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} dev_err.ref.ref.ref($p90, .str.169, $p92);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i81 == 1;
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p7, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.6, $p82);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} __dynamic_dev_dbg.ref.ref.ref($p4, $p83, .str.168);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, .str);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p30, .str.164);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p31, .str.46);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p32, .str.166);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i35 := $load.i24($M.4, $p34);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i36 := $and.i24($i35, $sub.i24(0, 262144));
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i37 := $or.i24($i36, 879);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p34, $i37);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p38, 0);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.5, $p39);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i64($i40);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i42 := $and.i64($i41, 1);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $i43 := ldv__builtin_expect($i42, 0);
    call {:si_unique_call 602} {:cexpr "tmp___0"} boogie_si_record_i64($i43);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(90, 1));
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.6, $p47);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 1);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(90, 1));
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.6, $p52);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $i55 := bdc_ep_set_stall($p7, $i54);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    call {:si_unique_call 607} {:cexpr "ret"} boogie_si_record_i32($i55);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i56 == 1);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.6, $p61);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i63 := $or.i32($i62, 2);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p64, $i63);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i65 := $i55;
    goto $bb15;

  $bb12:
    assume $i56 == 1;
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p7, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.6, $p57);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(116, 1));
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} dev_err.ref.ref.ref($p58, .str.167, $p60);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i50 == 1;
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p7, $mul.ref(0, 2368)), $mul.ref(2048, 1));
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p51, 0);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i44 == 1;
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p7, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.6, $p45);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} __dynamic_dev_dbg.ref.ref.ref($p3, $p46, .str.166);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p7, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.6, $p24);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(116, 1));
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32($p2, $p25, .str.165, .str.164, $p27, $i1);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const handle_control_request: ref;

axiom handle_control_request == $sub.ref(0, 475844);

procedure handle_control_request($p0: ref) returns ($r: i32);



const ep0_queue_status_stage: ref;

axiom ep0_queue_status_stage == $sub.ref(0, 476876);

procedure ep0_queue_status_stage($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.20, $CurrAddr;



implementation ep0_queue_status_stage($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var vslice_dummy_var_20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1904, 1));
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1680, 1));
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(1, 8));
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1904, 1)), $mul.ref(104, 1));
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p6, $p5);
    $p8 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p8, 0);
    $p10 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p10, $sub.i32(0, 115));
    $p12 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p12, 0);
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1904, 1)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p14, $0.ref);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} vslice_dummy_var_20 := bdc_queue_xfr($p0, $p1);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const ep0_stall: ref;

axiom ep0_stall == $sub.ref(0, 477908);

procedure ep0_stall($p0: ref);



const bdc_queue_xfr: ref;

axiom bdc_queue_xfr == $sub.ref(0, 478940);

procedure bdc_queue_xfr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.20, $CurrAddr;



implementation bdc_queue_xfr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i24;
  var $i31: i24;
  var $i32: i24;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p43: ref;
  var $i44: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i51: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(104, 1));
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, .str);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p7, .str.207);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p8, .str.46);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p9, .str.208);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.4, $p11);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 520);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p11, $i14);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p15, 0);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.5, $p16);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 620} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, .str);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p25, .str.207);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p26, .str.46);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p27, .str.209);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i30 := $load.i24($M.4, $p29);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i31 := $and.i24($i30, $sub.i24(0, 262144));
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i32 := $or.i24($i31, 522);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p29, $i32);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p33, 0);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.5, $p34);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i64($i35);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i37 := $and.i64($i36, 1);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} $i38 := ldv__builtin_expect($i37, 0);
    call {:si_unique_call 623} {:cexpr "tmp___0"} boogie_si_record_i64($i38);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} $i48 := bd_needed_req($p1);
    call {:si_unique_call 626} {:cexpr "num_bds"} boogie_si_record_i32($i48);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} $i49 := bd_available_ep($p5);
    call {:si_unique_call 628} {:cexpr "bd_available"} boogie_si_record_i32($i49);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i50 := $sgt.i32($i48, $i49);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $i52 := setup_bd_list_xfr($p0, $p1, $i48);
    call {:si_unique_call 630} {:cexpr "ret"} boogie_si_record_i32($i52);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p5, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} list_add_tail($p54, $p55);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} bdc_dbg_bd_list($p0, $p5);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p5, $mul.ref(0, 176)), $mul.ref(90, 1));
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.6, $p56);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} bdc_notify_xfr($p0, $i58);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i51 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $r := $i51;
    return;

  $bb11:
    assume $i53 == 1;
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i51 := $i52;
    goto $bb9;

  $bb7:
    assume $i50 == 1;
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32(0, 12);
    goto $bb9;

  $bb4:
    assume $i39 == 1;
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.6, $p40);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.6, $p43);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(20, 1));
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.6, $p46);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} __dynamic_dev_dbg.ref.ref.ref.i32.i32($p3, $p41, .str.209, $i44, $i47);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.6, $p22);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} __dynamic_dev_dbg.ref.ref.ref.ref.ref($p2, $p23, .str.208, .str.207, $p1);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bd_needed_req: ref;

axiom bd_needed_req == $sub.ref(0, 479972);

procedure bd_needed_req($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation bd_needed_req($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.6, $p2);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.6, $p7);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 65535);
    call {:si_unique_call 634} {:cexpr "remaining"} boogie_si_record_i32($i9);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.6, $p14);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i16 := $udiv.i32($i15, 65536);
    call {:si_unique_call 636} {:cexpr "remaining"} boogie_si_record_i32($i16);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i12, $i16);
    call {:si_unique_call 637} {:cexpr "bd_needed"} boogie_si_record_i32($i17);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i5 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i11 := $add.i32(0, 1);
    call {:si_unique_call 635} {:cexpr "bd_needed"} boogie_si_record_i32($i11);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;
}



const bd_available_ep: ref;

axiom bd_available_ep == $sub.ref(0, 481004);

procedure bd_available_ep($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation bd_available_ep($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i32;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i57: i32;
  var $i34: i32;
  var $i62: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.6, $p2);
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(20, 1));
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.6, $p4);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i3, $i5);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(20, 1));
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.6, $p15);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i14, $i16);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(20, 1));
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.6, $p35);
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.6, $p37);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32($i36, $i38);
    call {:si_unique_call 643} {:cexpr "available1"} boogie_si_record_i32($i39);
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(20, 1));
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.6, $p40);
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.6, $p42);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32($i41, $i43);
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(24, 1));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.6, $p45);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i47 := $sle.i32($i44, $i46);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i47 == 1);
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(24, 1));
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.6, $p58);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i60 := $sdiv.i32($i39, $i59);
    call {:si_unique_call 649} {:cexpr "chain_bd1"} boogie_si_record_i32($i60);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32($i39, $i60);
    call {:si_unique_call 650} {:cexpr "available_bd"} boogie_si_record_i32($i61);
    assume {:verifier.code 0} true;
    $i57 := $i61;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i34 := $i57;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32($i34, 1);
    call {:si_unique_call 644} {:cexpr "available_bd"} boogie_si_record_i32($i62);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i12 := $i62;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb8:
    assume $i47 == 1;
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(20, 1));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.6, $p48);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $i50 := bdi_to_tbi($p0, $i49);
    call {:si_unique_call 646} {:cexpr "tmp"} boogie_si_record_i32($i50);
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.6, $p51);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} $i53 := bdi_to_tbi($p0, $i52);
    call {:si_unique_call 648} {:cexpr "tmp___0"} boogie_si_record_i32($i53);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i50, $i53);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i56 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i57 := $i56;
    goto $bb13;

  $bb10:
    assume $i54 == 1;
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i39, $sub.i32(0, 1));
    call {:si_unique_call 651} {:cexpr "available_bd"} boogie_si_record_i32($i55);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i56 := $i55;
    goto $bb12;

  $bb5:
    assume $i17 == 1;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(12, 1));
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.6, $p18);
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.6, $p20);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32($i19, $i21);
    call {:si_unique_call 638} {:cexpr "available1"} boogie_si_record_i32($i22);
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(20, 1));
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.6, $p23);
    call {:si_unique_call 639} {:cexpr "available2"} boogie_si_record_i32($i24);
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(24, 1));
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.6, $p25);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i27 := $sdiv.i32($i22, $i26);
    call {:si_unique_call 640} {:cexpr "chain_bd1"} boogie_si_record_i32($i27);
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(24, 1));
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.6, $p28);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i30 := $sdiv.i32($i24, $i29);
    call {:si_unique_call 641} {:cexpr "chain_bd2"} boogie_si_record_i32($i30);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i22, $i24);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i31, $i27);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32($i32, $i30);
    call {:si_unique_call 642} {:cexpr "available_bd"} boogie_si_record_i32($i33);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(12, 1));
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.6, $p7);
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(8, 1));
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.6, $p9);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i8, $i10);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;
}



const setup_bd_list_xfr: ref;

axiom setup_bd_list_xfr == $sub.ref(0, 482036);

procedure setup_bd_list_xfr($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.20, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $CurrAddr;



implementation setup_bd_list_xfr($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i32;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $i64: i32;
  var $i65: i32;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $i77: i32;
  var $i78: i64;
  var $i79: i64;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $p85: ref;
  var $i86: i64;
  var $i87: i32;
  var $p89: ref;
  var $p91: ref;
  var $i92: i32;
  var $p94: ref;
  var $i95: i64;
  var $p97: ref;
  var $i98: i32;
  var $p99: ref;
  var $p101: ref;
  var $i102: i32;
  var $i103: i1;
  var $i34: i32;
  var $i35: i32;
  var $i36: i64;
  var $p104: ref;
  var $i105: i32;
  var $p106: ref;
  var $p108: ref;
  var $i109: i32;
  var $i110: i32;
  var $p112: ref;
  var $p113: ref;
  var $p115: ref;
  var $i116: i32;
  var $p117: ref;
  var $i51: i32;
  var vslice_dummy_var_21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 653} {:cexpr "setup_bd_list_xfr:arg:num_bds"} boogie_si_record_i32($i2);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.6, $p5);
    call {:si_unique_call 654} {:cexpr "buf_add"} boogie_si_record_i64($i6);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(104, 1));
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p11, $p1);
    $p12 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.6, $p12);
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(112, 1)), $mul.ref(8, 1));
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p14, $i13);
    $p15 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.6, $p15);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} vslice_dummy_var_21 := bdi_to_bd($p8, $i16);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.6, $p19);
    call {:si_unique_call 656} {:cexpr "req_len"} boogie_si_record_i32($i20);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p8, $mul.ref(0, 176)), $mul.ref(104, 1));
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $p21);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} $i23 := usb_endpoint_maxp($p22);
    call {:si_unique_call 658} {:cexpr "tmp"} boogie_si_record_i32($i23);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 2047);
    call {:si_unique_call 659} {:cexpr "maxp"} boogie_si_record_i32($i24);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.6, $p26);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i27, $i24);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32($i28, 1);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i30 := $udiv.i32($i29, $i24);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $i31 := $mul.i32($i30, $i24);
    call {:si_unique_call 660} {:cexpr "tfs"} boogie_si_record_i32($i31);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i32 := $udiv.i32($i31, $i24);
    call {:si_unique_call 661} {:cexpr "tfs"} boogie_si_record_i32($i32);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32(0, $i2);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    $p104 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(112, 1)), $mul.ref(8, 1));
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.6, $p104);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} $p106 := bdi_to_bd($p8, $i105);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p106, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(3, 4));
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.6, $p108);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i110 := $and.i32($i109, 2147483647);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p106, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(3, 4));
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p112, $i110);
    $p113 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(112, 1)), $mul.ref(16, 1));
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p113, $i2);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.6, $p115);
    $p117 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(112, 1)), $mul.ref(12, 1));
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p117, $i116);
    call {:si_unique_call 678} devirtbounce(0);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $i51 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $r := $i51;
    return;

  $bb1:
    assume $i33 == 1;
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $i34, $i35, $i36 := $i20, 0, $i6;
    goto $bb4;

  $bb4:
    call $i37, $i38, $i39, $i40, $i41, $i42, $i43, $p44, $i45, $i46, $i47, $i48, $i49, $i50, $i52, $p53, $p54, $p55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i66, $i67, $i68, $i69, $i70, $i64, $i65, $p72, $i73, $p74, $i75, $i76, $i77, $i78, $i79, $i80, $i83, $p85, $i86, $i87, $p89, $p91, $i92, $p94, $i95, $p97, $i98, $p99, $p101, $i102, $i103, $i34, $i35, $i36 := setup_bd_list_xfr_loop_$bb4($p0, $p1, $i2, $p3, $p8, $i32, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $p44, $i45, $i46, $i47, $i48, $i49, $i50, $i52, $p53, $p54, $p55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i66, $i67, $i68, $i69, $i70, $i64, $i65, $p72, $i73, $p74, $i75, $i76, $i77, $i78, $i79, $i80, $i83, $p85, $i86, $i87, $p89, $p91, $i92, $p94, $i95, $p97, $i98, $p99, $p101, $i102, $i103, $i34, $i35, $i36);
    goto $bb4_last;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p3, 0);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.20, $p3);
    call {:si_unique_call 662} {:cexpr "dword2"} boogie_si_record_i32($i37);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i35, 0);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i52 := $i37;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(104, 1));
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.6, $p53);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 176)), $mul.ref(89, 1));
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.6, $p55);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 0);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i61 := $ugt.i32($i34, 65536);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i61 == 1);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i66 := $or.i32($i52, $i34);
    call {:si_unique_call 668} {:cexpr "dword2"} boogie_si_record_i32($i66);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.20, $p3);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i68 := $or.i32($i67, 1073741824);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p3, $i68);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.20, $p3);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $i70 := $or.i32($i69, 134217728);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p3, $i70);
    assume {:verifier.code 0} true;
    $i64, $i65 := $i66, $i34;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.6, $p72);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} $p74 := bdi_to_bd($p8, $i73);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p74);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i76 := $eq.i64($i75, 0);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i77 := $zext.i1.i32($i76);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i78 := $sext.i32.i64($i77);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $i79 := ldv__builtin_expect($i78, 0);
    call {:si_unique_call 671} {:cexpr "tmp___0"} boogie_si_record_i64($i79);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i64.i32($i36);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p74, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 4));
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p85, $i83);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i86 := $lshr.i64($i36, 32);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i64.i32($i86);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p74, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(1, 4));
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p89, $i87);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p74, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(2, 4));
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p91, $i64);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.20, $p3);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p74, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(3, 4));
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p94, $i92);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} ep_bdlist_eqp_adv($p8);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i95 := $add.i64($i36, 65536);
    call {:si_unique_call 674} {:cexpr "buf_add"} boogie_si_record_i64($i95);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.6, $p97);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $p99 := bdi_to_bd($p8, $i98);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p99, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(3, 4));
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p101, $sub.i32(0, 2147483648));
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i102 := $add.i32($i35, 1);
    call {:si_unique_call 676} {:cexpr "bdnum"} boogie_si_record_i32($i102);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i103 := $slt.i32($i102, $i2);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i103 == 1);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb25:
    assume $i103 == 1;
    assume {:verifier.code 0} true;
    $i34, $i35, $i36 := $i65, $i102, $i95;
    goto $bb25_dummy;

  $bb22:
    assume $i80 == 1;
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.6, $p81);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} dev_err.ref.ref($p82, .str.210);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32(0, 22);
    goto $bb12;

  $bb19:
    assume $i61 == 1;
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i62 := $or.i32($i52, 65536);
    call {:si_unique_call 666} {:cexpr "dword2"} boogie_si_record_i32($i62);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i63 := $sub.i32($i34, 65536);
    call {:si_unique_call 667} {:cexpr "req_len"} boogie_si_record_i32($i63);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i64, $i65 := $i62, $i63;
    goto $bb21;

  $bb16:
    assume $i58 == 1;
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.20, $p3);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i60 := $or.i32($i59, 536870912);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p3, $i60);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb6:
    assume $i38 == 1;
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $i39 := $shl.i32($i32, 4);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.20, $p3);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i41 := $or.i32($i39, $i40);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i42 := $or.i32($i41, $sub.i32(0, 2080374784));
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p3, $i42);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i43 := $or.i32($i37, 33554432);
    call {:si_unique_call 663} {:cexpr "dword2"} boogie_si_record_i32($i43);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p8, $mul.ref(0, 176)), $mul.ref(90, 1));
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.6, $p44);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 1);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i52 := $i43;
    goto $bb15;

  $bb8:
    assume $i47 == 1;
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} $i48 := setup_first_bd_ep0($p0, $p1, $p3);
    call {:si_unique_call 665} {:cexpr "ret"} boogie_si_record_i32($i48);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i50 := $i48;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb10:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i51 := $i50;
    goto $bb12;

  $bb25_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3404;
}



const bdc_notify_xfr: ref;

axiom bdc_notify_xfr == $sub.ref(0, 483068);

procedure bdc_notify_xfr($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation bdc_notify_xfr($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} {:cexpr "bdc_notify_xfr:arg:epnum"} boogie_si_record_i32($i1);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1680, 1));
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 8));
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.6, $p7);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 4);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 681} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.6, $p19);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} bdc_writel($p20, 76, $i1);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.6, $p15);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, $sub.i32(0, 5));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p18, $i17);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bdi_to_bd: ref;

axiom bdi_to_bd == $sub.ref(0, 484100);

procedure bdi_to_bd($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation bdi_to_bd($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} {:cexpr "bdi_to_bd:arg:bdi"} boogie_si_record_i32($i1);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $i2 := bdi_to_tbi($p0, $i1);
    call {:si_unique_call 685} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(24, 1));
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.6, $p4);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i6 := $mul.i32($i5, $i2);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i1, $i6);
    call {:si_unique_call 686} {:cexpr "local_bdi"} boogie_si_record_i32($i7);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(0, 1));
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i2);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p10, $mul.ref($i11, 8));
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.6, $p14);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i7);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p15, $mul.ref($i16, 16));
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $r := $p17;
    return;
}



const setup_first_bd_ep0: ref;

axiom setup_first_bd_ep0 == $sub.ref(0, 485132);

procedure setup_first_bd_ep0($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.20, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $CurrAddr;



implementation setup_first_bd_ep0($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i24;
  var $i44: i24;
  var $i45: i24;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i16;
  var $i61: i32;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $p66: ref;
  var $i67: i16;
  var $i68: i32;
  var $i69: i1;
  var $p71: ref;
  var $i72: i8;
  var $i73: i32;
  var $i74: i1;
  var $i75: i32;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i64;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(104, 1));
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 176)), $mul.ref(89, 1));
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p6, 0);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    call {:si_unique_call 688} {:cexpr "req_len"} boogie_si_record_i32($i9);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(2048, 1));
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.6, $p10);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i11, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.6, $p77);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(2048, 1));
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.6, $p79);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i81 := $zext.i32.i64($i80);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref(ep0_state_string, $mul.ref(0, 48)), $mul.ref($i81, 8));
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.19, $p82);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} dev_err.ref.ref.ref($p78, .str.213, $p83);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i84 := $sub.i32(0, 22);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $r := $i84;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.20, $p2);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i64 := $or.i32($i63, 2);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p2, $i64);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1752, 1)), $mul.ref(6, 1));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i67 := $load.i16($M.6, $p66);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $i68 := $zext.i16.i32($i67);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 0);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i69 == 1);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1752, 1)), $mul.ref(0, 1));
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.6, $p71);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $i73 := $sext.i8.i32($i72);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $i74 := $sge.i32($i73, 0);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i84 := 0;
    goto $bb29;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i74 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.20, $p2);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i76 := $or.i32($i75, 33554432);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p2, $i76);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i69 == 1;
    goto $bb23;

  $bb2:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i11, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb6;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.20, $p2);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 1);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p2, $i16);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1752, 1)), $mul.ref(0, 1));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.6, $p18);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i20 := $sext.i8.i32($i19);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 0);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1752, 1)), $mul.ref(2, 1));
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.6, $p25);
    call {:si_unique_call 689} {:cexpr "wValue"} boogie_si_record_i16($i26);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i28 := $ugt.i32($i27, $i9);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb12:
    assume $i28 == 1;
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.6, $p30);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.6, $p32);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $i35 := $urem.i32($i9, $i34);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb14;

  $bb15:
    assume $i36 == 1;
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, .str);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p38, .str.211);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p39, .str.46);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p40, .str.212);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i43 := $load.i24($M.4, $p42);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i44 := $and.i24($i43, $sub.i24(0, 262144));
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i45 := $or.i24($i44, 407);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p42, $i45);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p46, 0);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.5, $p47);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i64($i48);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i50 := $and.i64($i49, 1);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} $i51 := ldv__builtin_expect($i50, 0);
    call {:si_unique_call 691} {:cexpr "tmp"} boogie_si_record_i64($i51);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(2053, 1));
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p62, 1);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume $i52 == 1;
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.6, $p53);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i26);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.6, $p57);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.6, $p59);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p3, $p54, .str.212, $i55, $i9, $i61);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i21 == 1;
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.20, $p2);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i22, 33554432);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p2, $i23);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const ep_bdlist_eqp_adv: ref;

axiom ep_bdlist_eqp_adv == $sub.ref(0, 486164);

procedure ep_bdlist_eqp_adv($p0: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation ep_bdlist_eqp_adv($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p21: ref;
  var $p23: ref;
  var $i24: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.6, $p2);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 1);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p6, $i4);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 1);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(24, 1));
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.6, $p12);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i14 := $srem.i32($i10, $i13);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.6, $p23);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(12, 1));
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.6, $p26);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i27, 1);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i24, $i28);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i29 == 1;
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p31, 0);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.6, $p17);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, 1);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p21, $i19);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bdi_to_tbi: ref;

axiom bdi_to_tbi == $sub.ref(0, 487196);

procedure bdi_to_tbi($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation bdi_to_tbi($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} {:cexpr "bdi_to_tbi:arg:bdi"} boogie_si_record_i32($i1);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(24, 1));
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.6, $p3);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i5 := $sdiv.i32($i1, $i4);
    call {:si_unique_call 695} {:cexpr "tbi"} boogie_si_record_i32($i5);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ep0_set_address: ref;

axiom ep0_set_address == $sub.ref(0, 488228);

procedure ep0_set_address($p0: ref, $p1: ref) returns ($r: i32);



const ep0_handle_feature: ref;

axiom ep0_handle_feature == $sub.ref(0, 489260);

procedure ep0_handle_feature($p0: ref, $p1: ref, $i2: i1) returns ($r: i32);



const ep0_handle_status: ref;

axiom ep0_handle_status == $sub.ref(0, 490292);

procedure ep0_handle_status($p0: ref, $p1: ref) returns ($r: i32);



const ep0_set_sel: ref;

axiom ep0_set_sel == $sub.ref(0, 491324);

procedure ep0_set_sel($p0: ref, $p1: ref) returns ($r: i32);



const ep0_set_sel_cmpl: ref;

axiom ep0_set_sel_cmpl == $sub.ref(0, 492356);

procedure ep0_set_sel_cmpl($p0: ref, $p1: ref);



const ep0_queue_data_stage: ref;

axiom ep0_queue_data_stage == $sub.ref(0, 493388);

procedure ep0_queue_data_stage($p0: ref) returns ($r: i32);



const ep0_queue: ref;

axiom ep0_queue == $sub.ref(0, 494420);

procedure ep0_queue($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.20, $CurrAddr;



implementation ep0_queue($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p39: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i40: i32;
  var vslice_dummy_var_22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(80, 1));
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, .str);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, .str.205);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, .str.46);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str.73);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.4, $p10);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 667);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p10, $i13);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p14, 0);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.5, $p15);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 698} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p24, 0);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p26, $sub.i32(0, 115));
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(90, 1));
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.6, $p27);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p30, $i29);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 2368)), $mul.ref(2052, 1));
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.6, $p31);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1($i32);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i33 == 1);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.6, $p42);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 2368)), $mul.ref(0, 1));
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(89, 1));
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.6, $p47);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} $i50 := usb_gadget_map_request($p45, $p46, $i49);
    call {:si_unique_call 702} {:cexpr "ret"} boogie_si_record_i32($i50);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} $i56 := bdc_queue_xfr($p4, $p1);
    call {:si_unique_call 705} {:cexpr "tmp___0"} boogie_si_record_i32($i56);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i40 := $i56;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $r := $i40;
    return;

  $bb14:
    assume $i51 == 1;
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.6, $p52);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(116, 1));
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} dev_err.ref.ref.ref($p53, .str.206, $p55);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i40 := $i50;
    goto $bb8;

  $bb11:
    assume $i44 == 1;
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb8;

  $bb4:
    assume $i33 == 1;
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 2368)), $mul.ref(2052, 1));
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p34, 0);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 2368)), $mul.ref(2048, 1));
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.6, $p35);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 3);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i37 == 1;
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} vslice_dummy_var_22 := ep0_queue_status_stage($p4);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 2368)), $mul.ref(2048, 1));
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p39, 4);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb8;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $p21);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p22, .str.73, .str.205);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_gadget_map_request: ref;

axiom usb_gadget_map_request == $sub.ref(0, 495452);

procedure usb_gadget_map_request($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_gadget_map_request($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 706} {:cexpr "usb_gadget_map_request:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 1} true;
    call {:si_unique_call 707} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 708} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ep0_handle_feature_dev: ref;

axiom ep0_handle_feature_dev == $sub.ref(0, 496484);

procedure ep0_handle_feature_dev($p0: ref, $i1: i16, $i2: i16, $i3: i1) returns ($r: i32);



const bdc_address_device: ref;

axiom bdc_address_device == $sub.ref(0, 497516);

procedure bdc_address_device($p0: ref, $i1: i32) returns ($r: i32);



const bdc_ep_set_stall: ref;

axiom bdc_ep_set_stall == $sub.ref(0, 498548);

procedure bdc_ep_set_stall($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.8, $CurrAddr, $M.6, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.9, assertsPassed;



implementation bdc_ep_set_stall($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 710} {:cexpr "bdc_ep_set_stall:arg:epnum"} boogie_si_record_i32($i1);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, .str);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, .str.36);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, .str.19);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p6, .str.37);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.4, $p8);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 298);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p8, $i11);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p12, 0);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.5, $p13);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 712} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i1, 31);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i22 := $shl.i32($i21, 10);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i22, 0);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i23, 524292);
    call {:si_unique_call 714} {:cexpr "cmd_sc"} boogie_si_record_i32($i24);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $i25 := bdc_submit_cmd($p0, $i24, 0, 0, 0);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    call {:si_unique_call 716} {:cexpr "tmp___0"} boogie_si_record_i32($i25);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.6, $p19);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p2, $p20, .str.37, .str.36, $i1);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bdc_ep_clear_stall: ref;

axiom bdc_ep_clear_stall == $sub.ref(0, 499580);

procedure bdc_ep_clear_stall($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.8, $CurrAddr, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.9, assertsPassed;



implementation bdc_ep_clear_stall($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 718} {:cexpr "bdc_ep_clear_stall:arg:epnum"} boogie_si_record_i32($i1);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, .str);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, .str.38);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, .str.19);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p6, .str.39);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.4, $p8);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 312);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p8, $i11);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p12, 0);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.5, $p13);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 720} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1680, 1));
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $p21);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i1);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p22, $mul.ref($i23, 8));
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.6, $p24);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i1, 1);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i1, 1);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i1, 31);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i38 := $shl.i32($i37, 10);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i38, $i36);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i39, 131076);
    call {:si_unique_call 725} {:cexpr "cmd_sc"} boogie_si_record_i32($i40);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $i41 := bdc_submit_cmd($p0, $i40, 0, 0, 0);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    call {:si_unique_call 727} {:cexpr "ret"} boogie_si_record_i32($i41);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} bdc_notify_xfr($p0, $i1);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i33 := $i41;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb17:
    assume $i42 == 1;
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.6, $p43);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} dev_err.ref.ref.i32($p44, .str.40, $i41);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $i33 := $i41;
    goto $bb10;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i35 := $or.i32(0, 65536);
    call {:si_unique_call 724} {:cexpr "cmd_sc"} boogie_si_record_i32($i35);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb16;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p25, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.6, $p27);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 2);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb6:
    assume $i30 == 1;
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} $i31 := bdc_ep_set_stall($p0, $i1);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    call {:si_unique_call 723} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i33 := $i31;
    goto $bb10;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.6, $p19);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p2, $p20, .str.39, .str.38, $i1);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bdc_softconn: ref;

axiom bdc_softconn == $sub.ref(0, 500612);

procedure bdc_softconn($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $CurrAddr, $M.6, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.9, $M.8, assertsPassed;



implementation bdc_softconn($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} $i4 := bdc_readl($p3, 32);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    call {:si_unique_call 732} {:cexpr "uspc"} boogie_si_record_i32($i4);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, $sub.i32(0, 16));
    call {:si_unique_call 733} {:cexpr "uspc"} boogie_si_record_i32($i5);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, 5);
    call {:si_unique_call 734} {:cexpr "uspc"} boogie_si_record_i32($i6);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 16);
    call {:si_unique_call 735} {:cexpr "uspc"} boogie_si_record_i32($i7);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, .str);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, .str.12);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p10, .str.2);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p11, .str.13);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.4, $p13);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 146);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p13, $i16);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p17, 0);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.5, $p18);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 737} {:cexpr "tmp"} boogie_si_record_i64($i22);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.6, $p26);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} bdc_writel($p27, 32, $i7);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.6, $p24);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p1, $p25, .str.13, .str.12, $i7);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_193:
    assume !assertsPassed;
    return;
}



const bdc_uspc_disconnected: ref;

axiom bdc_uspc_disconnected == $sub.ref(0, 501644);

procedure bdc_uspc_disconnected($p0: ref, $i1: i1);



const handle_link_state_change: ref;

axiom handle_link_state_change == $sub.ref(0, 502676);

procedure handle_link_state_change($p0: ref, $i1: i32);



const bdc_uspc_connected: ref;

axiom bdc_uspc_connected == $sub.ref(0, 503708);

procedure bdc_uspc_connected($p0: ref);



const handle_xsr_succ_status: ref;

axiom handle_xsr_succ_status == $sub.ref(0, 504740);

procedure handle_xsr_succ_status($p0: ref, $p1: ref, $p2: ref);



const ep0_xsf_complete: ref;

axiom ep0_xsf_complete == $sub.ref(0, 505772);

procedure ep0_xsf_complete($p0: ref, $p1: ref);



const ep0_queue_zlp: ref;

axiom ep0_queue_zlp == $sub.ref(0, 506804);

procedure ep0_queue_zlp($p0: ref) returns ($r: i32);



const bdc_set_test_mode: ref;

axiom bdc_set_test_mode == $sub.ref(0, 507836);

procedure bdc_set_test_mode($p0: ref) returns ($r: i32);



const bdc_dbg_srr: ref;

axiom bdc_dbg_srr == $sub.ref(0, 508868);

procedure bdc_dbg_srr($p0: ref, $i1: i32);



const bd_add_to_bdi: ref;

axiom bd_add_to_bdi == $sub.ref(0, 509900);

procedure bd_add_to_bdi($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $CurrAddr;



implementation bd_add_to_bdi($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i24;
  var $i14: i24;
  var $i15: i24;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i24;
  var $i53: i24;
  var $i54: i24;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i64;
  var $i59: i64;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $i64: i1;
  var $i65: i1;
  var $i66: i32;
  var $i67: i64;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $i30: i32;
  var $i74: i64;
  var $i75: i32;
  var $i28: i64;
  var $i29: i32;
  var $i68: i32;
  var $i69: i64;
  var $i70: i8;
  var $i76: i1;
  var $i77: i1;
  var $i78: i32;
  var $i79: i64;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $i85: i64;
  var $i86: i64;
  var $i87: i32;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $i84: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 742} {:cexpr "bd_add_to_bdi:arg:bd_dma_addr"} boogie_si_record_i64($i1);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(80, 1));
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, .str);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p8, .str.223);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p9, .str.46);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p10, .str.224);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i13 := $load.i24($M.4, $p12);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $i14 := $and.i24($i13, $sub.i24(0, 262144));
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i15 := $or.i24($i14, 230);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p12, $i15);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p16, 0);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.5, $p17);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i64($i18);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 1);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 744} {:cexpr "tmp"} boogie_si_record_i64($i21);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(8, 1));
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.6, $p25);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $i27 := $sgt.i32($i26, 0);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i28, $i29 := 0, 0;
    assume {:branchcond $i27} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i68, $i69, $i70 := $i29, $i28, 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i8.i1($i70);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i77 := $xor.i1($i76, 1);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i78 := $zext.i1.i32($i77);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i79 := $sext.i32.i64($i78);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} $i80 := ldv__builtin_expect($i79, 0);
    call {:si_unique_call 752} {:cexpr "tmp___1"} boogie_si_record_i64($i80);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i80, 0);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i85 := $sub.i64($i1, $i69);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i86 := $udiv.i64($i85, 16);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i64.i32($i86);
    call {:si_unique_call 755} {:cexpr "bdi"} boogie_si_record_i32($i87);
    $p88 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(24, 1));
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.6, $p88);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $i90 := $mul.i32($i89, $i68);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i90, $i87);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i84 := $i91;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $r := $i84;
    return;

  $bb22:
    assume $i81 == 1;
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p6, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.6, $p82);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} dev_err.ref.ref.ref($p83, .str.226, .str.223);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i84 := $sub.i32(0, 22);
    goto $bb24;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb7;

  $bb7:
    call $p31, $p32, $i33, $p34, $p35, $p36, $i37, $p38, $i39, $p40, $i41, $i42, $i43, $i44, $i45, $p46, $p47, $p48, $p49, $p50, $p51, $i52, $i53, $i54, $p55, $p56, $i57, $i58, $i59, $i60, $i61, $p62, $p63, $i64, $i65, $i66, $i67, $i71, $i72, $i73, $i30, $i74, $i75 := bd_add_to_bdi_loop_$bb7($p0, $i1, $p3, $p6, $p25, $p31, $p32, $i33, $p34, $p35, $p36, $i37, $p38, $i39, $p40, $i41, $i42, $i43, $i44, $i45, $p46, $p47, $p48, $p49, $p50, $p51, $i52, $i53, $i54, $p55, $p56, $i57, $i58, $i59, $i60, $i61, $p62, $p63, $i64, $i65, $i66, $i67, $i71, $i72, $i73, $i30, $i74, $i75);
    goto $bb7_last;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(0, 1));
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.6, $p31);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i30);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p32, $mul.ref($i33, 8));
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.6, $p34);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.6, $p36);
    call {:si_unique_call 746} {:cexpr "dma_first_bd"} boogie_si_record_i64($i37);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p35, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.6, $p38);
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(24, 1));
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.6, $p40);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i41, $sub.i32(0, 1));
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i42);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i44 := $mul.i64($i43, 16);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i39, $i44);
    call {:si_unique_call 747} {:cexpr "dma_last_bd"} boogie_si_record_i64($i45);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p46, .str);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p47, .str.223);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p48, .str.46);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p49, .str.225);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i52 := $load.i24($M.4, $p51);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i53 := $and.i24($i52, $sub.i24(0, 262144));
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i54 := $or.i24($i53, 244);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p51, $i54);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p55, 0);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.5, $p56);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i64($i57);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $i59 := $and.i64($i58, 1);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} $i60 := ldv__builtin_expect($i59, 0);
    call {:si_unique_call 749} {:cexpr "tmp___0"} boogie_si_record_i64($i60);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i64 := $uge.i64($i1, $i37);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i30, 1);
    call {:si_unique_call 753} {:cexpr "tbi"} boogie_si_record_i32($i71);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.6, $p25);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i73 := $sgt.i32($i72, $i71);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i74, $i75 := $i37, $i71;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i28, $i29 := $i74, $i75;
    goto $bb6;

  $bb19:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $i30 := $i71;
    goto $bb19_dummy;

  $bb12:
    assume $i64 == 1;
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i65 := $ule.i64($i1, $i45);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i66, $i67 := $i30, $i37;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb14;

  $bb15:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i68, $i69, $i70 := $i66, $i67, 1;
    goto $bb17;

  $bb9:
    assume $i61 == 1;
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p6, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.6, $p62);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} __dynamic_dev_dbg.ref.ref.ref.i64.i64($p3, $p63, .str.225, $i37, $i45);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.6, $p23);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} __dynamic_dev_dbg.ref.ref.ref.ref.i64($p2, $p24, .str.224, .str.223, $i1);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3961;
}



const find_end_bdi: ref;

axiom find_end_bdi == $sub.ref(0, 510932);

procedure find_end_bdi($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation find_end_bdi($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} {:cexpr "find_end_bdi:arg:next_hwd_bdi"} boogie_si_record_i32($i1);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, $sub.i32(0, 1));
    call {:si_unique_call 757} {:cexpr "end_bdi"} boogie_si_record_i32($i2);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 0);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(24, 1));
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.6, $p10);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, $sub.i32(0, 1));
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i13 := $srem.i32($i2, $i12);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i8 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i2, 1);
    call {:si_unique_call 759} {:cexpr "end_bdi"} boogie_si_record_i32($i15);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(12, 1));
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.6, $p5);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, $sub.i32(0, 1));
    call {:si_unique_call 758} {:cexpr "end_bdi"} boogie_si_record_i32($i7);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const bdc_mem_alloc: ref;

axiom bdc_mem_alloc == $sub.ref(0, 511964);

procedure bdc_mem_alloc($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.9, assertsPassed, $M.8;



implementation bdc_mem_alloc($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i24;
  var $i37: i24;
  var $i38: i24;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i24;
  var $i77: i24;
  var $i78: i24;
  var $p79: ref;
  var $p80: ref;
  var $i81: i8;
  var $i82: i64;
  var $i83: i64;
  var $i84: i64;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $p90: ref;
  var $i91: i32;
  var $i92: i64;
  var $p93: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i64;
  var $i99: i1;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i24;
  var $i107: i24;
  var $i108: i24;
  var $p109: ref;
  var $p110: ref;
  var $i111: i8;
  var $i112: i64;
  var $i113: i64;
  var $i114: i64;
  var $i115: i1;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $i119: i1;
  var $p121: ref;
  var $p122: ref;
  var $i120: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, .str);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, .str.114);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, .str.2);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str.115);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.4, $p10);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 373);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p10, $i13);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p14, 0);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.5, $p15);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 765} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.6, $p23);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} $i25 := bdc_readl($p24, 0);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    call {:si_unique_call 768} {:cexpr "tmp___0"} boogie_si_record_i32($i25);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 1792);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i27 := $lshr.i32($i26, 8);
    call {:si_unique_call 769} {:cexpr "page_size"} boogie_si_record_i32($i27);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i28 := $shl.i32(1, $i27);
    call {:si_unique_call 770} {:cexpr "page_size"} boogie_si_record_i32($i28);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i29 := $shl.i32($i28, 10);
    call {:si_unique_call 771} {:cexpr "page_size"} boogie_si_record_i32($i29);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, .str);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p31, .str.114);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p32, .str.2);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p33, .str.116);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i36 := $load.i24($M.4, $p35);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i37 := $and.i24($i36, $sub.i24(0, 262144));
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i38 := $or.i24($i37, 379);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p35, $i38);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p39, 0);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.5, $p40);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i64($i41);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i43 := $and.i64($i42, 1);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} $i44 := ldv__builtin_expect($i43, 0);
    call {:si_unique_call 773} {:cexpr "tmp___1"} boogie_si_record_i64($i44);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.6, $p48);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i50 := $zext.i32.i64($i29);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} $p51 := dma_pool_create(.str.117, $p49, 512, 16, $i50);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(2080, 1));
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p52, $p51);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(2080, 1));
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.6, $p53);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $i56 := $eq.i64($i55, 0);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} $i57 := scratchpad_setup($p0);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    call {:si_unique_call 779} {:cexpr "tmp___2"} boogie_si_record_i32($i57);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.6, $p59);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $i61 := bdc_readl($p60, 3300);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    call {:si_unique_call 781} {:cexpr "tmp___3"} boogie_si_record_i32($i61);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i62 := $lshr.i32($i61, 28);
    call {:si_unique_call 782} {:cexpr "num_ieps"} boogie_si_record_i32($i62);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.6, $p63);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $i65 := bdc_readl($p64, 3284);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    call {:si_unique_call 784} {:cexpr "tmp___4"} boogie_si_record_i32($i65);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i66 := $lshr.i32($i65, 28);
    call {:si_unique_call 785} {:cexpr "num_oeps"} boogie_si_record_i32($i66);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i62, $i66);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i68 := $add.i32($i67, 2);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1672, 1));
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p69, $i68);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p70, .str);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p71, .str.114);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p72, .str.2);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p73, .str.118);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i76 := $load.i24($M.4, $p75);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i77 := $and.i24($i76, $sub.i24(0, 262144));
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i78 := $or.i24($i77, 399);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p75, $i78);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p79, 0);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.5, $p80);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i64($i81);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i83 := $and.i64($i82, 1);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} $i84 := ldv__builtin_expect($i83, 0);
    call {:si_unique_call 787} {:cexpr "tmp___5"} boogie_si_record_i64($i84);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, 0);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1672, 1));
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.6, $p90);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i92 := $zext.i32.i64($i91);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} $p93 := kcalloc($i92, 8, 208);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1680, 1));
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p95, $p93);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1680, 1));
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.6, $p96);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p97);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i99 := $eq.i64($i98, 0);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p100, .str);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p101, .str.114);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p102, .str.2);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p103, .str.119);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i106 := $load.i24($M.4, $p105);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i107 := $and.i24($i106, $sub.i24(0, 262144));
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i108 := $or.i24($i107, 406);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p105, $i108);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p109, 0);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.5, $p110);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i64($i111);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $i113 := $and.i64($i112, 1);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} $i114 := ldv__builtin_expect($i113, 0);
    call {:si_unique_call 791} {:cexpr "tmp___7"} boogie_si_record_i64($i114);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i115 := $ne.i64($i114, 0);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $i118 := setup_srr($p0, 0);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    call {:si_unique_call 794} {:cexpr "tmp___8"} boogie_si_record_i32($i118);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 0);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i120 := 0;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $r := $i120;
    return;

  $bb23:
    assume $i119 == 1;
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.6, $p121);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} dev_warn.ref.ref($p122, .str.120);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} bdc_mem_free($p0);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i120 := $sub.i32(0, 12);
    goto $bb26;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i115 == 1;
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.6, $p116);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} __dynamic_dev_dbg.ref.ref.ref($p4, $p117, .str.119);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i99 == 1;
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i85 == 1;
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.6, $p86);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1672, 1));
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.6, $p88);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p3, $p87, .str.118, $i62, $i66, $i89);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i58 == 1;
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i56 == 1;
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i45 == 1;
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.6, $p46);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} __dynamic_dev_dbg.ref.ref.ref.i32($p2, $p47, .str.116, $i29);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $p21);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p1, $p22, .str.115, .str.114, 32);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bdc_dbg_regs: ref;

axiom bdc_dbg_regs == $sub.ref(0, 512996);

procedure bdc_dbg_regs($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.9, $CurrAddr, $M.8, assertsPassed;



implementation bdc_dbg_regs($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $i3 := bdc_readl($p2, 0);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    call {:si_unique_call 796} {:cexpr "temp"} boogie_si_record_i32($i3);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} $i6 := bdc_readl($p5, 4);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    call {:si_unique_call 798} {:cexpr "temp"} boogie_si_record_i32($i6);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} $i9 := bdc_readl($p8, 8);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    call {:si_unique_call 800} {:cexpr "temp"} boogie_si_record_i32($i9);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p10);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $i12 := bdc_readl($p11, 12);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    call {:si_unique_call 802} {:cexpr "temp"} boogie_si_record_i32($i12);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $i15 := bdc_readl($p14, 32);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    call {:si_unique_call 804} {:cexpr "temp"} boogie_si_record_i32($i15);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.6, $p16);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} $i18 := bdc_readl($p17, 80);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    call {:si_unique_call 806} {:cexpr "temp"} boogie_si_record_i32($i18);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.6, $p19);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $i21 := bdc_readl($p20, 84);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    call {:si_unique_call 808} {:cexpr "temp"} boogie_si_record_i32($i21);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;
}



const dma_pool_create: ref;

axiom dma_pool_create == $sub.ref(0, 514028);

procedure dma_pool_create($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i64) returns ($r: ref);
  free requires assertsPassed;



implementation dma_pool_create($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i64) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} {:cexpr "dma_pool_create:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 810} {:cexpr "dma_pool_create:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 811} {:cexpr "dma_pool_create:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $p5 := external_alloc();
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const scratchpad_setup: ref;

axiom scratchpad_setup == $sub.ref(0, 515060);

procedure scratchpad_setup($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.9, assertsPassed, $M.8;



implementation scratchpad_setup($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i24;
  var $i34: i24;
  var $i35: i24;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i46: i32;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i24;
  var $i55: i24;
  var $i56: i24;
  var $p57: ref;
  var $p58: ref;
  var $i59: i8;
  var $i60: i64;
  var $i61: i64;
  var $i62: i64;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $p70: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $p79: ref;
  var $p81: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i32;
  var $p87: ref;
  var $i88: i64;
  var $i89: i64;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p96: ref;
  var $i45: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} $i6 := bdc_readl($p5, 0);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    call {:si_unique_call 817} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 7);
    call {:si_unique_call 818} {:cexpr "sp_buff_size"} boogie_si_record_i32($i7);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, .str);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, .str.121);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p10, .str.2);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p11, .str.122);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.4, $p13);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 170);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p13, $i16);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p17, 0);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.5, $p18);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 820} {:cexpr "tmp___0"} boogie_si_record_i64($i22);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i7, 0);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i7, 5);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i47 := $shl.i32(1, $i46);
    call {:si_unique_call 825} {:cexpr "sp_buff_size"} boogie_si_record_i32($i47);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, .str);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p49, .str.121);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p50, .str.2);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p51, .str.124);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i54 := $load.i24($M.4, $p53);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i55 := $and.i24($i54, $sub.i24(0, 262144));
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i56 := $or.i24($i55, 177);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p53, $i56);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p57, 0);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.5, $p58);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i64($i59);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $i61 := $and.i64($i60, 1);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} $i62 := ldv__builtin_expect($i61, 0);
    call {:si_unique_call 827} {:cexpr "tmp___2"} boogie_si_record_i64($i62);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, 0);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.6, $p66);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i47);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1696, 1)), $mul.ref(0, 1));
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $p71 := dma_zalloc_coherent($p67, $i68, $p70, 208);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1696, 1)), $mul.ref(8, 1));
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p73, $p71);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1696, 1)), $mul.ref(8, 1));
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.6, $p75);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p76);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $i78 := $eq.i64($i77, 0);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1720, 1));
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p79, $i47);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1696, 1)), $mul.ref(16, 1));
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p81, $i47);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1696, 1)), $mul.ref(0, 1));
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i84 := $load.i64($M.6, $p83);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i64.i32($i84);
    call {:si_unique_call 830} {:cexpr "low32"} boogie_si_record_i32($i85);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1696, 1)), $mul.ref(0, 1));
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i88 := $load.i64($M.6, $p87);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i89 := $lshr.i64($i88, 32);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i64.i32($i89);
    call {:si_unique_call 831} {:cexpr "upp32"} boogie_si_record_i32($i90);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.6, $p91);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} bdc_writel($p92, 56, $i85);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.6, $p93);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} bdc_writel($p94, 60, $i90);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i45 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $r := $i45;
    return;

  $bb14:
    assume $i78 == 1;
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1696, 1)), $mul.ref(8, 1));
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p96, $0.ref);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32(0, 12);
    goto $bb9;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i63 == 1;
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.6, $p64);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} __dynamic_dev_dbg.ref.ref.ref.i32($p3, $p65, .str.124, $i47);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, .str);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p28, .str.121);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p29, .str.2);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p30, .str.123);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $i33 := $load.i24($M.4, $p32);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $i34 := $and.i24($i33, $sub.i24(0, 262144));
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $i35 := $or.i24($i34, 172);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p32, $i35);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p36, 0);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.5, $p37);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i64($i38);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i40 := $and.i64($i39, 1);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $i41 := ldv__builtin_expect($i40, 0);
    call {:si_unique_call 823} {:cexpr "tmp___1"} boogie_si_record_i64($i41);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i45 := 0;
    goto $bb9;

  $bb6:
    assume $i42 == 1;
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.6, $p43);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} __dynamic_dev_dbg.ref.ref.ref($p2, $p44, .str.123);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.6, $p24);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p1, $p25, .str.122, .str.121, $i7);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_235:
    assume !assertsPassed;
    return;
}



const kcalloc: ref;

axiom kcalloc == $sub.ref(0, 516092);

procedure kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} {:cexpr "kcalloc:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 835} {:cexpr "kcalloc:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 836} {:cexpr "kcalloc:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} ldv_check_alloc_flags($i2);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $p3 := ldv_undef_ptr();
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_241:
    assume !assertsPassed;
    return;
}



const setup_srr: ref;

axiom setup_srr == $sub.ref(0, 517124);

procedure setup_srr($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, assertsPassed;



implementation setup_srr($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $i38: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 840} {:cexpr "setup_srr:arg:interrupter"} boogie_si_record_i32($i1);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, .str);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, .str.125);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, .str.2);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p6, .str.126);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.4, $p8);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 203);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p8, $i11);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p12, 0);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.5, $p13);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 842} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $p21);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} bdc_writel($p22, 520, 24);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1728, 1)), $mul.ref(10, 1));
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p24, 0);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.6, $p25);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1728, 1)), $mul.ref(16, 1));
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} $p29 := dma_zalloc_coherent($p26, 1024, $p28, 208);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1728, 1)), $mul.ref(0, 1));
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p32, $p29);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1728, 1)), $mul.ref(0, 1));
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.6, $p34);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $r := $i38;
    return;

  $bb4:
    assume $i37 == 1;
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 12);
    goto $bb6;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.6, $p19);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p2, $p20, .str.126, .str.125, 64);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dma_zalloc_coherent: ref;

axiom dma_zalloc_coherent == $sub.ref(0, 518156);

procedure dma_zalloc_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation dma_zalloc_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i32) returns ($r: ref)
{
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} {:cexpr "dma_zalloc_coherent:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 847} {:cexpr "dma_zalloc_coherent:arg:flags"} boogie_si_record_i32($i3);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} ldv_check_alloc_flags($i3);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} $p4 := ldv_undef_ptr();
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  SeqInstr_247:
    assume !assertsPassed;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 519188);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 1} true;
    call {:si_unique_call 850} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 851} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const dma_set_mask: ref;

axiom dma_set_mask == $sub.ref(0, 520220);

procedure dma_set_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_set_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 852} {:cexpr "dma_set_mask:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 1} true;
    call {:si_unique_call 853} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 854} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dma_set_coherent_mask: ref;

axiom dma_set_coherent_mask == $sub.ref(0, 521252);

procedure dma_set_coherent_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation dma_set_coherent_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} {:cexpr "dma_set_coherent_mask:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} $i2 := dma_supported($p0, $i1);
    call {:si_unique_call 857} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1168, 1));
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p5, $i1);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 5);
    goto $bb3;
}



const dma_supported: ref;

axiom dma_supported == $sub.ref(0, 522284);

procedure dma_supported($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_supported($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 858} {:cexpr "dma_supported:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 1} true;
    call {:si_unique_call 859} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 860} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 523316);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p2, $p1);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 524348);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const devm_kmalloc: ref;

axiom devm_kmalloc == $sub.ref(0, 525380);

procedure devm_kmalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devm_kmalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} {:cexpr "devm_kmalloc:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 862} {:cexpr "devm_kmalloc:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $p3 := external_alloc();
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const bdc_gadget_ep_enable: ref;

axiom bdc_gadget_ep_enable == $sub.ref(0, 526412);

procedure bdc_gadget_ep_enable($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.9, $M.6, $CurrAddr, $M.8, assertsPassed;



implementation bdc_gadget_ep_enable($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i24;
  var $i20: i24;
  var $i21: i24;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i24;
  var $i41: i24;
  var $i42: i24;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i64;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i24;
  var $i75: i24;
  var $i76: i24;
  var $p77: ref;
  var $p78: ref;
  var $i79: i8;
  var $i80: i64;
  var $i81: i64;
  var $i82: i64;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $p93: ref;
  var $i29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p1);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(1, 1));
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.6, $p9);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 5);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i31 := $load.i16($M.6, $p30);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p0);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 176)), $mul.ref(80, 1));
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.6, $p51);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 2368)), $mul.ref(1680, 1));
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.6, $p53);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p54, $mul.ref(1, 8));
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.6, $p55);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p50);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $i59 := $eq.i64($i57, $i58);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p52, $mul.ref(0, 2368)), $mul.ref(1584, 1));
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.6, $p60);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $i63 := $eq.i64($i62, 0);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i63 == 1);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p52, $mul.ref(0, 2368)), $mul.ref(0, 1)), $mul.ref(120, 1));
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.6, $p65);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 0);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, .str);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p69, .str.255);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p70, .str.46);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p71, .str.258);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $i74 := $load.i24($M.4, $p73);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $i75 := $and.i24($i74, $sub.i24(0, 262144));
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $i76 := $or.i24($i75, 1888);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p73, $i76);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p77, 0);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.5, $p78);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i64($i79);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i81 := $and.i64($i80, 1);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} $i82 := ldv__builtin_expect($i81, 0);
    call {:si_unique_call 874} {:cexpr "tmp___1"} boogie_si_record_i64($i82);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $i83 := $ne.i64($i82, 0);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} ldv_spin_lock();
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p50, $mul.ref(0, 176)), $mul.ref(104, 1));
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p88, $p1);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.6, $p89);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p50, $mul.ref(0, 176)), $mul.ref(96, 1));
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p91, $p90);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $i92 := bdc_ep_enable($p50);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    call {:si_unique_call 878} {:cexpr "ret"} boogie_si_record_i32($i92);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p52, $mul.ref(0, 2368)), $mul.ref(1600, 1));
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} spin_unlock_irqrestore($p93, $u0);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i29 := $i92;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i83 == 1;
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p52, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.6, $p84);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p50, $mul.ref(0, 176)), $mul.ref(116, 1));
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} __dynamic_dev_dbg.ref.ref.ref.ref.ref($p4, $p85, .str.258, .str.255, $p87);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i67 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 108);
    goto $bb11;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb23;

  $bb19:
    assume $i59 == 1;
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb11;

  $bb13:
    assume $i33 == 1;
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p34, .str);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p35, .str.255);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p36, .str.46);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p37, .str.257);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i40 := $load.i24($M.26, $p39);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i41 := $and.i24($i40, $sub.i24(0, 262144));
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $i42 := $or.i24($i41, 1872);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $M.26 := $store.i24($M.26, $p39, $i42);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $M.27 := $store.i8($M.27, $p43, 0);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.27, $p44);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i64($i45);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $i47 := $and.i64($i46, 1);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $i48 := ldv__builtin_expect($i47, 0);
    call {:si_unique_call 871} {:cexpr "tmp___0"} boogie_si_record_i64($i48);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb11;

  $bb15:
    assume $i49 == 1;
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} __dynamic_pr_debug.ref.ref($p3, .str.257);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p13, .str);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p14, .str.255);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p15, .str.46);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p16, .str.256);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $i19 := $load.i24($M.26, $p18);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $i20 := $and.i24($i19, $sub.i24(0, 262144));
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $i21 := $or.i24($i20, 1867);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $M.26 := $store.i24($M.26, $p18, $i21);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $M.27 := $store.i8($M.27, $p22, 0);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.27, $p23);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i64($i24);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 1);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 868} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb11;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} __dynamic_pr_debug.ref.ref($p2, .str.256);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const bdc_gadget_ep_disable: ref;

axiom bdc_gadget_ep_disable == $sub.ref(0, 527444);

procedure bdc_gadget_ep_disable($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.9, $M.6, $CurrAddr, $M.8, assertsPassed;



implementation bdc_gadget_ep_disable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i24;
  var $i41: i24;
  var $i42: i24;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i64;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $p65: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p0);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 176)), $mul.ref(80, 1));
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.6, $p23);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 2368)), $mul.ref(1680, 1));
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.6, $p25);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref(1, 8));
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.6, $p27);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p22);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i29, $i30);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, .str);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p35, .str.241);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p36, .str.46);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p37, .str.244);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $i40 := $load.i24($M.4, $p39);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $i41 := $and.i24($i40, $sub.i24(0, 262144));
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $i42 := $or.i24($i41, 1919);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p39, $i42);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p43, 0);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.5, $p44);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i64($i45);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i47 := $and.i64($i46, 1);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} $i48 := ldv__builtin_expect($i47, 0);
    call {:si_unique_call 887} {:cexpr "tmp___0"} boogie_si_record_i64($i48);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p22, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.6, $p56);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i57, 1);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 0);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} ldv_spin_lock();
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} $i64 := bdc_ep_disable($p22);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    call {:si_unique_call 892} {:cexpr "ret"} boogie_si_record_i32($i64);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p24, $mul.ref(0, 2368)), $mul.ref(1600, 1));
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} spin_unlock_irqrestore($p65, $u0);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i21 := $i64;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i59 == 1;
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p24, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.6, $p60);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p22, $mul.ref(0, 176)), $mul.ref(116, 1));
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} dev_warn.ref.ref.ref($p61, .str.245, $p63);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb6;

  $bb11:
    assume $i49 == 1;
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p24, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.6, $p50);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p22, $mul.ref(0, 176)), $mul.ref(116, 1));
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p22, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.6, $p54);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32($p2, $p51, .str.244, .str.241, $p53, $i55);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i31 == 1;
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p24, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.6, $p32);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} dev_warn.ref.ref.ref($p33, .str.243, .str.241);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p5, .str);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p6, .str.241);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p7, .str.46);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p8, .str.242);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.26, $p10);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 1906);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $M.26 := $store.i24($M.26, $p10, $i13);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $M.27 := $store.i8($M.27, $p14, 0);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.27, $p15);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 883} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 22);
    goto $bb6;

  $bb3:
    assume $i20 == 1;
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} __dynamic_pr_debug.ref.ref($p1, .str.242);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const bdc_gadget_alloc_request: ref;

axiom bdc_gadget_alloc_request == $sub.ref(0, 528476);

procedure bdc_gadget_alloc_request($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $CurrAddr, assertsPassed;



implementation bdc_gadget_alloc_request($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i24;
  var $i23: i24;
  var $i24: i24;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 895} {:cexpr "bdc_gadget_alloc_request:arg:gfp_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} $p3 := kzalloc(144, $i1);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(104, 1));
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p9, $p0);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref(0, 176)), $mul.ref(90, 1));
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.6, $p10);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p13, $i12);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p15, $sub.i64(0, 1));
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, .str);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p17, .str.253);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p18, .str.46);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p19, .str.254);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i22 := $load.i24($M.4, $p21);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i23 := $and.i24($i22, $sub.i24(0, 262144));
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $i24 := $or.i24($i23, 1841);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p21, $i24);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p25, 0);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.5, $p26);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i64($i27);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $i29 := $and.i64($i28, 1);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 898} {:cexpr "tmp___0"} boogie_si_record_i64($i30);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $p7 := $p3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb5:
    assume $i31 == 1;
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p8, $mul.ref(0, 176)), $mul.ref(80, 1));
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.6, $p32);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.6, $p34);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p8, $mul.ref(0, 176)), $mul.ref(116, 1));
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} __dynamic_dev_dbg.ref.ref.ref.ref.ref.ref($p2, $p35, .str.254, .str.253, $p37, $p4);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  SeqInstr_256:
    assume !assertsPassed;
    return;
}



const bdc_gadget_free_request: ref;

axiom bdc_gadget_free_request == $sub.ref(0, 529508);

procedure bdc_gadget_free_request($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation bdc_gadget_free_request($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} kfree($p3);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    return;
}



const bdc_gadget_ep_queue: ref;

axiom bdc_gadget_ep_queue == $sub.ref(0, 530540);

procedure bdc_gadget_ep_queue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.9, $M.6, $M.20, $CurrAddr;



implementation bdc_gadget_ep_queue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i24;
  var $i33: i24;
  var $i34: i24;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i24;
  var $i51: i24;
  var $i52: i24;
  var $p53: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i64;
  var $i57: i64;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $i67: i8;
  var $i68: i8;
  var $i69: i8;
  var $i70: i32;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i64;
  var $i92: i64;
  var $i93: i1;
  var $i94: i32;
  var $i96: i32;
  var $i95: i32;
  var $p97: ref;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 903} {:cexpr "bdc_gadget_ep_queue:arg:gfp_flags"} boogie_si_record_i32($i2);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p1);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i13 == 1);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.6, $p14);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p0);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p1);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p22, $mul.ref(0, 176)), $mul.ref(80, 1));
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.6, $p24);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, .str);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p27, .str.247);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p28, .str.46);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p29, .str.248);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i32 := $load.i24($M.4, $p31);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i33 := $and.i24($i32, $sub.i24(0, 262144));
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i34 := $or.i24($i33, 1734);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p31, $i34);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p35, 0);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.5, $p36);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i64($i37);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $i39 := $and.i64($i38, 1);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} $i40 := ldv__builtin_expect($i39, 0);
    call {:si_unique_call 905} {:cexpr "tmp"} boogie_si_record_i64($i40);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, .str);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p45, .str.247);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p46, .str.46);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p47, .str.249);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i50 := $load.i24($M.4, $p49);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i51 := $and.i24($i50, $sub.i24(0, 262144));
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i52 := $or.i24($i51, 1736);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p49, $i52);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p53, 0);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.5, $p54);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i64($i55);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $i57 := $and.i64($i56, 1);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $i58 := ldv__builtin_expect($i57, 0);
    call {:si_unique_call 908} {:cexpr "tmp___0"} boogie_si_record_i64($i58);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.6, $p72);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p73);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i75 := $eq.i64($i74, 0);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.6, $p80);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $i82 := $ugt.i32($i81, 16777215);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} ldv_spin_lock();
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p25, $mul.ref(0, 2368)), $mul.ref(1680, 1));
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.6, $p87);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p88, $mul.ref(1, 8));
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.6, $p89);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p90);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p22);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i93 := $eq.i64($i91, $i92);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i93 == 1);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $i96 := ep_queue($p22, $p23);
    call {:si_unique_call 916} {:cexpr "ret"} boogie_si_record_i32($i96);
    assume {:verifier.code 0} true;
    $i95 := $i96;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p25, $mul.ref(0, 2368)), $mul.ref(1600, 1));
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} spin_unlock_irqrestore($p97, $u0);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $i11 := $i95;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb28:
    assume $i93 == 1;
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} $i94 := ep0_queue($p22, $p23);
    call {:si_unique_call 914} {:cexpr "ret"} boogie_si_record_i32($i94);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i95 := $i94;
    goto $bb30;

  $bb25:
    assume $i82 == 1;
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p25, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.6, $p83);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.6, $p85);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} dev_warn.ref.ref.i32.i32($p84, .str.251, 16777215, $i86);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 95);
    goto $bb6;

  $bb22:
    assume $i75 == 1;
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p25, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.6, $p76);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p22, $mul.ref(0, 176)), $mul.ref(116, 1));
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} dev_warn.ref.ref.ref.ref($p77, .str.250, $p1, $p79);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 108);
    goto $bb6;

  $bb19:
    assume $i59 == 1;
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p25, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.6, $p60);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p22, $mul.ref(0, 176)), $mul.ref(116, 1));
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.6, $p64);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(42, 1));
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.6, $p66);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $i68 := $lshr.i8($i67, 1);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i69 := $and.i8($i68, 1);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32.i32($p4, $p61, .str.249, $p1, $p63, $i65, $i70);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i41 == 1;
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p25, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.6, $p42);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} __dynamic_dev_dbg.ref.ref.ref.ref.ref.ref($p3, $p43, .str.248, .str.247, $p22, $p23);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb6;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb9;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 108);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const bdc_gadget_ep_dequeue: ref;

axiom bdc_gadget_ep_dequeue == $sub.ref(0, 531572);

procedure bdc_gadget_ep_dequeue($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.9, $M.6, $CurrAddr, $M.8, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, assertsPassed;



implementation bdc_gadget_ep_dequeue($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p44: ref;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $p43: ref;
  var $p58: ref;
  var $p42: ref;
  var $p49: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $p69: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref(0, 176)), $mul.ref(80, 1));
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p10);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, .str);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, .str.259);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p14, .str.46);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p15, .str.254);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.4, $p17);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 1777);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p17, $i20);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p21, 0);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.5, $p22);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 920} {:cexpr "tmp"} boogie_si_record_i64($i26);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} bdc_dbg_bd_list($p11, $p8);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} ldv_spin_lock();
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 176)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.6, $p33);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p35, $mul.ref($sub.ref(0, 88), 144));
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p35, $mul.ref($sub.ref(0, 88), 144)), $mul.ref(88, 1));
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p8, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i38, $i40);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $p42 := $p36;
    assume {:branchcond $i41} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p49 := $p42;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p49, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p1);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i60, $i61);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} $i66 := ep_dequeue($p8, $p49);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    call {:si_unique_call 927} {:cexpr "ret"} boogie_si_record_i32($i66);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} bdc_req_complete($p8, $p49, $sub.i32(0, 104));
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $i68 := $i66;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} bdc_dbg_bd_list($p11, $p8);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p11, $mul.ref(0, 2368)), $mul.ref(1600, 1));
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} spin_unlock_irqrestore($p69, $u0);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $i7 := $i68;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb26:
    assume $i67 == 1;
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i68 := $sub.i32(0, 95);
    goto $bb28;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i62 == 1;
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p11, $mul.ref(0, 2368)), $mul.ref(1600, 1));
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} spin_unlock_irqrestore($p63, $u0);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p11, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.6, $p64);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} dev_err.ref.ref($p65, .str.260);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb6;

  $bb11:
    assume $i41 == 1;
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $p43 := $p36;
    goto $bb14;

  $bb14:
    call $p44, $i45, $i46, $i47, $p48, $p51, $p52, $p53, $p54, $p55, $i56, $i57, $p43, $p58 := bdc_gadget_ep_dequeue_loop_$bb14($p1, $i40, $p44, $i45, $i46, $i47, $p48, $p51, $p52, $p53, $p54, $p55, $i56, $i57, $p43, $p58);
    goto $bb14_last;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p1);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i45, $i46);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $p48 := $p43;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p43, $mul.ref(0, 144)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.6, $p51);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p53, $mul.ref($sub.ref(0, 88), 144));
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p53, $mul.ref($sub.ref(0, 88), 144)), $mul.ref(88, 1));
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, $i40);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $p58 := $p54;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $p42 := $p58;
    goto $bb13;

  $bb20:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $p43 := $p54;
    goto $bb20_dummy;

  $bb16:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $p49 := $p48;
    goto $bb18;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p11, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.6, $p28);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p8, $mul.ref(0, 176)), $mul.ref(116, 1));
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} __dynamic_dev_dbg.ref.ref.ref.ref.ref.ref($p2, $p29, .str.254, .str.259, $p31, $p9);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb20_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4976;
}



const bdc_gadget_ep_set_halt: ref;

axiom bdc_gadget_ep_set_halt == $sub.ref(0, 532604);

procedure bdc_gadget_ep_set_halt($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.9, $M.6, $CurrAddr, $M.8, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, assertsPassed;



implementation bdc_gadget_ep_set_halt($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i36: i32;
  var $i35: i32;
  var $i31: i32;
  var $p37: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 932} {:cexpr "bdc_gadget_ep_set_halt:arg:value"} boogie_si_record_i32($i1);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 176)), $mul.ref(80, 1));
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, .str);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p7, .str.246);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p8, .str.46);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p9, .str.165);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.4, $p11);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 1813);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p11, $i14);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p15, 0);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.5, $p16);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 934} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} ldv_spin_lock();
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.6, $p27);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} $i29 := usb_endpoint_xfer_isoc($p28);
    call {:si_unique_call 938} {:cexpr "tmp___1"} boogie_si_record_i32($i29);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} $i33 := list_empty($p32);
    call {:si_unique_call 940} {:cexpr "tmp___0"} boogie_si_record_i32($i33);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i34 == 1);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} $i36 := ep_set_halt($p3, $i1);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    call {:si_unique_call 943} {:cexpr "ret"} boogie_si_record_i32($i36);
    assume {:verifier.code 0} true;
    $i35 := $i36;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i31 := $i35;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 2368)), $mul.ref(1600, 1));
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} spin_unlock_irqrestore($p37, $u0);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i34 == 1;
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 11);
    goto $bb9;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.6, $p22);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 176)), $mul.ref(116, 1));
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32($p2, $p23, .str.165, .str.246, $p25, $i1);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ep_dequeue: ref;

axiom ep_dequeue == $sub.ref(0, 533636);

procedure ep_dequeue($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.8, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.9, assertsPassed;



implementation ep_dequeue($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i8;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p19: ref;
  var $i20: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i24;
  var $i32: i24;
  var $i33: i24;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i24;
  var $i52: i24;
  var $i53: i24;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i64;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i64;
  var $i81: i64;
  var $i82: i64;
  var $i83: i32;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i8;
  var $i88: i8;
  var $i89: i8;
  var $i95: i1;
  var $i98: i1;
  var $i99: i8;
  var $i96: i8;
  var $i97: i8;
  var $i93: i8;
  var $i94: i8;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i24;
  var $i107: i24;
  var $i108: i24;
  var $p109: ref;
  var $p110: ref;
  var $i111: i8;
  var $i112: i64;
  var $i113: i64;
  var $i114: i64;
  var $i115: i1;
  var $p116: ref;
  var $p117: ref;
  var $i118: i1;
  var $i119: i32;
  var $i120: i1;
  var $i121: i32;
  var $p123: ref;
  var $i124: i32;
  var $i125: i1;
  var $i126: i1;
  var $p128: ref;
  var $i129: i32;
  var $i130: i1;
  var $p132: ref;
  var $i133: i32;
  var $i134: i32;
  var $p136: ref;
  var $p137: ref;
  var $i138: i64;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $i142: i64;
  var $p144: ref;
  var $i145: i32;
  var $p147: ref;
  var $i148: i32;
  var $i149: i32;
  var $i150: i32;
  var $i151: i64;
  var $i152: i64;
  var $i153: i64;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $i159: i64;
  var $i160: i64;
  var $i161: i1;
  var $i162: i8;
  var $i163: i1;
  var $i164: i1;
  var $p165: ref;
  var $i166: i32;
  var $p168: ref;
  var $i169: i64;
  var $i170: i32;
  var $p172: ref;
  var $p174: ref;
  var $p176: ref;
  var $i177: i1;
  var $i178: i32;
  var $i179: i1;
  var $p180: ref;
  var $p181: ref;
  var $i72: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(80, 1));
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1(0);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 947} {:cexpr "start_pending"} boogie_si_record_i8($i8);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.6, $p10);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, $sub.i32(0, 1));
    call {:si_unique_call 948} {:cexpr "eqp_bdi"} boogie_si_record_i32($i12);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i17 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(112, 1)), $mul.ref(8, 1));
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.6, $p19);
    call {:si_unique_call 950} {:cexpr "start_bdi"} boogie_si_record_i32($i20);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(112, 1)), $mul.ref(12, 1));
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.6, $p22);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} $i24 := find_end_bdi($p0, $i23);
    call {:si_unique_call 952} {:cexpr "end_bdi"} boogie_si_record_i32($i24);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, .str);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p26, .str.261);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p27, .str.46);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p28, .str.262);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i31 := $load.i24($M.4, $p30);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $i32 := $and.i24($i31, $sub.i24(0, 262144));
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $i33 := $or.i24($i32, 765);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p30, $i33);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p34, 0);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.5, $p35);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i64($i36);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $i38 := $and.i64($i37, 1);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} $i39 := ldv__builtin_expect($i38, 0);
    call {:si_unique_call 954} {:cexpr "tmp"} boogie_si_record_i64($i39);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, .str);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p46, .str.261);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p47, .str.46);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p48, .str.263);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i51 := $load.i24($M.4, $p50);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $i52 := $and.i24($i51, $sub.i24(0, 262144));
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $i53 := $or.i24($i52, 767);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p50, $i53);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p54, 0);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.5, $p55);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i64($i56);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $i58 := $and.i64($i57, 1);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} $i59 := ldv__builtin_expect($i58, 0);
    call {:si_unique_call 957} {:cexpr "tmp___0"} boogie_si_record_i64($i59);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(90, 1));
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.6, $p67);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} $i70 := bdc_stop_ep($p6, $i69);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    call {:si_unique_call 960} {:cexpr "ret"} boogie_si_record_i32($i70);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p6, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.6, $p73);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} $i75 := bdc_readl($p74, 96);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    call {:si_unique_call 962} {:cexpr "tmp_32"} boogie_si_record_i32($i75);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i76 := $zext.i32.i64($i75);
    call {:si_unique_call 963} {:cexpr "deq_ptr_64"} boogie_si_record_i64($i76);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p6, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.6, $p77);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} $i79 := bdc_readl($p78, 112);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    call {:si_unique_call 965} {:cexpr "tmp_32"} boogie_si_record_i32($i79);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $i80 := $zext.i32.i64($i79);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $i81 := $shl.i64($i80, 32);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $i82 := $or.i64($i81, $i76);
    call {:si_unique_call 966} {:cexpr "deq_ptr_64"} boogie_si_record_i64($i82);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} $i83 := bd_add_to_bdi($p0, $i82);
    call {:si_unique_call 968} {:cexpr "curr_hw_dqpi"} boogie_si_record_i32($i83);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i83, 0);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i85 := $sgt.i32($i83, $i17);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i85 == 1);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $i95 := $sge.i32($i20, $i83);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i95 == 1);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $i98 := $sge.i32($i24, $i83);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $i99 := 0;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i96, $i97 := $i8, $i99;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i93, $i94 := $i96, $i97;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p100, .str);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p101, .str.261);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p102, .str.46);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p103, .str.264);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i106 := $load.i24($M.4, $p105);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $i107 := $and.i24($i106, $sub.i24(0, 262144));
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i108 := $or.i24($i107, 814);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p105, $i108);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p109, 0);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.5, $p110);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i64($i111);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $i113 := $and.i64($i112, 1);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} $i114 := ldv__builtin_expect($i113, 0);
    call {:si_unique_call 970} {:cexpr "tmp___1"} boogie_si_record_i64($i114);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $i115 := $ne.i64($i114, 0);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i8.i1($i93);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb41, $bb43;

  $bb43:
    assume !($i125 == 1);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $i126 := $trunc.i8.i1($i94);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i126 == 1);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $i72 := $sub.i32(0, 22);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $r := $i72;
    return;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i126 == 1;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 2368)), $mul.ref(0, 1)), $mul.ref(120, 1));
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.6, $p128);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, 0);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(112, 1)), $mul.ref(12, 1));
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.6, $p132);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} $i134 := bdi_to_tbi($p0, $i133);
    call {:si_unique_call 973} {:cexpr "tbi"} boogie_si_record_i32($i134);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(0, 1));
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.6, $p136);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $i138 := $sext.i32.i64($i134);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p137, $mul.ref($i138, 8));
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p140 := $load.ref($M.6, $p139);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p140, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $i142 := $load.i64($M.6, $p141);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(112, 1)), $mul.ref(12, 1));
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.6, $p144);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(24, 1));
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.6, $p147);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $i149 := $mul.i32($i148, $i134);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $i150 := $sub.i32($i145, $i149);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $i151 := $sext.i32.i64($i150);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $i152 := $mul.i64($i151, 16);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $i153 := $add.i64($i142, $i152);
    call {:si_unique_call 974} {:cexpr "next_bd_dma"} boogie_si_record_i64($i153);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.6, $p155);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $p157 := $bitcast.ref.ref($p156);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($p157, $mul.ref($sub.ref(0, 88), 144));
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $i159 := $p2i.ref.i64($p1);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $i160 := $p2i.ref.i64($p158);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $i161 := $eq.i64($i159, $i160);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    $i162 := 0;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i8.i1($i93);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i163 == 1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i177 := $trunc.i8.i1($i94);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i72 := 0;
    goto $bb12;

  $bb59:
    assume $i177 == 1;
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} $i178 := bdc_ep_bla($p6, $p0, $i153);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    call {:si_unique_call 978} {:cexpr "ret"} boogie_si_record_i32($i178);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $i179 := $ne.i32($i178, 0);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    assume {:branchcond $i179} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb61:
    assume $i179 == 1;
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p6, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $p181 := $load.ref($M.6, $p180);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} dev_err.ref.ref.i32($p181, .str.265, $i178);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $i72 := $i178;
    goto $bb12;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb53:
    assume $i163 == 1;
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $i164 := $trunc.i8.i1($i162);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i164 == 1);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} $p165 := bdi_to_bd($p0, $i20);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $i166 := $trunc.i64.i32($i153);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($add.ref($p165, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 4));
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p168, $i166);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $i169 := $lshr.i64($i153, 32);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $i170 := $trunc.i64.i32($i169);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($add.ref($p165, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(1, 4));
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p172, $i170);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($p165, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(2, 4));
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p174, 0);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($p165, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(3, 4));
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p176, 201326607);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} bdc_dbg_bd_list($p6, $p0);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i164 == 1;
    goto $bb55;

  $bb50:
    assume $i161 == 1;
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $i162 := 1;
    goto $bb52;

  $bb47:
    assume $i130 == 1;
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $i72 := 0;
    goto $bb12;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i125 == 1;
    goto $bb42;

  $bb38:
    assume $i115 == 1;
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p6, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.6, $p116);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i8.i1($i93);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i119 := $zext.i1.i32($i118);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $i120 := $trunc.i8.i1($i94);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $i121 := $zext.i1.i32($i120);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 2368)), $mul.ref(0, 1)), $mul.ref(120, 1));
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.6, $p123);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p4, $p117, .str.264, $i119, $i121, $i124);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb35:
    assume $i98 == 1;
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $i99 := 1;
    goto $bb37;

  $bb32:
    assume $i95 == 1;
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $i96, $i97 := 1, 1;
    goto $bb34;

  $bb17:
    assume $i85 == 1;
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $i86 := $sge.i32($i20, $i83);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i86 == 1);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $i87 := $sle.i32($i20, $i17);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i87 == 1);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $i90 := $sge.i32($i24, $i83);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb25, $bb27;

  $bb27:
    assume !($i90 == 1);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $i91 := $sle.i32($i24, $i17);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    $i92 := 0;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i88, $i89 := $i8, $i92;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $i93, $i94 := $i88, $i89;
    goto $bb31;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i91 == 1;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i92 := 1;
    goto $bb30;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i90 == 1;
    goto $bb26;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i87 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i88, $i89 := 1, 1;
    goto $bb24;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i86 == 1;
    goto $bb20;

  $bb14:
    assume $i84 == 1;
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i72 := $i83;
    goto $bb12;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i71 == 1;
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i72 := 0;
    goto $bb12;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i60 == 1;
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p6, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.6, $p61);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.6, $p64);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} __dynamic_dev_dbg.ref.ref.ref.ref.ref($p3, $p62, .str.263, $p0, $p66);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i40 == 1;
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p6, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.6, $p41);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(116, 1));
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32.i32($p2, $p42, .str.262, .str.261, $p44, $i20, $i24);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(12, 1));
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.6, $p15);
    call {:si_unique_call 949} {:cexpr "eqp_bdi"} boogie_si_record_i32($i16);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb3;
}



const bdc_ep_bla: ref;

axiom bdc_ep_bla == $sub.ref(0, 534668);

procedure bdc_ep_bla($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.8, $CurrAddr, $M.6, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.9, assertsPassed;



implementation bdc_ep_bla($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $i25: i32;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i24;
  var $i40: i24;
  var $i41: i24;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i64;
  var $i46: i64;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 982} {:cexpr "bdc_ep_bla:arg:dma_addr"} boogie_si_record_i64($i2);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, .str);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, .str.26);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, .str.19);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str.27);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.4, $p10);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 237);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p10, $i13);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p14, 0);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.5, $p15);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 984} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i64.i32($i2);
    call {:si_unique_call 986} {:cexpr "param0"} boogie_si_record_i32($i23);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i24 := $lshr.i64($i2, 32);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i64.i32($i24);
    call {:si_unique_call 987} {:cexpr "param1"} boogie_si_record_i32($i25);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(90, 1));
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.6, $p26);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 31);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $i30 := $shl.i32($i29, 10);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i30, 0);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $i32 := $or.i32($i31, 3);
    call {:si_unique_call 988} {:cexpr "cmd_sc"} boogie_si_record_i32($i32);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, .str);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p34, .str.26);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p35, .str.19);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p36, .str.28);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i39 := $load.i24($M.4, $p38);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i40 := $and.i24($i39, $sub.i24(0, 262144));
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i41 := $or.i24($i40, 244);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p38, $i41);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p42, 0);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.5, $p43);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i64($i44);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $i46 := $and.i64($i45, 1);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} $i47 := ldv__builtin_expect($i46, 0);
    call {:si_unique_call 990} {:cexpr "tmp___0"} boogie_si_record_i64($i47);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} $i51 := bdc_submit_cmd($p0, $i32, $i23, $i25, 0);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    call {:si_unique_call 993} {:cexpr "tmp___1"} boogie_si_record_i32($i51);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $r := $i51;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i48 == 1;
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.6, $p49);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} __dynamic_dev_dbg.ref.ref.ref.i32($p4, $p50, .str.28, $i32);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $p21);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} __dynamic_dev_dbg.ref.ref.ref.ref.i64($p3, $p22, .str.27, .str.26, $i2);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ep_queue: ref;

axiom ep_queue == $sub.ref(0, 535700);

procedure ep_queue($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.20, $CurrAddr;



implementation ep_queue($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(80, 1));
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p10);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p13, 0);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p15, $sub.i32(0, 115));
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(90, 1));
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.6, $p16);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p19, $i18);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p11, $mul.ref(0, 2368)), $mul.ref(0, 1));
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(89, 1));
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.6, $p22);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} $i25 := usb_gadget_map_request($p20, $p21, $i24);
    call {:si_unique_call 995} {:cexpr "ret"} boogie_si_record_i32($i25);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} $i29 := bdc_queue_xfr($p11, $p1);
    call {:si_unique_call 998} {:cexpr "tmp"} boogie_si_record_i32($i29);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $i9 := $i29;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p11, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.6, $p27);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} dev_err.ref.ref($p28, .str.252);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $i9 := $i25;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 536732);

procedure __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    return;
}



const bdc_udc_wakeup: ref;

axiom bdc_udc_wakeup == $sub.ref(0, 537764);

procedure bdc_udc_wakeup($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.9, $M.6, $CurrAddr, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.8, assertsPassed;



implementation bdc_udc_wakeup($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i8;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i24;
  var $i44: i24;
  var $i45: i24;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i8;
  var $i79: i32;
  var $i80: i32;
  var $i81: i8;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i24;
  var $i89: i24;
  var $i90: i24;
  var $p91: ref;
  var $p92: ref;
  var $i93: i8;
  var $i94: i64;
  var $i95: i64;
  var $i96: i64;
  var $i97: i1;
  var $p98: ref;
  var $p99: ref;
  var $i100: i32;
  var $i61: i32;
  var $p101: ref;
  var $i29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, .str);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, .str.301);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, .str.77);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str.302);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.4, $p10);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 479);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p10, $i13);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p14, 0);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.5, $p15);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 1003} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 2368)), $mul.ref(2056, 1));
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.6, $p25);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 2);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} ldv_spin_lock();
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.6, $p30);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} $i32 := bdc_readl($p31, 32);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    call {:si_unique_call 1007} {:cexpr "uspc"} boogie_si_record_i32($i32);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i32);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 15);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i8($i35);
    call {:si_unique_call 1008} {:cexpr "link_state"} boogie_si_record_i8($i36);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, .str);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p38, .str.301);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p39, .str.77);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p40, .str.303);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $i43 := $load.i24($M.4, $p42);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $i44 := $and.i24($i43, $sub.i24(0, 262144));
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $i45 := $or.i24($i44, 487);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p42, $i45);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p46, 0);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.5, $p47);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i64($i48);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i50 := $and.i64($i49, 1);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} $i51 := ldv__builtin_expect($i50, 0);
    call {:si_unique_call 1010} {:cexpr "tmp___0"} boogie_si_record_i64($i51);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i36);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 3);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2368)), $mul.ref(0, 1)), $mul.ref(120, 1));
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.6, $p63);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 5);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i32, $sub.i32(0, 16));
    call {:si_unique_call 1014} {:cexpr "uspc"} boogie_si_record_i32($i70);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $i71 := $and.i32($i70, $sub.i32(0, 416));
    call {:si_unique_call 1015} {:cexpr "uspc"} boogie_si_record_i32($i71);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $i72 := $or.i32($i71, 16);
    call {:si_unique_call 1016} {:cexpr "uspc"} boogie_si_record_i32($i72);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p4, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.6, $p73);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} bdc_writel($p74, 32, $i72);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p4, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.6, $p75);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} $i77 := bdc_readl($p76, 32);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    call {:si_unique_call 1019} {:cexpr "uspc"} boogie_si_record_i32($i77);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i8($i77);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i79, 15);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i8($i80);
    call {:si_unique_call 1020} {:cexpr "link_state"} boogie_si_record_i8($i81);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p82, .str);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p83, .str.301);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p84, .str.77);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p85, .str.303);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $i88 := $load.i24($M.4, $p87);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $i89 := $and.i24($i88, $sub.i24(0, 262144));
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $i90 := $or.i24($i89, 505);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p87, $i90);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p91, 0);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.5, $p92);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i64($i93);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i95 := $and.i64($i94, 1);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} $i96 := ldv__builtin_expect($i95, 0);
    call {:si_unique_call 1022} {:cexpr "tmp___1"} boogie_si_record_i64($i96);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i97 := $ne.i64($i96, 0);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i61 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p4, $mul.ref(0, 2368)), $mul.ref(1600, 1));
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} spin_unlock_irqrestore($p101, $u0);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $i29 := $i61;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb18:
    assume $i97 == 1;
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p4, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.6, $p98);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i32($i81);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} __dynamic_dev_dbg.ref.ref.ref.i32.i32($p3, $p99, .str.303, $i100, $i77);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    goto $bb20;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i65 == 1;
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref(0, 2368)), $mul.ref(2056, 1));
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.6, $p66);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $i68 := $or.i32($i67, 65536);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p4, $mul.ref(0, 2368)), $mul.ref(2056, 1));
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p69, $i68);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i57 == 1;
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.6, $p58);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i36);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} dev_warn.ref.ref.i32($p59, .str.304, $i60);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32(0, 22);
    goto $bb13;

  $bb8:
    assume $i52 == 1;
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.6, $p53);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i36);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} __dynamic_dev_dbg.ref.ref.ref.i32.i32($p2, $p54, .str.303, $i55, $i32);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 95);
    goto $bb6;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $p21);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 2368)), $mul.ref(2056, 1));
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.6, $p23);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p1, $p22, .str.302, .str.301, $i24);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bdc_udc_set_selfpowered: ref;

axiom bdc_udc_set_selfpowered == $sub.ref(0, 538796);

procedure bdc_udc_set_selfpowered($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.9, $CurrAddr;



implementation bdc_udc_set_selfpowered($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i1;
  var $i23: i32;
  var $i24: i8;
  var $p25: ref;
  var $i26: i8;
  var $i27: i8;
  var $i28: i8;
  var $i29: i8;
  var $i30: i8;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1025} {:cexpr "bdc_udc_set_selfpowered:arg:is_self"} boogie_si_record_i32($i1);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, .str);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str.299);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.77);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.73);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.4, $p9);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 456);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p9, $i12);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p13, 0);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.5, $p14);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 1027} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i1, 0);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1584)), $mul.ref(1576, 1));
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.6, $p25);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $i27 := $and.i8($i24, 1);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i28 := $shl.i8($i27, 7);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $i29 := $and.i8($i26, 127);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $i30 := $or.i8($i29, $i28);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p25, $i30);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} ldv_spin_lock();
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i1, 0);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i31 == 1);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 2368)), $mul.ref(2056, 1));
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.6, $p36);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, $sub.i32(0, 2));
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 2368)), $mul.ref(2056, 1));
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p39, $i38);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 2368)), $mul.ref(1600, 1));
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} spin_unlock_irqrestore($p40, $u0);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 2368)), $mul.ref(2056, 1));
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.6, $p32);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i33, 1);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 2368)), $mul.ref(2056, 1));
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p35, $i34);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.6, $p20);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p21, .str.73, .str.299);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bdc_udc_pullup: ref;

axiom bdc_udc_pullup == $sub.ref(0, 539828);

procedure bdc_udc_pullup($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.9, $M.6, $CurrAddr, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.8, assertsPassed;



implementation bdc_udc_pullup($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1032} {:cexpr "bdc_udc_pullup:arg:is_on"} boogie_si_record_i32($i1);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, .str);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str.294);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.77);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.295);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.4, $p9);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 421);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p9, $i12);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p13, 0);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.5, $p14);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 1034} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p0);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} ldv_spin_lock();
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i1, 0);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 2368)), $mul.ref(2055, 1));
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p27, 1);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.6, $p28);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} $i30 := bdc_readl($p29, 32);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    call {:si_unique_call 1039} {:cexpr "uspc"} boogie_si_record_i32($i30);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 33554432);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 2368)), $mul.ref(1600, 1));
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} spin_unlock_irqrestore($p33, $u0);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb11:
    assume $i32 == 1;
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} bdc_softconn($p3);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} bdc_softdisconn($p3);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 2368)), $mul.ref(2055, 1));
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p26, 0);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.6, $p20);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p2, $p21, .str.295, .str.294, $i1);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bdc_udc_start: ref;

axiom bdc_udc_start == $sub.ref(0, 540860);

procedure bdc_udc_start($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.9, $M.6, $CurrAddr, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.8, assertsPassed;



implementation bdc_udc_start($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p45: ref;
  var $i36: i32;
  var $p46: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, .str);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str.296);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.77);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.73);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.4, $p9);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 373);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p9, $i12);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p13, 0);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.5, $p14);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 1044} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} ldv_spin_lock();
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 2368)), $mul.ref(1584, 1));
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.6, $p22);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} $i37 := bdc_run($p3);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    call {:si_unique_call 1050} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 2368)), $mul.ref(1584, 1));
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p41, $p1);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 2368)), $mul.ref(0, 1)), $mul.ref(144, 1)), $mul.ref(496, 1));
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p45, $p42);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i36 := $i37;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 2368)), $mul.ref(1600, 1));
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} spin_unlock_irqrestore($p46, $u0);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $r := $i36;
    return;

  $bb8:
    assume $i38 == 1;
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.6, $p39);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} dev_err.ref.ref.ref($p40, .str.298, .str.296);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $i36 := $i37;
    goto $bb6;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.6, $p26);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2368)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.6, $p29);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 2368)), $mul.ref(1584, 1));
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.6, $p31);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.6, $p34);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} dev_err.ref.ref.ref.ref($p27, .str.297, $p30, $p35);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 16);
    goto $bb6;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.6, $p20);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p21, .str.73, .str.296);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bdc_udc_stop: ref;

axiom bdc_udc_stop == $sub.ref(0, 541892);

procedure bdc_udc_stop($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.9, $M.6, $CurrAddr, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.8, assertsPassed;



implementation bdc_udc_stop($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p25: ref;
  var $p26: ref;
  var vslice_dummy_var_23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, .str);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, .str.300);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, .str.77);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p6, .str.73);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.4, $p8);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 405);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p8, $i11);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p12, 0);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.5, $p13);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 1054} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} ldv_spin_lock();
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} vslice_dummy_var_23 := bdc_stop($p2);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 2368)), $mul.ref(1584, 1));
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p22, $0.ref);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2368)), $mul.ref(0, 1)), $mul.ref(144, 1)), $mul.ref(496, 1));
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p25, $0.ref);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 2368)), $mul.ref(1600, 1));
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} spin_unlock_irqrestore($p26, $u0);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.6, $p19);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p20, .str.73, .str.300);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bdc_softdisconn: ref;

axiom bdc_softdisconn == $sub.ref(0, 542924);

procedure bdc_softdisconn($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $CurrAddr, $M.6, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.9, $M.8, assertsPassed;



implementation bdc_softdisconn($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i24;
  var $i14: i24;
  var $i15: i24;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} $i4 := bdc_readl($p3, 32);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    call {:si_unique_call 1061} {:cexpr "uspc"} boogie_si_record_i32($i4);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, 128);
    call {:si_unique_call 1062} {:cexpr "uspc"} boogie_si_record_i32($i5);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, $sub.i32(0, 257));
    call {:si_unique_call 1063} {:cexpr "uspc"} boogie_si_record_i32($i6);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, .str);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p8, .str.14);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p9, .str.2);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p10, .str.15);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $i13 := $load.i24($M.4, $p12);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $i14 := $and.i24($i13, $sub.i24(0, 262144));
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $i15 := $or.i24($i14, 158);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, $p12, $i15);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p16, 0);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.5, $p17);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i64($i18);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 1);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 1065} {:cexpr "tmp"} boogie_si_record_i64($i21);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.6, $p25);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} bdc_writel($p26, 32, $i6);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.6, $p23);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p1, $p24, .str.15, .str.14, $i6);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_301:
    assume !assertsPassed;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 543956);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} $p1 := calloc(1, $i0);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1070} __VERIFIER_assume($i4);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 544988);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.28;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 1072} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.28;
    call {:si_unique_call 1073} cmdloc_dummy_var_12 := $memset.i8(cmdloc_dummy_var_11, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.28 := cmdloc_dummy_var_12;
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_platform_driver_init_4: ref;

axiom ldv_platform_driver_init_4 == $sub.ref(0, 546020);

procedure ldv_platform_driver_init_4();
  free requires assertsPassed;
  modifies $M.29, $M.6, $CurrAddr;



implementation ldv_platform_driver_init_4()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} $p0 := ldv_init_zalloc(1472);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $M.29 := $p0;
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 547052);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.32, $M.33, $M.34, $M.35, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.36, $M.37, $M.38, $M.39, $M.29, $M.41, $M.42, $M.40, $M.9, $M.21, $M.19, $M.67, $M.68, $M.69, $M.70, $CurrAddr, $M.28, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.20, $M.8, assertsPassed;



implementation main() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;

  $bb0:
    call {:si_unique_call 1075} $initialize();
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} ldv_initialize();
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $M.30 := 0;
    call {:si_unique_call 1078} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} work_init_1();
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $M.32 := 0;
    call {:si_unique_call 1081} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 1082} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $M.34 := 0;
    call {:si_unique_call 1083} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $M.35 := 0;
    call {:si_unique_call 1084} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $p15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $p25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $p35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61 := main_loop_$bb1($i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $p15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $p25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $p35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i0, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} ldv_stop();
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb54_dummy;

  $bb9:
    assume $i4 == 1;
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $i60 := $M.35;
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb88:
    assume $i61 == 1;
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} ldv_main_exported_2();
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    goto $bb90;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i3 == 1;
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $i58 := $M.34;
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb85:
    assume $i59 == 1;
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} ldv_main_exported_3();
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    goto $bb87;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i2 == 1;
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $i41 := $M.33;
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb55:
    assume $i42 == 1;
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1107} $i43 := __VERIFIER_nondet_int();
    call {:si_unique_call 1108} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i43);
    call {:si_unique_call 1109} {:cexpr "tmp___1"} boogie_si_record_i32($i43);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i43, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i43, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} ldv_stop();
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb60:
    assume $i45 == 1;
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $i51 := $M.33;
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 1);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb73:
    assume $i52 == 1;
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} $i53 := bdc_driver_init();
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $M.39 := $i53;
    call {:si_unique_call 1114} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i53);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $i54 := $M.39;
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i56 := $M.39;
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 0);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb78:
    assume $i57 == 1;
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $M.33 := 2;
    call {:si_unique_call 1116} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 1117} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} ldv_initialize_usb_gadget_ops_2();
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 1119} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} ldv_initialize_usb_ep_ops_3();
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb75:
    assume $i55 == 1;
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $M.33 := 3;
    call {:si_unique_call 1115} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} ldv_check_final_state();
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb58:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i43, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb62;

  $bb63:
    assume $i46 == 1;
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $i47 := $M.33;
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 2);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb65:
    assume $i48 == 1;
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $i49 := $M.32;
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 0);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb67;

  $bb68:
    assume $i50 == 1;
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} bdc_driver_exit();
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $M.33 := 3;
    call {:si_unique_call 1111} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb3:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i5 == 1);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb12:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb11;

  $bb14:
    assume $i6 == 1;
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $i7 := $M.30;
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb16:
    assume $i8 == 1;
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1088} $i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 1089} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i9);
    call {:si_unique_call 1090} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i9, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} ldv_stop();
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb21:
    assume $i11 == 1;
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $i21 := $M.30;
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 1);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i31 := $M.30;
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 2);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb42:
    assume $i32 == 1;
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $i33 := $M.37;
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 1);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb44;

  $bb45:
    assume $i34 == 1;
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $p35 := $M.29;
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} $i36 := bdc_remove($p35);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $M.38 := $i36;
    call {:si_unique_call 1102} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i36);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $i37 := $M.38;
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb47:
    assume $i38 == 1;
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 1103} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $i39 := $M.32;
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32($i39, 1);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $M.32 := $i40;
    call {:si_unique_call 1104} {:cexpr "ref_cnt"} boogie_si_record_i32($i40);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $M.37 := 0;
    call {:si_unique_call 1105} {:cexpr "probed_4"} boogie_si_record_i32(0);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    goto $bb49;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i22 == 1;
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $i23 := $M.37;
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 1);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb35;

  $bb36:
    assume $i24 == 1;
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $p25 := $M.29;
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} $i26 := bdc_remove($p25);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $M.38 := $i26;
    call {:si_unique_call 1097} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i26);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $i27 := $M.38;
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb38:
    assume $i28 == 1;
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 1098} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $i29 := $M.32;
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32($i29, 1);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $M.32 := $i30;
    call {:si_unique_call 1099} {:cexpr "ref_cnt"} boogie_si_record_i32($i30);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $M.37 := 0;
    call {:si_unique_call 1100} {:cexpr "probed_4"} boogie_si_record_i32(0);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i9, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb23;

  $bb24:
    assume $i12 == 1;
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $i13 := $M.30;
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 1);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb26:
    assume $i14 == 1;
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $p15 := $M.29;
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} $i16 := bdc_probe($p15);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $M.36 := $i16;
    call {:si_unique_call 1092} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i16);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $i17 := $M.36;
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i18 == 1;
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 1093} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $i19 := $M.32;
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, 1);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $M.32 := $i20;
    call {:si_unique_call 1094} {:cexpr "ref_cnt"} boogie_si_record_i32($i20);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1095} {:cexpr "probed_4"} boogie_si_record_i32(1);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    goto $bb30;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb54_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1085} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1086} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1087} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 548084);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    return;
}



const work_init_1: ref;

axiom work_init_1 == $sub.ref(0, 549116);

procedure work_init_1();
  free requires assertsPassed;



implementation work_init_1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 550148);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const bdc_driver_exit: ref;

axiom bdc_driver_exit == $sub.ref(0, 551180);

procedure bdc_driver_exit();
  free requires assertsPassed;
  modifies $M.30;



implementation bdc_driver_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} ldv_platform_driver_unregister_30(bdc_driver);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    return;
}



const bdc_driver_init: ref;

axiom bdc_driver_init == $sub.ref(0, 552212);

procedure bdc_driver_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.6, $CurrAddr;



implementation bdc_driver_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} $i0 := ldv___platform_driver_register_29(bdc_driver, __this_module);
    call {:si_unique_call 1131} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_initialize_usb_gadget_ops_2: ref;

axiom ldv_initialize_usb_gadget_ops_2 == $sub.ref(0, 553244);

procedure ldv_initialize_usb_gadget_ops_2();
  free requires assertsPassed;
  modifies $M.40, $M.6, $CurrAddr;



implementation ldv_initialize_usb_gadget_ops_2()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} $p0 := ldv_init_zalloc(1576);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $M.40 := $p0;
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_usb_ep_ops_3: ref;

axiom ldv_initialize_usb_ep_ops_3 == $sub.ref(0, 554276);

procedure ldv_initialize_usb_ep_ops_3();
  free requires assertsPassed;
  modifies $M.41, $M.42, $M.6, $CurrAddr;



implementation ldv_initialize_usb_ep_ops_3()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} $p0 := ldv_init_zalloc(64);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $M.41 := $p0;
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} $p2 := ldv_init_zalloc(88);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $M.42 := $p2;
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_3: ref;

axiom ldv_main_exported_3 == $sub.ref(0, 555308);

procedure ldv_main_exported_3();
  free requires assertsPassed;
  modifies $M.28, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.9, $M.6, $M.34, $M.20, $CurrAddr, $M.8, assertsPassed;



implementation ldv_main_exported_3()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var vslice_dummy_var_24: ref;
  var vslice_dummy_var_25: ref;
  var vslice_dummy_var_26: ref;
  var vslice_dummy_var_27: i32;
  var vslice_dummy_var_28: i32;
  var vslice_dummy_var_29: i32;
  var vslice_dummy_var_30: ref;
  var vslice_dummy_var_31: i32;
  var vslice_dummy_var_32: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} $p3 := ldv_init_zalloc(9);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} vslice_dummy_var_24 := ldv_memset($p5, 0, 4);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} vslice_dummy_var_25 := ldv_memset($p7, 0, 4);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} vslice_dummy_var_26 := ldv_memset($p9, 0, 4);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1142} $i11 := __VERIFIER_nondet_int();
    call {:si_unique_call 1143} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i11);
    call {:si_unique_call 1144} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i11, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i11, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i11, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} ldv_stop();
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $i48 := $M.34;
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 1);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb38:
    assume $i49 == 1;
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $p50 := $M.41;
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $p51 := $M.42;
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} vslice_dummy_var_32 := bdc_gadget_ep_dequeue($p50, $p51);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 1158} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $i44 := $M.34;
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 1);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb35:
    assume $i45 == 1;
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $p46 := $M.41;
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} vslice_dummy_var_31 := bdc_gadget_ep_enable($p46, $p4);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 1156} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i11, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i16 == 1);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i39 := $M.34;
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 1);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb32:
    assume $i40 == 1;
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $p41 := $M.41;
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.28, $p2);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} vslice_dummy_var_30 := bdc_gadget_alloc_request($p41, $i42);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 1154} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $i33 := $M.34;
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 1);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb29:
    assume $i34 == 1;
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $p35 := $M.41;
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $p36 := $M.42;
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.28, $p0);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} vslice_dummy_var_29 := bdc_gadget_ep_queue($p35, $p36, $i37);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 1152} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb2:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i11, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i11, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i18 == 1);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $i28 := $M.34;
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 1);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb26:
    assume $i29 == 1;
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $p30 := $M.41;
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.28, $p1);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} vslice_dummy_var_28 := bdc_gadget_ep_set_halt($p30, $i31);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 1150} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i18 == 1;
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $i24 := $M.34;
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 1);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23:
    assume $i25 == 1;
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $p26 := $M.41;
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $p27 := $M.42;
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} bdc_gadget_free_request($p26, $p27);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 1148} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb13:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i11, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb10;

  $bb17:
    assume $i19 == 1;
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $i20 := $M.34;
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 1);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i21 == 1;
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $p22 := $M.41;
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} vslice_dummy_var_27 := bdc_gadget_ep_disable($p22);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 1146} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_319:
    assume !assertsPassed;
    return;
}



const ldv_main_exported_2: ref;

axiom ldv_main_exported_2 == $sub.ref(0, 556340);

procedure ldv_main_exported_2();
  free requires assertsPassed;
  modifies $M.28, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.9, $M.6, $M.35, $CurrAddr, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.8, assertsPassed;



implementation ldv_main_exported_2()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var vslice_dummy_var_33: ref;
  var vslice_dummy_var_34: ref;
  var vslice_dummy_var_35: i32;
  var vslice_dummy_var_36: i32;
  var vslice_dummy_var_37: i32;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} $p2 := ldv_init_zalloc(192);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} vslice_dummy_var_33 := ldv_memset($p4, 0, 4);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} vslice_dummy_var_34 := ldv_memset($p6, 0, 4);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1165} $i8 := __VERIFIER_nondet_int();
    call {:si_unique_call 1166} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i8);
    call {:si_unique_call 1167} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i8, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i8, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i8, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} ldv_stop();
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $i33 := $M.35;
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 1);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb28:
    assume $i34 == 1;
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $p35 := $M.40;
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} vslice_dummy_var_39 := bdc_udc_wakeup($p35);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 1177} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    goto $bb30;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $i29 := $M.35;
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 1);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb25:
    assume $i30 == 1;
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $p31 := $M.40;
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} vslice_dummy_var_38 := bdc_udc_stop($p31);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 1175} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    goto $bb27;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $i24 := $M.35;
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 1);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb22:
    assume $i25 == 1;
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $p26 := $M.40;
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.28, $p1);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} vslice_dummy_var_37 := bdc_udc_set_selfpowered($p26, $i27);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 1173} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb2:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i8, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i13 == 1);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $i20 := $M.35;
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 1);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb19:
    assume $i21 == 1;
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $p22 := $M.40;
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} vslice_dummy_var_36 := bdc_udc_start($p22, $p3);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 1171} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i8, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb13:
    assume $i14 == 1;
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $i15 := $M.35;
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 1);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i16 == 1;
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $p17 := $M.40;
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.28, $p0);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} vslice_dummy_var_35 := bdc_udc_pullup($p17, $i18);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 1169} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_334:
    assume !assertsPassed;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 557372);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    return;
}



const ldv___platform_driver_register_29: ref;

axiom ldv___platform_driver_register_29 == $sub.ref(0, 558404);

procedure ldv___platform_driver_register_29($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.29, $M.6, $CurrAddr;



implementation ldv___platform_driver_register_29($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} $i2 := __platform_driver_register($p0, $p1);
    call {:si_unique_call 1180} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 1181} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} ldv_platform_driver_init_4();
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __platform_driver_register: ref;

axiom __platform_driver_register == $sub.ref(0, 559436);

procedure __platform_driver_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __platform_driver_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1183} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1184} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_platform_driver_unregister_30: ref;

axiom ldv_platform_driver_unregister_30 == $sub.ref(0, 560468);

procedure ldv_platform_driver_unregister_30($p0: ref);
  free requires assertsPassed;
  modifies $M.30;



implementation ldv_platform_driver_unregister_30($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} platform_driver_unregister($p0);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $M.30 := 0;
    call {:si_unique_call 1186} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    return;
}



const platform_driver_unregister: ref;

axiom platform_driver_unregister == $sub.ref(0, 561500);

procedure platform_driver_unregister($p0: ref);
  free requires assertsPassed;



implementation platform_driver_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 562532);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1187} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 1} true;
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 563564);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 564596);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 565628);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_346:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 566660);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 567692);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 568724);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 569756);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 570788);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 571820);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 572852);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 573884);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 574916);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 575948);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1188} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1189} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1190} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1191} __VERIFIER_assume($i4);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 576980);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 578012);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 579044);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 580076);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 581108);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 582140);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 583172);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 584204);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 585236);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 586268);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 587300);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 588332);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 589364);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 590396);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 591428);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 592460);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 593492);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 594524);

procedure __VERIFIER_nondet_bool() returns ($r: i1);



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 595556);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 596588);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1192} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1193} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 597620);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 598652);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1194} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1195} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 599684);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 600716);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 601748);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1196} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1197} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1198} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1199} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} $p6 := malloc($i5);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_13 := $M.6;
    call {:si_unique_call 1201} cmdloc_dummy_var_14 := $memset.i8(cmdloc_dummy_var_13, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_14;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 602780);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 603812);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.37, $M.29, $M.32, $M.30, $M.33, $M.34, $M.35, $M.36, $M.38, $M.39, $M.41, $M.42, $M.40, $M.9, $M.6, $M.21, $M.19, $M.67, $M.68, $M.69, $M.70;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1202} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.37 := 0;
    call {:si_unique_call 1203} {:cexpr "probed_4"} boogie_si_record_i32(0);
    $M.29 := $0.ref;
    $M.32 := 0;
    call {:si_unique_call 1204} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.30 := 0;
    call {:si_unique_call 1205} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    call {:si_unique_call 1206} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.33 := 0;
    call {:si_unique_call 1207} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.34 := 0;
    call {:si_unique_call 1208} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.35 := 0;
    call {:si_unique_call 1209} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.36 := 0;
    call {:si_unique_call 1210} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.38 := 0;
    call {:si_unique_call 1211} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.39 := 0;
    call {:si_unique_call 1212} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.41 := $0.ref;
    $M.42 := $0.ref;
    call {:si_unique_call 1213} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    call {:si_unique_call 1214} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    call {:si_unique_call 1215} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    call {:si_unique_call 1216} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    $M.40 := $0.ref;
    $M.9 := 0;
    call {:si_unique_call 1217} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.6 := $store.i8($M.6, bdc_gadget_ep0_desc, 7);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(bdc_gadget_ep0_desc, $mul.ref(0, 10)), $mul.ref(1, 1)), 5);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(bdc_gadget_ep0_desc, $mul.ref(0, 10)), $mul.ref(2, 1)), 0);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(bdc_gadget_ep0_desc, $mul.ref(0, 10)), $mul.ref(3, 1)), 0);
    $M.6 := $store.i16($M.6, $add.ref($add.ref(bdc_gadget_ep0_desc, $mul.ref(0, 10)), $mul.ref(4, 1)), 512);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(bdc_gadget_ep0_desc, $mul.ref(0, 10)), $mul.ref(6, 1)), 0);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(bdc_gadget_ep0_desc, $mul.ref(0, 10)), $mul.ref(7, 1)), 0);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(bdc_gadget_ep0_desc, $mul.ref(0, 10)), $mul.ref(8, 1)), 0);
    $M.6 := $store.ref($M.6, bdc_gadget_ops, $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(bdc_gadget_ops, $mul.ref(0, 80)), $mul.ref(8, 1)), bdc_udc_wakeup);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(bdc_gadget_ops, $mul.ref(0, 80)), $mul.ref(16, 1)), bdc_udc_set_selfpowered);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(bdc_gadget_ops, $mul.ref(0, 80)), $mul.ref(24, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(bdc_gadget_ops, $mul.ref(0, 80)), $mul.ref(32, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(bdc_gadget_ops, $mul.ref(0, 80)), $mul.ref(40, 1)), bdc_udc_pullup);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(bdc_gadget_ops, $mul.ref(0, 80)), $mul.ref(48, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(bdc_gadget_ops, $mul.ref(0, 80)), $mul.ref(56, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(bdc_gadget_ops, $mul.ref(0, 80)), $mul.ref(64, 1)), bdc_udc_start);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(bdc_gadget_ops, $mul.ref(0, 80)), $mul.ref(72, 1)), bdc_udc_stop);
    $M.21 := $store.ref($M.21, conn_speed_str, .str.278);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(conn_speed_str, $mul.ref(0, 40)), $mul.ref(1, 8)), .str.279);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(conn_speed_str, $mul.ref(0, 40)), $mul.ref(2, 8)), .str.280);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(conn_speed_str, $mul.ref(0, 40)), $mul.ref(3, 8)), .str.281);
    $M.21 := $store.ref($M.21, $add.ref($add.ref(conn_speed_str, $mul.ref(0, 40)), $mul.ref(4, 8)), .str.282);
    $M.6 := $store.ref($M.6, bdc_gadget_ep_ops, bdc_gadget_ep_enable);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(bdc_gadget_ep_ops, $mul.ref(0, 80)), $mul.ref(8, 1)), bdc_gadget_ep_disable);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(bdc_gadget_ep_ops, $mul.ref(0, 80)), $mul.ref(16, 1)), bdc_gadget_alloc_request);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(bdc_gadget_ep_ops, $mul.ref(0, 80)), $mul.ref(24, 1)), bdc_gadget_free_request);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(bdc_gadget_ep_ops, $mul.ref(0, 80)), $mul.ref(32, 1)), bdc_gadget_ep_queue);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(bdc_gadget_ep_ops, $mul.ref(0, 80)), $mul.ref(40, 1)), bdc_gadget_ep_dequeue);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(bdc_gadget_ep_ops, $mul.ref(0, 80)), $mul.ref(48, 1)), bdc_gadget_ep_set_halt);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(bdc_gadget_ep_ops, $mul.ref(0, 80)), $mul.ref(56, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(bdc_gadget_ep_ops, $mul.ref(0, 80)), $mul.ref(64, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(bdc_gadget_ep_ops, $mul.ref(0, 80)), $mul.ref(72, 1)), $0.ref);
    $M.19 := $store.ref($M.19, ep0_state_string, .str.158);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(ep0_state_string, $mul.ref(0, 48)), $mul.ref(1, 8)), .str.159);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(ep0_state_string, $mul.ref(0, 48)), $mul.ref(2, 8)), .str.160);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(ep0_state_string, $mul.ref(0, 48)), $mul.ref(3, 8)), .str.161);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(ep0_state_string, $mul.ref(0, 48)), $mul.ref(4, 8)), .str.162);
    $M.19 := $store.ref($M.19, $add.ref($add.ref(ep0_state_string, $mul.ref(0, 48)), $mul.ref(5, 8)), .str.163);
    $M.6 := $store.i8($M.6, .str.84, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.84, $mul.ref(0, 9)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.84, $mul.ref(0, 9)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.84, $mul.ref(0, 9)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.84, $mul.ref(0, 9)), $mul.ref(4, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.84, $mul.ref(0, 9)), $mul.ref(5, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.84, $mul.ref(0, 9)), $mul.ref(6, 1)), 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.84, $mul.ref(0, 9)), $mul.ref(7, 1)), 51);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.84, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.6 := $store.i8($M.6, .str.129, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.129, $mul.ref(0, 11)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.129, $mul.ref(0, 11)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.129, $mul.ref(0, 11)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.129, $mul.ref(0, 11)), $mul.ref(4, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.129, $mul.ref(0, 11)), $mul.ref(5, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.129, $mul.ref(0, 11)), $mul.ref(6, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.129, $mul.ref(0, 11)), $mul.ref(7, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.129, $mul.ref(0, 11)), $mul.ref(8, 1)), 118);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.129, $mul.ref(0, 11)), $mul.ref(9, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.129, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.6 := $store.i8($M.6, .str.128, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.128, $mul.ref(0, 12)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.128, $mul.ref(0, 12)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.128, $mul.ref(0, 12)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.128, $mul.ref(0, 12)), $mul.ref(4, 1)), 104);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.128, $mul.ref(0, 12)), $mul.ref(5, 1)), 119);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.128, $mul.ref(0, 12)), $mul.ref(6, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.128, $mul.ref(0, 12)), $mul.ref(7, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.128, $mul.ref(0, 12)), $mul.ref(8, 1)), 120);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.128, $mul.ref(0, 12)), $mul.ref(9, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.128, $mul.ref(0, 12)), $mul.ref(10, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.128, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.6 := $store.i8($M.6, .str.127, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.127, $mul.ref(0, 13)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.127, $mul.ref(0, 13)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.127, $mul.ref(0, 13)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.127, $mul.ref(0, 13)), $mul.ref(4, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.127, $mul.ref(0, 13)), $mul.ref(5, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.127, $mul.ref(0, 13)), $mul.ref(6, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.127, $mul.ref(0, 13)), $mul.ref(7, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.127, $mul.ref(0, 13)), $mul.ref(8, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.127, $mul.ref(0, 13)), $mul.ref(9, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.127, $mul.ref(0, 13)), $mul.ref(10, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.127, $mul.ref(0, 13)), $mul.ref(11, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.127, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.6 := $store.i8($M.6, .str.91, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.91, $mul.ref(0, 13)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.91, $mul.ref(0, 13)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.91, $mul.ref(0, 13)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.91, $mul.ref(0, 13)), $mul.ref(4, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.91, $mul.ref(0, 13)), $mul.ref(5, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.91, $mul.ref(0, 13)), $mul.ref(6, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.91, $mul.ref(0, 13)), $mul.ref(7, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.91, $mul.ref(0, 13)), $mul.ref(8, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.91, $mul.ref(0, 13)), $mul.ref(9, 1)), 120);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.91, $mul.ref(0, 13)), $mul.ref(10, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.91, $mul.ref(0, 13)), $mul.ref(11, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.91, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.6 := $store.i8($M.6, .str.52, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.52, $mul.ref(0, 12)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.52, $mul.ref(0, 12)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.52, $mul.ref(0, 12)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.52, $mul.ref(0, 12)), $mul.ref(4, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.52, $mul.ref(0, 12)), $mul.ref(5, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.52, $mul.ref(0, 12)), $mul.ref(6, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.52, $mul.ref(0, 12)), $mul.ref(7, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.52, $mul.ref(0, 12)), $mul.ref(8, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.52, $mul.ref(0, 12)), $mul.ref(9, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.52, $mul.ref(0, 12)), $mul.ref(10, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.52, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.6 := $store.i8($M.6, .str.148, 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.148, $mul.ref(0, 16)), $mul.ref(1, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.148, $mul.ref(0, 16)), $mul.ref(2, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.148, $mul.ref(0, 16)), $mul.ref(3, 1)), 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.148, $mul.ref(0, 16)), $mul.ref(4, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.148, $mul.ref(0, 16)), $mul.ref(5, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.148, $mul.ref(0, 16)), $mul.ref(6, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.148, $mul.ref(0, 16)), $mul.ref(7, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.148, $mul.ref(0, 16)), $mul.ref(8, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.148, $mul.ref(0, 16)), $mul.ref(9, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.148, $mul.ref(0, 16)), $mul.ref(10, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.148, $mul.ref(0, 16)), $mul.ref(11, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.148, $mul.ref(0, 16)), $mul.ref(12, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.148, $mul.ref(0, 16)), $mul.ref(13, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.148, $mul.ref(0, 16)), $mul.ref(14, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.148, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.6 := $store.i8($M.6, .str.45, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 15)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 15)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 15)), $mul.ref(4, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 15)), $mul.ref(5, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 15)), $mul.ref(6, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 15)), $mul.ref(7, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 15)), $mul.ref(8, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 15)), $mul.ref(9, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 15)), $mul.ref(10, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 15)), $mul.ref(11, 1)), 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 15)), $mul.ref(12, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 15)), $mul.ref(13, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.45, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.6 := $store.i8($M.6, .str.18, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(4, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(5, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(6, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(7, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(8, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(9, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(10, 1)), 103);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(11, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(12, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(13, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.6 := $store.i8($M.6, .str.130, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 15)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 15)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 15)), $mul.ref(4, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 15)), $mul.ref(5, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 15)), $mul.ref(6, 1)), 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 15)), $mul.ref(7, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 15)), $mul.ref(8, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 15)), $mul.ref(9, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 15)), $mul.ref(10, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 15)), $mul.ref(11, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 15)), $mul.ref(12, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 15)), $mul.ref(13, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.130, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.6 := $store.i8($M.6, .str.140, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.140, $mul.ref(0, 14)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.140, $mul.ref(0, 14)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.140, $mul.ref(0, 14)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.140, $mul.ref(0, 14)), $mul.ref(4, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.140, $mul.ref(0, 14)), $mul.ref(5, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.140, $mul.ref(0, 14)), $mul.ref(6, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.140, $mul.ref(0, 14)), $mul.ref(7, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.140, $mul.ref(0, 14)), $mul.ref(8, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.140, $mul.ref(0, 14)), $mul.ref(9, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.140, $mul.ref(0, 14)), $mul.ref(10, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.140, $mul.ref(0, 14)), $mul.ref(11, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.140, $mul.ref(0, 14)), $mul.ref(12, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.140, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.6 := $store.i8($M.6, .str.146, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.146, $mul.ref(0, 17)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.146, $mul.ref(0, 17)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.146, $mul.ref(0, 17)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.146, $mul.ref(0, 17)), $mul.ref(4, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.146, $mul.ref(0, 17)), $mul.ref(5, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.146, $mul.ref(0, 17)), $mul.ref(6, 1)), 113);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.146, $mul.ref(0, 17)), $mul.ref(7, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.146, $mul.ref(0, 17)), $mul.ref(8, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.146, $mul.ref(0, 17)), $mul.ref(9, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.146, $mul.ref(0, 17)), $mul.ref(10, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.146, $mul.ref(0, 17)), $mul.ref(11, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.146, $mul.ref(0, 17)), $mul.ref(12, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.146, $mul.ref(0, 17)), $mul.ref(13, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.146, $mul.ref(0, 17)), $mul.ref(14, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.146, $mul.ref(0, 17)), $mul.ref(15, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.146, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.6 := $store.i8($M.6, .str.41, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 12)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 12)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 12)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 12)), $mul.ref(4, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 12)), $mul.ref(5, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 12)), $mul.ref(6, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 12)), $mul.ref(7, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 12)), $mul.ref(8, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 12)), $mul.ref(9, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 12)), $mul.ref(10, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.41, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.6 := $store.i8($M.6, .str.100, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.100, $mul.ref(0, 10)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.100, $mul.ref(0, 10)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.100, $mul.ref(0, 10)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.100, $mul.ref(0, 10)), $mul.ref(4, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.100, $mul.ref(0, 10)), $mul.ref(5, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.100, $mul.ref(0, 10)), $mul.ref(6, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.100, $mul.ref(0, 10)), $mul.ref(7, 1)), 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.100, $mul.ref(0, 10)), $mul.ref(8, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.100, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.6 := $store.i8($M.6, .str.83, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.83, $mul.ref(0, 13)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.83, $mul.ref(0, 13)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.83, $mul.ref(0, 13)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.83, $mul.ref(0, 13)), $mul.ref(4, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.83, $mul.ref(0, 13)), $mul.ref(5, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.83, $mul.ref(0, 13)), $mul.ref(6, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.83, $mul.ref(0, 13)), $mul.ref(7, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.83, $mul.ref(0, 13)), $mul.ref(8, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.83, $mul.ref(0, 13)), $mul.ref(9, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.83, $mul.ref(0, 13)), $mul.ref(10, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.83, $mul.ref(0, 13)), $mul.ref(11, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.83, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.6 := $store.i8($M.6, .str.292, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.292, $mul.ref(0, 20)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.292, $mul.ref(0, 20)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.292, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.292, $mul.ref(0, 20)), $mul.ref(4, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.292, $mul.ref(0, 20)), $mul.ref(5, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.292, $mul.ref(0, 20)), $mul.ref(6, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.292, $mul.ref(0, 20)), $mul.ref(7, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.292, $mul.ref(0, 20)), $mul.ref(8, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.292, $mul.ref(0, 20)), $mul.ref(9, 1)), 119);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.292, $mul.ref(0, 20)), $mul.ref(10, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.292, $mul.ref(0, 20)), $mul.ref(11, 1)), 107);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.292, $mul.ref(0, 20)), $mul.ref(12, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.292, $mul.ref(0, 20)), $mul.ref(13, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.292, $mul.ref(0, 20)), $mul.ref(14, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.292, $mul.ref(0, 20)), $mul.ref(15, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.292, $mul.ref(0, 20)), $mul.ref(16, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.292, $mul.ref(0, 20)), $mul.ref(17, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.292, $mul.ref(0, 20)), $mul.ref(18, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.292, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.6 := $store.i8($M.6, .str.31, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(4, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(5, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(6, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(7, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(8, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(9, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(10, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(11, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(12, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(13, 1)), 119);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(14, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(15, 1)), 107);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(16, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(17, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(18, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(19, 1)), 104);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.31, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.6 := $store.i8($M.6, .str.49, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.49, $mul.ref(0, 14)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.49, $mul.ref(0, 14)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.49, $mul.ref(0, 14)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.49, $mul.ref(0, 14)), $mul.ref(4, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.49, $mul.ref(0, 14)), $mul.ref(5, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.49, $mul.ref(0, 14)), $mul.ref(6, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.49, $mul.ref(0, 14)), $mul.ref(7, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.49, $mul.ref(0, 14)), $mul.ref(8, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.49, $mul.ref(0, 14)), $mul.ref(9, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.49, $mul.ref(0, 14)), $mul.ref(10, 1)), 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.49, $mul.ref(0, 14)), $mul.ref(11, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.49, $mul.ref(0, 14)), $mul.ref(12, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.49, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.6 := $store.i8($M.6, .str.21, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.21, $mul.ref(0, 14)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.21, $mul.ref(0, 14)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.21, $mul.ref(0, 14)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.21, $mul.ref(0, 14)), $mul.ref(4, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.21, $mul.ref(0, 14)), $mul.ref(5, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.21, $mul.ref(0, 14)), $mul.ref(6, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.21, $mul.ref(0, 14)), $mul.ref(7, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.21, $mul.ref(0, 14)), $mul.ref(8, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.21, $mul.ref(0, 14)), $mul.ref(9, 1)), 103);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.21, $mul.ref(0, 14)), $mul.ref(10, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.21, $mul.ref(0, 14)), $mul.ref(11, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.21, $mul.ref(0, 14)), $mul.ref(12, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.21, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.6 := $store.i8($M.6, .str.144, 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(1, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(2, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(3, 1)), 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(4, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(5, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(6, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(7, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(8, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(9, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(10, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(11, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(12, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(13, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(14, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(15, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(16, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.144, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.6 := $store.i8($M.6, .str.155, 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.155, $mul.ref(0, 17)), $mul.ref(1, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.155, $mul.ref(0, 17)), $mul.ref(2, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.155, $mul.ref(0, 17)), $mul.ref(3, 1)), 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.155, $mul.ref(0, 17)), $mul.ref(4, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.155, $mul.ref(0, 17)), $mul.ref(5, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.155, $mul.ref(0, 17)), $mul.ref(6, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.155, $mul.ref(0, 17)), $mul.ref(7, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.155, $mul.ref(0, 17)), $mul.ref(8, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.155, $mul.ref(0, 17)), $mul.ref(9, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.155, $mul.ref(0, 17)), $mul.ref(10, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.155, $mul.ref(0, 17)), $mul.ref(11, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.155, $mul.ref(0, 17)), $mul.ref(12, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.155, $mul.ref(0, 17)), $mul.ref(13, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.155, $mul.ref(0, 17)), $mul.ref(14, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.155, $mul.ref(0, 17)), $mul.ref(15, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.155, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.6 := $store.i8($M.6, .str.72, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.72, $mul.ref(0, 12)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.72, $mul.ref(0, 12)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.72, $mul.ref(0, 12)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.72, $mul.ref(0, 12)), $mul.ref(4, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.72, $mul.ref(0, 12)), $mul.ref(5, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.72, $mul.ref(0, 12)), $mul.ref(6, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.72, $mul.ref(0, 12)), $mul.ref(7, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.72, $mul.ref(0, 12)), $mul.ref(8, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.72, $mul.ref(0, 12)), $mul.ref(9, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.72, $mul.ref(0, 12)), $mul.ref(10, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.72, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.6 := $store.i8($M.6, .str.234, 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.234, $mul.ref(0, 8)), $mul.ref(1, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.234, $mul.ref(0, 8)), $mul.ref(2, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.234, $mul.ref(0, 8)), $mul.ref(3, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.234, $mul.ref(0, 8)), $mul.ref(4, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.234, $mul.ref(0, 8)), $mul.ref(5, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.234, $mul.ref(0, 8)), $mul.ref(6, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.234, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.67 := $store.i8($M.67, .str.236, 101);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.236, $mul.ref(0, 5)), $mul.ref(1, 1)), 112);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.236, $mul.ref(0, 5)), $mul.ref(2, 1)), 37);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.236, $mul.ref(0, 5)), $mul.ref(3, 1)), 100);
    $M.67 := $store.i8($M.67, $add.ref($add.ref(.str.236, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.68 := $store.i8($M.68, .str.238, 105);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.238, $mul.ref(0, 3)), $mul.ref(1, 1)), 110);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.238, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.68 := $store.i8($M.68, .str.239, 111);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.239, $mul.ref(0, 4)), $mul.ref(1, 1)), 117);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.239, $mul.ref(0, 4)), $mul.ref(2, 1)), 116);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(.str.239, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.69 := $store.i8($M.69, .str.237, 101);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(.str.237, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(.str.237, $mul.ref(0, 7)), $mul.ref(2, 1)), 37);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(.str.237, $mul.ref(0, 7)), $mul.ref(3, 1)), 100);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(.str.237, $mul.ref(0, 7)), $mul.ref(4, 1)), 37);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(.str.237, $mul.ref(0, 7)), $mul.ref(5, 1)), 115);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(.str.237, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.6 := $store.i8($M.6, .str.284, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.284, $mul.ref(0, 18)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.284, $mul.ref(0, 18)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.284, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.284, $mul.ref(0, 18)), $mul.ref(4, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.284, $mul.ref(0, 18)), $mul.ref(5, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.284, $mul.ref(0, 18)), $mul.ref(6, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.284, $mul.ref(0, 18)), $mul.ref(7, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.284, $mul.ref(0, 18)), $mul.ref(8, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.284, $mul.ref(0, 18)), $mul.ref(9, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.284, $mul.ref(0, 18)), $mul.ref(10, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.284, $mul.ref(0, 18)), $mul.ref(11, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.284, $mul.ref(0, 18)), $mul.ref(12, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.284, $mul.ref(0, 18)), $mul.ref(13, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.284, $mul.ref(0, 18)), $mul.ref(14, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.284, $mul.ref(0, 18)), $mul.ref(15, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.284, $mul.ref(0, 18)), $mul.ref(16, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.284, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.6 := $store.i8($M.6, .str.16, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.16, $mul.ref(0, 11)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.16, $mul.ref(0, 11)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.16, $mul.ref(0, 11)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.16, $mul.ref(0, 11)), $mul.ref(4, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.16, $mul.ref(0, 11)), $mul.ref(5, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.16, $mul.ref(0, 11)), $mul.ref(6, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.16, $mul.ref(0, 11)), $mul.ref(7, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.16, $mul.ref(0, 11)), $mul.ref(8, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.16, $mul.ref(0, 11)), $mul.ref(9, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.16, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.6 := $store.i8($M.6, .str.8, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.8, $mul.ref(0, 8)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.8, $mul.ref(0, 8)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.8, $mul.ref(0, 8)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.8, $mul.ref(0, 8)), $mul.ref(4, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.8, $mul.ref(0, 8)), $mul.ref(5, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.8, $mul.ref(0, 8)), $mul.ref(6, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.8, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.6 := $store.i8($M.6, .str.92, 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.92, $mul.ref(0, 9)), $mul.ref(1, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.92, $mul.ref(0, 9)), $mul.ref(2, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.92, $mul.ref(0, 9)), $mul.ref(3, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.92, $mul.ref(0, 9)), $mul.ref(4, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.92, $mul.ref(0, 9)), $mul.ref(5, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.92, $mul.ref(0, 9)), $mul.ref(6, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.92, $mul.ref(0, 9)), $mul.ref(7, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.92, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.6 := $store.i8($M.6, .str.95, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.95, $mul.ref(0, 13)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.95, $mul.ref(0, 13)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.95, $mul.ref(0, 13)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.95, $mul.ref(0, 13)), $mul.ref(4, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.95, $mul.ref(0, 13)), $mul.ref(5, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.95, $mul.ref(0, 13)), $mul.ref(6, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.95, $mul.ref(0, 13)), $mul.ref(7, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.95, $mul.ref(0, 13)), $mul.ref(8, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.95, $mul.ref(0, 13)), $mul.ref(9, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.95, $mul.ref(0, 13)), $mul.ref(10, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.95, $mul.ref(0, 13)), $mul.ref(11, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.95, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.6 := $store.i8($M.6, .str.59, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.59, $mul.ref(0, 25)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.59, $mul.ref(0, 25)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.59, $mul.ref(0, 25)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.59, $mul.ref(0, 25)), $mul.ref(4, 1)), 120);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.59, $mul.ref(0, 25)), $mul.ref(5, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.59, $mul.ref(0, 25)), $mul.ref(6, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.59, $mul.ref(0, 25)), $mul.ref(7, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.59, $mul.ref(0, 25)), $mul.ref(8, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.59, $mul.ref(0, 25)), $mul.ref(9, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.59, $mul.ref(0, 25)), $mul.ref(10, 1)), 48);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.59, $mul.ref(0, 25)), $mul.ref(11, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.59, $mul.ref(0, 25)), $mul.ref(12, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.59, $mul.ref(0, 25)), $mul.ref(13, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.59, $mul.ref(0, 25)), $mul.ref(14, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.59, $mul.ref(0, 25)), $mul.ref(15, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.59, $mul.ref(0, 25)), $mul.ref(16, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.59, $mul.ref(0, 25)), $mul.ref(17, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.59, $mul.ref(0, 25)), $mul.ref(18, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.59, $mul.ref(0, 25)), $mul.ref(19, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.59, $mul.ref(0, 25)), $mul.ref(20, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.59, $mul.ref(0, 25)), $mul.ref(21, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.59, $mul.ref(0, 25)), $mul.ref(22, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.59, $mul.ref(0, 25)), $mul.ref(23, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.59, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.6 := $store.i8($M.6, .str.216, 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.216, $mul.ref(0, 10)), $mul.ref(1, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.216, $mul.ref(0, 10)), $mul.ref(2, 1)), 48);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.216, $mul.ref(0, 10)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.216, $mul.ref(0, 10)), $mul.ref(4, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.216, $mul.ref(0, 10)), $mul.ref(5, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.216, $mul.ref(0, 10)), $mul.ref(6, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.216, $mul.ref(0, 10)), $mul.ref(7, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.216, $mul.ref(0, 10)), $mul.ref(8, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.216, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.6 := $store.i8($M.6, .str.207, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.207, $mul.ref(0, 14)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.207, $mul.ref(0, 14)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.207, $mul.ref(0, 14)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.207, $mul.ref(0, 14)), $mul.ref(4, 1)), 113);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.207, $mul.ref(0, 14)), $mul.ref(5, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.207, $mul.ref(0, 14)), $mul.ref(6, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.207, $mul.ref(0, 14)), $mul.ref(7, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.207, $mul.ref(0, 14)), $mul.ref(8, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.207, $mul.ref(0, 14)), $mul.ref(9, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.207, $mul.ref(0, 14)), $mul.ref(10, 1)), 120);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.207, $mul.ref(0, 14)), $mul.ref(11, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.207, $mul.ref(0, 14)), $mul.ref(12, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.207, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.6 := $store.i8($M.6, .str.211, 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.211, $mul.ref(0, 19)), $mul.ref(1, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.211, $mul.ref(0, 19)), $mul.ref(2, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.211, $mul.ref(0, 19)), $mul.ref(3, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.211, $mul.ref(0, 19)), $mul.ref(4, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.211, $mul.ref(0, 19)), $mul.ref(5, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.211, $mul.ref(0, 19)), $mul.ref(6, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.211, $mul.ref(0, 19)), $mul.ref(7, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.211, $mul.ref(0, 19)), $mul.ref(8, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.211, $mul.ref(0, 19)), $mul.ref(9, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.211, $mul.ref(0, 19)), $mul.ref(10, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.211, $mul.ref(0, 19)), $mul.ref(11, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.211, $mul.ref(0, 19)), $mul.ref(12, 1)), 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.211, $mul.ref(0, 19)), $mul.ref(13, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.211, $mul.ref(0, 19)), $mul.ref(14, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.211, $mul.ref(0, 19)), $mul.ref(15, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.211, $mul.ref(0, 19)), $mul.ref(16, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.211, $mul.ref(0, 19)), $mul.ref(17, 1)), 48);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.211, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.6 := $store.i8($M.6, .str.171, 104);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.171, $mul.ref(0, 23)), $mul.ref(1, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.171, $mul.ref(0, 23)), $mul.ref(2, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.171, $mul.ref(0, 23)), $mul.ref(3, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.171, $mul.ref(0, 23)), $mul.ref(4, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.171, $mul.ref(0, 23)), $mul.ref(5, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.171, $mul.ref(0, 23)), $mul.ref(6, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.171, $mul.ref(0, 23)), $mul.ref(7, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.171, $mul.ref(0, 23)), $mul.ref(8, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.171, $mul.ref(0, 23)), $mul.ref(9, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.171, $mul.ref(0, 23)), $mul.ref(10, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.171, $mul.ref(0, 23)), $mul.ref(11, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.171, $mul.ref(0, 23)), $mul.ref(12, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.171, $mul.ref(0, 23)), $mul.ref(13, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.171, $mul.ref(0, 23)), $mul.ref(14, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.171, $mul.ref(0, 23)), $mul.ref(15, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.171, $mul.ref(0, 23)), $mul.ref(16, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.171, $mul.ref(0, 23)), $mul.ref(17, 1)), 113);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.171, $mul.ref(0, 23)), $mul.ref(18, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.171, $mul.ref(0, 23)), $mul.ref(19, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.171, $mul.ref(0, 23)), $mul.ref(20, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.171, $mul.ref(0, 23)), $mul.ref(21, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.171, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.6 := $store.i8($M.6, .str.214, 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.214, $mul.ref(0, 12)), $mul.ref(1, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.214, $mul.ref(0, 12)), $mul.ref(2, 1)), 48);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.214, $mul.ref(0, 12)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.214, $mul.ref(0, 12)), $mul.ref(4, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.214, $mul.ref(0, 12)), $mul.ref(5, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.214, $mul.ref(0, 12)), $mul.ref(6, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.214, $mul.ref(0, 12)), $mul.ref(7, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.214, $mul.ref(0, 12)), $mul.ref(8, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.214, $mul.ref(0, 12)), $mul.ref(9, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.214, $mul.ref(0, 12)), $mul.ref(10, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.214, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.6 := $store.i8($M.6, .str.204, 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.204, $mul.ref(0, 21)), $mul.ref(1, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.204, $mul.ref(0, 21)), $mul.ref(2, 1)), 48);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.204, $mul.ref(0, 21)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.204, $mul.ref(0, 21)), $mul.ref(4, 1)), 113);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.204, $mul.ref(0, 21)), $mul.ref(5, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.204, $mul.ref(0, 21)), $mul.ref(6, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.204, $mul.ref(0, 21)), $mul.ref(7, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.204, $mul.ref(0, 21)), $mul.ref(8, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.204, $mul.ref(0, 21)), $mul.ref(9, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.204, $mul.ref(0, 21)), $mul.ref(10, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.204, $mul.ref(0, 21)), $mul.ref(11, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.204, $mul.ref(0, 21)), $mul.ref(12, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.204, $mul.ref(0, 21)), $mul.ref(13, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.204, $mul.ref(0, 21)), $mul.ref(14, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.204, $mul.ref(0, 21)), $mul.ref(15, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.204, $mul.ref(0, 21)), $mul.ref(16, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.204, $mul.ref(0, 21)), $mul.ref(17, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.204, $mul.ref(0, 21)), $mul.ref(18, 1)), 103);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.204, $mul.ref(0, 21)), $mul.ref(19, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.204, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.6 := $store.i8($M.6, .str.205, 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.205, $mul.ref(0, 10)), $mul.ref(1, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.205, $mul.ref(0, 10)), $mul.ref(2, 1)), 48);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.205, $mul.ref(0, 10)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.205, $mul.ref(0, 10)), $mul.ref(4, 1)), 113);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.205, $mul.ref(0, 10)), $mul.ref(5, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.205, $mul.ref(0, 10)), $mul.ref(6, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.205, $mul.ref(0, 10)), $mul.ref(7, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.205, $mul.ref(0, 10)), $mul.ref(8, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.205, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.6 := $store.i8($M.6, .str.199, 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.199, $mul.ref(0, 18)), $mul.ref(1, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.199, $mul.ref(0, 18)), $mul.ref(2, 1)), 48);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.199, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.199, $mul.ref(0, 18)), $mul.ref(4, 1)), 104);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.199, $mul.ref(0, 18)), $mul.ref(5, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.199, $mul.ref(0, 18)), $mul.ref(6, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.199, $mul.ref(0, 18)), $mul.ref(7, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.199, $mul.ref(0, 18)), $mul.ref(8, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.199, $mul.ref(0, 18)), $mul.ref(9, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.199, $mul.ref(0, 18)), $mul.ref(10, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.199, $mul.ref(0, 18)), $mul.ref(11, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.199, $mul.ref(0, 18)), $mul.ref(12, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.199, $mul.ref(0, 18)), $mul.ref(13, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.199, $mul.ref(0, 18)), $mul.ref(14, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.199, $mul.ref(0, 18)), $mul.ref(15, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.199, $mul.ref(0, 18)), $mul.ref(16, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.199, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.6 := $store.i8($M.6, .str.182, 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.182, $mul.ref(0, 19)), $mul.ref(1, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.182, $mul.ref(0, 19)), $mul.ref(2, 1)), 48);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.182, $mul.ref(0, 19)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.182, $mul.ref(0, 19)), $mul.ref(4, 1)), 104);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.182, $mul.ref(0, 19)), $mul.ref(5, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.182, $mul.ref(0, 19)), $mul.ref(6, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.182, $mul.ref(0, 19)), $mul.ref(7, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.182, $mul.ref(0, 19)), $mul.ref(8, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.182, $mul.ref(0, 19)), $mul.ref(9, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.182, $mul.ref(0, 19)), $mul.ref(10, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.182, $mul.ref(0, 19)), $mul.ref(11, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.182, $mul.ref(0, 19)), $mul.ref(12, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.182, $mul.ref(0, 19)), $mul.ref(13, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.182, $mul.ref(0, 19)), $mul.ref(14, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.182, $mul.ref(0, 19)), $mul.ref(15, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.182, $mul.ref(0, 19)), $mul.ref(16, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.182, $mul.ref(0, 19)), $mul.ref(17, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.182, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.6 := $store.i8($M.6, .str.191, 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.191, $mul.ref(0, 23)), $mul.ref(1, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.191, $mul.ref(0, 23)), $mul.ref(2, 1)), 48);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.191, $mul.ref(0, 23)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.191, $mul.ref(0, 23)), $mul.ref(4, 1)), 104);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.191, $mul.ref(0, 23)), $mul.ref(5, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.191, $mul.ref(0, 23)), $mul.ref(6, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.191, $mul.ref(0, 23)), $mul.ref(7, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.191, $mul.ref(0, 23)), $mul.ref(8, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.191, $mul.ref(0, 23)), $mul.ref(9, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.191, $mul.ref(0, 23)), $mul.ref(10, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.191, $mul.ref(0, 23)), $mul.ref(11, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.191, $mul.ref(0, 23)), $mul.ref(12, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.191, $mul.ref(0, 23)), $mul.ref(13, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.191, $mul.ref(0, 23)), $mul.ref(14, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.191, $mul.ref(0, 23)), $mul.ref(15, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.191, $mul.ref(0, 23)), $mul.ref(16, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.191, $mul.ref(0, 23)), $mul.ref(17, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.191, $mul.ref(0, 23)), $mul.ref(18, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.191, $mul.ref(0, 23)), $mul.ref(19, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.191, $mul.ref(0, 23)), $mul.ref(20, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.191, $mul.ref(0, 23)), $mul.ref(21, 1)), 118);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.191, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.6 := $store.i8($M.6, .str.179, 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(1, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(2, 1)), 48);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(4, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(5, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(6, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(7, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(8, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(9, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(10, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(11, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(12, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(13, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(14, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.179, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.6 := $store.i8($M.6, .str.29, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.29, $mul.ref(0, 19)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.29, $mul.ref(0, 19)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.29, $mul.ref(0, 19)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.29, $mul.ref(0, 19)), $mul.ref(4, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.29, $mul.ref(0, 19)), $mul.ref(5, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.29, $mul.ref(0, 19)), $mul.ref(6, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.29, $mul.ref(0, 19)), $mul.ref(7, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.29, $mul.ref(0, 19)), $mul.ref(8, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.29, $mul.ref(0, 19)), $mul.ref(9, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.29, $mul.ref(0, 19)), $mul.ref(10, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.29, $mul.ref(0, 19)), $mul.ref(11, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.29, $mul.ref(0, 19)), $mul.ref(12, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.29, $mul.ref(0, 19)), $mul.ref(13, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.29, $mul.ref(0, 19)), $mul.ref(14, 1)), 118);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.29, $mul.ref(0, 19)), $mul.ref(15, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.29, $mul.ref(0, 19)), $mul.ref(16, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.29, $mul.ref(0, 19)), $mul.ref(17, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.29, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.6 := $store.i8($M.6, .str.164, 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 12)), $mul.ref(1, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 12)), $mul.ref(2, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 12)), $mul.ref(3, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 12)), $mul.ref(4, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 12)), $mul.ref(5, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 12)), $mul.ref(6, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 12)), $mul.ref(7, 1)), 104);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 12)), $mul.ref(8, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 12)), $mul.ref(9, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 12)), $mul.ref(10, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.164, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.6 := $store.i8($M.6, .str.38, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.38, $mul.ref(0, 19)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.38, $mul.ref(0, 19)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.38, $mul.ref(0, 19)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.38, $mul.ref(0, 19)), $mul.ref(4, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.38, $mul.ref(0, 19)), $mul.ref(5, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.38, $mul.ref(0, 19)), $mul.ref(6, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.38, $mul.ref(0, 19)), $mul.ref(7, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.38, $mul.ref(0, 19)), $mul.ref(8, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.38, $mul.ref(0, 19)), $mul.ref(9, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.38, $mul.ref(0, 19)), $mul.ref(10, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.38, $mul.ref(0, 19)), $mul.ref(11, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.38, $mul.ref(0, 19)), $mul.ref(12, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.38, $mul.ref(0, 19)), $mul.ref(13, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.38, $mul.ref(0, 19)), $mul.ref(14, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.38, $mul.ref(0, 19)), $mul.ref(15, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.38, $mul.ref(0, 19)), $mul.ref(16, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.38, $mul.ref(0, 19)), $mul.ref(17, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.38, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.6 := $store.i8($M.6, .str.36, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.36, $mul.ref(0, 17)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.36, $mul.ref(0, 17)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.36, $mul.ref(0, 17)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.36, $mul.ref(0, 17)), $mul.ref(4, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.36, $mul.ref(0, 17)), $mul.ref(5, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.36, $mul.ref(0, 17)), $mul.ref(6, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.36, $mul.ref(0, 17)), $mul.ref(7, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.36, $mul.ref(0, 17)), $mul.ref(8, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.36, $mul.ref(0, 17)), $mul.ref(9, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.36, $mul.ref(0, 17)), $mul.ref(10, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.36, $mul.ref(0, 17)), $mul.ref(11, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.36, $mul.ref(0, 17)), $mul.ref(12, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.36, $mul.ref(0, 17)), $mul.ref(13, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.36, $mul.ref(0, 17)), $mul.ref(14, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.36, $mul.ref(0, 17)), $mul.ref(15, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.36, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.6 := $store.i8($M.6, .str.56, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.56, $mul.ref(0, 23)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.56, $mul.ref(0, 23)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.56, $mul.ref(0, 23)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.56, $mul.ref(0, 23)), $mul.ref(4, 1)), 120);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.56, $mul.ref(0, 23)), $mul.ref(5, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.56, $mul.ref(0, 23)), $mul.ref(6, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.56, $mul.ref(0, 23)), $mul.ref(7, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.56, $mul.ref(0, 23)), $mul.ref(8, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.56, $mul.ref(0, 23)), $mul.ref(9, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.56, $mul.ref(0, 23)), $mul.ref(10, 1)), 48);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.56, $mul.ref(0, 23)), $mul.ref(11, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.56, $mul.ref(0, 23)), $mul.ref(12, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.56, $mul.ref(0, 23)), $mul.ref(13, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.56, $mul.ref(0, 23)), $mul.ref(14, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.56, $mul.ref(0, 23)), $mul.ref(15, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.56, $mul.ref(0, 23)), $mul.ref(16, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.56, $mul.ref(0, 23)), $mul.ref(17, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.56, $mul.ref(0, 23)), $mul.ref(18, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.56, $mul.ref(0, 23)), $mul.ref(19, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.56, $mul.ref(0, 23)), $mul.ref(20, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.56, $mul.ref(0, 23)), $mul.ref(21, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.56, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.6 := $store.i8($M.6, .str.53, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 23)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 23)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 23)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 23)), $mul.ref(4, 1)), 120);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 23)), $mul.ref(5, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 23)), $mul.ref(6, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 23)), $mul.ref(7, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 23)), $mul.ref(8, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 23)), $mul.ref(9, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 23)), $mul.ref(10, 1)), 48);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 23)), $mul.ref(11, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 23)), $mul.ref(12, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 23)), $mul.ref(13, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 23)), $mul.ref(14, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 23)), $mul.ref(15, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 23)), $mul.ref(16, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 23)), $mul.ref(17, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 23)), $mul.ref(18, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 23)), $mul.ref(19, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 23)), $mul.ref(20, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 23)), $mul.ref(21, 1)), 118);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.53, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.6 := $store.i8($M.6, .str.76, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.76, $mul.ref(0, 12)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.76, $mul.ref(0, 12)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.76, $mul.ref(0, 12)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.76, $mul.ref(0, 12)), $mul.ref(4, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.76, $mul.ref(0, 12)), $mul.ref(5, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.76, $mul.ref(0, 12)), $mul.ref(6, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.76, $mul.ref(0, 12)), $mul.ref(7, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.76, $mul.ref(0, 12)), $mul.ref(8, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.76, $mul.ref(0, 12)), $mul.ref(9, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.76, $mul.ref(0, 12)), $mul.ref(10, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.76, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.6 := $store.i8($M.6, .str.273, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.273, $mul.ref(0, 19)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.273, $mul.ref(0, 19)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.273, $mul.ref(0, 19)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.273, $mul.ref(0, 19)), $mul.ref(4, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.273, $mul.ref(0, 19)), $mul.ref(5, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.273, $mul.ref(0, 19)), $mul.ref(6, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.273, $mul.ref(0, 19)), $mul.ref(7, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.273, $mul.ref(0, 19)), $mul.ref(8, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.273, $mul.ref(0, 19)), $mul.ref(9, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.273, $mul.ref(0, 19)), $mul.ref(10, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.273, $mul.ref(0, 19)), $mul.ref(11, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.273, $mul.ref(0, 19)), $mul.ref(12, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.273, $mul.ref(0, 19)), $mul.ref(13, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.273, $mul.ref(0, 19)), $mul.ref(14, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.273, $mul.ref(0, 19)), $mul.ref(15, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.273, $mul.ref(0, 19)), $mul.ref(16, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.273, $mul.ref(0, 19)), $mul.ref(17, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.273, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.6 := $store.i8($M.6, .str.267, 104);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.267, $mul.ref(0, 25)), $mul.ref(1, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.267, $mul.ref(0, 25)), $mul.ref(2, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.267, $mul.ref(0, 25)), $mul.ref(3, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.267, $mul.ref(0, 25)), $mul.ref(4, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.267, $mul.ref(0, 25)), $mul.ref(5, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.267, $mul.ref(0, 25)), $mul.ref(6, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.267, $mul.ref(0, 25)), $mul.ref(7, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.267, $mul.ref(0, 25)), $mul.ref(8, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.267, $mul.ref(0, 25)), $mul.ref(9, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.267, $mul.ref(0, 25)), $mul.ref(10, 1)), 107);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.267, $mul.ref(0, 25)), $mul.ref(11, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.267, $mul.ref(0, 25)), $mul.ref(12, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.267, $mul.ref(0, 25)), $mul.ref(13, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.267, $mul.ref(0, 25)), $mul.ref(14, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.267, $mul.ref(0, 25)), $mul.ref(15, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.267, $mul.ref(0, 25)), $mul.ref(16, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.267, $mul.ref(0, 25)), $mul.ref(17, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.267, $mul.ref(0, 25)), $mul.ref(18, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.267, $mul.ref(0, 25)), $mul.ref(19, 1)), 104);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.267, $mul.ref(0, 25)), $mul.ref(20, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.267, $mul.ref(0, 25)), $mul.ref(21, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.267, $mul.ref(0, 25)), $mul.ref(22, 1)), 103);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.267, $mul.ref(0, 25)), $mul.ref(23, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.267, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.6 := $store.i8($M.6, .str.266, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.266, $mul.ref(0, 22)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.266, $mul.ref(0, 22)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.266, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.266, $mul.ref(0, 22)), $mul.ref(4, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.266, $mul.ref(0, 22)), $mul.ref(5, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.266, $mul.ref(0, 22)), $mul.ref(6, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.266, $mul.ref(0, 22)), $mul.ref(7, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.266, $mul.ref(0, 22)), $mul.ref(8, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.266, $mul.ref(0, 22)), $mul.ref(9, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.266, $mul.ref(0, 22)), $mul.ref(10, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.266, $mul.ref(0, 22)), $mul.ref(11, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.266, $mul.ref(0, 22)), $mul.ref(12, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.266, $mul.ref(0, 22)), $mul.ref(13, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.266, $mul.ref(0, 22)), $mul.ref(14, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.266, $mul.ref(0, 22)), $mul.ref(15, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.266, $mul.ref(0, 22)), $mul.ref(16, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.266, $mul.ref(0, 22)), $mul.ref(17, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.266, $mul.ref(0, 22)), $mul.ref(18, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.266, $mul.ref(0, 22)), $mul.ref(19, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.266, $mul.ref(0, 22)), $mul.ref(20, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.266, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.6 := $store.i8($M.6, .str.12, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 13)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 13)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 13)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 13)), $mul.ref(4, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 13)), $mul.ref(5, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 13)), $mul.ref(6, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 13)), $mul.ref(7, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 13)), $mul.ref(8, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 13)), $mul.ref(9, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 13)), $mul.ref(10, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 13)), $mul.ref(11, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.12, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.6 := $store.i8($M.6, .str.64, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.64, $mul.ref(0, 11)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.64, $mul.ref(0, 11)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.64, $mul.ref(0, 11)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.64, $mul.ref(0, 11)), $mul.ref(4, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.64, $mul.ref(0, 11)), $mul.ref(5, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.64, $mul.ref(0, 11)), $mul.ref(6, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.64, $mul.ref(0, 11)), $mul.ref(7, 1)), 120);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.64, $mul.ref(0, 11)), $mul.ref(8, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.64, $mul.ref(0, 11)), $mul.ref(9, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.64, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.6 := $store.i8($M.6, .str.232, 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.232, $mul.ref(0, 14)), $mul.ref(1, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.232, $mul.ref(0, 14)), $mul.ref(2, 1)), 48);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.232, $mul.ref(0, 14)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.232, $mul.ref(0, 14)), $mul.ref(4, 1)), 113);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.232, $mul.ref(0, 14)), $mul.ref(5, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.232, $mul.ref(0, 14)), $mul.ref(6, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.232, $mul.ref(0, 14)), $mul.ref(7, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.232, $mul.ref(0, 14)), $mul.ref(8, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.232, $mul.ref(0, 14)), $mul.ref(9, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.232, $mul.ref(0, 14)), $mul.ref(10, 1)), 122);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.232, $mul.ref(0, 14)), $mul.ref(11, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.232, $mul.ref(0, 14)), $mul.ref(12, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.232, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.6 := $store.i8($M.6, .str.227, 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.227, $mul.ref(0, 17)), $mul.ref(1, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.227, $mul.ref(0, 17)), $mul.ref(2, 1)), 48);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.227, $mul.ref(0, 17)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.227, $mul.ref(0, 17)), $mul.ref(4, 1)), 120);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.227, $mul.ref(0, 17)), $mul.ref(5, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.227, $mul.ref(0, 17)), $mul.ref(6, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.227, $mul.ref(0, 17)), $mul.ref(7, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.227, $mul.ref(0, 17)), $mul.ref(8, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.227, $mul.ref(0, 17)), $mul.ref(9, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.227, $mul.ref(0, 17)), $mul.ref(10, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.227, $mul.ref(0, 17)), $mul.ref(11, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.227, $mul.ref(0, 17)), $mul.ref(12, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.227, $mul.ref(0, 17)), $mul.ref(13, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.227, $mul.ref(0, 17)), $mul.ref(14, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.227, $mul.ref(0, 17)), $mul.ref(15, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.227, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.6 := $store.i8($M.6, .str.231, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.231, $mul.ref(0, 18)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.231, $mul.ref(0, 18)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.231, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.231, $mul.ref(0, 18)), $mul.ref(4, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.231, $mul.ref(0, 18)), $mul.ref(5, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.231, $mul.ref(0, 18)), $mul.ref(6, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.231, $mul.ref(0, 18)), $mul.ref(7, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.231, $mul.ref(0, 18)), $mul.ref(8, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.231, $mul.ref(0, 18)), $mul.ref(9, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.231, $mul.ref(0, 18)), $mul.ref(10, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.231, $mul.ref(0, 18)), $mul.ref(11, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.231, $mul.ref(0, 18)), $mul.ref(12, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.231, $mul.ref(0, 18)), $mul.ref(13, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.231, $mul.ref(0, 18)), $mul.ref(14, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.231, $mul.ref(0, 18)), $mul.ref(15, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.231, $mul.ref(0, 18)), $mul.ref(16, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.231, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.6 := $store.i8($M.6, .str.217, 104);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.217, $mul.ref(0, 23)), $mul.ref(1, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.217, $mul.ref(0, 23)), $mul.ref(2, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.217, $mul.ref(0, 23)), $mul.ref(3, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.217, $mul.ref(0, 23)), $mul.ref(4, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.217, $mul.ref(0, 23)), $mul.ref(5, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.217, $mul.ref(0, 23)), $mul.ref(6, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.217, $mul.ref(0, 23)), $mul.ref(7, 1)), 120);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.217, $mul.ref(0, 23)), $mul.ref(8, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.217, $mul.ref(0, 23)), $mul.ref(9, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.217, $mul.ref(0, 23)), $mul.ref(10, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.217, $mul.ref(0, 23)), $mul.ref(11, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.217, $mul.ref(0, 23)), $mul.ref(12, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.217, $mul.ref(0, 23)), $mul.ref(13, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.217, $mul.ref(0, 23)), $mul.ref(14, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.217, $mul.ref(0, 23)), $mul.ref(15, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.217, $mul.ref(0, 23)), $mul.ref(16, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.217, $mul.ref(0, 23)), $mul.ref(17, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.217, $mul.ref(0, 23)), $mul.ref(18, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.217, $mul.ref(0, 23)), $mul.ref(19, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.217, $mul.ref(0, 23)), $mul.ref(20, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.217, $mul.ref(0, 23)), $mul.ref(21, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.217, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.6 := $store.i8($M.6, .str.223, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.223, $mul.ref(0, 14)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.223, $mul.ref(0, 14)), $mul.ref(2, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.223, $mul.ref(0, 14)), $mul.ref(3, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.223, $mul.ref(0, 14)), $mul.ref(4, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.223, $mul.ref(0, 14)), $mul.ref(5, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.223, $mul.ref(0, 14)), $mul.ref(6, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.223, $mul.ref(0, 14)), $mul.ref(7, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.223, $mul.ref(0, 14)), $mul.ref(8, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.223, $mul.ref(0, 14)), $mul.ref(9, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.223, $mul.ref(0, 14)), $mul.ref(10, 1)), 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.223, $mul.ref(0, 14)), $mul.ref(11, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.223, $mul.ref(0, 14)), $mul.ref(12, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.223, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.6 := $store.i8($M.6, .str.5, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.5, $mul.ref(0, 10)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.5, $mul.ref(0, 10)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.5, $mul.ref(0, 10)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.5, $mul.ref(0, 10)), $mul.ref(4, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.5, $mul.ref(0, 10)), $mul.ref(5, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.5, $mul.ref(0, 10)), $mul.ref(6, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.5, $mul.ref(0, 10)), $mul.ref(7, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.5, $mul.ref(0, 10)), $mul.ref(8, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.5, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.6 := $store.i8($M.6, .str.1, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.1, $mul.ref(0, 9)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.1, $mul.ref(0, 9)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.1, $mul.ref(0, 9)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.1, $mul.ref(0, 9)), $mul.ref(4, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.1, $mul.ref(0, 9)), $mul.ref(5, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.1, $mul.ref(0, 9)), $mul.ref(6, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.1, $mul.ref(0, 9)), $mul.ref(7, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.1, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.6 := $store.i8($M.6, .str.290, 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.290, $mul.ref(0, 19)), $mul.ref(1, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.290, $mul.ref(0, 19)), $mul.ref(2, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.290, $mul.ref(0, 19)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.290, $mul.ref(0, 19)), $mul.ref(4, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.290, $mul.ref(0, 19)), $mul.ref(5, 1)), 113);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.290, $mul.ref(0, 19)), $mul.ref(6, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.290, $mul.ref(0, 19)), $mul.ref(7, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.290, $mul.ref(0, 19)), $mul.ref(8, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.290, $mul.ref(0, 19)), $mul.ref(9, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.290, $mul.ref(0, 19)), $mul.ref(10, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.290, $mul.ref(0, 19)), $mul.ref(11, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.290, $mul.ref(0, 19)), $mul.ref(12, 1)), 120);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.290, $mul.ref(0, 19)), $mul.ref(13, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.290, $mul.ref(0, 19)), $mul.ref(14, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.290, $mul.ref(0, 19)), $mul.ref(15, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.290, $mul.ref(0, 19)), $mul.ref(16, 1)), 118);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.290, $mul.ref(0, 19)), $mul.ref(17, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.290, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.6 := $store.i8($M.6, .str.110, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.110, $mul.ref(0, 12)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.110, $mul.ref(0, 12)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.110, $mul.ref(0, 12)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.110, $mul.ref(0, 12)), $mul.ref(4, 1)), 104);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.110, $mul.ref(0, 12)), $mul.ref(5, 1)), 119);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.110, $mul.ref(0, 12)), $mul.ref(6, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.110, $mul.ref(0, 12)), $mul.ref(7, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.110, $mul.ref(0, 12)), $mul.ref(8, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.110, $mul.ref(0, 12)), $mul.ref(9, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.110, $mul.ref(0, 12)), $mul.ref(10, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.110, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.6 := $store.i8($M.6, .str.114, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.114, $mul.ref(0, 14)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.114, $mul.ref(0, 14)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.114, $mul.ref(0, 14)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.114, $mul.ref(0, 14)), $mul.ref(4, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.114, $mul.ref(0, 14)), $mul.ref(5, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.114, $mul.ref(0, 14)), $mul.ref(6, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.114, $mul.ref(0, 14)), $mul.ref(7, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.114, $mul.ref(0, 14)), $mul.ref(8, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.114, $mul.ref(0, 14)), $mul.ref(9, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.114, $mul.ref(0, 14)), $mul.ref(10, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.114, $mul.ref(0, 14)), $mul.ref(11, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.114, $mul.ref(0, 14)), $mul.ref(12, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.114, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.6 := $store.i8($M.6, .str.125, 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.125, $mul.ref(0, 10)), $mul.ref(1, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.125, $mul.ref(0, 10)), $mul.ref(2, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.125, $mul.ref(0, 10)), $mul.ref(3, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.125, $mul.ref(0, 10)), $mul.ref(4, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.125, $mul.ref(0, 10)), $mul.ref(5, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.125, $mul.ref(0, 10)), $mul.ref(6, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.125, $mul.ref(0, 10)), $mul.ref(7, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.125, $mul.ref(0, 10)), $mul.ref(8, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.125, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.6 := $store.i8($M.6, .str.121, 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.121, $mul.ref(0, 17)), $mul.ref(1, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.121, $mul.ref(0, 17)), $mul.ref(2, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.121, $mul.ref(0, 17)), $mul.ref(3, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.121, $mul.ref(0, 17)), $mul.ref(4, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.121, $mul.ref(0, 17)), $mul.ref(5, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.121, $mul.ref(0, 17)), $mul.ref(6, 1)), 104);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.121, $mul.ref(0, 17)), $mul.ref(7, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.121, $mul.ref(0, 17)), $mul.ref(8, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.121, $mul.ref(0, 17)), $mul.ref(9, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.121, $mul.ref(0, 17)), $mul.ref(10, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.121, $mul.ref(0, 17)), $mul.ref(11, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.121, $mul.ref(0, 17)), $mul.ref(12, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.121, $mul.ref(0, 17)), $mul.ref(13, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.121, $mul.ref(0, 17)), $mul.ref(14, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.121, $mul.ref(0, 17)), $mul.ref(15, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.121, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.6 := $store.i8($M.6, .str.158, 87);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.158, $mul.ref(0, 15)), $mul.ref(1, 1)), 65);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.158, $mul.ref(0, 15)), $mul.ref(2, 1)), 73);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.158, $mul.ref(0, 15)), $mul.ref(3, 1)), 84);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.158, $mul.ref(0, 15)), $mul.ref(4, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.158, $mul.ref(0, 15)), $mul.ref(5, 1)), 70);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.158, $mul.ref(0, 15)), $mul.ref(6, 1)), 79);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.158, $mul.ref(0, 15)), $mul.ref(7, 1)), 82);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.158, $mul.ref(0, 15)), $mul.ref(8, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.158, $mul.ref(0, 15)), $mul.ref(9, 1)), 83);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.158, $mul.ref(0, 15)), $mul.ref(10, 1)), 69);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.158, $mul.ref(0, 15)), $mul.ref(11, 1)), 84);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.158, $mul.ref(0, 15)), $mul.ref(12, 1)), 85);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.158, $mul.ref(0, 15)), $mul.ref(13, 1)), 80);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.158, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.6 := $store.i8($M.6, .str.159, 87);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.159, $mul.ref(0, 20)), $mul.ref(1, 1)), 65);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.159, $mul.ref(0, 20)), $mul.ref(2, 1)), 73);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.159, $mul.ref(0, 20)), $mul.ref(3, 1)), 84);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.159, $mul.ref(0, 20)), $mul.ref(4, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.159, $mul.ref(0, 20)), $mul.ref(5, 1)), 70);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.159, $mul.ref(0, 20)), $mul.ref(6, 1)), 79);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.159, $mul.ref(0, 20)), $mul.ref(7, 1)), 82);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.159, $mul.ref(0, 20)), $mul.ref(8, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.159, $mul.ref(0, 20)), $mul.ref(9, 1)), 68);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.159, $mul.ref(0, 20)), $mul.ref(10, 1)), 65);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.159, $mul.ref(0, 20)), $mul.ref(11, 1)), 84);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.159, $mul.ref(0, 20)), $mul.ref(12, 1)), 65);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.159, $mul.ref(0, 20)), $mul.ref(13, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.159, $mul.ref(0, 20)), $mul.ref(14, 1)), 83);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.159, $mul.ref(0, 20)), $mul.ref(15, 1)), 84);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.159, $mul.ref(0, 20)), $mul.ref(16, 1)), 65);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.159, $mul.ref(0, 20)), $mul.ref(17, 1)), 82);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.159, $mul.ref(0, 20)), $mul.ref(18, 1)), 84);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.159, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.6 := $store.i8($M.6, .str.160, 87);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.160, $mul.ref(0, 19)), $mul.ref(1, 1)), 65);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.160, $mul.ref(0, 19)), $mul.ref(2, 1)), 73);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.160, $mul.ref(0, 19)), $mul.ref(3, 1)), 84);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.160, $mul.ref(0, 19)), $mul.ref(4, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.160, $mul.ref(0, 19)), $mul.ref(5, 1)), 70);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.160, $mul.ref(0, 19)), $mul.ref(6, 1)), 79);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.160, $mul.ref(0, 19)), $mul.ref(7, 1)), 82);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.160, $mul.ref(0, 19)), $mul.ref(8, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.160, $mul.ref(0, 19)), $mul.ref(9, 1)), 68);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.160, $mul.ref(0, 19)), $mul.ref(10, 1)), 65);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.160, $mul.ref(0, 19)), $mul.ref(11, 1)), 84);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.160, $mul.ref(0, 19)), $mul.ref(12, 1)), 65);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.160, $mul.ref(0, 19)), $mul.ref(13, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.160, $mul.ref(0, 19)), $mul.ref(14, 1)), 88);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.160, $mul.ref(0, 19)), $mul.ref(15, 1)), 77);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.160, $mul.ref(0, 19)), $mul.ref(16, 1)), 73);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.160, $mul.ref(0, 19)), $mul.ref(17, 1)), 84);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.160, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.6 := $store.i8($M.6, .str.161, 87);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 22)), $mul.ref(1, 1)), 65);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 22)), $mul.ref(2, 1)), 73);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 22)), $mul.ref(3, 1)), 84);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 22)), $mul.ref(4, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 22)), $mul.ref(5, 1)), 70);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 22)), $mul.ref(6, 1)), 79);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 22)), $mul.ref(7, 1)), 82);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 22)), $mul.ref(8, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 22)), $mul.ref(9, 1)), 83);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 22)), $mul.ref(10, 1)), 84);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 22)), $mul.ref(11, 1)), 65);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 22)), $mul.ref(12, 1)), 84);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 22)), $mul.ref(13, 1)), 85);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 22)), $mul.ref(14, 1)), 83);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 22)), $mul.ref(15, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 22)), $mul.ref(16, 1)), 83);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 22)), $mul.ref(17, 1)), 84);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 22)), $mul.ref(18, 1)), 65);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 22)), $mul.ref(19, 1)), 82);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 22)), $mul.ref(20, 1)), 84);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.161, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.6 := $store.i8($M.6, .str.162, 87);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 21)), $mul.ref(1, 1)), 65);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 21)), $mul.ref(2, 1)), 73);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 21)), $mul.ref(3, 1)), 84);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 21)), $mul.ref(4, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 21)), $mul.ref(5, 1)), 70);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 21)), $mul.ref(6, 1)), 79);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 21)), $mul.ref(7, 1)), 82);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 21)), $mul.ref(8, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 21)), $mul.ref(9, 1)), 83);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 21)), $mul.ref(10, 1)), 84);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 21)), $mul.ref(11, 1)), 65);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 21)), $mul.ref(12, 1)), 84);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 21)), $mul.ref(13, 1)), 85);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 21)), $mul.ref(14, 1)), 83);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 21)), $mul.ref(15, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 21)), $mul.ref(16, 1)), 88);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 21)), $mul.ref(17, 1)), 77);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 21)), $mul.ref(18, 1)), 73);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 21)), $mul.ref(19, 1)), 84);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.162, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.6 := $store.i8($M.6, .str.163, 83);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.163, $mul.ref(0, 15)), $mul.ref(1, 1)), 84);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.163, $mul.ref(0, 15)), $mul.ref(2, 1)), 65);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.163, $mul.ref(0, 15)), $mul.ref(3, 1)), 84);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.163, $mul.ref(0, 15)), $mul.ref(4, 1)), 85);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.163, $mul.ref(0, 15)), $mul.ref(5, 1)), 83);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.163, $mul.ref(0, 15)), $mul.ref(6, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.163, $mul.ref(0, 15)), $mul.ref(7, 1)), 80);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.163, $mul.ref(0, 15)), $mul.ref(8, 1)), 69);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.163, $mul.ref(0, 15)), $mul.ref(9, 1)), 78);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.163, $mul.ref(0, 15)), $mul.ref(10, 1)), 68);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.163, $mul.ref(0, 15)), $mul.ref(11, 1)), 73);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.163, $mul.ref(0, 15)), $mul.ref(12, 1)), 78);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.163, $mul.ref(0, 15)), $mul.ref(13, 1)), 71);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.163, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.6 := $store.i8($M.6, .str.246, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.246, $mul.ref(0, 23)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.246, $mul.ref(0, 23)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.246, $mul.ref(0, 23)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.246, $mul.ref(0, 23)), $mul.ref(4, 1)), 103);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.246, $mul.ref(0, 23)), $mul.ref(5, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.246, $mul.ref(0, 23)), $mul.ref(6, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.246, $mul.ref(0, 23)), $mul.ref(7, 1)), 103);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.246, $mul.ref(0, 23)), $mul.ref(8, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.246, $mul.ref(0, 23)), $mul.ref(9, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.246, $mul.ref(0, 23)), $mul.ref(10, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.246, $mul.ref(0, 23)), $mul.ref(11, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.246, $mul.ref(0, 23)), $mul.ref(12, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.246, $mul.ref(0, 23)), $mul.ref(13, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.246, $mul.ref(0, 23)), $mul.ref(14, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.246, $mul.ref(0, 23)), $mul.ref(15, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.246, $mul.ref(0, 23)), $mul.ref(16, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.246, $mul.ref(0, 23)), $mul.ref(17, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.246, $mul.ref(0, 23)), $mul.ref(18, 1)), 104);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.246, $mul.ref(0, 23)), $mul.ref(19, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.246, $mul.ref(0, 23)), $mul.ref(20, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.246, $mul.ref(0, 23)), $mul.ref(21, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.246, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.6 := $store.i8($M.6, .str.259, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.259, $mul.ref(0, 22)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.259, $mul.ref(0, 22)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.259, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.259, $mul.ref(0, 22)), $mul.ref(4, 1)), 103);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.259, $mul.ref(0, 22)), $mul.ref(5, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.259, $mul.ref(0, 22)), $mul.ref(6, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.259, $mul.ref(0, 22)), $mul.ref(7, 1)), 103);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.259, $mul.ref(0, 22)), $mul.ref(8, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.259, $mul.ref(0, 22)), $mul.ref(9, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.259, $mul.ref(0, 22)), $mul.ref(10, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.259, $mul.ref(0, 22)), $mul.ref(11, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.259, $mul.ref(0, 22)), $mul.ref(12, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.259, $mul.ref(0, 22)), $mul.ref(13, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.259, $mul.ref(0, 22)), $mul.ref(14, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.259, $mul.ref(0, 22)), $mul.ref(15, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.259, $mul.ref(0, 22)), $mul.ref(16, 1)), 113);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.259, $mul.ref(0, 22)), $mul.ref(17, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.259, $mul.ref(0, 22)), $mul.ref(18, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.259, $mul.ref(0, 22)), $mul.ref(19, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.259, $mul.ref(0, 22)), $mul.ref(20, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.259, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.6 := $store.i8($M.6, .str.261, 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.261, $mul.ref(0, 11)), $mul.ref(1, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.261, $mul.ref(0, 11)), $mul.ref(2, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.261, $mul.ref(0, 11)), $mul.ref(3, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.261, $mul.ref(0, 11)), $mul.ref(4, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.261, $mul.ref(0, 11)), $mul.ref(5, 1)), 113);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.261, $mul.ref(0, 11)), $mul.ref(6, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.261, $mul.ref(0, 11)), $mul.ref(7, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.261, $mul.ref(0, 11)), $mul.ref(8, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.261, $mul.ref(0, 11)), $mul.ref(9, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.261, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.6 := $store.i8($M.6, .str.26, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.26, $mul.ref(0, 11)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.26, $mul.ref(0, 11)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.26, $mul.ref(0, 11)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.26, $mul.ref(0, 11)), $mul.ref(4, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.26, $mul.ref(0, 11)), $mul.ref(5, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.26, $mul.ref(0, 11)), $mul.ref(6, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.26, $mul.ref(0, 11)), $mul.ref(7, 1)), 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.26, $mul.ref(0, 11)), $mul.ref(8, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.26, $mul.ref(0, 11)), $mul.ref(9, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.26, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.6 := $store.i8($M.6, .str.247, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.247, $mul.ref(0, 20)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.247, $mul.ref(0, 20)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.247, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.247, $mul.ref(0, 20)), $mul.ref(4, 1)), 103);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.247, $mul.ref(0, 20)), $mul.ref(5, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.247, $mul.ref(0, 20)), $mul.ref(6, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.247, $mul.ref(0, 20)), $mul.ref(7, 1)), 103);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.247, $mul.ref(0, 20)), $mul.ref(8, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.247, $mul.ref(0, 20)), $mul.ref(9, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.247, $mul.ref(0, 20)), $mul.ref(10, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.247, $mul.ref(0, 20)), $mul.ref(11, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.247, $mul.ref(0, 20)), $mul.ref(12, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.247, $mul.ref(0, 20)), $mul.ref(13, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.247, $mul.ref(0, 20)), $mul.ref(14, 1)), 113);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.247, $mul.ref(0, 20)), $mul.ref(15, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.247, $mul.ref(0, 20)), $mul.ref(16, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.247, $mul.ref(0, 20)), $mul.ref(17, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.247, $mul.ref(0, 20)), $mul.ref(18, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.247, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.6 := $store.i8($M.6, .str.253, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.253, $mul.ref(0, 25)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.253, $mul.ref(0, 25)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.253, $mul.ref(0, 25)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.253, $mul.ref(0, 25)), $mul.ref(4, 1)), 103);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.253, $mul.ref(0, 25)), $mul.ref(5, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.253, $mul.ref(0, 25)), $mul.ref(6, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.253, $mul.ref(0, 25)), $mul.ref(7, 1)), 103);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.253, $mul.ref(0, 25)), $mul.ref(8, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.253, $mul.ref(0, 25)), $mul.ref(9, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.253, $mul.ref(0, 25)), $mul.ref(10, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.253, $mul.ref(0, 25)), $mul.ref(11, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.253, $mul.ref(0, 25)), $mul.ref(12, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.253, $mul.ref(0, 25)), $mul.ref(13, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.253, $mul.ref(0, 25)), $mul.ref(14, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.253, $mul.ref(0, 25)), $mul.ref(15, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.253, $mul.ref(0, 25)), $mul.ref(16, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.253, $mul.ref(0, 25)), $mul.ref(17, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.253, $mul.ref(0, 25)), $mul.ref(18, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.253, $mul.ref(0, 25)), $mul.ref(19, 1)), 113);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.253, $mul.ref(0, 25)), $mul.ref(20, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.253, $mul.ref(0, 25)), $mul.ref(21, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.253, $mul.ref(0, 25)), $mul.ref(22, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.253, $mul.ref(0, 25)), $mul.ref(23, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.253, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.6 := $store.i8($M.6, .str.241, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.241, $mul.ref(0, 22)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.241, $mul.ref(0, 22)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.241, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.241, $mul.ref(0, 22)), $mul.ref(4, 1)), 103);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.241, $mul.ref(0, 22)), $mul.ref(5, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.241, $mul.ref(0, 22)), $mul.ref(6, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.241, $mul.ref(0, 22)), $mul.ref(7, 1)), 103);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.241, $mul.ref(0, 22)), $mul.ref(8, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.241, $mul.ref(0, 22)), $mul.ref(9, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.241, $mul.ref(0, 22)), $mul.ref(10, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.241, $mul.ref(0, 22)), $mul.ref(11, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.241, $mul.ref(0, 22)), $mul.ref(12, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.241, $mul.ref(0, 22)), $mul.ref(13, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.241, $mul.ref(0, 22)), $mul.ref(14, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.241, $mul.ref(0, 22)), $mul.ref(15, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.241, $mul.ref(0, 22)), $mul.ref(16, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.241, $mul.ref(0, 22)), $mul.ref(17, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.241, $mul.ref(0, 22)), $mul.ref(18, 1)), 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.241, $mul.ref(0, 22)), $mul.ref(19, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.241, $mul.ref(0, 22)), $mul.ref(20, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.241, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.6 := $store.i8($M.6, .str.255, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.255, $mul.ref(0, 21)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.255, $mul.ref(0, 21)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.255, $mul.ref(0, 21)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.255, $mul.ref(0, 21)), $mul.ref(4, 1)), 103);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.255, $mul.ref(0, 21)), $mul.ref(5, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.255, $mul.ref(0, 21)), $mul.ref(6, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.255, $mul.ref(0, 21)), $mul.ref(7, 1)), 103);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.255, $mul.ref(0, 21)), $mul.ref(8, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.255, $mul.ref(0, 21)), $mul.ref(9, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.255, $mul.ref(0, 21)), $mul.ref(10, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.255, $mul.ref(0, 21)), $mul.ref(11, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.255, $mul.ref(0, 21)), $mul.ref(12, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.255, $mul.ref(0, 21)), $mul.ref(13, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.255, $mul.ref(0, 21)), $mul.ref(14, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.255, $mul.ref(0, 21)), $mul.ref(15, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.255, $mul.ref(0, 21)), $mul.ref(16, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.255, $mul.ref(0, 21)), $mul.ref(17, 1)), 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.255, $mul.ref(0, 21)), $mul.ref(18, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.255, $mul.ref(0, 21)), $mul.ref(19, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.255, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.6 := $store.i8($M.6, .str.300, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.300, $mul.ref(0, 13)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.300, $mul.ref(0, 13)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.300, $mul.ref(0, 13)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.300, $mul.ref(0, 13)), $mul.ref(4, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.300, $mul.ref(0, 13)), $mul.ref(5, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.300, $mul.ref(0, 13)), $mul.ref(6, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.300, $mul.ref(0, 13)), $mul.ref(7, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.300, $mul.ref(0, 13)), $mul.ref(8, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.300, $mul.ref(0, 13)), $mul.ref(9, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.300, $mul.ref(0, 13)), $mul.ref(10, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.300, $mul.ref(0, 13)), $mul.ref(11, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.300, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.6 := $store.i8($M.6, .str.296, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.296, $mul.ref(0, 14)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.296, $mul.ref(0, 14)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.296, $mul.ref(0, 14)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.296, $mul.ref(0, 14)), $mul.ref(4, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.296, $mul.ref(0, 14)), $mul.ref(5, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.296, $mul.ref(0, 14)), $mul.ref(6, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.296, $mul.ref(0, 14)), $mul.ref(7, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.296, $mul.ref(0, 14)), $mul.ref(8, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.296, $mul.ref(0, 14)), $mul.ref(9, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.296, $mul.ref(0, 14)), $mul.ref(10, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.296, $mul.ref(0, 14)), $mul.ref(11, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.296, $mul.ref(0, 14)), $mul.ref(12, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.296, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.6 := $store.i8($M.6, .str.294, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.294, $mul.ref(0, 15)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.294, $mul.ref(0, 15)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.294, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.294, $mul.ref(0, 15)), $mul.ref(4, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.294, $mul.ref(0, 15)), $mul.ref(5, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.294, $mul.ref(0, 15)), $mul.ref(6, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.294, $mul.ref(0, 15)), $mul.ref(7, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.294, $mul.ref(0, 15)), $mul.ref(8, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.294, $mul.ref(0, 15)), $mul.ref(9, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.294, $mul.ref(0, 15)), $mul.ref(10, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.294, $mul.ref(0, 15)), $mul.ref(11, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.294, $mul.ref(0, 15)), $mul.ref(12, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.294, $mul.ref(0, 15)), $mul.ref(13, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.294, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.6 := $store.i8($M.6, .str.14, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.14, $mul.ref(0, 16)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.14, $mul.ref(0, 16)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.14, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.14, $mul.ref(0, 16)), $mul.ref(4, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.14, $mul.ref(0, 16)), $mul.ref(5, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.14, $mul.ref(0, 16)), $mul.ref(6, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.14, $mul.ref(0, 16)), $mul.ref(7, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.14, $mul.ref(0, 16)), $mul.ref(8, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.14, $mul.ref(0, 16)), $mul.ref(9, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.14, $mul.ref(0, 16)), $mul.ref(10, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.14, $mul.ref(0, 16)), $mul.ref(11, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.14, $mul.ref(0, 16)), $mul.ref(12, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.14, $mul.ref(0, 16)), $mul.ref(13, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.14, $mul.ref(0, 16)), $mul.ref(14, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.14, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.6 := $store.i8($M.6, .str.299, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.299, $mul.ref(0, 24)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.299, $mul.ref(0, 24)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.299, $mul.ref(0, 24)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.299, $mul.ref(0, 24)), $mul.ref(4, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.299, $mul.ref(0, 24)), $mul.ref(5, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.299, $mul.ref(0, 24)), $mul.ref(6, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.299, $mul.ref(0, 24)), $mul.ref(7, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.299, $mul.ref(0, 24)), $mul.ref(8, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.299, $mul.ref(0, 24)), $mul.ref(9, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.299, $mul.ref(0, 24)), $mul.ref(10, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.299, $mul.ref(0, 24)), $mul.ref(11, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.299, $mul.ref(0, 24)), $mul.ref(12, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.299, $mul.ref(0, 24)), $mul.ref(13, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.299, $mul.ref(0, 24)), $mul.ref(14, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.299, $mul.ref(0, 24)), $mul.ref(15, 1)), 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.299, $mul.ref(0, 24)), $mul.ref(16, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.299, $mul.ref(0, 24)), $mul.ref(17, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.299, $mul.ref(0, 24)), $mul.ref(18, 1)), 119);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.299, $mul.ref(0, 24)), $mul.ref(19, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.299, $mul.ref(0, 24)), $mul.ref(20, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.299, $mul.ref(0, 24)), $mul.ref(21, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.299, $mul.ref(0, 24)), $mul.ref(22, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.299, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.6 := $store.i8($M.6, .str.301, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.301, $mul.ref(0, 15)), $mul.ref(1, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.301, $mul.ref(0, 15)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.301, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.301, $mul.ref(0, 15)), $mul.ref(4, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.301, $mul.ref(0, 15)), $mul.ref(5, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.301, $mul.ref(0, 15)), $mul.ref(6, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.301, $mul.ref(0, 15)), $mul.ref(7, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.301, $mul.ref(0, 15)), $mul.ref(8, 1)), 119);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.301, $mul.ref(0, 15)), $mul.ref(9, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.301, $mul.ref(0, 15)), $mul.ref(10, 1)), 107);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.301, $mul.ref(0, 15)), $mul.ref(11, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.301, $mul.ref(0, 15)), $mul.ref(12, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.301, $mul.ref(0, 15)), $mul.ref(13, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.301, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.70 := $store.i8($M.70, .str.34, 98);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.34, $mul.ref(0, 18)), $mul.ref(1, 1)), 100);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.34, $mul.ref(0, 18)), $mul.ref(2, 1)), 99);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.34, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.34, $mul.ref(0, 18)), $mul.ref(4, 1)), 102);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.34, $mul.ref(0, 18)), $mul.ref(5, 1)), 117);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.34, $mul.ref(0, 18)), $mul.ref(6, 1)), 110);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.34, $mul.ref(0, 18)), $mul.ref(7, 1)), 99);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.34, $mul.ref(0, 18)), $mul.ref(8, 1)), 116);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.34, $mul.ref(0, 18)), $mul.ref(9, 1)), 105);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.34, $mul.ref(0, 18)), $mul.ref(10, 1)), 111);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.34, $mul.ref(0, 18)), $mul.ref(11, 1)), 110);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.34, $mul.ref(0, 18)), $mul.ref(12, 1)), 95);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.34, $mul.ref(0, 18)), $mul.ref(13, 1)), 119);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.34, $mul.ref(0, 18)), $mul.ref(14, 1)), 97);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.34, $mul.ref(0, 18)), $mul.ref(15, 1)), 107);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.34, $mul.ref(0, 18)), $mul.ref(16, 1)), 101);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.34, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    call {:si_unique_call 1218} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 604844);

procedure devirtbounce(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 605876);

procedure devirtbounce.1(funcPtr: ref, arg: i32, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: i32, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 606908);

procedure devirtbounce.2(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.9, $CurrAddr, $M.8, assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i15 := $eq.ref(bdc_udc_stop, $p0);
    assume {:branchcond $i15} true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i15 == 1);
    $i14 := $eq.ref(bdc_udc_wakeup, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i14 == 1);
    $i13 := $eq.ref(bdc_gadget_ep_disable, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i13 == 1);
    $i12 := $eq.ref(bdc_remove, $p0);
    assume true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i12 == 1);
    $i11 := $eq.ref(bdc_probe, $p0);
    assume true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume false;
    return;

  $bb2:
    assume $i11 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1219} $i2 := bdc_probe($p1);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    $r := $i2;
    return;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i12 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1220} $i4 := bdc_remove($p3);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    $r := $i4;
    return;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i13 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1221} $i6 := bdc_gadget_ep_disable($p5);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    $r := $i6;
    return;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i14 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1222} $i8 := bdc_udc_wakeup($p7);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    $r := $i8;
    return;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i15 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1223} $i10 := bdc_udc_stop($p9);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    $r := $i10;
    return;

  SeqInstr_361:
    assume !assertsPassed;
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 607940);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref);



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 608972);

procedure devirtbounce.4(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 610004);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 611036);

procedure devirtbounce.6(funcPtr: ref, arg: ref);



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

const $u1: i32;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.37, $M.29, $M.32, $M.30, $M.33, $M.34, $M.35, $M.36, $M.38, $M.39, $M.41, $M.42, $M.40, $M.9, $M.6, $M.21, $M.19, $M.67, $M.68, $M.69, $M.70, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1224} __SMACK_static_init();
    call {:si_unique_call 1225} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.30, $M.32, $M.33, $M.34, $M.35, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.36, $M.37, $M.38, $M.39, $M.29, $M.41, $M.42, $M.40, $M.9, $M.21, $M.19, $M.67, $M.68, $M.69, $M.70, $CurrAddr, $M.28, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.20, $M.8;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation bdc_ep_disable_loop_$bb7(in_$p0: ref, in_$p29: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i1) returns (out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i1)
{

  entry:
    out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38 := in_$p33, in_$p34, in_$p35, in_$p36, in_$i37, in_$i38;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9:
    assume {:verifier.code 0} true;
    assume out_$i38 == 1;
    goto $bb9_dummy;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i37, 0);
    goto corral_source_split_478;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} out_$i37 := list_empty(in_$p29);
    call {:si_unique_call 88} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_477;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} bdc_req_complete(in_$p0, out_$p36, $sub.i32(0, 108));
    goto corral_source_split_476;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref(out_$p35, $mul.ref($sub.ref(0, 88), 144));
    goto corral_source_split_475;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p34);
    goto corral_source_split_474;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.6, out_$p33);
    goto corral_source_split_473;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_472;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38 := bdc_ep_disable_loop_$bb7(in_$p0, in_$p29, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38);
    return;

  exit:
    return;
}



procedure bdc_ep_disable_loop_$bb7(in_$p0: ref, in_$p29: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i1) returns (out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i1);
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.9;



implementation bdc_free_ep_loop_$bb7(in_$p0: ref, in_$p20: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i35: i1, in_$p37: ref, in_$i38: i32, in_$i39: i32, in_$i40: i1, in_$p42: ref, in_$p43: ref, in_$i31: i8, in_$i44: i32, in_$i45: i32, in_$i46: i8, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i23: i8) returns (out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$i35: i1, out_$p37: ref, out_$i38: i32, out_$i39: i32, out_$i40: i1, out_$p42: ref, out_$p43: ref, out_$i31: i8, out_$i44: i32, out_$i45: i32, out_$i46: i8, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i23: i8)
{

  entry:
    out_$p24, out_$p25, out_$i26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$i35, out_$p37, out_$i38, out_$i39, out_$i40, out_$p42, out_$p43, out_$i31, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i23 := in_$p24, in_$p25, in_$i26, in_$p27, in_$p28, in_$i29, in_$i30, in_$p32, in_$i33, in_$i34, in_$i35, in_$p37, in_$i38, in_$i39, in_$i40, in_$p42, in_$p43, in_$i31, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i23;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_550;

  $bb19:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i23 := out_$i46;
    goto $bb19_dummy;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    out_$i49 := $ult.i32(out_$i47, out_$i48);
    goto corral_source_split_568;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.6, in_$p20);
    goto corral_source_split_567;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i8.i32(out_$i46);
    goto corral_source_split_566;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    out_$i46 := $trunc.i32.i8(out_$i45);
    call {:si_unique_call 97} {:cexpr "epnum"} boogie_si_record_i8(out_$i46);
    goto corral_source_split_565;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i44, 1);
    goto corral_source_split_564;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i8.i32(out_$i31);
    goto corral_source_split_563;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_562;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i23;
    goto $bb11;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i23;
    goto $bb11;

  $bb9:
    assume out_$i30 == 1;
    goto corral_source_split_560;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i64(out_$i29, 0);
    goto corral_source_split_558;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_557;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.6, out_$p27);
    goto corral_source_split_556;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref(out_$p25, $mul.ref(out_$i26, 8));
    goto corral_source_split_555;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i8.i64(out_$i23);
    goto corral_source_split_554;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.6, out_$p24);
    goto corral_source_split_553;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2368)), $mul.ref(1680, 1));
    goto corral_source_split_552;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} kfree(out_$p43);
    goto corral_source_split_588;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(out_$p28);
    goto corral_source_split_587;

  $bb17:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} list_del(out_$p42);
    goto corral_source_split_585;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref($add.ref(out_$p28, $mul.ref(0, 176)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_584;

  $bb16:
    assume out_$i40 == 1;
    goto corral_source_split_583;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(out_$i39, 1);
    goto corral_source_split_581;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i8.i32(out_$i23);
    goto corral_source_split_580;

  $bb14:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} ep_bd_list_free(out_$p28, out_$i38);
    goto corral_source_split_578;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.6, out_$p37);
    goto corral_source_split_577;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref(out_$p28, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(8, 1));
    goto corral_source_split_576;

  $bb13:
    assume out_$i35 == 1;
    goto corral_source_split_575;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i34, 0);
    goto corral_source_split_573;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    out_$i34 := $and.i32(out_$i33, 1);
    goto corral_source_split_572;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.6, out_$p32);
    goto corral_source_split_571;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p28, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_570;

  $bb10:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p24, out_$p25, out_$i26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$i35, out_$p37, out_$i38, out_$i39, out_$i40, out_$p42, out_$p43, out_$i31, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i23 := bdc_free_ep_loop_$bb7(in_$p0, in_$p20, out_$p24, out_$p25, out_$i26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$i35, out_$p37, out_$i38, out_$i39, out_$i40, out_$p42, out_$p43, out_$i31, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i23);
    return;

  exit:
    return;
}



procedure bdc_free_ep_loop_$bb7(in_$p0: ref, in_$p20: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i35: i1, in_$p37: ref, in_$i38: i32, in_$i39: i32, in_$i40: i1, in_$p42: ref, in_$p43: ref, in_$i31: i8, in_$i44: i32, in_$i45: i32, in_$i46: i8, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i23: i8) returns (out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$i35: i1, out_$p37: ref, out_$i38: i32, out_$i39: i32, out_$i40: i1, out_$p42: ref, out_$p43: ref, out_$i31: i8, out_$i44: i32, out_$i45: i32, out_$i46: i8, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i23: i8);
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $CurrAddr;



implementation ep_bd_list_free_loop_$bb14(in_$p0: ref, in_$i1: i32, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p10: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i24, in_$i69: i24, in_$i70: i24, in_$p71: ref, in_$p72: ref, in_$i73: i8, in_$i74: i64, in_$i75: i64, in_$i76: i64, in_$i77: i1, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$i81: i1, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i88: i24, in_$i89: i24, in_$i90: i24, in_$p91: ref, in_$p92: ref, in_$i93: i8, in_$i94: i64, in_$i95: i64, in_$i96: i64, in_$i97: i1, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$i102: i64, in_$i103: i1, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$i110: i24, in_$i111: i24, in_$i112: i24, in_$p113: ref, in_$p114: ref, in_$i115: i8, in_$i116: i64, in_$i117: i64, in_$i118: i64, in_$i119: i1, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$p127: ref, in_$i128: i24, in_$i129: i24, in_$i130: i24, in_$p131: ref, in_$p132: ref, in_$i133: i8, in_$i134: i64, in_$i135: i64, in_$i136: i64, in_$i137: i1, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$i143: i64, in_$p144: ref, in_$p145: ref, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$i150: i64, in_$p151: ref, in_$i152: i32, in_$i153: i1, in_$i56: i32) returns (out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i24, out_$i69: i24, out_$i70: i24, out_$p71: ref, out_$p72: ref, out_$i73: i8, out_$i74: i64, out_$i75: i64, out_$i76: i64, out_$i77: i1, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$i81: i1, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i88: i24, out_$i89: i24, out_$i90: i24, out_$p91: ref, out_$p92: ref, out_$i93: i8, out_$i94: i64, out_$i95: i64, out_$i96: i64, out_$i97: i1, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$i102: i64, out_$i103: i1, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$i110: i24, out_$i111: i24, out_$i112: i24, out_$p113: ref, out_$p114: ref, out_$i115: i8, out_$i116: i64, out_$i117: i64, out_$i118: i64, out_$i119: i1, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$p127: ref, out_$i128: i24, out_$i129: i24, out_$i130: i24, out_$p131: ref, out_$p132: ref, out_$i133: i8, out_$i134: i64, out_$i135: i64, out_$i136: i64, out_$i137: i1, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$i143: i64, out_$p144: ref, out_$p145: ref, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$i150: i64, out_$p151: ref, out_$i152: i32, out_$i153: i1, out_$i56: i32)
{

  entry:
    out_$p57, out_$p58, out_$i59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$i89, out_$i90, out_$p91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p100, out_$p101, out_$i102, out_$i103, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$i110, out_$i111, out_$i112, out_$p113, out_$p114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$p127, out_$i128, out_$i129, out_$i130, out_$p131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$i143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$p149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i56 := in_$p57, in_$p58, in_$i59, in_$p60, in_$p61, in_$p62, in_$p63, in_$p64, in_$p65, in_$p66, in_$p67, in_$i68, in_$i69, in_$i70, in_$p71, in_$p72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$p78, in_$p79, in_$i80, in_$i81, in_$p82, in_$p83, in_$p84, in_$p85, in_$p86, in_$p87, in_$i88, in_$i89, in_$i90, in_$p91, in_$p92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$p98, in_$p99, in_$p100, in_$p101, in_$i102, in_$i103, in_$p104, in_$p105, in_$p106, in_$p107, in_$p108, in_$p109, in_$i110, in_$i111, in_$i112, in_$p113, in_$p114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$p120, in_$p121, in_$p122, in_$p123, in_$p124, in_$p125, in_$p126, in_$p127, in_$i128, in_$i129, in_$i130, in_$p131, in_$p132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$p138, in_$p139, in_$p140, in_$p141, in_$p142, in_$i143, in_$p144, in_$p145, in_$p146, in_$p147, in_$p148, in_$p149, in_$i150, in_$p151, in_$i152, in_$i153, in_$i56;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_666;

  $bb35:
    assume out_$i153 == 1;
    assume {:verifier.code 0} true;
    out_$i56 := out_$i152;
    goto $bb35_dummy;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    out_$i153 := $ult.i32(out_$i152, in_$i1);
    goto corral_source_split_734;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i152 := $add.i32(out_$i56, 1);
    call {:si_unique_call 120} {:cexpr "index"} boogie_si_record_i32(out_$i152);
    goto corral_source_split_733;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} __dynamic_dev_dbg.ref.ref.ref(in_$p5, out_$p99, .str.152);
    goto corral_source_split_731;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    out_$p99 := $load.ref($M.6, out_$p98);
    goto corral_source_split_730;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(in_$p10, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_729;

  $bb21:
    assume out_$i97 == 1;
    goto corral_source_split_728;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    out_$i97 := $ne.i64(out_$i96, 0);
    goto corral_source_split_726;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} out_$i96 := ldv__builtin_expect(out_$i95, 0);
    call {:si_unique_call 118} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i96);
    goto corral_source_split_725;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    out_$i95 := $and.i64(out_$i94, 1);
    goto corral_source_split_724;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    out_$i94 := $zext.i8.i64(out_$i93);
    goto corral_source_split_723;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i8($M.5, out_$p92);
    goto corral_source_split_722;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_721;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, out_$p91, 0);
    goto corral_source_split_720;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_719;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, out_$p87, out_$i90);
    goto corral_source_split_718;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    out_$i90 := $or.i24(out_$i89, 80);
    goto corral_source_split_717;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    out_$i89 := $and.i24(out_$i88, $sub.i24(0, 262144));
    goto corral_source_split_716;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i24($M.4, out_$p87);
    goto corral_source_split_715;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    out_$p87 := $bitcast.ref.ref(out_$p86);
    goto corral_source_split_714;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_713;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p85, .str.152);
    goto corral_source_split_712;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_711;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p84, .str.46);
    goto corral_source_split_710;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_709;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p83, .str.148);
    goto corral_source_split_708;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_707;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p82, .str);
    goto corral_source_split_706;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_705;

  $bb19:
    assume out_$i81 == 1;
    goto corral_source_split_704;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i64(out_$i80, 0);
    goto corral_source_split_702;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i80 := $p2i.ref.i64(out_$p61);
    goto corral_source_split_701;

  $bb17:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} __dynamic_dev_dbg.ref.ref.ref.ref.i32(in_$p4, out_$p79, .str.151, out_$p61, out_$i56);
    goto corral_source_split_699;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    out_$p79 := $load.ref($M.6, out_$p78);
    goto corral_source_split_698;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(in_$p10, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_697;

  $bb16:
    assume out_$i77 == 1;
    goto corral_source_split_696;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    out_$i77 := $ne.i64(out_$i76, 0);
    goto corral_source_split_694;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} out_$i76 := ldv__builtin_expect(out_$i75, 0);
    call {:si_unique_call 115} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i76);
    goto corral_source_split_693;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    out_$i75 := $and.i64(out_$i74, 1);
    goto corral_source_split_692;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    out_$i74 := $zext.i8.i64(out_$i73);
    goto corral_source_split_691;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i8($M.5, out_$p72);
    goto corral_source_split_690;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_689;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, out_$p71, 0);
    goto corral_source_split_688;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_687;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, out_$p67, out_$i70);
    goto corral_source_split_686;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    out_$i70 := $or.i24(out_$i69, 78);
    goto corral_source_split_685;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    out_$i69 := $and.i24(out_$i68, $sub.i24(0, 262144));
    goto corral_source_split_684;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i24($M.4, out_$p67);
    goto corral_source_split_683;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    out_$p67 := $bitcast.ref.ref(out_$p66);
    goto corral_source_split_682;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_681;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p65, .str.151);
    goto corral_source_split_680;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_679;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p64, .str.46);
    goto corral_source_split_678;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_677;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p63, .str.148);
    goto corral_source_split_676;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_675;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p62, .str);
    goto corral_source_split_674;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_673;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.6, out_$p60);
    goto corral_source_split_672;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref(out_$p58, $mul.ref(out_$i59, 8));
    goto corral_source_split_671;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    out_$i59 := $sext.i32.i64(out_$i56);
    goto corral_source_split_670;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.6, out_$p57);
    goto corral_source_split_669;

  $bb15:
    out_$p57 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(0, 1));
    goto corral_source_split_668;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb29:
    assume !(out_$i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} __dynamic_dev_dbg.ref.ref.ref(in_$p6, out_$p121, .str.153);
    goto corral_source_split_768;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    out_$p121 := $load.ref($M.6, out_$p120);
    goto corral_source_split_767;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(in_$p10, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_766;

  $bb28:
    assume out_$i119 == 1;
    goto corral_source_split_765;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    out_$i119 := $ne.i64(out_$i118, 0);
    goto corral_source_split_763;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} out_$i118 := ldv__builtin_expect(out_$i117, 0);
    call {:si_unique_call 122} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i118);
    goto corral_source_split_762;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    out_$i117 := $and.i64(out_$i116, 1);
    goto corral_source_split_761;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    out_$i116 := $zext.i8.i64(out_$i115);
    goto corral_source_split_760;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    out_$i115 := $load.i8($M.5, out_$p114);
    goto corral_source_split_759;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_758;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, out_$p113, 0);
    goto corral_source_split_757;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_756;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, out_$p109, out_$i112);
    goto corral_source_split_755;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    out_$i112 := $or.i24(out_$i111, 84);
    goto corral_source_split_754;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    out_$i111 := $and.i24(out_$i110, $sub.i24(0, 262144));
    goto corral_source_split_753;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i24($M.4, out_$p109);
    goto corral_source_split_752;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    out_$p109 := $bitcast.ref.ref(out_$p108);
    goto corral_source_split_751;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_750;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p107, .str.153);
    goto corral_source_split_749;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_748;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p106, .str.46);
    goto corral_source_split_747;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_746;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p105, .str.148);
    goto corral_source_split_745;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_744;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p104, .str);
    goto corral_source_split_743;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_742;

  $bb26:
    assume out_$i103 == 1;
    goto corral_source_split_741;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    out_$i103 := $eq.i64(out_$i102, 0);
    goto corral_source_split_739;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    out_$i102 := $p2i.ref.i64(out_$p101);
    goto corral_source_split_738;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    out_$p101 := $load.ref($M.6, out_$p100);
    goto corral_source_split_737;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p61, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_736;

  $bb20:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} kfree(out_$p151);
    goto corral_source_split_811;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    out_$p151 := $bitcast.ref.ref(out_$p61);
    goto corral_source_split_810;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} dma_pool_free(out_$p145, out_$p148, out_$i150);
    goto corral_source_split_809;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    out_$i150 := $load.i64($M.6, out_$p149);
    goto corral_source_split_808;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref(out_$p61, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_807;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    out_$p148 := $bitcast.ref.ref(out_$p147);
    goto corral_source_split_806;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    out_$p147 := $load.ref($M.6, out_$p146);
    goto corral_source_split_805;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    out_$p146 := $add.ref($add.ref(out_$p61, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_804;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    out_$p145 := $load.ref($M.6, out_$p144);
    goto corral_source_split_803;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref(in_$p10, $mul.ref(0, 2368)), $mul.ref(2080, 1));
    goto corral_source_split_802;

  $bb33:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} __dynamic_dev_dbg.ref.ref.ref.ref.i64(in_$p7, out_$p139, .str.154, out_$p141, out_$i143);
    goto corral_source_split_800;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    out_$i143 := $load.i64($M.6, out_$p142);
    goto corral_source_split_799;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(out_$p61, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_798;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    out_$p141 := $load.ref($M.6, out_$p140);
    goto corral_source_split_797;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(out_$p61, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_796;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    out_$p139 := $load.ref($M.6, out_$p138);
    goto corral_source_split_795;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref(in_$p10, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_794;

  $bb32:
    assume out_$i137 == 1;
    goto corral_source_split_793;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    out_$i137 := $ne.i64(out_$i136, 0);
    goto corral_source_split_791;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} out_$i136 := ldv__builtin_expect(out_$i135, 0);
    call {:si_unique_call 125} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i136);
    goto corral_source_split_790;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    out_$i135 := $and.i64(out_$i134, 1);
    goto corral_source_split_789;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    out_$i134 := $zext.i8.i64(out_$i133);
    goto corral_source_split_788;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    out_$i133 := $load.i8($M.5, out_$p132);
    goto corral_source_split_787;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_786;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, out_$p131, 0);
    goto corral_source_split_785;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_784;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, out_$p127, out_$i130);
    goto corral_source_split_783;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    out_$i130 := $or.i24(out_$i129, 91);
    goto corral_source_split_782;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    out_$i129 := $and.i24(out_$i128, $sub.i24(0, 262144));
    goto corral_source_split_781;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    out_$i128 := $load.i24($M.4, out_$p127);
    goto corral_source_split_780;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    out_$p127 := $bitcast.ref.ref(out_$p126);
    goto corral_source_split_779;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_778;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p125, .str.154);
    goto corral_source_split_777;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_776;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p124, .str.46);
    goto corral_source_split_775;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_774;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p123, .str.148);
    goto corral_source_split_773;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_772;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p122, .str);
    goto corral_source_split_771;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_770;

  $bb27:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb35_dummy:
    call {:si_unique_call 1} out_$p57, out_$p58, out_$i59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$i89, out_$i90, out_$p91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p100, out_$p101, out_$i102, out_$i103, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$i110, out_$i111, out_$i112, out_$p113, out_$p114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$p127, out_$i128, out_$i129, out_$i130, out_$p131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$i143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$p149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i56 := ep_bd_list_free_loop_$bb14(in_$p0, in_$i1, in_$p4, in_$p5, in_$p6, in_$p7, in_$p10, out_$p57, out_$p58, out_$i59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$i89, out_$i90, out_$p91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p100, out_$p101, out_$i102, out_$i103, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$i110, out_$i111, out_$i112, out_$p113, out_$p114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$p127, out_$i128, out_$i129, out_$i130, out_$p131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$i143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$p149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i56);
    return;

  exit:
    return;
}



procedure ep_bd_list_free_loop_$bb14(in_$p0: ref, in_$i1: i32, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p10: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i24, in_$i69: i24, in_$i70: i24, in_$p71: ref, in_$p72: ref, in_$i73: i8, in_$i74: i64, in_$i75: i64, in_$i76: i64, in_$i77: i1, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$i81: i1, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i88: i24, in_$i89: i24, in_$i90: i24, in_$p91: ref, in_$p92: ref, in_$i93: i8, in_$i94: i64, in_$i95: i64, in_$i96: i64, in_$i97: i1, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$i102: i64, in_$i103: i1, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$i110: i24, in_$i111: i24, in_$i112: i24, in_$p113: ref, in_$p114: ref, in_$i115: i8, in_$i116: i64, in_$i117: i64, in_$i118: i64, in_$i119: i1, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$p127: ref, in_$i128: i24, in_$i129: i24, in_$i130: i24, in_$p131: ref, in_$p132: ref, in_$i133: i8, in_$i134: i64, in_$i135: i64, in_$i136: i64, in_$i137: i1, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$i143: i64, in_$p144: ref, in_$p145: ref, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$i150: i64, in_$p151: ref, in_$i152: i32, in_$i153: i1, in_$i56: i32) returns (out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i24, out_$i69: i24, out_$i70: i24, out_$p71: ref, out_$p72: ref, out_$i73: i8, out_$i74: i64, out_$i75: i64, out_$i76: i64, out_$i77: i1, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$i81: i1, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i88: i24, out_$i89: i24, out_$i90: i24, out_$p91: ref, out_$p92: ref, out_$i93: i8, out_$i94: i64, out_$i95: i64, out_$i96: i64, out_$i97: i1, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$i102: i64, out_$i103: i1, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$i110: i24, out_$i111: i24, out_$i112: i24, out_$p113: ref, out_$p114: ref, out_$i115: i8, out_$i116: i64, out_$i117: i64, out_$i118: i64, out_$i119: i1, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$p127: ref, out_$i128: i24, out_$i129: i24, out_$i130: i24, out_$p131: ref, out_$p132: ref, out_$i133: i8, out_$i134: i64, out_$i135: i64, out_$i136: i64, out_$i137: i1, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$i143: i64, out_$p144: ref, out_$p145: ref, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$i150: i64, out_$p151: ref, out_$i152: i32, out_$i153: i1, out_$i56: i32);
  modifies $M.5, $M.4, $M.3, $M.2, $M.1, $M.0;



implementation bdc_issue_cmd_loop_$bb1(in_$p0: ref, in_$p5: ref, in_$p6: ref, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$p24: ref, in_$p26: ref, in_$p28: ref, in_$p30: ref, in_$p33: ref, in_$p37: ref, in_$p41: ref, in_$p44: ref, in_$p47: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i24, in_$i63: i24, in_$i64: i24, in_$p65: ref, in_$p66: ref, in_$i67: i8, in_$i68: i64, in_$i69: i64, in_$i70: i64, in_$i71: i1, in_$i72: i32, in_$i73: i1, in_$p74: ref, in_$p75: ref, in_$i76: i32, in_$i77: i32, in_$i78: i1, in_$i79: i32, in_$i99: i32, in_$i100: i1, in_$i101: i32) returns (out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$p24: ref, out_$p26: ref, out_$p28: ref, out_$p30: ref, out_$p33: ref, out_$p37: ref, out_$p41: ref, out_$p44: ref, out_$p47: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i24, out_$i63: i24, out_$i64: i24, out_$p65: ref, out_$p66: ref, out_$i67: i8, out_$i68: i64, out_$i69: i64, out_$i70: i64, out_$i71: i1, out_$i72: i32, out_$i73: i1, out_$p74: ref, out_$p75: ref, out_$i76: i32, out_$i77: i32, out_$i78: i1, out_$i79: i32, out_$i99: i32, out_$i100: i1, out_$i101: i32)
{

  entry:
    out_$i17, out_$p18, out_$p19, out_$i20, out_$p24, out_$p26, out_$p28, out_$p30, out_$p33, out_$p37, out_$p41, out_$p44, out_$p47, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i99, out_$i100, out_$i101 := in_$i17, in_$p18, in_$p19, in_$i20, in_$p24, in_$p26, in_$p28, in_$p30, in_$p33, in_$p37, in_$p41, in_$p44, in_$p47, in_$p50, in_$p51, in_$p52, in_$p53, in_$p54, in_$p55, in_$p56, in_$p57, in_$p58, in_$p59, in_$p60, in_$p61, in_$i62, in_$i63, in_$i64, in_$p65, in_$p66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$p74, in_$p75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i99, in_$i100, in_$i101;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1193;

  $bb15:
    assume out_$i100 == 1;
    assume {:verifier.code 0} true;
    out_$i17 := out_$i99;
    goto $bb15_dummy;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    out_$i101 := out_$i77;
    assume true;
    goto $bb15;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    out_$i100 := $ne.i32(out_$i17, 0);
    goto corral_source_split_1296;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    out_$i99 := $sub.i32(out_$i17, 1);
    call {:si_unique_call 213} {:cexpr "timeout"} boogie_si_record_i32(out_$i99);
    goto corral_source_split_1295;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} __const_udelay(4295);
    goto corral_source_split_1294;

  $bb9:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    out_$i79 := out_$i77;
    assume true;
    goto $bb9;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    out_$i78 := $ne.i32(out_$i77, 15);
    goto corral_source_split_1261;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    out_$i77 := $lshr.i32(out_$i76, 6);
    call {:si_unique_call 208} {:cexpr "cmd_status"} boogie_si_record_i32(out_$i77);
    goto corral_source_split_1260;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i76 := $and.i32(out_$i20, 960);
    goto corral_source_split_1259;

  $bb3:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb5:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} __dynamic_dev_dbg.ref.ref.ref.i32(in_$p6, out_$p75, .str.141, out_$i20);
    goto corral_source_split_1257;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.6, out_$p74);
    goto corral_source_split_1256;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1255;

  $bb4:
    assume out_$i73 == 1;
    goto corral_source_split_1254;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i32(out_$i72, 0);
    goto corral_source_split_1252;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} out_$i72 := ___ratelimit(in_$p5, .str.140);
    call {:si_unique_call 206} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_1251;

  $bb2:
    assume out_$i71 == 1;
    goto corral_source_split_1250;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i64(out_$i70, 0);
    goto corral_source_split_1248;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} out_$i70 := ldv__builtin_expect(out_$i69, 0);
    call {:si_unique_call 204} {:cexpr "tmp"} boogie_si_record_i64(out_$i70);
    goto corral_source_split_1247;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    out_$i69 := $and.i64(out_$i68, 1);
    goto corral_source_split_1246;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    out_$i68 := $zext.i8.i64(out_$i67);
    goto corral_source_split_1245;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i8($M.5, out_$p66);
    goto corral_source_split_1244;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1243;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, out_$p65, 0);
    goto corral_source_split_1242;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1241;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, out_$p61, out_$i64);
    goto corral_source_split_1240;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    out_$i64 := $or.i24(out_$i63, 39);
    goto corral_source_split_1239;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    out_$i63 := $and.i24(out_$i62, $sub.i24(0, 262144));
    goto corral_source_split_1238;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i24($M.4, out_$p61);
    goto corral_source_split_1237;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    out_$p61 := $bitcast.ref.ref(out_$p60);
    goto corral_source_split_1236;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1235;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p59, .str.141);
    goto corral_source_split_1234;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1233;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p58, .str.19);
    goto corral_source_split_1232;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1231;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p57, .str.140);
    goto corral_source_split_1230;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1229;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p56, .str);
    goto corral_source_split_1228;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1227;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $M.8 := $store.i64($M.8, out_$p55, 0);
    goto corral_source_split_1226;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p5, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_1225;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, out_$p54, 0);
    goto corral_source_split_1224;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p5, $mul.ref(0, 96)), $mul.ref(84, 1));
    goto corral_source_split_1223;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, out_$p53, 0);
    goto corral_source_split_1222;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p5, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_1221;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, out_$p52, 10);
    goto corral_source_split_1220;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p5, $mul.ref(0, 96)), $mul.ref(76, 1));
    goto corral_source_split_1219;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, out_$p51, 1250);
    goto corral_source_split_1218;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p5, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_1217;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $M.8 := $store.i64($M.8, out_$p50, 0);
    goto corral_source_split_1216;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1));
    goto corral_source_split_1215;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, out_$p47, 0);
    goto corral_source_split_1214;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1));
    goto corral_source_split_1213;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p44, .str.66);
    goto corral_source_split_1212;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1));
    goto corral_source_split_1211;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p41, $0.ref);
    goto corral_source_split_1210;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8));
    goto corral_source_split_1209;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p37, $0.ref);
    goto corral_source_split_1208;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8));
    goto corral_source_split_1207;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p33, $0.ref);
    goto corral_source_split_1206;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1205;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p30, $i2p.i64.ref($sub.i64(0, 1)));
    goto corral_source_split_1204;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1203;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, out_$p28, $sub.i32(0, 1));
    goto corral_source_split_1202;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1201;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, out_$p26, $sub.i32(0, 559067475));
    goto corral_source_split_1200;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1199;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, out_$p24, 0);
    goto corral_source_split_1198;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1197;

  SeqInstr_42:
    call {:si_unique_call 202} {:cexpr "temp"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_1196;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} out_$i20 := bdc_readl(out_$p19, 28);
    goto SeqInstr_41;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.6, out_$p18);
    goto corral_source_split_1195;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_1194;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i17, out_$p18, out_$p19, out_$i20, out_$p24, out_$p26, out_$p28, out_$p30, out_$p33, out_$p37, out_$p41, out_$p44, out_$p47, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i99, out_$i100, out_$i101 := bdc_issue_cmd_loop_$bb1(in_$p0, in_$p5, in_$p6, out_$i17, out_$p18, out_$p19, out_$i20, out_$p24, out_$p26, out_$p28, out_$p30, out_$p33, out_$p37, out_$p41, out_$p44, out_$p47, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i99, out_$i100, out_$i101);
    return;

  exit:
    return;
}



procedure bdc_issue_cmd_loop_$bb1(in_$p0: ref, in_$p5: ref, in_$p6: ref, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$p24: ref, in_$p26: ref, in_$p28: ref, in_$p30: ref, in_$p33: ref, in_$p37: ref, in_$p41: ref, in_$p44: ref, in_$p47: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i24, in_$i63: i24, in_$i64: i24, in_$p65: ref, in_$p66: ref, in_$i67: i8, in_$i68: i64, in_$i69: i64, in_$i70: i64, in_$i71: i1, in_$i72: i32, in_$i73: i1, in_$p74: ref, in_$p75: ref, in_$i76: i32, in_$i77: i32, in_$i78: i1, in_$i79: i32, in_$i99: i32, in_$i100: i1, in_$i101: i32) returns (out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$p24: ref, out_$p26: ref, out_$p28: ref, out_$p30: ref, out_$p33: ref, out_$p37: ref, out_$p41: ref, out_$p44: ref, out_$p47: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i24, out_$i63: i24, out_$i64: i24, out_$p65: ref, out_$p66: ref, out_$i67: i8, out_$i68: i64, out_$i69: i64, out_$i70: i64, out_$i71: i1, out_$i72: i32, out_$i73: i1, out_$p74: ref, out_$p75: ref, out_$i76: i32, out_$i77: i32, out_$i78: i1, out_$i79: i32, out_$i99: i32, out_$i100: i1, out_$i101: i32);
  modifies $M.5, $M.4, $M.3, $M.2, $M.1, $M.0, $M.8, $M.6, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.9, $CurrAddr, assertsPassed;



implementation bdc_init_ep_loop_$bb11(in_$p0: ref, in_$p27: ref, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i35: i8, in_$i36: i32, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i43: i8, in_$i44: i32, in_$i48: i32, in_$i49: i32, in_$i50: i8, in_$i51: i32, in_$i52: i32, in_$i53: i32, in_$i54: i1, in_$i31: i8) returns (out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i35: i8, out_$i36: i32, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i43: i8, out_$i44: i32, out_$i48: i32, out_$i49: i32, out_$i50: i8, out_$i51: i32, out_$i52: i32, out_$i53: i32, out_$i54: i1, out_$i31: i8)
{

  entry:
    out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i31 := in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i31;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1687;

  $bb19:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$i31 := out_$i50;
    goto $bb19_dummy;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    out_$i54 := $ule.i32(out_$i51, out_$i53);
    goto corral_source_split_1715;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    out_$i53 := $udiv.i32(out_$i52, 2);
    goto corral_source_split_1714;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.6, in_$p27);
    goto corral_source_split_1713;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    out_$i51 := $zext.i8.i32(out_$i50);
    goto corral_source_split_1712;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    out_$i50 := $trunc.i32.i8(out_$i49);
    call {:si_unique_call 332} {:cexpr "epnum"} boogie_si_record_i8(out_$i50);
    goto corral_source_split_1711;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i32(out_$i48, 1);
    goto corral_source_split_1710;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i48 := $zext.i8.i32(out_$i31);
    goto corral_source_split_1709;

  $bb17:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    out_$i43, out_$i44 := out_$i31, out_$i41;
    assume true;
    goto $bb17;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i41, 0);
    goto corral_source_split_1701;

  SeqInstr_99:
    call {:si_unique_call 330} {:cexpr "ret"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_1700;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} out_$i41 := init_ep(in_$p0, out_$i40, 1);
    goto SeqInstr_98;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i8.i32(out_$i31);
    goto corral_source_split_1699;

  $bb14:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    out_$i35, out_$i36 := out_$i31, out_$i33;
    assume true;
    goto $bb14;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i32(out_$i33, 0);
    goto corral_source_split_1691;

  SeqInstr_96:
    call {:si_unique_call 327} {:cexpr "ret"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_1690;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} out_$i33 := init_ep(in_$p0, out_$i32, 0);
    goto SeqInstr_95;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i8.i32(out_$i31);
    goto corral_source_split_1689;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb19_dummy:
    call {:si_unique_call 1} out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i31 := bdc_init_ep_loop_$bb11(in_$p0, in_$p27, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i31);
    return;

  exit:
    return;
}



procedure bdc_init_ep_loop_$bb11(in_$p0: ref, in_$p27: ref, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i35: i8, in_$i36: i32, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i43: i8, in_$i44: i32, in_$i48: i32, in_$i49: i32, in_$i50: i8, in_$i51: i32, in_$i52: i32, in_$i53: i32, in_$i54: i1, in_$i31: i8) returns (out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i35: i8, out_$i36: i32, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i43: i8, out_$i44: i32, out_$i48: i32, out_$i49: i32, out_$i50: i8, out_$i51: i32, out_$i52: i32, out_$i53: i32, out_$i54: i1, out_$i31: i8);
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, assertsPassed;



implementation ep_bd_list_alloc_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p5: ref, in_$i10: i32, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$i56: i64, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i24, in_$i65: i24, in_$i66: i24, in_$p67: ref, in_$p68: ref, in_$i69: i8, in_$i70: i64, in_$i71: i64, in_$i72: i64, in_$i73: i1, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i79: i64, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i88: i64, in_$i89: i64, in_$i90: i64, in_$i91: i1, in_$i92: i32, in_$i93: i1, in_$p41: ref, in_$i42: i32, in_$p94: ref, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8) returns (out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$i56: i64, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i24, out_$i65: i24, out_$i66: i24, out_$p67: ref, out_$p68: ref, out_$i69: i8, out_$i70: i64, out_$i71: i64, out_$i72: i64, out_$i73: i1, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i79: i64, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i88: i64, out_$i89: i64, out_$i90: i64, out_$i91: i1, out_$i92: i32, out_$i93: i1, out_$p41: ref, out_$i42: i32, out_$p94: ref, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8)
{

  entry:
    out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$i79, out_$p81, out_$p82, out_$i83, out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p41, out_$i42, out_$p94, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4 := in_$p43, in_$p44, in_$i45, in_$i46, in_$p47, in_$p48, in_$p49, in_$p51, in_$p52, in_$p53, in_$i54, in_$i55, in_$i56, in_$p57, in_$p58, in_$p59, in_$p60, in_$p61, in_$p62, in_$p63, in_$i64, in_$i65, in_$i66, in_$p67, in_$p68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$p74, in_$p75, in_$p76, in_$p77, in_$p78, in_$i79, in_$p81, in_$p82, in_$i83, in_$p84, in_$p85, in_$p86, in_$p87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$p41, in_$i42, in_$p94, in_cmdloc_dummy_var_3, in_cmdloc_dummy_var_4;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1886;

  $bb26:
    assume out_$i93 == 1;
    assume {:verifier.code 0} true;
    out_$p41, out_$i42 := out_$p43, out_$i92;
    goto $bb26_dummy;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    out_$p94 := out_$p43;
    assume true;
    goto $bb26;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    out_$i93 := $slt.i32(out_$i92, in_$i10);
    goto corral_source_split_1963;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i92 := $add.i32(out_$i42, 1);
    call {:si_unique_call 376} {:cexpr "index"} boogie_si_record_i32(out_$i92);
    goto corral_source_split_1962;

  $bb24:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} chain_table(out_$p41, out_$p44, 32);
    goto corral_source_split_1960;

  $bb23:
    assume out_$i91 == 1;
    goto corral_source_split_1959;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    out_$i91 := $ne.i64(out_$i90, 0);
    goto corral_source_split_1957;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    out_$i90 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_1956;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_3 := $M.6;
    call {:si_unique_call 374} out_cmdloc_dummy_var_4 := $memset.i8(out_cmdloc_dummy_var_3, out_$p87, 0, out_$i89, $zext.i32.i64(1), 0 == 1);
    $M.6 := out_cmdloc_dummy_var_4;
    goto corral_source_split_1955;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    out_$i89 := $mul.i64(out_$i88, 16);
    goto corral_source_split_1954;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    out_$i88 := $sext.i32.i64(32);
    goto corral_source_split_1953;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    out_$p87 := $bitcast.ref.ref(out_$p86);
    goto corral_source_split_1952;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.6, out_$p85);
    goto corral_source_split_1951;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p44, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1950;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p84, out_$p43);
    goto corral_source_split_1949;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref(out_$p82, $mul.ref(out_$i83, 8));
    goto corral_source_split_1948;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    out_$i83 := $sext.i32.i64(out_$i42);
    goto corral_source_split_1947;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.6, out_$p81);
    goto corral_source_split_1946;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(0, 1));
    goto corral_source_split_1945;

  $bb21:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} __dynamic_dev_dbg.ref.ref.ref.i32.ref.i64.ref(in_$p3, out_$p75, .str.157, out_$i42, out_$p77, out_$i79, out_$p41);
    goto corral_source_split_1943;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    out_$i79 := $load.i64($M.6, out_$p78);
    goto corral_source_split_1942;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(out_$p44, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1941;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    out_$p77 := $load.ref($M.6, out_$p76);
    goto corral_source_split_1940;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p44, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1939;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.6, out_$p74);
    goto corral_source_split_1938;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p5, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_1937;

  $bb20:
    assume out_$i73 == 1;
    goto corral_source_split_1936;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i64(out_$i72, 0);
    goto corral_source_split_1934;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} out_$i72 := ldv__builtin_expect(out_$i71, 0);
    call {:si_unique_call 372} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i72);
    goto corral_source_split_1933;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    out_$i71 := $and.i64(out_$i70, 1);
    goto corral_source_split_1932;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    out_$i70 := $zext.i8.i64(out_$i69);
    goto corral_source_split_1931;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i8($M.5, out_$p68);
    goto corral_source_split_1930;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1929;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, out_$p67, 0);
    goto corral_source_split_1928;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1927;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, out_$p63, out_$i66);
    goto corral_source_split_1926;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    out_$i66 := $or.i24(out_$i65, 170);
    goto corral_source_split_1925;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    out_$i65 := $and.i24(out_$i64, $sub.i24(0, 262144));
    goto corral_source_split_1924;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i24($M.4, out_$p63);
    goto corral_source_split_1923;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    out_$p63 := $bitcast.ref.ref(out_$p62);
    goto corral_source_split_1922;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1921;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p61, .str.157);
    goto corral_source_split_1920;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1919;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p60, .str.46);
    goto corral_source_split_1918;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1917;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p59, .str.155);
    goto corral_source_split_1916;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1915;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p58, .str);
    goto corral_source_split_1914;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1913;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, out_$p57, out_$i56);
    goto corral_source_split_1912;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p44, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1911;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i64($M.18, in_$p1);
    goto corral_source_split_1910;

  $bb18:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i64(out_$i54, 0);
    goto corral_source_split_1906;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p53);
    goto corral_source_split_1905;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.6, out_$p52);
    goto corral_source_split_1904;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p44, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1903;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p51, out_$p49);
    goto corral_source_split_1902;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p44, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1901;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    goto corral_source_split_1900;

  SeqInstr_114:
    goto corral_source_split_1899;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} out_$p49 := ldv_dma_pool_alloc_99(out_$p48, 32, in_$p1);
    goto SeqInstr_113;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.6, out_$p47);
    goto corral_source_split_1898;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p5, $mul.ref(0, 2368)), $mul.ref(2080, 1));
    goto corral_source_split_1897;

  $bb14:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i64(out_$i45, 0);
    goto corral_source_split_1891;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_1890;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    out_$p44 := $bitcast.ref.ref(out_$p43);
    goto corral_source_split_1889;

  SeqInstr_111:
    goto corral_source_split_1888;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} out_$p43 := kzalloc(16, 32);
    goto SeqInstr_110;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb26_dummy:
    call {:si_unique_call 1} out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$i79, out_$p81, out_$p82, out_$i83, out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p41, out_$i42, out_$p94, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4 := ep_bd_list_alloc_loop_$bb11(in_$p0, in_$p1, in_$p3, in_$p5, in_$i10, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$i79, out_$p81, out_$p82, out_$i83, out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p41, out_$i42, out_$p94, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4);
    return;

  exit:
    return;
}



procedure ep_bd_list_alloc_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p5: ref, in_$i10: i32, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$i56: i64, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i24, in_$i65: i24, in_$i66: i24, in_$p67: ref, in_$p68: ref, in_$i69: i8, in_$i70: i64, in_$i71: i64, in_$i72: i64, in_$i73: i1, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i79: i64, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i88: i64, in_$i89: i64, in_$i90: i64, in_$i91: i1, in_$i92: i32, in_$i93: i1, in_$p41: ref, in_$i42: i32, in_$p94: ref, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8) returns (out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$i56: i64, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i24, out_$i65: i24, out_$i66: i24, out_$p67: ref, out_$p68: ref, out_$i69: i8, out_$i70: i64, out_$i71: i64, out_$i72: i64, out_$i73: i1, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i79: i64, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i88: i64, out_$i89: i64, out_$i90: i64, out_$i91: i1, out_$i92: i32, out_$i93: i1, out_$p41: ref, out_$i42: i32, out_$p94: ref, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8);
  modifies $M.6, $M.5, $M.4, $M.3, $M.2, $M.1, $M.0, assertsPassed;



implementation bdc_dbg_bd_list_loop_$bb9(in_$p7: ref, in_$i11: i32, in_$i12: i32, in_$i13: i1, in_$i10: i32) returns (out_$i11: i32, out_$i12: i32, out_$i13: i1, out_$i10: i32)
{

  entry:
    out_$i11, out_$i12, out_$i13, out_$i10 := in_$i11, in_$i12, in_$i13, in_$i10;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1999;

  $bb11:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i11;
    goto $bb11_dummy;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    out_$i13 := $sgt.i32(out_$i12, out_$i11);
    goto corral_source_split_2003;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.6, in_$p7);
    goto corral_source_split_2002;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i10, 1);
    call {:si_unique_call 378} {:cexpr "bdi"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_2001;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i11, out_$i12, out_$i13, out_$i10 := bdc_dbg_bd_list_loop_$bb9(in_$p7, out_$i11, out_$i12, out_$i13, out_$i10);
    return;

  exit:
    return;
}



procedure bdc_dbg_bd_list_loop_$bb9(in_$p7: ref, in_$i11: i32, in_$i12: i32, in_$i13: i1, in_$i10: i32) returns (out_$i11: i32, out_$i12: i32, out_$i13: i1, out_$i10: i32);



implementation bdc_dbg_bd_list_loop_$bb4(in_$p1: ref, in_$p3: ref, in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$i11: i32, in_$i12: i32, in_$i13: i1, in_$i10: i32, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$i6: i32) returns (out_$p7: ref, out_$i8: i32, out_$i9: i1, out_$i11: i32, out_$i12: i32, out_$i13: i1, out_$i10: i32, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$i6: i32)
{

  entry:
    out_$p7, out_$i8, out_$i9, out_$i11, out_$i12, out_$i13, out_$i10, out_$i14, out_$i15, out_$i16, out_$i6 := in_$p7, in_$i8, in_$i9, in_$i11, in_$i12, in_$i13, in_$i10, in_$i14, in_$i15, in_$i16, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1991;

  $bb14:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i14;
    goto $bb14_dummy;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    out_$i16 := $sgt.i32(out_$i15, out_$i14);
    goto corral_source_split_2009;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.6, in_$p3);
    goto corral_source_split_2008;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i14 := $add.i32(out_$i6, 1);
    call {:si_unique_call 379} {:cexpr "tbi"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_2007;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i9 == 1);
    goto $bb8;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb12:
    assume !(out_$i13 == 1);
    goto corral_source_split_2005;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    out_$i13 := $sgt.i32(out_$i12, out_$i11);
    goto corral_source_split_2003;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.6, out_$p7);
    goto corral_source_split_2002;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i10, 1);
    call {:si_unique_call 378} {:cexpr "bdi"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_2001;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    call out_$i11, out_$i12, out_$i13, out_$i10 := bdc_dbg_bd_list_loop_$bb9(out_$p7, out_$i11, out_$i12, out_$i13, out_$i10);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1999;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    out_$i10 := 0;
    goto $bb9;

  $bb11:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i11;
    assume false;
    return;

  $bb6:
    assume out_$i9 == 1;
    goto corral_source_split_1997;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    out_$i9 := $sgt.i32(out_$i8, 0);
    goto corral_source_split_1995;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    out_$i8 := $load.i32($M.6, out_$p7);
    goto corral_source_split_1994;

  $bb5:
    out_$p7 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(24, 1));
    goto corral_source_split_1993;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p7, out_$i8, out_$i9, out_$i11, out_$i12, out_$i13, out_$i10, out_$i14, out_$i15, out_$i16, out_$i6 := bdc_dbg_bd_list_loop_$bb4(in_$p1, in_$p3, out_$p7, out_$i8, out_$i9, out_$i11, out_$i12, out_$i13, out_$i10, out_$i14, out_$i15, out_$i16, out_$i6);
    return;

  exit:
    return;
}



procedure bdc_dbg_bd_list_loop_$bb4(in_$p1: ref, in_$p3: ref, in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$i11: i32, in_$i12: i32, in_$i13: i1, in_$i10: i32, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$i6: i32) returns (out_$p7: ref, out_$i8: i32, out_$i9: i1, out_$i11: i32, out_$i12: i32, out_$i13: i1, out_$i10: i32, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$i6: i32);



implementation poll_oip_loop_$bb4(in_$p0: ref, in_$p6: ref, in_$p7: ref, in_$i8: i32, in_$i9: i32, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i34: i32, in_$i35: i1, in_$i5: i32, in_$i36: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i32, out_$i9: i32, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i34: i32, out_$i35: i1, out_$i5: i32, out_$i36: i32)
{

  entry:
    out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i34, out_$i35, out_$i5, out_$i36 := in_$p6, in_$p7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i34, in_$i35, in_$i5, in_$i36;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2972;

  $bb13:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i34;
    goto $bb13_dummy;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i8;
    assume true;
    goto $bb13;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i34, 0);
    goto corral_source_split_3016;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i5, $sub.i32(0, 10));
    call {:si_unique_call 591} {:cexpr "usec"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_3015;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} __const_udelay(42950);
    goto corral_source_split_3014;

  $bb7:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i8;
    assume true;
    goto $bb7;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i32(out_$i10, 7);
    goto corral_source_split_2979;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    out_$i10 := $lshr.i32(out_$i9, 20);
    goto corral_source_split_2978;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    out_$i9 := $and.i32(out_$i8, 7340032);
    goto corral_source_split_2977;

  SeqInstr_177:
    call {:si_unique_call 586} {:cexpr "status"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_2976;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} out_$i8 := bdc_readl(out_$p7, 64);
    goto SeqInstr_176;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.6, out_$p6);
    goto corral_source_split_2975;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2368)), $mul.ref(1688, 1));
    goto corral_source_split_2974;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i34, out_$i35, out_$i5, out_$i36 := poll_oip_loop_$bb4(in_$p0, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i34, out_$i35, out_$i5, out_$i36);
    return;

  exit:
    return;
}



procedure poll_oip_loop_$bb4(in_$p0: ref, in_$p6: ref, in_$p7: ref, in_$i8: i32, in_$i9: i32, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i34: i32, in_$i35: i1, in_$i5: i32, in_$i36: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i32, out_$i9: i32, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i34: i32, out_$i35: i1, out_$i5: i32, out_$i36: i32);
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.9, $CurrAddr, $M.8, assertsPassed;



implementation setup_bd_list_xfr_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p3: ref, in_$p8: ref, in_$i32: i32, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$p44: ref, in_$i45: i8, in_$i46: i32, in_$i47: i1, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$i52: i32, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i8, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i63: i32, in_$i66: i32, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i70: i32, in_$i64: i32, in_$i65: i32, in_$p72: ref, in_$i73: i32, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$i77: i32, in_$i78: i64, in_$i79: i64, in_$i80: i1, in_$i83: i32, in_$p85: ref, in_$i86: i64, in_$i87: i32, in_$p89: ref, in_$p91: ref, in_$i92: i32, in_$p94: ref, in_$i95: i64, in_$p97: ref, in_$i98: i32, in_$p99: ref, in_$p101: ref, in_$i102: i32, in_$i103: i1, in_$i34: i32, in_$i35: i32, in_$i36: i64) returns (out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$p44: ref, out_$i45: i8, out_$i46: i32, out_$i47: i1, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$i52: i32, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i8, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i63: i32, out_$i66: i32, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i70: i32, out_$i64: i32, out_$i65: i32, out_$p72: ref, out_$i73: i32, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$i77: i32, out_$i78: i64, out_$i79: i64, out_$i80: i1, out_$i83: i32, out_$p85: ref, out_$i86: i64, out_$i87: i32, out_$p89: ref, out_$p91: ref, out_$i92: i32, out_$p94: ref, out_$i95: i64, out_$p97: ref, out_$i98: i32, out_$p99: ref, out_$p101: ref, out_$i102: i32, out_$i103: i1, out_$i34: i32, out_$i35: i32, out_$i36: i64)
{

  entry:
    out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i64, out_$i65, out_$p72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i83, out_$p85, out_$i86, out_$i87, out_$p89, out_$p91, out_$i92, out_$p94, out_$i95, out_$p97, out_$i98, out_$p99, out_$p101, out_$i102, out_$i103, out_$i34, out_$i35, out_$i36 := in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$p44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i52, in_$p53, in_$p54, in_$p55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i64, in_$i65, in_$p72, in_$i73, in_$p74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i83, in_$p85, in_$i86, in_$i87, in_$p89, in_$p91, in_$i92, in_$p94, in_$i95, in_$p97, in_$i98, in_$p99, in_$p101, in_$i102, in_$i103, in_$i34, in_$i35, in_$i36;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3404;

  $bb25:
    assume out_$i103 == 1;
    assume {:verifier.code 0} true;
    out_$i34, out_$i35, out_$i36 := out_$i65, out_$i102, out_$i95;
    goto $bb25_dummy;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    out_$i103 := $slt.i32(out_$i102, in_$i2);
    goto corral_source_split_3493;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    out_$i102 := $add.i32(out_$i35, 1);
    call {:si_unique_call 676} {:cexpr "bdnum"} boogie_si_record_i32(out_$i102);
    goto corral_source_split_3492;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p101, $sub.i32(0, 2147483648));
    goto corral_source_split_3491;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref($add.ref(out_$p99, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(3, 4));
    goto corral_source_split_3490;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} out_$p99 := bdi_to_bd(in_$p8, out_$i98);
    goto corral_source_split_3489;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i32($M.6, out_$p97);
    goto corral_source_split_3488;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref($add.ref(in_$p8, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_3487;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    out_$i95 := $add.i64(out_$i36, 65536);
    call {:si_unique_call 674} {:cexpr "buf_add"} boogie_si_record_i64(out_$i95);
    goto corral_source_split_3486;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} ep_bdlist_eqp_adv(in_$p8);
    goto corral_source_split_3485;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p94, out_$i92);
    goto corral_source_split_3484;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref($add.ref(out_$p74, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(3, 4));
    goto corral_source_split_3483;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i32($M.20, in_$p3);
    goto corral_source_split_3482;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p91, out_$i64);
    goto corral_source_split_3481;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref($add.ref(out_$p74, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(2, 4));
    goto corral_source_split_3480;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p89, out_$i87);
    goto corral_source_split_3479;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref($add.ref(out_$p74, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(1, 4));
    goto corral_source_split_3478;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    out_$i87 := $trunc.i64.i32(out_$i86);
    goto corral_source_split_3477;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    out_$i86 := $lshr.i64(out_$i36, 32);
    goto corral_source_split_3476;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p85, out_$i83);
    goto corral_source_split_3475;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref($add.ref(out_$p74, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 4));
    goto corral_source_split_3474;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i83 := $trunc.i64.i32(out_$i36);
    goto corral_source_split_3473;

  $bb23:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    out_$i80 := $ne.i64(out_$i79, 0);
    goto corral_source_split_3466;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} out_$i79 := ldv__builtin_expect(out_$i78, 0);
    call {:si_unique_call 671} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i79);
    goto corral_source_split_3465;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    out_$i78 := $sext.i32.i64(out_$i77);
    goto corral_source_split_3464;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i1.i32(out_$i76);
    goto corral_source_split_3463;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i64(out_$i75, 0);
    goto corral_source_split_3462;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    out_$i75 := $p2i.ref.i64(out_$p74);
    goto corral_source_split_3461;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} out_$p74 := bdi_to_bd(in_$p8, out_$i73);
    goto corral_source_split_3460;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i32($M.6, out_$p72);
    goto corral_source_split_3459;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref($add.ref(in_$p8, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_3458;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3457;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, in_$p3, out_$i70);
    assume {:verifier.code 0} true;
    out_$i64, out_$i65 := out_$i66, out_$i34;
    goto $bb21;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    out_$i64, out_$i65 := out_$i62, out_$i63;
    goto $bb21;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    out_$i63 := $sub.i32(out_$i34, 65536);
    call {:si_unique_call 667} {:cexpr "req_len"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_3447;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    out_$i62 := $or.i32(out_$i52, 65536);
    call {:si_unique_call 666} {:cexpr "dword2"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_3446;

  $bb19:
    assume out_$i61 == 1;
    goto corral_source_split_3445;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i61 := $ugt.i32(out_$i34, 65536);
    goto corral_source_split_3443;

  $bb17:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, in_$p3, out_$i60);
    goto corral_source_split_3441;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    out_$i60 := $or.i32(out_$i59, 536870912);
    goto corral_source_split_3440;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.20, in_$p3);
    goto corral_source_split_3439;

  $bb16:
    assume out_$i58 == 1;
    goto corral_source_split_3438;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i57, 0);
    goto corral_source_split_3436;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    out_$i57 := $zext.i8.i32(out_$i56);
    goto corral_source_split_3435;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i8($M.6, out_$p55);
    goto corral_source_split_3434;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p54, $mul.ref(0, 176)), $mul.ref(89, 1));
    goto corral_source_split_3433;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.6, out_$p53);
    goto corral_source_split_3432;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p1, $mul.ref(0, 144)), $mul.ref(104, 1));
    goto corral_source_split_3431;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_3430;

  $bb7:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    out_$i52 := out_$i37;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i52 := out_$i43;
    goto $bb15;

  $bb9:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    out_$i50 := out_$i48;
    assume true;
    goto $bb11;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i32(out_$i48, 0);
    goto corral_source_split_3424;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} out_$i48 := setup_first_bd_ep0(in_$p0, in_$p1, in_$p3);
    call {:si_unique_call 665} {:cexpr "ret"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_3423;

  $bb8:
    assume out_$i47 == 1;
    goto corral_source_split_3422;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i46, 1);
    goto corral_source_split_3420;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i8.i32(out_$i45);
    goto corral_source_split_3419;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i8($M.6, out_$p44);
    goto corral_source_split_3418;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p8, $mul.ref(0, 176)), $mul.ref(90, 1));
    goto corral_source_split_3417;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    out_$i43 := $or.i32(out_$i37, 33554432);
    call {:si_unique_call 663} {:cexpr "dword2"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_3416;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, in_$p3, out_$i42);
    goto corral_source_split_3415;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    out_$i42 := $or.i32(out_$i41, $sub.i32(0, 2080374784));
    goto corral_source_split_3414;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    out_$i41 := $or.i32(out_$i39, out_$i40);
    goto corral_source_split_3413;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.20, in_$p3);
    goto corral_source_split_3412;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    out_$i39 := $shl.i32(in_$i32, 4);
    goto corral_source_split_3411;

  $bb6:
    assume out_$i38 == 1;
    goto corral_source_split_3410;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i35, 0);
    goto corral_source_split_3408;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.20, in_$p3);
    call {:si_unique_call 662} {:cexpr "dword2"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_3407;

  $bb5:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, in_$p3, 0);
    goto corral_source_split_3406;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    out_$i70 := $or.i32(out_$i69, 134217728);
    goto corral_source_split_3455;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i32($M.20, in_$p3);
    goto corral_source_split_3454;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, in_$p3, out_$i68);
    goto corral_source_split_3453;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    out_$i68 := $or.i32(out_$i67, 1073741824);
    goto corral_source_split_3452;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i32($M.20, in_$p3);
    goto corral_source_split_3451;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    out_$i66 := $or.i32(out_$i52, out_$i34);
    call {:si_unique_call 668} {:cexpr "dword2"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_3450;

  $bb20:
    assume !(out_$i61 == 1);
    goto corral_source_split_3449;

  $bb25_dummy:
    call {:si_unique_call 1} out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i64, out_$i65, out_$p72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i83, out_$p85, out_$i86, out_$i87, out_$p89, out_$p91, out_$i92, out_$p94, out_$i95, out_$p97, out_$i98, out_$p99, out_$p101, out_$i102, out_$i103, out_$i34, out_$i35, out_$i36 := setup_bd_list_xfr_loop_$bb4(in_$p0, in_$p1, in_$i2, in_$p3, in_$p8, in_$i32, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i64, out_$i65, out_$p72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i83, out_$p85, out_$i86, out_$i87, out_$p89, out_$p91, out_$i92, out_$p94, out_$i95, out_$p97, out_$i98, out_$p99, out_$p101, out_$i102, out_$i103, out_$i34, out_$i35, out_$i36);
    return;

  exit:
    return;
}



procedure setup_bd_list_xfr_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p3: ref, in_$p8: ref, in_$i32: i32, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$p44: ref, in_$i45: i8, in_$i46: i32, in_$i47: i1, in_$i48: i32, in_$i49: i1, in_$i50: i32, in_$i52: i32, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i8, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i63: i32, in_$i66: i32, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i70: i32, in_$i64: i32, in_$i65: i32, in_$p72: ref, in_$i73: i32, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$i77: i32, in_$i78: i64, in_$i79: i64, in_$i80: i1, in_$i83: i32, in_$p85: ref, in_$i86: i64, in_$i87: i32, in_$p89: ref, in_$p91: ref, in_$i92: i32, in_$p94: ref, in_$i95: i64, in_$p97: ref, in_$i98: i32, in_$p99: ref, in_$p101: ref, in_$i102: i32, in_$i103: i1, in_$i34: i32, in_$i35: i32, in_$i36: i64) returns (out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$p44: ref, out_$i45: i8, out_$i46: i32, out_$i47: i1, out_$i48: i32, out_$i49: i1, out_$i50: i32, out_$i52: i32, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i8, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i63: i32, out_$i66: i32, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i70: i32, out_$i64: i32, out_$i65: i32, out_$p72: ref, out_$i73: i32, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$i77: i32, out_$i78: i64, out_$i79: i64, out_$i80: i1, out_$i83: i32, out_$p85: ref, out_$i86: i64, out_$i87: i32, out_$p89: ref, out_$p91: ref, out_$i92: i32, out_$p94: ref, out_$i95: i64, out_$p97: ref, out_$i98: i32, out_$p99: ref, out_$p101: ref, out_$i102: i32, out_$i103: i1, out_$i34: i32, out_$i35: i32, out_$i36: i64);
  modifies $M.6, $M.20, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $CurrAddr;



implementation bd_add_to_bdi_loop_$bb7(in_$p0: ref, in_$i1: i64, in_$p3: ref, in_$p6: ref, in_$p25: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$p38: ref, in_$i39: i64, in_$p40: ref, in_$i41: i32, in_$i42: i32, in_$i43: i64, in_$i44: i64, in_$i45: i64, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i24, in_$i53: i24, in_$i54: i24, in_$p55: ref, in_$p56: ref, in_$i57: i8, in_$i58: i64, in_$i59: i64, in_$i60: i64, in_$i61: i1, in_$p62: ref, in_$p63: ref, in_$i64: i1, in_$i65: i1, in_$i66: i32, in_$i67: i64, in_$i71: i32, in_$i72: i32, in_$i73: i1, in_$i30: i32, in_$i74: i64, in_$i75: i32) returns (out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$p38: ref, out_$i39: i64, out_$p40: ref, out_$i41: i32, out_$i42: i32, out_$i43: i64, out_$i44: i64, out_$i45: i64, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i24, out_$i53: i24, out_$i54: i24, out_$p55: ref, out_$p56: ref, out_$i57: i8, out_$i58: i64, out_$i59: i64, out_$i60: i64, out_$i61: i1, out_$p62: ref, out_$p63: ref, out_$i64: i1, out_$i65: i1, out_$i66: i32, out_$i67: i64, out_$i71: i32, out_$i72: i32, out_$i73: i1, out_$i30: i32, out_$i74: i64, out_$i75: i32)
{

  entry:
    out_$p31, out_$p32, out_$i33, out_$p34, out_$p35, out_$p36, out_$i37, out_$p38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i71, out_$i72, out_$i73, out_$i30, out_$i74, out_$i75 := in_$p31, in_$p32, in_$i33, in_$p34, in_$p35, in_$p36, in_$i37, in_$p38, in_$i39, in_$p40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$p46, in_$p47, in_$p48, in_$p49, in_$p50, in_$p51, in_$i52, in_$i53, in_$i54, in_$p55, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$p62, in_$p63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i71, in_$i72, in_$i73, in_$i30, in_$i74, in_$i75;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3961;

  $bb19:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$i30 := out_$i71;
    goto $bb19_dummy;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    out_$i74, out_$i75 := out_$i37, out_$i71;
    assume true;
    goto $bb19;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    out_$i73 := $sgt.i32(out_$i72, out_$i71);
    goto corral_source_split_4022;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i32($M.6, in_$p25);
    goto corral_source_split_4021;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i71 := $add.i32(out_$i30, 1);
    call {:si_unique_call 753} {:cexpr "tbi"} boogie_si_record_i32(out_$i71);
    goto corral_source_split_4020;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i64 == 1);
    goto $bb14;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i65 == 1);
    goto $bb14;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    out_$i66, out_$i67 := out_$i30, out_$i37;
    assume true;
    goto $bb16;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    out_$i65 := $ule.i64(in_$i1, out_$i45);
    goto corral_source_split_4008;

  $bb12:
    assume out_$i64 == 1;
    goto corral_source_split_4007;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i64 := $uge.i64(in_$i1, out_$i37);
    goto corral_source_split_4005;

  $bb10:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} __dynamic_dev_dbg.ref.ref.ref.i64.i64(in_$p3, out_$p63, .str.225, out_$i37, out_$i45);
    goto corral_source_split_4003;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    out_$p63 := $load.ref($M.6, out_$p62);
    goto corral_source_split_4002;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p6, $mul.ref(0, 2368)), $mul.ref(1592, 1));
    goto corral_source_split_4001;

  $bb9:
    assume out_$i61 == 1;
    goto corral_source_split_4000;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i64(out_$i60, 0);
    goto corral_source_split_3998;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} out_$i60 := ldv__builtin_expect(out_$i59, 0);
    call {:si_unique_call 749} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i60);
    goto corral_source_split_3997;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    out_$i59 := $and.i64(out_$i58, 1);
    goto corral_source_split_3996;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i8.i64(out_$i57);
    goto corral_source_split_3995;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i8($M.5, out_$p56);
    goto corral_source_split_3994;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3993;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, out_$p55, 0);
    goto corral_source_split_3992;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3991;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $M.4 := $store.i24($M.4, out_$p51, out_$i54);
    goto corral_source_split_3990;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    out_$i54 := $or.i24(out_$i53, 244);
    goto corral_source_split_3989;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    out_$i53 := $and.i24(out_$i52, $sub.i24(0, 262144));
    goto corral_source_split_3988;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i24($M.4, out_$p51);
    goto corral_source_split_3987;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    out_$p51 := $bitcast.ref.ref(out_$p50);
    goto corral_source_split_3986;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3985;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p49, .str.225);
    goto corral_source_split_3984;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3983;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p48, .str.46);
    goto corral_source_split_3982;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3981;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p47, .str.223);
    goto corral_source_split_3980;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3979;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p46, .str);
    goto corral_source_split_3978;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3977;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i64(out_$i39, out_$i44);
    call {:si_unique_call 747} {:cexpr "dma_last_bd"} boogie_si_record_i64(out_$i45);
    goto corral_source_split_3976;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    out_$i44 := $mul.i64(out_$i43, 16);
    goto corral_source_split_3975;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    out_$i43 := $sext.i32.i64(out_$i42);
    goto corral_source_split_3974;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    out_$i42 := $add.i32(out_$i41, $sub.i32(0, 1));
    goto corral_source_split_3973;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.6, out_$p40);
    goto corral_source_split_3972;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i64($M.6, out_$p38);
    out_$p40 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(24, 1));
    goto corral_source_split_3971;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p35, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3970;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i64($M.6, out_$p36);
    call {:si_unique_call 746} {:cexpr "dma_first_bd"} boogie_si_record_i64(out_$i37);
    goto corral_source_split_3969;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p35, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3968;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.6, out_$p34);
    goto corral_source_split_3967;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref(out_$p32, $mul.ref(out_$i33, 8));
    goto corral_source_split_3966;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i30);
    goto corral_source_split_3965;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.6, out_$p31);
    goto corral_source_split_3964;

  $bb8:
    out_$p31 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(0, 1));
    goto corral_source_split_3963;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p31, out_$p32, out_$i33, out_$p34, out_$p35, out_$p36, out_$i37, out_$p38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i71, out_$i72, out_$i73, out_$i30, out_$i74, out_$i75 := bd_add_to_bdi_loop_$bb7(in_$p0, in_$i1, in_$p3, in_$p6, in_$p25, out_$p31, out_$p32, out_$i33, out_$p34, out_$p35, out_$p36, out_$i37, out_$p38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i71, out_$i72, out_$i73, out_$i30, out_$i74, out_$i75);
    return;

  exit:
    return;
}



procedure bd_add_to_bdi_loop_$bb7(in_$p0: ref, in_$i1: i64, in_$p3: ref, in_$p6: ref, in_$p25: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$p38: ref, in_$i39: i64, in_$p40: ref, in_$i41: i32, in_$i42: i32, in_$i43: i64, in_$i44: i64, in_$i45: i64, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i24, in_$i53: i24, in_$i54: i24, in_$p55: ref, in_$p56: ref, in_$i57: i8, in_$i58: i64, in_$i59: i64, in_$i60: i64, in_$i61: i1, in_$p62: ref, in_$p63: ref, in_$i64: i1, in_$i65: i1, in_$i66: i32, in_$i67: i64, in_$i71: i32, in_$i72: i32, in_$i73: i1, in_$i30: i32, in_$i74: i64, in_$i75: i32) returns (out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$p38: ref, out_$i39: i64, out_$p40: ref, out_$i41: i32, out_$i42: i32, out_$i43: i64, out_$i44: i64, out_$i45: i64, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i24, out_$i53: i24, out_$i54: i24, out_$p55: ref, out_$p56: ref, out_$i57: i8, out_$i58: i64, out_$i59: i64, out_$i60: i64, out_$i61: i1, out_$p62: ref, out_$p63: ref, out_$i64: i1, out_$i65: i1, out_$i66: i32, out_$i67: i64, out_$i71: i32, out_$i72: i32, out_$i73: i1, out_$i30: i32, out_$i74: i64, out_$i75: i32);
  modifies $M.5, $M.4, $M.3, $M.2, $M.1, $M.0;



implementation bdc_gadget_ep_dequeue_loop_$bb14(in_$p1: ref, in_$i40: i64, in_$p44: ref, in_$i45: i64, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$p43: ref, in_$p58: ref) returns (out_$p44: ref, out_$i45: i64, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$p43: ref, out_$p58: ref)
{

  entry:
    out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p43, out_$p58 := in_$p44, in_$i45, in_$i46, in_$i47, in_$p48, in_$p51, in_$p52, in_$p53, in_$p54, in_$p55, in_$i56, in_$i57, in_$p43, in_$p58;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4976;

  $bb20:
    assume out_$i57 == 1;
    assume {:verifier.code 0} true;
    out_$p43 := out_$p54;
    goto $bb20_dummy;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    out_$p58 := out_$p54;
    assume true;
    goto $bb20;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i64(out_$i56, in_$i40);
    goto corral_source_split_4997;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    out_$i56 := $p2i.ref.i64(out_$p55);
    goto corral_source_split_4996;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p53, $mul.ref($sub.ref(0, 88), 144)), $mul.ref(88, 1));
    goto corral_source_split_4995;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref(out_$p53, $mul.ref($sub.ref(0, 88), 144));
    goto corral_source_split_4994;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    out_$p53 := $bitcast.ref.ref(out_$p52);
    goto corral_source_split_4993;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.6, out_$p51);
    goto corral_source_split_4992;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref($add.ref(out_$p43, $mul.ref(0, 144)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_4991;

  $bb17:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    out_$p48 := out_$p43;
    assume true;
    goto $bb17;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i64(out_$i45, out_$i46);
    goto corral_source_split_4981;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_4980;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_4979;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p43, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_4978;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p43, out_$p58 := bdc_gadget_ep_dequeue_loop_$bb14(in_$p1, in_$i40, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p43, out_$p58);
    return;

  exit:
    return;
}



procedure bdc_gadget_ep_dequeue_loop_$bb14(in_$p1: ref, in_$i40: i64, in_$p44: ref, in_$i45: i64, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$p43: ref, in_$p58: ref) returns (out_$p44: ref, out_$i45: i64, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$p43: ref, out_$p58: ref);



implementation main_loop_$bb1(in_$i0: i32, in_$i1: i1, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i32, in_$i8: i1, in_$i9: i32, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i32, in_$i14: i1, in_$p15: ref, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i19: i32, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i1) returns (out_$i0: i32, out_$i1: i1, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i32, out_$i8: i1, out_$i9: i32, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i32, out_$i14: i1, out_$p15: ref, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i19: i32, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i1)
{

  entry:
    out_$i0, out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61 := in_$i0, in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$p15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1085} out_$i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1086} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i0);
    call {:si_unique_call 1087} {:cexpr "tmp"} boogie_si_record_i32(out_$i0);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb54_dummy;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb17:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb29:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1095} {:cexpr "probed_4"} boogie_si_record_i32(1);
    goto corral_source_split_5897;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $M.32 := out_$i20;
    call {:si_unique_call 1094} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_5896;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i32(out_$i19, 1);
    goto corral_source_split_5895;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    out_$i19 := $M.32;
    goto corral_source_split_5894;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $M.30 := 2;
    call {:si_unique_call 1093} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_5893;

  $bb28:
    assume out_$i18 == 1;
    goto corral_source_split_5892;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i17, 0);
    goto corral_source_split_5890;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    out_$i17 := $M.36;
    goto corral_source_split_5889;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $M.36 := out_$i16;
    call {:si_unique_call 1092} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_5888;

  SeqInstr_306:
    goto corral_source_split_5887;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} out_$i16 := bdc_probe(out_$p15);
    goto SeqInstr_305;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    out_$p15 := $M.29;
    goto corral_source_split_5886;

  $bb26:
    assume out_$i14 == 1;
    goto corral_source_split_5885;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i13, 1);
    goto corral_source_split_5883;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    out_$i13 := $M.30;
    goto corral_source_split_5882;

  $bb24:
    assume out_$i12 == 1;
    goto corral_source_split_5881;

  $bb19:
    assume out_$i10 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i9, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i10 := $slt.i32(out_$i9, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_5875:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1088} out_$i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 1089} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i9);
    call {:si_unique_call 1090} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i9);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume out_$i8 == 1;
    goto corral_source_split_5875;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_5873;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    out_$i7 := $M.30;
    goto corral_source_split_5872;

  $bb14:
    assume out_$i6 == 1;
    goto corral_source_split_5871;

  $bb12:
    assume out_$i5 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i32(out_$i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb3:
    assume out_$i1 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := $slt.i32(out_$i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i1 := $slt.i32(out_$i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb48:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $M.37 := 0;
    call {:si_unique_call 1105} {:cexpr "probed_4"} boogie_si_record_i32(0);
    goto corral_source_split_5936;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $M.32 := out_$i40;
    call {:si_unique_call 1104} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_5935;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    out_$i40 := $sub.i32(out_$i39, 1);
    goto corral_source_split_5934;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    out_$i39 := $M.32;
    goto corral_source_split_5933;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 1103} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5932;

  $bb47:
    assume out_$i38 == 1;
    goto corral_source_split_5931;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i37, 0);
    goto corral_source_split_5929;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    out_$i37 := $M.38;
    goto corral_source_split_5928;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $M.38 := out_$i36;
    call {:si_unique_call 1102} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_5927;

  SeqInstr_312:
    goto corral_source_split_5926;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} out_$i36 := bdc_remove(out_$p35);
    goto SeqInstr_311;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    out_$p35 := $M.29;
    goto corral_source_split_5925;

  $bb45:
    assume out_$i34 == 1;
    goto corral_source_split_5924;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i33, 1);
    goto corral_source_split_5922;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    out_$i33 := $M.37;
    goto corral_source_split_5921;

  $bb42:
    assume out_$i32 == 1;
    goto corral_source_split_5920;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 2);
    goto corral_source_split_5918;

  $bb41:
    assume {:verifier.code 0} true;
    out_$i31 := $M.30;
    goto corral_source_split_5917;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb39:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $M.37 := 0;
    call {:si_unique_call 1100} {:cexpr "probed_4"} boogie_si_record_i32(0);
    goto corral_source_split_5915;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $M.32 := out_$i30;
    call {:si_unique_call 1099} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_5914;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    out_$i30 := $sub.i32(out_$i29, 1);
    goto corral_source_split_5913;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    out_$i29 := $M.32;
    goto corral_source_split_5912;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 1098} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5911;

  $bb38:
    assume out_$i28 == 1;
    goto corral_source_split_5910;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i27, 0);
    goto corral_source_split_5908;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    out_$i27 := $M.38;
    goto corral_source_split_5907;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $M.38 := out_$i26;
    call {:si_unique_call 1097} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_5906;

  SeqInstr_309:
    goto corral_source_split_5905;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} out_$i26 := bdc_remove(out_$p25);
    goto SeqInstr_308;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    out_$p25 := $M.29;
    goto corral_source_split_5904;

  $bb36:
    assume out_$i24 == 1;
    goto corral_source_split_5903;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i23, 1);
    goto corral_source_split_5901;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    out_$i23 := $M.37;
    goto corral_source_split_5900;

  $bb33:
    assume out_$i22 == 1;
    goto corral_source_split_5899;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i21, 1);
    goto corral_source_split_5879;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    out_$i21 := $M.30;
    goto corral_source_split_5878;

  $bb21:
    assume out_$i11 == 1;
    goto corral_source_split_5877;

  $bb20:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i9, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb34:
    assume {:verifier.code 0} true;
    assume !(out_$i22 == 1);
    goto $bb35;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i24 == 1);
    goto $bb35;

  $bb43:
    assume {:verifier.code 0} true;
    assume !(out_$i32 == 1);
    goto $bb44;

  $bb46:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb44;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} ldv_stop();
    goto corral_source_split_5938;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb22:
    assume {:verifier.code 0} true;
    assume !(out_$i11 == 1);
    goto $bb23;

  $bb25:
    assume {:verifier.code 0} true;
    assume !(out_$i12 == 1);
    goto $bb23;

  $bb13:
    assume !(out_$i5 == 1);
    goto corral_source_split_5869;

  $bb56:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb66:
    assume {:verifier.code 0} true;
    assume !(out_$i48 == 1);
    goto $bb67;

  $bb69:
    assume {:verifier.code 0} true;
    assume !(out_$i50 == 1);
    goto $bb67;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i49, 0);
    goto corral_source_split_5952;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    out_$i49 := $M.32;
    goto corral_source_split_5951;

  $bb65:
    assume out_$i48 == 1;
    goto corral_source_split_5950;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i47, 2);
    goto corral_source_split_5948;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    out_$i47 := $M.33;
    goto corral_source_split_5947;

  $bb63:
    assume out_$i46 == 1;
    goto corral_source_split_5946;

  $bb58:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i43, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb57:
    assume {:verifier.code 0} true;
    out_$i44 := $slt.i32(out_$i43, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_5940:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1107} out_$i43 := __VERIFIER_nondet_int();
    call {:si_unique_call 1108} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i43);
    call {:si_unique_call 1109} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i43);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb55:
    assume out_$i42 == 1;
    goto corral_source_split_5940;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i41, 0);
    goto corral_source_split_5859;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    out_$i41 := $M.33;
    goto corral_source_split_5858;

  $bb5:
    assume out_$i2 == 1;
    goto corral_source_split_5857;

  $bb4:
    assume !(out_$i1 == 1);
    assume {:verifier.code 0} true;
    out_$i2 := $slt.i32(out_$i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb74:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb79:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} ldv_initialize_usb_ep_ops_3();
    goto corral_source_split_5977;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 1119} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5976;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} ldv_initialize_usb_gadget_ops_2();
    goto corral_source_split_5975;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 1117} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5974;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $M.33 := 2;
    call {:si_unique_call 1116} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_5973;

  $bb78:
    assume out_$i57 == 1;
    goto corral_source_split_5972;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i56, 0);
    goto corral_source_split_5970;

  $bb77:
    assume {:verifier.code 0} true;
    out_$i56 := $M.39;
    goto corral_source_split_5969;

  $bb76:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i32(out_$i54, 0);
    goto corral_source_split_5964;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    out_$i54 := $M.39;
    goto corral_source_split_5963;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $M.39 := out_$i53;
    call {:si_unique_call 1114} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_5962;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} out_$i53 := bdc_driver_init();
    goto corral_source_split_5961;

  $bb73:
    assume out_$i52 == 1;
    goto corral_source_split_5960;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i51, 1);
    goto corral_source_split_5944;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    out_$i51 := $M.33;
    goto corral_source_split_5943;

  $bb60:
    assume out_$i45 == 1;
    goto corral_source_split_5942;

  $bb59:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i43, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} ldv_stop();
    goto corral_source_split_5979;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb61:
    assume {:verifier.code 0} true;
    assume !(out_$i45 == 1);
    goto $bb62;

  $bb64:
    assume {:verifier.code 0} true;
    assume !(out_$i46 == 1);
    goto $bb62;

  $bb86:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    goto $bb87;

  SeqInstr_315:
    goto corral_source_split_5982;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} ldv_main_exported_3();
    goto SeqInstr_314;

  $bb85:
    assume out_$i59 == 1;
    goto corral_source_split_5981;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i32(out_$i58, 0);
    goto corral_source_split_5863;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    out_$i58 := $M.34;
    goto corral_source_split_5862;

  $bb7:
    assume out_$i3 == 1;
    goto corral_source_split_5861;

  $bb6:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    out_$i3 := $slt.i32(out_$i0, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb89:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    goto $bb90;

  SeqInstr_318:
    goto corral_source_split_5985;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} ldv_main_exported_2();
    goto SeqInstr_317;

  $bb88:
    assume out_$i61 == 1;
    goto corral_source_split_5984;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i32(out_$i60, 0);
    goto corral_source_split_5867;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    out_$i60 := $M.35;
    goto corral_source_split_5866;

  $bb9:
    assume out_$i4 == 1;
    goto corral_source_split_5865;

  $bb8:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i0, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} ldv_stop();
    goto corral_source_split_5987;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i4 == 1);
    goto $bb11;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i6 == 1);
    goto $bb11;

  $bb54_dummy:
    call {:si_unique_call 1} out_$i0, out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61 := main_loop_$bb1(out_$i0, out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$i0: i32, in_$i1: i1, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i32, in_$i8: i1, in_$i9: i32, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i32, in_$i14: i1, in_$p15: ref, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i19: i32, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i1) returns (out_$i0: i32, out_$i1: i1, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i32, out_$i8: i1, out_$i9: i32, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i32, out_$i14: i1, out_$p15: ref, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i19: i32, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i1);
  modifies $M.37, $M.32, $M.30, $M.36, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.9, $M.8, assertsPassed, $M.38, $M.41, $M.42, $M.34, $M.40, $M.35, $M.33, $M.39, $M.29, $M.28, $M.20;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


